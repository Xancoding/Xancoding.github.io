<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Xan&#39;s Blog</title>
    <link>https://xancoding.cn/</link>
    <description>Recent content on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 18 Oct 2022 18:34:30 +0800</lastBuildDate><atom:link href="https://xancoding.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机网络</title>
      <link>https://xancoding.cn/posts/computernetwork/</link>
      <pubDate>Tue, 18 Oct 2022 18:34:30 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/computernetwork/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26941639/&#34;&gt;《网络是怎样连接的》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/25863515/&#34;&gt;《图解 HTTP》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/24737674/&#34;&gt;《图解TCP/IP（第5版）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/35498120/&#34;&gt;《计算机网络（第8版）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/30280001/&#34;&gt;《计算机网络：自顶向下方法》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1088054/&#34;&gt;《TCP/IP详解 卷1：协议》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26268767/&#34;&gt;《Wireshark网络分析就这么简单》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26710788/&#34;&gt;《Wireshark网络分析的艺术》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1FS4y1Y7Qe?p=1&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;【哈工大】计算机网络 李全龙（全59讲）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;【中科大】郑烇、杨坚《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/386387918&#34;&gt;计算机网络（谢希仁版）第七版答案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/bHZ2_hgNQTKFZpWMCfUH9A&#34;&gt;实战！我用“大白鲨”让你看见 TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Jdroida/free_learning/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md&#34;&gt;计算机网络知识梳理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://vixbob.moe/25.html&#34;&gt;Stanford CS144 Lab Assignment 学习笔记 | ViXbob的博客&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<ul>
<li><a href="https://book.douban.com/subject/26941639/">《网络是怎样连接的》</a></li>
<li><a href="https://book.douban.com/subject/25863515/">《图解 HTTP》</a></li>
<li><a href="https://book.douban.com/subject/24737674/">《图解TCP/IP（第5版）》</a></li>
<li><a href="https://book.douban.com/subject/35498120/">《计算机网络（第8版）》</a></li>
<li><a href="https://book.douban.com/subject/30280001/">《计算机网络：自顶向下方法》</a></li>
<li><a href="https://book.douban.com/subject/1088054/">《TCP/IP详解 卷1：协议》</a></li>
<li><a href="https://book.douban.com/subject/26268767/">《Wireshark网络分析就这么简单》</a></li>
<li><a href="https://book.douban.com/subject/26710788/">《Wireshark网络分析的艺术》</a></li>
</ul>
<hr>
<ul>
<li><a href="https://www.bilibili.com/video/BV1FS4y1Y7Qe?p=1&amp;vd_source=ae16ff6478eb15c1b87880540263910b">【哈工大】计算机网络 李全龙（全59讲）</a></li>
<li><a href="https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">【中科大】郑烇、杨坚《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》</a></li>
</ul>
<hr>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/386387918">计算机网络（谢希仁版）第七版答案</a></li>
<li><a href="https://mp.weixin.qq.com/s/bHZ2_hgNQTKFZpWMCfUH9A">实战！我用“大白鲨”让你看见 TCP</a></li>
<li><a href="https://github.com/Jdroida/free_learning/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">计算机网络知识梳理</a></li>
<li><strong><a href="https://vixbob.moe/25.html">Stanford CS144 Lab Assignment 学习笔记 | ViXbob的博客</a></strong></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据结构与算法</title>
      <link>https://xancoding.cn/posts/datastructuresandalgorithms/</link>
      <pubDate>Tue, 18 Oct 2022 17:16:53 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/datastructuresandalgorithms/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xancoding/Data-Structures-and-Algorithms&#34;&gt;数据结构与算法 | 我的笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/6424904/&#34;&gt;《大话数据结构》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/35252621/&#34;&gt;《labuladong的算法小抄》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/30136932/&#34;&gt;《算法竞赛进阶指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/19952400/&#34;&gt;《算法（第4版）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.programmercarl.com/&#34;&gt;代码随想录 x 数据结构与算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/11/&#34;&gt;AcWing 算法基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/16/&#34;&gt;AcWing 算法提高课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/32/&#34;&gt;AcWing 算法进阶课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://oi-wiki.org/&#34;&gt;OI Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cp-wiki.vercel.app/&#34;&gt;CP Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/&#34;&gt;AcWing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.luogu.com.cn/&#34;&gt;Luogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/&#34;&gt;Codeforces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<ul>
<li><a href="https://github.com/Xancoding/Data-Structures-and-Algorithms">数据结构与算法 | 我的笔记</a></li>
<li><a href="https://book.douban.com/subject/6424904/">《大话数据结构》</a></li>
<li><a href="https://book.douban.com/subject/35252621/">《labuladong的算法小抄》</a></li>
<li><a href="https://book.douban.com/subject/30136932/">《算法竞赛进阶指南》</a></li>
<li><a href="https://book.douban.com/subject/19952400/">《算法（第4版）》</a></li>
</ul>
<hr>
<ul>
<li><a href="https://www.programmercarl.com/">代码随想录 x 数据结构与算法</a></li>
<li><a href="https://www.acwing.com/activity/content/11/">AcWing 算法基础课</a></li>
<li><a href="https://www.acwing.com/activity/content/16/">AcWing 算法提高课</a></li>
<li><a href="https://www.acwing.com/activity/content/32/">AcWing 算法进阶课</a></li>
<li><a href="https://oi-wiki.org/">OI Wiki</a></li>
<li><a href="https://cp-wiki.vercel.app/">CP Wiki</a></li>
</ul>
<hr>
<ul>
<li><a href="https://leetcode.cn/">LeetCode</a></li>
<li><a href="https://www.acwing.com/">AcWing</a></li>
<li><a href="https://www.luogu.com.cn/">Luogo</a></li>
<li><a href="https://codeforces.com/">Codeforces</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>正则表达式学习记</title>
      <link>https://xancoding.cn/posts/regularexpression/</link>
      <pubDate>Mon, 17 Oct 2022 12:55:47 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/regularexpression/</guid>
      <description>&lt;h1 id=&#34;正则表达式是什么&#34;&gt;正则表达式是什么？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个规则的文本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;为什么要学习正则表达式&#34;&gt;为什么要学习正则表达式？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在需要「批量处理文本」的时候，方便「查找」&amp;amp;&amp;amp;「替换」
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Linux grep&lt;/code&gt; 命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt; 爬虫&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Everthing&lt;/code&gt; 搜索文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://deerchao.cn/tutorials/regex/regex.htm&#34;&gt;正则表达式30分钟入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regexper.com/&#34;&gt;JS 正则可视化 - 工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deerchao.cn/&#34;&gt;超越代码 - 工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/60650&#34;&gt;多种实际使用场景，正则表达式带来丰富可能性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26285406/&#34;&gt;《正则表达式必知必会》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/2154713/&#34;&gt;《精通正则表达式》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="正则表达式是什么">正则表达式是什么？</h1>
<blockquote>
<p><strong>正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个规则的文本</strong></p>
<p><strong>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑</strong></p>
</blockquote>
<h1 id="为什么要学习正则表达式">为什么要学习正则表达式？</h1>
<ul>
<li>在需要「批量处理文本」的时候，方便「查找」&amp;&amp;「替换」
<ul>
<li><code>Linux grep</code> 命令</li>
<li><code>Python</code> 爬虫</li>
<li><code>Everthing</code> 搜索文件</li>
</ul>
</li>
</ul>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://deerchao.cn/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></li>
<li><a href="https://regexper.com/">JS 正则可视化 - 工具</a></li>
<li><a href="https://deerchao.cn/">超越代码 - 工具</a></li>
<li><a href="https://sspai.com/post/60650">多种实际使用场景，正则表达式带来丰富可能性</a></li>
<li><a href="https://book.douban.com/subject/26285406/">《正则表达式必知必会》</a></li>
<li><a href="https://book.douban.com/subject/2154713/">《精通正则表达式》</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>LaTex学习记</title>
      <link>https://xancoding.cn/posts/latex/</link>
      <pubDate>Mon, 17 Oct 2022 12:55:19 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/latex/</guid>
      <description>&lt;h1 id=&#34;latex是什么&#34;&gt;LaTex是什么？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;LaTeX&lt;/code&gt;是一种基于&lt;code&gt;ΤΕΧ&lt;/code&gt;的排版系统，常被用于排版期刊文章、书籍、学位论文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/433710726&#34;&gt;LaTeX 新手上路指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1T7411G7RV?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;TeX Live 安装与 LaTeX 基础知识普及&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/456055339&#34;&gt;【LaTeX】新手教程：从入门到日常使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/521649367&#34;&gt;【LaTeX】针对萌新自学者的入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ptep-online.com/ctan/lshort_chinese.pdf&#34;&gt;一份不太简短的 LATEX 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/24703731/&#34;&gt;《Latex入门》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.latexlive.com/&#34;&gt;在线LaTex公式编辑器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.overleaf.com/project&#34;&gt;Overleaf&lt;/a&gt; 在线 &lt;code&gt;LaTeX&lt;/code&gt; 编辑器&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="latex是什么">LaTex是什么？</h1>
<blockquote>
<p><code>LaTeX</code>是一种基于<code>ΤΕΧ</code>的排版系统，常被用于排版期刊文章、书籍、学位论文</p>
</blockquote>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/433710726">LaTeX 新手上路指南</a></li>
<li><a href="https://www.bilibili.com/video/BV1T7411G7RV?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">TeX Live 安装与 LaTeX 基础知识普及</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/456055339">【LaTeX】新手教程：从入门到日常使用</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/521649367">【LaTeX】针对萌新自学者的入门教程</a></li>
<li><a href="http://www.ptep-online.com/ctan/lshort_chinese.pdf">一份不太简短的 LATEX 介绍</a></li>
<li><a href="https://book.douban.com/subject/24703731/">《Latex入门》</a></li>
<li><a href="https://www.latexlive.com/">在线LaTex公式编辑器</a></li>
<li><a href="https://www.overleaf.com/project">Overleaf</a> 在线 <code>LaTeX</code> 编辑器</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Markdown学习记</title>
      <link>https://xancoding.cn/posts/markdown/</link>
      <pubDate>Mon, 17 Oct 2022 12:54:56 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/markdown/</guid>
      <description>&lt;h1 id=&#34;markdown是什么&#34;&gt;Markdown是什么？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;markdown常用语法&#34;&gt;Markdown常用语法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在markdown中将链接地址或邮箱地址用&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;包围，则会被自动转换成可点击的链接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;u&gt;书写格式如下：&lt;/u&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;https://xancoding.cn&amp;gt;

&amp;lt;zag.zj.cn@gmail.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;u&gt;解析效果如下：&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xancoding.cn&#34;&gt;https://xancoding.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;mailto:zag.zj.cn@gmail.com&#34;&gt;zag.zj.cn@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;如果需要避免文本中的符号被当做markdown标识符而发生不必要的格式转化，可以在符号前加&lt;code&gt;\&lt;/code&gt;来避免。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;u&gt;书写格式如下&lt;/u&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\*不是斜体\*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;u&gt;解析效果如下&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;*不是斜体*&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;角标&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同于链接，这里的角标内容会被放在文末，点击可以实现跳转。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;书写格式如下&lt;/u&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;请参阅脚注1. [^1]

[^1]: 脚注1内容。

请参阅脚注2. [^2]

[^2]: 脚注2内容。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;u&gt;解析效果如下&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;请参阅脚注1. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;请参阅脚注2. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://haoeric.github.io/markdown-grammar/#fnref:1&#34;&gt;Markdown - All You Need to Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://markdown.com.cn/&#34;&gt;Markdown 官方教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.markdown.xyz/&#34;&gt;Markdown 指南中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/34613706/&#34;&gt;《了不起的Markdown》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;脚注1内容。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;脚注2内容。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <content:encoded><![CDATA[<h1 id="markdown是什么">Markdown是什么？</h1>
<blockquote>
<p><strong>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等</strong></p>
</blockquote>
<h1 id="markdown常用语法">Markdown常用语法</h1>
<ol>
<li>在markdown中将链接地址或邮箱地址用<code>&lt;&gt;</code>包围，则会被自动转换成可点击的链接。</li>
</ol>
<p><u>书写格式如下：</u></p>
<pre tabindex="0"><code>&lt;https://xancoding.cn&gt;

&lt;zag.zj.cn@gmail.com&gt;
</code></pre><p><u>解析效果如下：</u></p>
<p><a href="https://xancoding.cn">https://xancoding.cn</a></p>
<p><a href="mailto:zag.zj.cn@gmail.com">zag.zj.cn@gmail.com</a></p>
<ol start="2">
<li>如果需要避免文本中的符号被当做markdown标识符而发生不必要的格式转化，可以在符号前加<code>\</code>来避免。</li>
</ol>
<p><u>书写格式如下</u>：</p>
<pre tabindex="0"><code>\*不是斜体\*
</code></pre><p><u>解析效果如下</u>：</p>
<p>*不是斜体*</p>
<ol start="3">
<li>角标</li>
</ol>
<p>不同于链接，这里的角标内容会被放在文末，点击可以实现跳转。</p>
<p><u>书写格式如下</u>：</p>
<pre tabindex="0"><code>请参阅脚注1. [^1]

[^1]: 脚注1内容。

请参阅脚注2. [^2]

[^2]: 脚注2内容。
</code></pre><p><u>解析效果如下</u>：</p>
<p>请参阅脚注1. <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>请参阅脚注2. <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="http://haoeric.github.io/markdown-grammar/#fnref:1">Markdown - All You Need to Know</a></li>
<li><a href="https://markdown.com.cn/">Markdown 官方教程</a></li>
<li><a href="https://www.markdown.xyz/">Markdown 指南中文版</a></li>
<li><a href="https://book.douban.com/subject/34613706/">《了不起的Markdown》</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>脚注1内容。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>脚注2内容。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>AcWing Linux 基础课</title>
      <link>https://xancoding.cn/posts/acwlinux/</link>
      <pubDate>Sun, 16 Oct 2022 14:23:58 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwlinux/</guid>
      <description>&lt;h1 id=&#34;acwing-linux-基础课&#34;&gt;AcWing Linux 基础课&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/57/&#34;&gt;AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&#34;&gt;命令行的艺术 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;The Missing Semester of Your CS Education&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;terminal&#34;&gt;Terminal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;终端，一个程序，是界面上打开的黑框框本身，&lt;code&gt;shell&lt;/code&gt; 运行于其中&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shell&#34;&gt;Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855530/&#34;&gt;常用文件管理命令 | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855883/&#34;&gt;Shell 语法 | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030391/&#34;&gt;管道、环境变量与常用命令  | AcWing Linux 基础课&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030414/&#34;&gt;常用命令  | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wangdoc.com/bash/&#34;&gt;《Bash 脚本教程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/course-shell/&#34;&gt;第 1 讲 - 课程概览与 Shell | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/shell-tools/&#34;&gt;第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/19556676&#34;&gt;终极 Shell——ZSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;快速入门 zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shell是什么&#34;&gt;Shell是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 是我们通过命令行与操作系统沟通的 &lt;code&gt;程序&lt;/code&gt;，是个 &lt;code&gt;命令行解释器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 负责外界与 &lt;code&gt;Linux 内核&lt;/code&gt; 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt;解释器有 &lt;code&gt;sh&lt;/code&gt;、&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;zsh...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shell常用命令&#34;&gt;Shell常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ag xxx&lt;/code&gt;：搜索当前目录下的所有文件，&lt;strong&gt;检索&lt;code&gt;xxx&lt;/code&gt;字符串&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find /path/to/directory/ -name &#39;*.py&#39;&lt;/code&gt;：&lt;strong&gt;搜索&lt;/strong&gt;某个文件路径下的所有&lt;code&gt;*.py&lt;/code&gt;&lt;strong&gt;文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;：展示当前用户的历史操作。内容存放在&lt;code&gt;~/.bash_history&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep xxx&lt;/code&gt;：从&lt;code&gt;stdin&lt;/code&gt;中读入若干行数据，如果某行中包含&lt;code&gt;xxx&lt;/code&gt;，则输出该行；否则忽略该行，&lt;strong&gt;用于查找文件里符合条件的字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tmux--vim&#34;&gt;Tmux &amp;amp;&amp;amp; Vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855620/&#34;&gt;tmux和vim | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2019/10/tmux.html&#34;&gt;Tmux 使用教程 | 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kuanghy.github.io/2016/09/29/tmux&#34;&gt;Tmux 简介与使用 | Huoty&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/articles/5426.html#comments&#34;&gt;简明 VIM 练级攻略 | 酷壳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/editors/&#34;&gt;第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim-adventures.com/&#34;&gt;VIM 大冒险 - Game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tmux-是什么&#34;&gt;Tmux 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Tmux&lt;/code&gt; 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;远程 &lt;code&gt;SSH&lt;/code&gt; 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;tmux--session--window--pane&#34;&gt;Tmux &amp;amp;&amp;amp; Session &amp;amp;&amp;amp; Window &amp;amp;&amp;amp; Pane&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个&lt;code&gt;tmux &lt;/code&gt;可以有好多个&lt;code&gt;session&lt;/code&gt;(会话)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;可以有好多个&lt;code&gt;window&lt;/code&gt;(窗口)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;window&lt;/code&gt;可以有好多个&lt;code&gt;pane&lt;/code&gt;(面板)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;里不超过10个&lt;code&gt;window&lt;/code&gt;是最方便的：可以用0到9迅速切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tmux常用命令&#34;&gt;Tmux常用命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;tmux new -s &amp;lt;session-name&amp;gt;&lt;/code&gt;：新建会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux detach&lt;/code&gt; $or$ &lt;code&gt;Ctrl + a d&lt;/code&gt;：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux attach -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：重新接入某个已存在的会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux kill-session -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：杀死某个会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux switch -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：切换会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux rename-session -t &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt;&lt;/code&gt;：重命名会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux ls&lt;/code&gt; $or$ &lt;code&gt;Ctrl + a s&lt;/code&gt;：查看当前所有的 Tmux 会话&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;tmux&lt;/code&gt;中选中文本时，需要按住 &lt;code&gt;shift&lt;/code&gt; 键&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux&lt;/code&gt;中复制/粘贴文本：
&lt;ol&gt;
&lt;li&gt;按下 &lt;code&gt;Ctrl + a&lt;/code&gt; 后松开手指，然后按 &lt;code&gt;[&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板&lt;/li&gt;
&lt;li&gt;按下 &lt;code&gt;Ctrl + a&lt;/code&gt; 后松开手指，然后按 &lt;code&gt;]&lt;/code&gt; ，会将剪贴板中的内容粘贴到光标处&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vim-是什么&#34;&gt;Vim 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vim常用命令&#34;&gt;Vim常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一般模式切换到编辑模式（常用）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; : 在光标所处位置 &lt;strong&gt;直接&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; : 在光标所处位置的 &lt;strong&gt;下一个字符&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; : 在光标所处位置的 &lt;strong&gt;下一行&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; : 取代当前光标处的字符，然后开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ESC]&lt;/code&gt; : 退出编辑模式，回到一般模式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;光标移动操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;n&amp;lt;Space&amp;gt;&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标 &lt;strong&gt;向右移动&lt;/strong&gt;这一行的n个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&amp;lt;Enter&amp;gt;&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标 &lt;strong&gt;向下移动&lt;/strong&gt;n行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;功能键[Home]&lt;/code&gt;: 光标移动到 &lt;strong&gt;本行开头&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; 或 &lt;code&gt;功能键[End]&lt;/code&gt;: 光标移动到 &lt;strong&gt;本行末尾&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n&lt;/code&gt; 或 &lt;code&gt;nG&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标移动到 &lt;strong&gt;第n行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt;: 光标移动到 &lt;strong&gt;最后一行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg&lt;/code&gt; : 光标移动到 &lt;strong&gt;第一行&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;查找、替换操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/word&lt;/code&gt; : 向 &lt;strong&gt;光标之下&lt;/strong&gt; 寻找 第一个值为 &lt;strong&gt;word&lt;/strong&gt; 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?word&lt;/code&gt; : 向 &lt;strong&gt;光标之上&lt;/strong&gt; 寻找 第一个值为 &lt;strong&gt;word&lt;/strong&gt; 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; : 重复 &lt;strong&gt;前一个&lt;/strong&gt; 查找操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; : 反向 重复 &lt;strong&gt;前一个&lt;/strong&gt; 查找操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n1,n2s/word1/word2/g&lt;/code&gt; : &lt;strong&gt;n1&lt;/strong&gt; 与 &lt;strong&gt;n2&lt;/strong&gt; 为数字，在第 &lt;strong&gt;n1&lt;/strong&gt; 行与 &lt;strong&gt;n2&lt;/strong&gt; 行之间寻找 &lt;strong&gt;word1&lt;/strong&gt; 这个字符串，并将该字符串 替换 为 &lt;strong&gt;word2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,$s/word1/word2/g&lt;/code&gt; : 将全文的 &lt;strong&gt;word1&lt;/strong&gt; 替换为 &lt;strong&gt;word2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,$s/word1/word2/gc&lt;/code&gt; : 将全文的 &lt;strong&gt;word1&lt;/strong&gt; 替换为 &lt;strong&gt;word2&lt;/strong&gt;，且在替换前 &lt;strong&gt;要求用户确认&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文本操作（可搭配 &lt;code&gt;数字+&amp;lt;Enter&amp;gt;/&amp;lt;Space&amp;gt;、0、G、$&lt;/code&gt; 等使用，达到预期组合效果）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; : 选中文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; : 删除选中的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; : 删除当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; : 复制选中的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yy&lt;/code&gt; : 复制当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; : 将复制的数据在光标的下一行/下一个位置 粘贴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; : 撤销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + r&lt;/code&gt; : 取消撤销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; : 将选中的文本整体 &lt;strong&gt;向右缩进一次&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; : 将选中的文本整体 &lt;strong&gt;向左缩进一次&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;命令行操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt; : 保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w!&lt;/code&gt; : 强制保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt; : 退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; : 强制退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; : 保存并退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set paste&lt;/code&gt; : 设置成粘贴模式，取消代码自动缩进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nopaste&lt;/code&gt; : 取消粘贴模式，开启代码自动缩进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nu&lt;/code&gt; : 显示行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nonu&lt;/code&gt; : 隐藏行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:noh&lt;/code&gt;：关闭查找关键词高亮&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + q&lt;/code&gt; : 当&lt;code&gt;vim&lt;/code&gt;卡死时，可以 &lt;strong&gt;取消当前正在执行的命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ssh&#34;&gt;SSH&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898263/&#34;&gt;SSH | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;Adding a new SSH key to your GitHub account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ssh是什么&#34;&gt;SSH是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SSH是一种网络协议，用于计算机之间的加密登录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ssh-免密登录&#34;&gt;SSH 免密登录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh-key-gen&lt;/code&gt; ：在本地服务器生成密钥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd .ssh/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim config&lt;/code&gt; ：定义服务器别名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;ssh-copy-id server&lt;/code&gt;：在本地服务器配置免密登录至云服务器&lt;/li&gt;
&lt;li&gt;免密登录至&lt;code&gt;docker 容器&lt;/code&gt;步骤同上&lt;/li&gt;
&lt;li&gt;配置完成后，就可以直接使用 &lt;code&gt;ssh server&lt;/code&gt; 免密登录啦&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;scp&#34;&gt;SCP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898266/&#34;&gt;SCP | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;scp是什么&#34;&gt;SCP是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;scp-传文件&#34;&gt;SCP 传文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;复制多个文件：&lt;code&gt;scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;复制文件夹 ：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scp -r ~/tmp SERVER:/home/acs/&lt;/code&gt;：将本地家目录中的&lt;code&gt;tmp&lt;/code&gt;文件夹复制到服务器中的&lt;code&gt;/home/acs/&lt;/code&gt;目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scp -r SERVER:homework .&lt;/code&gt;：将服务器中的&lt;code&gt;~/homework/&lt;/code&gt;文件夹复制到本地的当前路径下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2932078/&#34;&gt;git | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/column/6969263852206686221&#34;&gt;Git从放弃到入门&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6973299611536457742&#34;&gt;Git从放弃到入门：状态与阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://juejin.cn/post/6974039503056928776&#34;&gt;Git从放弃到入门：撤销操作&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2018/10/git-internals.html&#34;&gt;Git 原理入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learngitbranching.js.org/?locale=zh_CN&#34;&gt;Learn Git Braching - Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;Pro Git Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;git是什么&#34;&gt;Git是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;git常用命令&#34;&gt;Git常用命令&lt;/h3&gt;
&lt;h4 id=&#34;常用命令&#34;&gt;常用命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git add XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件添加到暂存区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;给自己看的备注信息&amp;quot;&lt;/code&gt;：将暂存区的内容提交到当前分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要 -u 以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库&lt;code&gt;XXX&lt;/code&gt;下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git restore --staged XX&lt;/code&gt;或&lt;code&gt;git reset HEAD XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;从暂存区里移除&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git checkout XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-全局设置&#34;&gt;Git 全局设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name xxx&lt;/code&gt;：设置全局用户名，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email xxx@xxx.com&lt;/code&gt;：设置全局邮箱地址，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;：将当前目录配置成&lt;code&gt;git&lt;/code&gt;仓库，信息记录在隐藏的&lt;code&gt;.git&lt;/code&gt;文件夹中&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-查看命令&#34;&gt;Git 查看命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git diff XX&lt;/code&gt;：查看&lt;code&gt;XX&lt;/code&gt;文件相对于暂存区修改了哪些内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --pretty=oneline&lt;/code&gt;：用一行来显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reflog&lt;/code&gt;：查看&lt;code&gt;HEAD&lt;/code&gt;指针的移动历史（包括被回滚的版本）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-删除命令&#34;&gt;Git 删除命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git rm --cached XX&lt;/code&gt;：将文件从仓库索引目录中删掉，不希望管理这个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --staged xx&lt;/code&gt;：将&lt;code&gt;xx&lt;/code&gt;从暂存区里移除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout — XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-代码回滚&#34;&gt;Git 代码回滚&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;或&lt;code&gt;git reset --hard HEAD~ &lt;/code&gt;：将代码库回滚到上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^^&lt;/code&gt;：往上回滚两次，以此类推&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD~100&lt;/code&gt;：往上回滚100个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard 版本号&lt;/code&gt;：回滚到某一特定版本&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-远程仓库&#34;&gt;Git 远程仓库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add origin git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将本地仓库关联到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要-u以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin branch_name&lt;/code&gt;：将本地的某个分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库XXX下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-分支命令&#34;&gt;Git 分支命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch branch_name&lt;/code&gt;：创建新分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b branch_name&lt;/code&gt;：创建并切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout branch_name&lt;/code&gt;：切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge branch_name&lt;/code&gt;：将分支&lt;code&gt;branch_name&lt;/code&gt;合并到当前分支上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d branch_name&lt;/code&gt;：删除本地仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-stash-暂存&#34;&gt;Git stash 暂存&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt;：将工作区和暂存区中尚未提交的修改存入栈中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash drop&lt;/code&gt;：删除栈顶存储的修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;：查看栈中所有元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;thrift&#34;&gt;&lt;strong&gt;Thrift&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/video/3479/&#34;&gt;AcWing Linux 基础课 | Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md&#34;&gt;Thrift_learning - AcGit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog | Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;thrift 官网&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://thrift.apache.org/tutorial/&#34;&gt;Tutorial&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift&#34;&gt;tutorial.thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;thrift是什么&#34;&gt;Thrift是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;例实现一个游戏的匹配服务&#34;&gt;例：实现一个游戏的匹配服务&lt;/h3&gt;
&lt;h4 id=&#34;基本框架&#34;&gt;基本框架&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;游戏应用端 &lt;code&gt;game&lt;/code&gt;（Python3）
&lt;ol&gt;
&lt;li&gt;客户端：与 匹配系统服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;匹配系统服务器 &lt;code&gt;match_system&lt;/code&gt;（C++）
&lt;ol&gt;
&lt;li&gt;服务端：与 游戏应用端 的客户端交互&lt;/li&gt;
&lt;li&gt;客户端：与 数据存储服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据存储服务器（已经实现）
&lt;ol&gt;
&lt;li&gt;服务端：与 匹配系统服务器 的客户端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;文件结构&#34;&gt;文件结构&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;实现过程&#34;&gt;实现过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;定义接口 (&lt;code&gt;thrift&lt;/code&gt; 文件夹用于存放接口 )&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Server&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;match_system&lt;/code&gt;文件夹下生成 C++版本的服务端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen cpp tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将&lt;code&gt;gen cpp&lt;/code&gt; 文件夹重命名，如：&lt;code&gt;match_server&lt;/code&gt;（区别于之后要在此处生成的&lt;code&gt;client_server&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;Match_server.skeleton.cpp&lt;/code&gt; 移动到当前 &lt;code&gt;src&lt;/code&gt; 目录下并重命名为 &lt;code&gt;main.cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;由于移动了 &lt;code&gt;main.cpp&lt;/code&gt; 故需要修改一下&lt;code&gt; main.cpp&lt;/code&gt; 中头文件里关于 &lt;code&gt;Match.h&lt;/code&gt; 的引用路径：&lt;code&gt;#include &amp;quot;Match.h&amp;quot;&lt;/code&gt; -&amp;gt; &lt;code&gt;#include &amp;quot;match_server/Match.h&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;main.cpp&lt;/code&gt;中实现具体业务逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Client&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;game&lt;/code&gt;文件夹下生成 &lt;code&gt;python3&lt;/code&gt; 版本的服务端，然后通过修改得到客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen py tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;删掉 &lt;code&gt;Match_remote &lt;/code&gt;，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 &lt;strong&gt;客户端&lt;/strong&gt; 功能，因此他没有作用，不妨删掉，让文档简洁一点&lt;/li&gt;
&lt;li&gt;利用官网提供的模板，在&lt;code&gt;src&lt;/code&gt;文件夹下编写 &lt;strong&gt;客户端&lt;/strong&gt; 文件 &lt;code&gt;client.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;持久化到云端
&lt;ul&gt;
&lt;li&gt;将 &lt;strong&gt;非编译文件&lt;/strong&gt; 和 &lt;strong&gt;非可执行文件&lt;/strong&gt; 提交到 &lt;code&gt;git&lt;/code&gt; 中去（好的工程习惯）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;注意：先运行服务器后，客户端才能正常运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;thrift-接口&#34;&gt;Thrift 接口&lt;/h4&gt;
&lt;h5 id=&#34;matchthrift&#34;&gt;Match.thrift&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace cpp match_service
struct User {
    1: i32 id,
    2: string name,
    3: i32 scores
}
service Match {
    i32 add_user(1: User user, 2: string info),
    i32 remove_user(1: User user, 2: string info),
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;savethrift&#34;&gt;Save.thrift&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace cpp save_service
service Save {
    /**
     * username: myserver的名称
     * password: myserver的密码的md5值的前8位，用命令md5sum
     * 用户名密码验证成功会返回0，验证失败会返回1
     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中
     */
    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;各版本预览&#34;&gt;各版本预览&lt;/h4&gt;
&lt;h5 id=&#34;match_server10&#34;&gt;Match_server:1.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_client&lt;/code&gt;：创建固定的&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


def main():
    # Make socket
    transport = TSocket.TSocket(&amp;#39;localhost&amp;#39;, 9090)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = Match.Client(protocol)

    # Connect!
    transport.open()

    user = User(1, &amp;#39;yxc&amp;#39;, 1500)
    client.add_user(user, &amp;#34;&amp;#34;)

    # Close!
    transport.close()


# 调用 main 函数
if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    return 0;
  }
};
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
    
  server.serve();
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server20&#34;&gt;Match_server:2.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_client&lt;/code&gt;：根据标准输入来创建&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# 利用 python 在终端读入信息需要引入 stdin
from sys import stdin

# 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息
# 目的是可以一直不断处理信息
# 然后重写 main 函数，使之能不断从终端读入信息
def operate(op, user_id, user_name, score):
    # Make socket 
	transport = TSocket.TSocket(&amp;#39;localhost&amp;#39;, 9090)
	
	# Buffering is critical. Raw sockets are very slow
	transport = TTransport.TBufferedTransport(transport)
	
	# Wrap in a protocol
	protocol = TBinaryProtocol.TBinaryProtocol(transport)
	
	# Create a client to use the protocol encoder
	client = Match.Client(protocol)
	
	# Connect!
	transport.open()

    # 针对 op 参数，分别进行 &amp;#34;增加&amp;#34; 与 &amp;#34;删出&amp;#34; 操作
    user = User(user_id, user_name, score)

    if op == &amp;#34;add&amp;#34;:
        client.add_user(user, &amp;#34;&amp;#34;)
    else:
        client.remove_user(user, &amp;#34;&amp;#34;)
    
    # Close!
	transport.close()

def main():
    for line in stdin:
        op, user_id, user_name, score = line.split(&amp;#39; &amp;#39;)
        operate(op, int(user_id), user_name, int(score))

# 调用 main 函数
if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：自动将用户池中前两个用户匹配到一起&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &amp;gt; 1) {
            auto a = users[0], b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());
            save_result(a.id, b.id);
        }
    }
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server30&#34;&gt;Match_server:3.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save_client&lt;/code&gt;：因为一个节点只能由一个&lt;code&gt;main&lt;/code&gt;方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个&lt;code&gt;main&lt;/code&gt;方法中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 需要额外引入的头文件
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;

// 需要额外声明的命名空间
using namespace  ::save_service;

//重写 save_result 内的内容，使其能够与 &amp;#34;数据存储服务器&amp;#34; 交互
void save_result(int a, int b) { // 记录成功匹配的信息
    printf(&amp;#34;Match Result: %d %d\n&amp;#34;, a, b);

    // Client端的板子
    std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
    std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
    std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
    SaveClient client(protocol);

    try {
        transport-&amp;gt;open();

        //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
        int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
        //输出匹配结果
        if (!res) puts(&amp;#34;success&amp;#34;);
        else puts(&amp;#34;fail&amp;#34;);

        transport-&amp;gt;close();
    } catch (TException&amp;amp; tx) {
        cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：每次只匹配分差小于 50 的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt; // 用于调用 sleep 函数
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
	//重写 save_result 内的内容，使其能够与 &amp;#34;数据存储服务器&amp;#34; 交互
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
        // Client端的板子
        std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
        std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&amp;gt;open();
            //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
            int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
            //输出匹配结果
            if (!res) puts(&amp;#34;success&amp;#34;);
            else puts(&amp;#34;fail&amp;#34;);
            transport-&amp;gt;close();
        } catch (TException&amp;amp; tx) {
            cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
        }
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &amp;gt; 1) {
            // 按照 rank分 排序
            sort(users.begin(), users.end(), [&amp;amp;](User&amp;amp; a, User&amp;amp; b) {
                return a.scores &amp;lt; b.scores;
            });
            bool flag = true;
            for (uint32_t i = 1; i &amp;lt; users.size(); ++ i) {
                auto a = users[i - 1], b = users[i];
                // 两名玩家分数差小于50时进行匹配
                if (b.scores - a.scores &amp;lt;= 50) {
                    users.erase(users.begin() + i - 1, users.begin() + i + 1);
                    save_result(a.id, b.id);
                    flag = false;
                    break;
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server40&#34;&gt;Match_server:4.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：随时间扩大匹配域，每一单位的 &lt;code&gt;wt&lt;/code&gt; 会扩大 $50$ 分 的匹配域&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt; // 用于调用 sleep 函数
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
        // Client端的板子
        std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
        std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&amp;gt;open();
            //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
            int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
            //输出匹配结果
            if (!res) puts(&amp;#34;success&amp;#34;);
            else puts(&amp;#34;fail&amp;#34;);
            transport-&amp;gt;close();
        } catch (TException&amp;amp; tx) {
            cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
        }
    }
    bool check_match(uint32_t i, uint32_t j) {
        auto a = users[i], b = users[j];
        
        int dt = abs(a.scores - b.scores);
        int a_max_dif = wt[i] * 50;
        int b_max_dif = wt[j] * 50;
        return dt &amp;lt;= a_max_dif &amp;amp;&amp;amp; dt &amp;lt;= b_max_dif;
    }
    void match() {
       for (uint32_t i = 0; i &amp;lt; wt.size(); ++ i)
           wt[i] ++;
        while (users.size() &amp;gt; 1) {
            bool flag = true;
            for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
                for (uint32_t j = i + 1; j &amp;lt; users.size(); ++ j) {
                    if (check_match(i, j)) {
                        auto a = users[i], b = users[j];
                        users.erase(users.begin() + j);
                        users.erase(users.begin() + i);
                        wt.erase(wt.begin() + j);
                        wt.erase(wt.begin() + i);
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    if (!flag) break;       
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
        wt.push_back(0);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                wt.erase(wt.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
    vector&amp;lt;int&amp;gt; wt; // 等待时间，单位：s
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 启动服务端
./match_system/src/main

# 启动客户端
python3 game/src/client.py

# 游戏应用端 （op id name scores）
add 1 yxc 2000
add 2 xan 1500
add 3 zagy 2500
remove 3 zagy 2500

# 匹配系统服务器
add_user
add_user
remove_user 
# 等待了 10 s
Match Result: 1 2
success
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;项目地址&#34;&gt;项目地址&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xancoding/Learning-Thrift&#34;&gt;Learning-Thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="acwing-linux-基础课">AcWing Linux 基础课</h1>
<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/57/">AcWing Linux 基础课</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术 </a></li>
<li><a href="https://missing-semester-cn.github.io/">The Missing Semester of Your CS Education</a></li>
</ul>
<hr>
<h2 id="terminal">Terminal</h2>
<blockquote>
<p><strong>终端，一个程序，是界面上打开的黑框框本身，<code>shell</code> 运行于其中</strong></p>
</blockquote>
<h2 id="shell">Shell</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855530/">常用文件管理命令 | AcWing Linux 基础课</a></li>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855883/">Shell 语法 | AcWing Linux 基础课</a></strong></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030391/">管道、环境变量与常用命令  | AcWing Linux 基础课</a>
<ul>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030414/">常用命令  | AcWing Linux 基础课</a></strong></li>
</ul>
</li>
<li><a href="https://wangdoc.com/bash/">《Bash 脚本教程》</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/course-shell/">第 1 讲 - 课程概览与 Shell | The missing semester of your CS education</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/shell-tools/">第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19556676">终极 Shell——ZSH</a></li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh">快速入门 zsh</a></li>
</ul>
<hr>
<h3 id="shell是什么">Shell是什么？</h3>
<ul>
<li><code>Shell</code> 是我们通过命令行与操作系统沟通的 <code>程序</code>，是个 <code>命令行解释器</code></li>
<li><code>Shell</code> 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用</li>
<li><code>Shell</code> 负责外界与 <code>Linux 内核</code> 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序</li>
<li><code>Shell</code>解释器有 <code>sh</code>、<code>bash</code>、<code>zsh...</code></li>
</ul>
<h3 id="shell常用命令">Shell常用命令</h3>
<ol>
<li><code>ag xxx</code>：搜索当前目录下的所有文件，<strong>检索<code>xxx</code>字符串</strong></li>
<li><code>find /path/to/directory/ -name '*.py'</code>：<strong>搜索</strong>某个文件路径下的所有<code>*.py</code><strong>文件</strong></li>
<li><code>history</code>：展示当前用户的历史操作。内容存放在<code>~/.bash_history</code>中</li>
<li><code>grep xxx</code>：从<code>stdin</code>中读入若干行数据，如果某行中包含<code>xxx</code>，则输出该行；否则忽略该行，<strong>用于查找文件里符合条件的字符串</strong></li>
</ol>
<h2 id="tmux--vim">Tmux &amp;&amp; Vim</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855620/">tmux和vim | AcWing Linux 基础课</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程 | 阮一峰的网络日志</a></li>
<li><a href="http://kuanghy.github.io/2016/09/29/tmux">Tmux 简介与使用 | Huoty&rsquo;s Blog</a></li>
<li><a href="https://coolshell.cn/articles/5426.html#comments">简明 VIM 练级攻略 | 酷壳</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/editors/">第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education</a></li>
<li><a href="https://vim-adventures.com/">VIM 大冒险 - Game</a></li>
</ul>
<hr>
<h3 id="tmux-是什么">Tmux 是什么？</h3>
<blockquote>
<p><strong><code>Tmux</code> 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）</strong></p>
<p><strong>远程 <code>SSH</code> 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。</strong></p>
</blockquote>
<h3 id="tmux--session--window--pane">Tmux &amp;&amp; Session &amp;&amp; Window &amp;&amp; Pane</h3>
<ul>
<li>一个<code>tmux </code>可以有好多个<code>session</code>(会话)</li>
<li>一个<code>session</code>可以有好多个<code>window</code>(窗口)</li>
<li>一个<code>window</code>可以有好多个<code>pane</code>(面板)</li>
<li>一个<code>session</code>里不超过10个<code>window</code>是最方便的：可以用0到9迅速切换</li>
</ul>
<h3 id="tmux常用命令">Tmux常用命令</h3>
<blockquote>
<p><strong>Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b</strong></p>
</blockquote>
<ol>
<li><code>tmux new -s &lt;session-name&gt;</code>：新建会话</li>
<li><code>tmux detach</code> $or$ <code>Ctrl + a d</code>：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行</li>
<li><code>tmux attach -t &lt;session-name&gt;</code>：重新接入某个已存在的会话</li>
<li><code>tmux kill-session -t &lt;session-name&gt;</code>：杀死某个会话</li>
<li><code>tmux switch -t &lt;session-name&gt;</code>：切换会话</li>
<li><code>tmux rename-session -t &lt;old-name&gt; &lt;new-name&gt;</code>：重命名会话</li>
<li><code>tmux ls</code> $or$ <code>Ctrl + a s</code>：查看当前所有的 Tmux 会话</li>
<li>在<code>tmux</code>中选中文本时，需要按住 <code>shift</code> 键</li>
<li><code>tmux</code>中复制/粘贴文本：
<ol>
<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>[</code></li>
<li>用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板</li>
<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>]</code> ，会将剪贴板中的内容粘贴到光标处</li>
</ol>
</li>
</ol>
<h3 id="vim-是什么">Vim 是什么？</h3>
<blockquote>
<p><strong>VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。</strong></p>
</blockquote>
<h3 id="vim常用命令">Vim常用命令</h3>
<ol>
<li>一般模式切换到编辑模式（常用）
<ol>
<li><code>i</code> : 在光标所处位置 <strong>直接</strong> 开始</li>
<li><code>a</code> : 在光标所处位置的 <strong>下一个字符</strong> 开始</li>
<li><code>o</code> : 在光标所处位置的 <strong>下一行</strong> 开始</li>
<li><code>r</code> : 取代当前光标处的字符，然后开始</li>
<li><code>[ESC]</code> : 退出编辑模式，回到一般模式</li>
</ol>
</li>
<li>光标移动操作
<ol>
<li><code>n&lt;Space&gt;</code> : <strong>n</strong> 为数字，光标 <strong>向右移动</strong>这一行的n个字符</li>
<li><code>n&lt;Enter&gt;</code> : <strong>n</strong> 为数字，光标 <strong>向下移动</strong>n行</li>
<li><code>0</code> 或 <code>功能键[Home]</code>: 光标移动到 <strong>本行开头</strong></li>
<li><code>$</code> 或 <code>功能键[End]</code>: 光标移动到 <strong>本行末尾</strong></li>
<li><code>:n</code> 或 <code>nG</code> : <strong>n</strong> 为数字，光标移动到 <strong>第n行</strong></li>
<li><code>G</code>: 光标移动到 <strong>最后一行</strong></li>
<li><code>gg</code> : 光标移动到 <strong>第一行</strong></li>
</ol>
</li>
<li>查找、替换操作
<ol>
<li><code>/word</code> : 向 <strong>光标之下</strong> 寻找 第一个值为 <strong>word</strong> 的字符串</li>
<li><code>?word</code> : 向 <strong>光标之上</strong> 寻找 第一个值为 <strong>word</strong> 的字符串</li>
<li><code>n</code> : 重复 <strong>前一个</strong> 查找操作</li>
<li><code>N</code> : 反向 重复 <strong>前一个</strong> 查找操作</li>
<li><code>:n1,n2s/word1/word2/g</code> : <strong>n1</strong> 与 <strong>n2</strong> 为数字，在第 <strong>n1</strong> 行与 <strong>n2</strong> 行之间寻找 <strong>word1</strong> 这个字符串，并将该字符串 替换 为 <strong>word2</strong></li>
<li><code>:1,$s/word1/word2/g</code> : 将全文的 <strong>word1</strong> 替换为 <strong>word2</strong></li>
<li><code>:1,$s/word1/word2/gc</code> : 将全文的 <strong>word1</strong> 替换为 <strong>word2</strong>，且在替换前 <strong>要求用户确认</strong></li>
</ol>
</li>
<li>文本操作（可搭配 <code>数字+&lt;Enter&gt;/&lt;Space&gt;、0、G、$</code> 等使用，达到预期组合效果）
<ol>
<li><code>v</code> : 选中文本</li>
<li><code>d</code> : 删除选中的文本</li>
<li><code>dd</code> : 删除当前行</li>
<li><code>y</code> : 复制选中的文本</li>
<li><code>yy</code> : 复制当前行</li>
<li><code>p</code> : 将复制的数据在光标的下一行/下一个位置 粘贴</li>
<li><code>u</code> : 撤销</li>
<li><code>Ctrl + r</code> : 取消撤销</li>
<li><code>&gt;</code> : 将选中的文本整体 <strong>向右缩进一次</strong></li>
<li><code>&lt;</code> : 将选中的文本整体 <strong>向左缩进一次</strong></li>
</ol>
</li>
<li>命令行操作
<ol>
<li><code>:w</code> : 保存</li>
<li><code>:w!</code> : 强制保存</li>
<li><code>:q</code> : 退出</li>
<li><code>:q!</code> : 强制退出</li>
<li><code>:wq</code> : 保存并退出</li>
<li><code>:set paste</code> : 设置成粘贴模式，取消代码自动缩进</li>
<li><code>:set nopaste</code> : 取消粘贴模式，开启代码自动缩进</li>
<li><code>:set nu</code> : 显示行号</li>
<li><code>:set nonu</code> : 隐藏行号</li>
<li><code>:noh</code>：关闭查找关键词高亮</li>
</ol>
</li>
<li><code>Ctrl + q</code> : 当<code>vim</code>卡死时，可以 <strong>取消当前正在执行的命令</strong></li>
</ol>
<h2 id="ssh">SSH</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898263/">SSH | AcWing Linux 基础课</a></li>
<li><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Adding a new SSH key to your GitHub account</a></li>
</ul>
<hr>
<h3 id="ssh是什么">SSH是什么？</h3>
<blockquote>
<p><strong>SSH是一种网络协议，用于计算机之间的加密登录</strong></p>
</blockquote>
<h3 id="ssh-免密登录">SSH 免密登录</h3>
<ol>
<li><code>ssh-key-gen</code> ：在本地服务器生成密钥</li>
<li><code>cd .ssh/</code></li>
<li><code>vim config</code> ：定义服务器别名</li>
</ol>
<pre tabindex="0"><code class="language-config" data-lang="config">Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
</code></pre><ol start="4">
<li><code>ssh-copy-id server</code>：在本地服务器配置免密登录至云服务器</li>
<li>免密登录至<code>docker 容器</code>步骤同上</li>
<li>配置完成后，就可以直接使用 <code>ssh server</code> 免密登录啦</li>
</ol>
<h2 id="scp">SCP</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898266/">SCP | AcWing Linux 基础课</a></li>
</ul>
<hr>
<h3 id="scp是什么">SCP是什么？</h3>
<blockquote>
<p><strong>SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录</strong></p>
</blockquote>
<h3 id="scp-传文件">SCP 传文件</h3>
<ul>
<li>复制多个文件：<code>scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH</code></li>
<li>复制文件夹 ：
<ul>
<li><code>scp -r ~/tmp SERVER:/home/acs/</code>：将本地家目录中的<code>tmp</code>文件夹复制到服务器中的<code>/home/acs/</code>目录下</li>
<li><code>scp -r SERVER:homework .</code>：将服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下</li>
</ul>
</li>
</ul>
<h2 id="git">Git</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2932078/">git | AcWing Linux 基础课</a></li>
<li><a href="https://juejin.cn/column/6969263852206686221">Git从放弃到入门</a>
<ul>
<li><a href="https://juejin.cn/post/6973299611536457742">Git从放弃到入门：状态与阶段</a></li>
<li><strong><a href="https://juejin.cn/post/6974039503056928776">Git从放弃到入门：撤销操作</a></strong></li>
</ul>
</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/10/git-internals.html">Git 原理入门</a></li>
<li><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Braching - Game</a></li>
<li><a href="https://git-scm.com/book/zh/v2">Pro Git Online</a></li>
</ul>
<hr>
<h3 id="git是什么">Git是什么？</h3>
<blockquote>
<p><strong>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</strong></p>
</blockquote>
<h3 id="git常用命令">Git常用命令</h3>
<h4 id="常用命令">常用命令</h4>
<ol>
<li><code>git add XX</code>：将<code>XX</code>文件添加到暂存区</li>
<li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支</li>
<li><code>git push -u (第一次需要 -u 以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库<code>XXX</code>下载到当前目录下</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><strong><code>git status</code>：查看仓库状态</strong></li>
<li><strong>有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？</strong>
<ul>
<li><strong><code>git restore --staged XX</code>或<code>git reset HEAD XX</code>：将<code>XX</code>从暂存区里移除</strong></li>
</ul>
</li>
<li><strong>有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？</strong>
<ul>
<li><strong><code>git checkout XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</strong></li>
</ul>
</li>
</ol>
<h4 id="git-全局设置">Git 全局设置</h4>
<ol>
<li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git init</code>：将当前目录配置成<code>git</code>仓库，信息记录在隐藏的<code>.git</code>文件夹中</li>
</ol>
<h4 id="git-查看命令">Git 查看命令</h4>
<ol>
<li><code>git diff XX</code>：查看<code>XX</code>文件相对于暂存区修改了哪些内容</li>
<li><code>git status</code>：查看仓库状态</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><code>git log --pretty=oneline</code>：用一行来显示</li>
<li><code>git reflog</code>：查看<code>HEAD</code>指针的移动历史（包括被回滚的版本）</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
</ol>
<h4 id="git-删除命令">Git 删除命令</h4>
<ol>
<li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉，不希望管理这个文件</li>
<li><code>git restore --staged xx</code>：将<code>xx</code>从暂存区里移除</li>
<li><code>git checkout — XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</li>
</ol>
<h4 id="git-代码回滚">Git 代码回滚</h4>
<ol>
<li><code>git reset --hard HEAD^</code>或<code>git reset --hard HEAD~ </code>：将代码库回滚到上一个版本</li>
<li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li>
<li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li>
<li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li>
</ol>
<h4 id="git-远程仓库">Git 远程仓库</h4>
<ol>
<li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li>
<li><code>git push -u (第一次需要-u以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-分支命令">Git 分支命令</h4>
<ol>
<li><code>git branch branch_name</code>：创建新分支</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li>
<li><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</li>
<li><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</li>
<li><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-stash-暂存">Git stash 暂存</h4>
<ol>
<li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li>
<li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li>
<li><code>git stash drop</code>：删除栈顶存储的修改</li>
<li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li>
<li><code>git stash list</code>：查看栈中所有元素</li>
</ol>
<h2 id="thrift"><strong>Thrift</strong></h2>
<ul>
<li><a href="https://www.acwing.com/video/3479/">AcWing Linux 基础课 | Thrift</a></li>
<li><a href="https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md">Thrift_learning - AcGit</a></li>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog | Thrift</a></li>
<li><a href="https://thrift.apache.org/">thrift 官网</a> -&gt; <a href="https://thrift.apache.org/tutorial/">Tutorial</a> -&gt; <a href="https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift">tutorial.thrift</a></li>
</ul>
<hr>
<h3 id="thrift是什么">Thrift是什么？</h3>
<blockquote>
<p><strong>Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架</strong></p>
<p><strong>RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程</strong></p>
<p><strong>Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务</strong></p>
</blockquote>
<h3 id="例实现一个游戏的匹配服务">例：实现一个游戏的匹配服务</h3>
<h4 id="基本框架">基本框架</h4>
<ol>
<li>游戏应用端 <code>game</code>（Python3）
<ol>
<li>客户端：与 匹配系统服务器 的服务端交互</li>
</ol>
</li>
<li>匹配系统服务器 <code>match_system</code>（C++）
<ol>
<li>服务端：与 游戏应用端 的客户端交互</li>
<li>客户端：与 数据存储服务器 的服务端交互</li>
</ol>
</li>
<li>数据存储服务器（已经实现）
<ol>
<li>服务端：与 匹配系统服务器 的客户端交互</li>
</ol>
</li>
</ol>
<h4 id="文件结构">文件结构</h4>
<pre tabindex="0"><code>|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
</code></pre><h4 id="实现过程">实现过程</h4>
<ol>
<li>定义接口 (<code>thrift</code> 文件夹用于存放接口 )</li>
<li>完成 <code>Server</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>match_system</code>文件夹下生成 C++版本的服务端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen cpp tutorial.thrift
</code></pre><ol start="2">
<li>将<code>gen cpp</code> 文件夹重命名，如：<code>match_server</code>（区别于之后要在此处生成的<code>client_server</code>）</li>
<li>把 <code>Match_server.skeleton.cpp</code> 移动到当前 <code>src</code> 目录下并重命名为 <code>main.cpp</code>
<ul>
<li>由于移动了 <code>main.cpp</code> 故需要修改一下<code> main.cpp</code> 中头文件里关于 <code>Match.h</code> 的引用路径：<code>#include &quot;Match.h&quot;</code> -&gt; <code>#include &quot;match_server/Match.h&quot;</code></li>
</ul>
</li>
<li>在<code>main.cpp</code>中实现具体业务逻辑</li>
</ol>
</li>
<li>完成 <code>Client</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>game</code>文件夹下生成 <code>python3</code> 版本的服务端，然后通过修改得到客户端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen py tutorial.thrift
</code></pre><ol start="2">
<li>删掉 <code>Match_remote </code>，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 <strong>客户端</strong> 功能，因此他没有作用，不妨删掉，让文档简洁一点</li>
<li>利用官网提供的模板，在<code>src</code>文件夹下编写 <strong>客户端</strong> 文件 <code>client.py</code></li>
</ol>
</li>
<li>持久化到云端
<ul>
<li>将 <strong>非编译文件</strong> 和 <strong>非可执行文件</strong> 提交到 <code>git</code> 中去（好的工程习惯）
<ul>
<li><code>Cpp</code>
<ul>
<li><code>git restore --stage *.o</code></li>
<li><code>git restore --stage main</code></li>
</ul>
</li>
<li><code>Python</code>
<ul>
<li><code>git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里</code></li>
<li><code>git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>注意：先运行服务器后，客户端才能正常运行</li>
</ul>
<h4 id="thrift-接口">Thrift 接口</h4>
<h5 id="matchthrift">Match.thrift</h5>
<pre tabindex="0"><code>namespace cpp match_service
struct User {
    1: i32 id,
    2: string name,
    3: i32 scores
}
service Match {
    i32 add_user(1: User user, 2: string info),
    i32 remove_user(1: User user, 2: string info),
}
</code></pre><h5 id="savethrift">Save.thrift</h5>
<pre tabindex="0"><code>namespace cpp save_service
service Save {
    /**
     * username: myserver的名称
     * password: myserver的密码的md5值的前8位，用命令md5sum
     * 用户名密码验证成功会返回0，验证失败会返回1
     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中
     */
    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)
}
</code></pre><h4 id="各版本预览">各版本预览</h4>
<h5 id="match_server10">Match_server:1.0</h5>
<ul>
<li><code>match_client</code>：创建固定的<code>User</code></li>
</ul>
<pre tabindex="0"><code>from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


def main():
    # Make socket
    transport = TSocket.TSocket(&#39;localhost&#39;, 9090)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = Match.Client(protocol)

    # Connect!
    transport.open()

    user = User(1, &#39;yxc&#39;, 1500)
    client.add_user(user, &#34;&#34;)

    # Close!
    transport.close()


# 调用 main 函数
if __name__ == &#34;__main__&#34;:
    main()
</code></pre><ul>
<li><code>match_server</code></li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &#34;match_server/Match.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include&lt;iostream&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    return 0;
  }
};
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
    
  server.serve();
  return 0;
}
</code></pre><h5 id="match_server20">Match_server:2.0</h5>
<ul>
<li><code>match_client</code>：根据标准输入来创建<code>User</code></li>
</ul>
<pre tabindex="0"><code>from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# 利用 python 在终端读入信息需要引入 stdin
from sys import stdin

# 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息
# 目的是可以一直不断处理信息
# 然后重写 main 函数，使之能不断从终端读入信息
def operate(op, user_id, user_name, score):
    # Make socket 
	transport = TSocket.TSocket(&#39;localhost&#39;, 9090)
	
	# Buffering is critical. Raw sockets are very slow
	transport = TTransport.TBufferedTransport(transport)
	
	# Wrap in a protocol
	protocol = TBinaryProtocol.TBinaryProtocol(transport)
	
	# Create a client to use the protocol encoder
	client = Match.Client(protocol)
	
	# Connect!
	transport.open()

    # 针对 op 参数，分别进行 &#34;增加&#34; 与 &#34;删出&#34; 操作
    user = User(user_id, user_name, score)

    if op == &#34;add&#34;:
        client.add_user(user, &#34;&#34;)
    else:
        client.remove_user(user, &#34;&#34;)
    
    # Close!
	transport.close()

def main():
    for line in stdin:
        op, user_id, user_name, score = line.split(&#39; &#39;)
        operate(op, int(user_id), user_name, int(score))

# 调用 main 函数
if __name__ == &#34;__main__&#34;:
    main()
</code></pre><ul>
<li><code>match_server</code>：自动将用户池中前两个用户匹配到一起</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &#34;match_server/Match.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &gt; 1) {
            auto a = users[0], b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());
            save_result(a.id, b.id);
        }
    }
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h5 id="match_server30">Match_server:3.0</h5>
<ul>
<li><code>save_client</code>：因为一个节点只能由一个<code>main</code>方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个<code>main</code>方法中</li>
</ul>
<pre tabindex="0"><code>// 需要额外引入的头文件
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;

// 需要额外声明的命名空间
using namespace  ::save_service;

//重写 save_result 内的内容，使其能够与 &#34;数据存储服务器&#34; 交互
void save_result(int a, int b) { // 记录成功匹配的信息
    printf(&#34;Match Result: %d %d\n&#34;, a, b);

    // Client端的板子
    std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
    std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
    std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
    SaveClient client(protocol);

    try {
        transport-&gt;open();

        //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
        int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
        //输出匹配结果
        if (!res) puts(&#34;success&#34;);
        else puts(&#34;fail&#34;);

        transport-&gt;close();
    } catch (TException&amp; tx) {
        cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
    }
}
</code></pre><ul>
<li><code>match_server</code>：每次只匹配分差小于 50 的用户</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;
#include &#34;match_server/Match.h&#34;
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include &lt;unistd.h&gt; // 用于调用 sleep 函数
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
	//重写 save_result 内的内容，使其能够与 &#34;数据存储服务器&#34; 交互
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
        // Client端的板子
        std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
        std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&gt;open();
            //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
            int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
            //输出匹配结果
            if (!res) puts(&#34;success&#34;);
            else puts(&#34;fail&#34;);
            transport-&gt;close();
        } catch (TException&amp; tx) {
            cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
        }
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &gt; 1) {
            // 按照 rank分 排序
            sort(users.begin(), users.end(), [&amp;](User&amp; a, User&amp; b) {
                return a.scores &lt; b.scores;
            });
            bool flag = true;
            for (uint32_t i = 1; i &lt; users.size(); ++ i) {
                auto a = users[i - 1], b = users[i];
                // 两名玩家分数差小于50时进行匹配
                if (b.scores - a.scores &lt;= 50) {
                    users.erase(users.begin() + i - 1, users.begin() + i + 1);
                    save_result(a.id, b.id);
                    flag = false;
                    break;
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h5 id="match_server40">Match_server:4.0</h5>
<ul>
<li><code>match_server</code>：随时间扩大匹配域，每一单位的 <code>wt</code> 会扩大 $50$ 分 的匹配域</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;
#include &#34;match_server/Match.h&#34;
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include &lt;unistd.h&gt; // 用于调用 sleep 函数
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
        // Client端的板子
        std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
        std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&gt;open();
            //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
            int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
            //输出匹配结果
            if (!res) puts(&#34;success&#34;);
            else puts(&#34;fail&#34;);
            transport-&gt;close();
        } catch (TException&amp; tx) {
            cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
        }
    }
    bool check_match(uint32_t i, uint32_t j) {
        auto a = users[i], b = users[j];
        
        int dt = abs(a.scores - b.scores);
        int a_max_dif = wt[i] * 50;
        int b_max_dif = wt[j] * 50;
        return dt &lt;= a_max_dif &amp;&amp; dt &lt;= b_max_dif;
    }
    void match() {
       for (uint32_t i = 0; i &lt; wt.size(); ++ i)
           wt[i] ++;
        while (users.size() &gt; 1) {
            bool flag = true;
            for (uint32_t i = 0; i &lt; users.size(); ++ i) {
                for (uint32_t j = i + 1; j &lt; users.size(); ++ j) {
                    if (check_match(i, j)) {
                        auto a = users[i], b = users[j];
                        users.erase(users.begin() + j);
                        users.erase(users.begin() + i);
                        wt.erase(wt.begin() + j);
                        wt.erase(wt.begin() + i);
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    if (!flag) break;       
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
        wt.push_back(0);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                wt.erase(wt.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
    vector&lt;int&gt; wt; // 等待时间，单位：s
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h4 id="usage">Usage</h4>
<pre tabindex="0"><code># 启动服务端
./match_system/src/main

# 启动客户端
python3 game/src/client.py

# 游戏应用端 （op id name scores）
add 1 yxc 2000
add 2 xan 1500
add 3 zagy 2500
remove 3 zagy 2500

# 匹配系统服务器
add_user
add_user
remove_user 
# 等待了 10 s
Match Result: 1 2
success
</code></pre><h4 id="项目地址">项目地址</h4>
<ul>
<li><a href="https://github.com/Xancoding/Learning-Thrift">Learning-Thrift</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>双拼学习记</title>
      <link>https://xancoding.cn/posts/doublespell/</link>
      <pubDate>Fri, 14 Oct 2022 17:02:41 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/doublespell/</guid>
      <description>&lt;h1 id=&#34;双拼学习记&#34;&gt;双拼学习记&lt;/h1&gt;
&lt;p&gt;前段时间了解了双拼输入法，只是一直没有时间去学。这段时间事情慢慢少点了，准备着手开始学习。双拼只需要按键两次便可以输入一个汉字，我感觉这样的设计更为合理，要是熟练掌握，会很有节奏感，打字速度也可以得到提升。&lt;/p&gt;
&lt;p&gt;更换一个新的输入法，刚开始时肯定会很别扭。使用双拼进行输入，需要对要打的字的音形熟悉，不然是打不出来的。刚好重新学习一下拼音，纠正纠正我自己一些错误的发音认知。&lt;/p&gt;
&lt;p&gt;我准备学习小鹤双拼，找了张小鹤双拼的键位图，用作电脑桌面，打字想不起来的时候瞄一眼。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png&#34; alt=&#34;doubleSpell&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/posts/learn_shuangpin&#34;&gt;双拼学习记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV16J411G7YT?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;双拼这点东西，up居然讲了十分钟——十分钟了解双拼到底是啥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flypy.com/&#34;&gt;小鹤双拼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.flypy.com/#/xh&#34;&gt;小鹤入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="双拼学习记">双拼学习记</h1>
<p>前段时间了解了双拼输入法，只是一直没有时间去学。这段时间事情慢慢少点了，准备着手开始学习。双拼只需要按键两次便可以输入一个汉字，我感觉这样的设计更为合理，要是熟练掌握，会很有节奏感，打字速度也可以得到提升。</p>
<p>更换一个新的输入法，刚开始时肯定会很别扭。使用双拼进行输入，需要对要打的字的音形熟悉，不然是打不出来的。刚好重新学习一下拼音，纠正纠正我自己一些错误的发音认知。</p>
<p>我准备学习小鹤双拼，找了张小鹤双拼的键位图，用作电脑桌面，打字想不起来的时候瞄一眼。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png" alt="doubleSpell"  />
</a>
</div>

</p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://geekplux.com/posts/learn_shuangpin">双拼学习记</a></li>
<li><a href="https://www.bilibili.com/video/BV16J411G7YT?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">双拼这点东西，up居然讲了十分钟——十分钟了解双拼到底是啥</a></li>
<li><a href="https://flypy.com/">小鹤双拼</a></li>
<li><a href="https://help.flypy.com/#/xh">小鹤入门</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>我管理时间的方法</title>
      <link>https://xancoding.cn/posts/timemanagement/</link>
      <pubDate>Fri, 14 Oct 2022 16:07:09 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/timemanagement/</guid>
      <description>&lt;h1 id=&#34;安排好你的待办清单&#34;&gt;安排好你的待办清单&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;思考以下几点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 有哪些工作需要完成？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.我有多少时间可以用来完成这些工作？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.工作事项是否有逻辑顺序以及优先级&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每一天你都会受到很多的干扰，看到APP上的一个个红点，消息通知从屏幕上弹出。注意力在一次次的查看信息中被逐渐消磨，时间也变得碎片化，难以静下心来专注于某件事。有些干扰无可避免，但只要愿意付出努力，大部分的干扰可以得到排除。&lt;/p&gt;
&lt;p&gt;白天我会尽量避免受到干扰，所有的社交软件，它们是工作效率的最大杀手。我控制自己在上午以及下午的大块时间中忽略来自社交网络的信息，将消息的查看集中在中午以及晚上的特定时间，做一个统一的查看。&lt;/p&gt;
&lt;p&gt;每天的晚上，我会花些的时间，把第二天的工作做个大致的安排，写到待办事项中，第二天再用番茄工作法进行专注执行。记得让自己的计划保持比较高的自由度，要留有足够的时间余量。&lt;/p&gt;
&lt;h1 id=&#34;番茄工作法&#34;&gt;番茄工作法&lt;/h1&gt;
&lt;p&gt;番茄工作法这个名词我之前便有听说过，但一直未尝试着去做过，直到最近从《软技能》一书中再次看到，感觉不错，便开始了尝试。在经过一个星期的体验后，它确实提高了我的效率，让我能够更好的对自己的时间做出规划。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它的基本思路是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;值得注意的是，使用番茄工作法所要做的并不只是集中注意力25分钟这么简单。通过使用番茄工作法，你可以&lt;strong&gt;高效跟踪自己一天完成的番茄钟的数量&lt;/strong&gt;，并为此设定目标。开始的几天，你可能无法对自己能完成的工作做一个很好的估计。但相信在使用番茄工作法一段时间后，你可以做到较为准确的估计，并能完成通过番茄钟的数量，评估自己完成的工作。&lt;/p&gt;
&lt;p&gt;通过使用番茄钟，你可以&lt;strong&gt;定量的描述自己的工作状态&lt;/strong&gt;，而不再像过去那样只是凭借感觉。你可以把每周看作是由有限个番茄钟组成的，知道了自己一周大概能完成的番茄钟的数量后，你也会认识到应该如何通过设置任务的优先级，来&lt;strong&gt;合理分配自己的时间&lt;/strong&gt;。你不会再过高的幻想自己会在一周的时间里完成超出自己实际许多的任务，并在每周结束时，因未能完成而感到沮丧。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png&#34; alt=&#34;Pomodoro&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;当你在一天中为自己设置了&lt;strong&gt;x&lt;/strong&gt;个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。它不仅能帮你完成更多的工作，还能让你尽情享受业余时间——因为你已经通过番茄钟完成了一天的任务，在剩下的时间里，你完全可以自由安排消磨时间，而不会再有任何的心理负担。&lt;/p&gt;
&lt;p&gt;最后的最后，一定记得要&lt;strong&gt;对自己的能力做一个合理的预期&lt;/strong&gt;，你每周工作40小时并不意味着你能完成80个番茄钟。找到适合你的番茄钟数量，过度的加量会适得其反。&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/468627225?utm_campaign=shareopn&amp;amp;utm_medium=social&amp;amp;utm_oi=1205113084614000640&amp;amp;utm_psn=1564268556828737536&amp;amp;utm_source=wechat_session&#34;&gt;如何用Todo清单度过余生的每一天？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/posts/farewell_social_network&#34;&gt;告别社交网络有多难&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/newsletters/28&#34;&gt;社交网络名存实亡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.axios.com/2022/07/25/sunset-social-network-facebook-tiktok&#34;&gt;Sunset of the social network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26835090/&#34;&gt;《软技能》&lt;/a&gt; 生产力篇&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="安排好你的待办清单">安排好你的待办清单</h1>
<blockquote>
<p>思考以下几点：</p>
<p><strong>1. 有哪些工作需要完成？</strong></p>
<p><strong>2.我有多少时间可以用来完成这些工作？</strong></p>
<p><strong>3.工作事项是否有逻辑顺序以及优先级</strong></p>
</blockquote>
<p>每一天你都会受到很多的干扰，看到APP上的一个个红点，消息通知从屏幕上弹出。注意力在一次次的查看信息中被逐渐消磨，时间也变得碎片化，难以静下心来专注于某件事。有些干扰无可避免，但只要愿意付出努力，大部分的干扰可以得到排除。</p>
<p>白天我会尽量避免受到干扰，所有的社交软件，它们是工作效率的最大杀手。我控制自己在上午以及下午的大块时间中忽略来自社交网络的信息，将消息的查看集中在中午以及晚上的特定时间，做一个统一的查看。</p>
<p>每天的晚上，我会花些的时间，把第二天的工作做个大致的安排，写到待办事项中，第二天再用番茄工作法进行专注执行。记得让自己的计划保持比较高的自由度，要留有足够的时间余量。</p>
<h1 id="番茄工作法">番茄工作法</h1>
<p>番茄工作法这个名词我之前便有听说过，但一直未尝试着去做过，直到最近从《软技能》一书中再次看到，感觉不错，便开始了尝试。在经过一个星期的体验后，它确实提高了我的效率，让我能够更好的对自己的时间做出规划。</p>
<blockquote>
<p>它的基本思路是：</p>
<p><strong>你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。</strong></p>
<p><strong>在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。</strong></p>
</blockquote>
<p>值得注意的是，使用番茄工作法所要做的并不只是集中注意力25分钟这么简单。通过使用番茄工作法，你可以<strong>高效跟踪自己一天完成的番茄钟的数量</strong>，并为此设定目标。开始的几天，你可能无法对自己能完成的工作做一个很好的估计。但相信在使用番茄工作法一段时间后，你可以做到较为准确的估计，并能完成通过番茄钟的数量，评估自己完成的工作。</p>
<p>通过使用番茄钟，你可以<strong>定量的描述自己的工作状态</strong>，而不再像过去那样只是凭借感觉。你可以把每周看作是由有限个番茄钟组成的，知道了自己一周大概能完成的番茄钟的数量后，你也会认识到应该如何通过设置任务的优先级，来<strong>合理分配自己的时间</strong>。你不会再过高的幻想自己会在一周的时间里完成超出自己实际许多的任务，并在每周结束时，因未能完成而感到沮丧。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png" alt="Pomodoro"  />
</a>
</div>

</p>
<p>当你在一天中为自己设置了<strong>x</strong>个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。它不仅能帮你完成更多的工作，还能让你尽情享受业余时间——因为你已经通过番茄钟完成了一天的任务，在剩下的时间里，你完全可以自由安排消磨时间，而不会再有任何的心理负担。</p>
<p>最后的最后，一定记得要<strong>对自己的能力做一个合理的预期</strong>，你每周工作40小时并不意味着你能完成80个番茄钟。找到适合你的番茄钟数量，过度的加量会适得其反。</p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/468627225?utm_campaign=shareopn&amp;utm_medium=social&amp;utm_oi=1205113084614000640&amp;utm_psn=1564268556828737536&amp;utm_source=wechat_session">如何用Todo清单度过余生的每一天？</a></li>
<li><a href="https://geekplux.com/posts/farewell_social_network">告别社交网络有多难</a></li>
<li><a href="https://geekplux.com/newsletters/28">社交网络名存实亡</a></li>
<li><a href="https://www.axios.com/2022/07/25/sunset-social-network-facebook-tiktok">Sunset of the social network</a></li>
<li><a href="https://book.douban.com/subject/26835090/">《软技能》</a> 生产力篇</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>我获取信息的方式</title>
      <link>https://xancoding.cn/posts/getinfo/</link>
      <pubDate>Wed, 12 Oct 2022 22:42:04 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/getinfo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这个时代不缺信息，因为信息太多了，缺的是时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;rss&#34;&gt;RSS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Inoreader &amp;amp; RSSHub Radar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是rss&#34;&gt;什么是RSS?&lt;/h2&gt;
&lt;p&gt;RSS 英文全称为 Really Simple Syndication，即简易资讯聚合。其实叫什么并不重要，我们只用知道它是一个&lt;strong&gt;能让你在一个地方订阅&lt;/strong&gt;各种感兴趣网站的工具。&lt;/p&gt;
&lt;p&gt;RSS的核心是&lt;strong&gt;资讯聚合&lt;/strong&gt;，由&lt;strong&gt;用户自己决定信息源&lt;/strong&gt;。我们可以通过订阅网站的RSS源，主动获得想要的资讯，去挖掘一些自己真正感兴趣的东西。&lt;/p&gt;
&lt;h2 id=&#34;如何使用rss&#34;&gt;如何使用RSS?&lt;/h2&gt;
&lt;p&gt;利用RSS获取信息，只需要在目标网站上找到RSS链接，并把它添加到RSS阅读器中。&lt;/p&gt;
&lt;p&gt;我使用的工具是&lt;code&gt;Inoreader RSS 阅读器 + RSSHub Radar 浏览器插件&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inoreader&lt;/code&gt; 吸引我的点是它支持PC端和手机端的同步，并且PC端可以直接通过浏览器插件使用，使我在手机和电脑上都可以查看消息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RSSHub Radar&lt;/code&gt; 的出现，完美解决了不是所有的网页都提供RSS源这一痛点，它可以自动生成网站的RSS源以供订阅，非常方便。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png&#34; alt=&#34;RSSHub Radar&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;我使用RSS主要用来订阅我感兴趣的个人博客，我订阅的博客网站在 &lt;code&gt;Links&lt;/code&gt; 页面下的 &lt;strong&gt;博客&lt;/strong&gt; 那一栏。&lt;/p&gt;
&lt;h1 id=&#34;搜索引擎&#34;&gt;搜索引擎&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Google &amp;amp; AdblockPlus &amp;amp; uBlacklist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Chrome&lt;/code&gt; 浏览器提供的&lt;code&gt;Google 搜索&lt;/code&gt;是我目前体验感最好的搜索引擎，&lt;code&gt;Microsoft Edge&lt;/code&gt; 浏览器提供的 &lt;code&gt;Bing 搜索&lt;/code&gt; 体验感也还不错。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AdblockPlus 浏览器插件&lt;/code&gt; 由用户主动设置拦截网页上不想看到的内容，下图是我对知乎页面的屏蔽后的结果，我使用这个插件把知乎和B站的推荐内容屏蔽，以获得更为简洁的体验&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png&#34; alt=&#34;AdblockPlus&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uBlacklist 浏览器插件&lt;/code&gt; 在搜索时屏蔽特定网站，做到对低质内容的过滤，我屏蔽了CSDN和百度知道&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*://www.csdn.net/*
*://bbs.csdn.net/*
*://blog.csdn.net/*
*://zhidao.baidu.com/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png&#34; alt=&#34;uBlacklist&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Chrome&lt;/code&gt; 浏览器还可以通过在地址栏中输入快捷字词，快速搜索特定网站，或使用其他搜索引擎，我通过设置它将知乎和B站作为搜索引擎使用。在我想寻找某条信息时，只需在地址栏输入关键字 &lt;code&gt;zh &lt;/code&gt; or &lt;code&gt;bi &lt;/code&gt; 即可搜索。&lt;/p&gt;
&lt;p&gt;经过如下配置&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png&#34; alt=&#34;search1&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;就可以通过在地址栏中输入快捷字词实现简便搜索啦&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png&#34; alt=&#34;search2&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;在手机端，我是使用&lt;strong&gt;桌面小工具&lt;/strong&gt;来达到只使用APP搜索功能目的。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png&#34; alt=&#34;search3&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;h1 id=&#34;书籍&#34;&gt;书籍&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Neat Reader &amp;amp; Sumatra PDF &amp;amp; Z-Library &amp;amp; LoreFree &amp;amp; 学校图书馆&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;读书，是治愈迷茫最好的良药。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Neat Reader&lt;/code&gt; 是一款&lt;code&gt;EPUB&lt;/code&gt;阅读器，用以阅读EPUB格式的电子书，体验感不错。我会在 &lt;a href=&#34;https://zh.z-lib.org/&#34;&gt;Z-Library&lt;/a&gt; or &lt;a href=&#34;https://lorefree.com/&#34;&gt;LoreFree&lt;/a&gt; 上搜索得到我想要看的书的EPUB格式的电子书后，存在本地文件上，通过 &lt;a href=&#34;https://www.neat-reader.com/&#34;&gt;Neat Reader&lt;/a&gt; 阅读。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png&#34; alt=&#34;neatReader&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;如果找不到EPUB格式的书籍，我会存 PDF 格式的，然后在 &lt;a href=&#34;https://www.sumatrapdfreader.org/free-pdf-reader&#34;&gt;Sumatra PDF&lt;/a&gt; 上阅读&lt;/p&gt;
&lt;p&gt;不过，相比于电子书，我其实还是更喜欢纸质书的阅读体验。所以，我也会隔段时间便去拿着自己的书单，去学校的图书馆找书看。&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://catcoding.me/p/get-better-info/&#34;&gt;优化自己的信息源&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/49684783/answer/2305132342&#34;&gt;中文互联网的产出在渐渐枯萎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/349349861&#34;&gt;知道RSS的人越少，我就越希望它能被人知道！&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/VUhz2Tg08UqYSAZB6nU9MQ&#34;&gt;RSS 二十年&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/11928.html&#34;&gt;互联网之子&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rss-source.com/&#34;&gt;RSS Source | RSS订阅源推荐&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://haoeric.github.io/Google-search-grammar/&#34;&gt;Practical Google Search Tips&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>这个时代不缺信息，因为信息太多了，缺的是时间</strong></p>
<p><strong>整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子</strong></p>
<p><strong>获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息</strong></p>
</blockquote>
<h1 id="rss">RSS</h1>
<ul>
<li><code>Inoreader &amp; RSSHub Radar</code></li>
</ul>
<h2 id="什么是rss">什么是RSS?</h2>
<p>RSS 英文全称为 Really Simple Syndication，即简易资讯聚合。其实叫什么并不重要，我们只用知道它是一个<strong>能让你在一个地方订阅</strong>各种感兴趣网站的工具。</p>
<p>RSS的核心是<strong>资讯聚合</strong>，由<strong>用户自己决定信息源</strong>。我们可以通过订阅网站的RSS源，主动获得想要的资讯，去挖掘一些自己真正感兴趣的东西。</p>
<h2 id="如何使用rss">如何使用RSS?</h2>
<p>利用RSS获取信息，只需要在目标网站上找到RSS链接，并把它添加到RSS阅读器中。</p>
<p>我使用的工具是<code>Inoreader RSS 阅读器 + RSSHub Radar 浏览器插件</code>。</p>
<p><code>Inoreader</code> 吸引我的点是它支持PC端和手机端的同步，并且PC端可以直接通过浏览器插件使用，使我在手机和电脑上都可以查看消息。</p>
<p><code>RSSHub Radar</code> 的出现，完美解决了不是所有的网页都提供RSS源这一痛点，它可以自动生成网站的RSS源以供订阅，非常方便。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png" alt="RSSHub Radar"  />
</a>
</div>

</p>
<p>我使用RSS主要用来订阅我感兴趣的个人博客，我订阅的博客网站在 <code>Links</code> 页面下的 <strong>博客</strong> 那一栏。</p>
<h1 id="搜索引擎">搜索引擎</h1>
<ul>
<li><code>Google &amp; AdblockPlus &amp; uBlacklist</code></li>
</ul>
<p><code>Chrome</code> 浏览器提供的<code>Google 搜索</code>是我目前体验感最好的搜索引擎，<code>Microsoft Edge</code> 浏览器提供的 <code>Bing 搜索</code> 体验感也还不错。</p>
<p><code>AdblockPlus 浏览器插件</code> 由用户主动设置拦截网页上不想看到的内容，下图是我对知乎页面的屏蔽后的结果，我使用这个插件把知乎和B站的推荐内容屏蔽，以获得更为简洁的体验</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png" alt="AdblockPlus"  />
</a>
</div>

</p>
<p><code>uBlacklist 浏览器插件</code> 在搜索时屏蔽特定网站，做到对低质内容的过滤，我屏蔽了CSDN和百度知道</p>
<pre tabindex="0"><code>*://www.csdn.net/*
*://bbs.csdn.net/*
*://blog.csdn.net/*
*://zhidao.baidu.com/*
</code></pre><p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png" alt="uBlacklist"  />
</a>
</div>

</p>
<p><code>Chrome</code> 浏览器还可以通过在地址栏中输入快捷字词，快速搜索特定网站，或使用其他搜索引擎，我通过设置它将知乎和B站作为搜索引擎使用。在我想寻找某条信息时，只需在地址栏输入关键字 <code>zh </code> or <code>bi </code> 即可搜索。</p>
<p>经过如下配置</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png" alt="search1"  />
</a>
</div>

</p>
<p>就可以通过在地址栏中输入快捷字词实现简便搜索啦</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png" alt="search2"  />
</a>
</div>

</p>
<p>在手机端，我是使用<strong>桌面小工具</strong>来达到只使用APP搜索功能目的。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png" alt="search3"  />
</a>
</div>

</p>
<h1 id="书籍">书籍</h1>
<ul>
<li><code>Neat Reader &amp; Sumatra PDF &amp; Z-Library &amp; LoreFree &amp; 学校图书馆</code></li>
</ul>
<p><strong>读书，是治愈迷茫最好的良药。</strong></p>
<p><code>Neat Reader</code> 是一款<code>EPUB</code>阅读器，用以阅读EPUB格式的电子书，体验感不错。我会在 <a href="https://zh.z-lib.org/">Z-Library</a> or <a href="https://lorefree.com/">LoreFree</a> 上搜索得到我想要看的书的EPUB格式的电子书后，存在本地文件上，通过 <a href="https://www.neat-reader.com/">Neat Reader</a> 阅读。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png" alt="neatReader"  />
</a>
</div>

</p>
<p>如果找不到EPUB格式的书籍，我会存 PDF 格式的，然后在 <a href="https://www.sumatrapdfreader.org/free-pdf-reader">Sumatra PDF</a> 上阅读</p>
<p>不过，相比于电子书，我其实还是更喜欢纸质书的阅读体验。所以，我也会隔段时间便去拿着自己的书单，去学校的图书馆找书看。</p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li>
<p><a href="https://catcoding.me/p/get-better-info/">优化自己的信息源</a></p>
</li>
<li>
<p><a href="https://www.zhihu.com/question/49684783/answer/2305132342">中文互联网的产出在渐渐枯萎</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/349349861">知道RSS的人越少，我就越希望它能被人知道！</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/VUhz2Tg08UqYSAZB6nU9MQ">RSS 二十年</a></p>
</li>
<li>
<p><a href="https://coolshell.cn/articles/11928.html">互联网之子</a></p>
</li>
<li>
<p><a href="https://rss-source.com/">RSS Source | RSS订阅源推荐</a></p>
</li>
<li>
<p><a href="http://haoeric.github.io/Google-search-grammar/">Practical Google Search Tips</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://xancoding.cn/posts/helloworld/</link>
      <pubDate>Wed, 12 Oct 2022 07:27:58 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/helloworld/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std::cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Main {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;void&lt;/span&gt; main(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#007f7f&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#007f7f&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, World
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;document&lt;/span&gt;.write(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Hello, World&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">int</span> main() {
</span></span><span style="display:flex;"><span>    printf(<span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span>(<span style="color:#ff0;font-weight:bold">0</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">int</span> main() {
</span></span><span style="display:flex;"><span>    std::cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;Hello World&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">public</span> <span style="color:#fff;font-weight:bold">class</span> Main {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">public</span> <span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> main(String[] args) {
</span></span><span style="display:flex;"><span>        System.<span style="color:#007f7f">out</span>.<span style="color:#007f7f">println</span>(<span style="color:#0ff;font-weight:bold">&#34;Hello, World!&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>Hello, World
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">document</span>.write(<span style="color:#0ff;font-weight:bold">&#39;Hello, World&#39;</span>);
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">print</span> (<span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>)
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title></title>
      <link>https://xancoding.cn/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xancoding.cn/about/</guid>
      <description>&lt;h1 id=&#34;作者&#34;&gt;作者&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;英文名:&lt;/td&gt;
&lt;td&gt;Xan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;职业:&lt;/td&gt;
&lt;td&gt;学生&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;爱好:&lt;/td&gt;
&lt;td&gt;跑步、徒步&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;项目&#34;&gt;项目&lt;/h1&gt;
&lt;h2 id=&#34;bloghttpsgithubcomxancodingblog&#34;&gt;&lt;a href=&#34;https://github.com/Xancoding/Blog&#34;&gt;Blog&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;搭建工具&#34;&gt;搭建工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Hugo &amp;amp; GitHub Pages &amp;amp; Twikoo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Theme：PaperMod&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;各页面简介&#34;&gt;各页面简介&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Home：联系方式 &amp;amp; 文章&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tags：文章标签&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Archives：文章归档&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;About：作者简介 &amp;amp; 博客简介&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Search：搜索文章&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参考资料&#34;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sulvblog.cn/&#34;&gt;Sulv&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://333rd.net/&#34;&gt;3rd&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://shaohanyun.top/&#34;&gt;田少晗的个人博客&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;warofwarlockhttpsgithubcomxancodingwarofwarlock&#34;&gt;&lt;a href=&#34;https://github.com/Xancoding/WarOfWarlock&#34;&gt;WarOfWarlock&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;搭建工具-1&#34;&gt;搭建工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTML &amp;amp; CSS &amp;amp; JavaScript &amp;amp; Django&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;参考资料-1&#34;&gt;参考资料&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_django/&#34;&gt;AcWing Django 框架课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/punch_the_clock/72/&#34;&gt;AcWing Django框架课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="作者">作者</h1>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>英文名:</td>
<td>Xan</td>
</tr>
<tr>
<td>职业:</td>
<td>学生</td>
</tr>
<tr>
<td>爱好:</td>
<td>跑步、徒步</td>
</tr>
</tbody>
</table>
<h1 id="项目">项目</h1>
<h2 id="bloghttpsgithubcomxancodingblog"><a href="https://github.com/Xancoding/Blog">Blog</a></h2>
<h3 id="搭建工具">搭建工具</h3>
<ul>
<li><code>Hugo &amp; GitHub Pages &amp; Twikoo</code></li>
<li><code>Theme：PaperMod</code></li>
</ul>
<h3 id="各页面简介">各页面简介</h3>
<ul>
<li><code>Home：联系方式 &amp; 文章</code></li>
<li><code>Tags：文章标签</code></li>
<li><code>Archives：文章归档</code></li>
<li><code>About：作者简介 &amp; 博客简介</code></li>
<li><code>Search：搜索文章</code></li>
</ul>
<h3 id="参考资料">参考资料</h3>
<ul>
<li><a href="https://www.sulvblog.cn/">Sulv&rsquo;s Blog</a></li>
<li><a href="https://333rd.net/">3rd&rsquo;s Blog</a></li>
<li><a href="https://shaohanyun.top/">田少晗的个人博客</a></li>
</ul>
<h2 id="warofwarlockhttpsgithubcomxancodingwarofwarlock"><a href="https://github.com/Xancoding/WarOfWarlock">WarOfWarlock</a></h2>
<h3 id="搭建工具-1">搭建工具</h3>
<ul>
<li><code>HTML &amp; CSS &amp; JavaScript &amp; Django</code></li>
</ul>
<h3 id="参考资料-1">参考资料</h3>
<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_django/">AcWing Django 框架课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/punch_the_clock/72/">AcWing Django框架课</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title></title>
      <link>https://xancoding.cn/links/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xancoding.cn/links/</guid>
      <description>&lt;h1 id=&#34;博客&#34;&gt;博客&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.owenyoung.com/&#34;&gt;Owen 的博客&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.owenyoung.com/quotes/&#34;&gt;收集发人深省的话&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.owenyoung.com/sources/&#34;&gt;探索互联网上高质量的内容&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://catcoding.me/&#34;&gt;程序员的喵&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/&#34;&gt;阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/&#34;&gt;编程随想的博客&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/2020/11/Game-Theory.html&#34;&gt;博弈论入门教程——从基本概念到具体案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/2019/03/Why-Thinking-Hard-So-Hard.html&#34;&gt;为什么独立思考这么难？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/2020/12/Study-and-Life.html&#34;&gt;学习与人生——700篇博文之感悟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/2013/09/knowledge-structure.html&#34;&gt;如何完善自己的知识结构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/2019/10/Systematic-Learning.html&#34;&gt;如何【系统性学习】——从“媒介形态”聊到“DIKW 模型”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/2013/03/internet-resource-discovery-0.html&#34;&gt;如何挖掘网络资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://program-think.blogspot.com/2013/04/how-to-read-book.html&#34;&gt;《如何阅读一本书》——书评及内容纲要&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;社区&#34;&gt;社区&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://meta.appinn.net/&#34;&gt;小众软件论坛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.v2ex.com/&#34;&gt;V2EX&lt;/a&gt; 面向程序员、极客人群的分享交流社区&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/&#34;&gt;Medium&lt;/a&gt; 网络文章发布平台 文章质量高&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.buzzing.cc/&#34;&gt;Buzzing&lt;/a&gt; 国外社交媒体聚合热榜 中文标题&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;HackerNews&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;工具&#34;&gt;工具&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://todo.evestudio.cn/&#34;&gt;Todo清单&lt;/a&gt; 一款跨平台待办事项与时间管理应用&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt; 知识管理工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hcfy.app/&#34;&gt;划词翻译&lt;/a&gt; 浏览器翻译插件&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://open.spotify.com/&#34;&gt;Spotify&lt;/a&gt; 流媒体音乐服务平台&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.fe-mm.com/software/cross-platform.html&#34;&gt;软件推荐 | 茂茂物语 (fe-mm.com)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;学习&#34;&gt;学习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://csdiy.wiki/CS%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/&#34;&gt;CS自学指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://xiaolincoding.com/&#34;&gt;小林 x 图解计算机基础&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;文章&#34;&gt;文章&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://addyosmani.com/blog/software-engineering-soft-parts/&#34;&gt;Software Engineering - The Soft Parts&lt;/a&gt; 软件开发中的软技能&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sideproject.guide/&#34;&gt;Side Project 指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;资源&#34;&gt;资源&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://resource.1kbtool.com/&#34;&gt;&lt;strong&gt;Source&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;edit&#34;&gt;Edit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://exercism.org/tracks&#34;&gt;&lt;strong&gt;Exercism&lt;/strong&gt;&lt;/a&gt; 在线练习编程语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;art&#34;&gt;Art&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://excalidraw.com/&#34;&gt;&lt;strong&gt;Excalidraw&lt;/strong&gt;&lt;/a&gt; 在线白板画图工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gallerix.asia/&#34;&gt;Gallerix&lt;/a&gt; 绘画和画家&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mani-unsplash-clone.netlify.app/&#34;&gt;Unsplash&lt;/a&gt; 无版权图片&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://colorhunt.co/&#34;&gt;Color Hunt&lt;/a&gt; 设计师和艺术家的调色板&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://game-icons.net/&#34;&gt;Game-icons&lt;/a&gt; 游戏图标在线存储库&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;outdoor&#34;&gt;Outdoor&lt;/h1&gt;
&lt;h2 id=&#34;入门指南&#34;&gt;入门指南&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/5682935&#34;&gt;登山者Black&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1qe411x7gc/?spm_id_from=333.999.0.0&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;户外运动安全手册（上）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1rf4y1U7FZ/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;户外运动安全手册（下）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1xE411j77f/?spm_id_from=333.999.0.0&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;洋葱式穿着/户外运动穿什么&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV14U4y1577f/?spm_id_from=333.999.0.0&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;户外必备10要素&amp;ndash;可能拯救你生命的十件户外必需品&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV18z411h7Wq/?vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;户外装备选购终极指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://space.bilibili.com/604006215&#34;&gt;烛逢&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1CQ4y1v7qo/?spm_id_from=333.788&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;户外运动三层穿衣法 | 烛逢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Tr4y1C7XT/?spm_id_from=333.788&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;在野外找路-六只脚｜烛逢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1af4y1T7dK/?spm_id_from=333.788&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;六只脚进阶篇 | 烛逢&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Mi4y117Zc/?spm_id_from=333.999.0.0&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;两步路使用教学｜烛逢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;两步路路网&#34;&gt;两步路路网&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;下载豌豆荚&lt;/li&gt;
&lt;li&gt;在豌豆荚中搜索两步路，下载 v6.7.2版本&lt;/li&gt;
&lt;li&gt;在应用商店中关闭自动更新&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;沉浸式登山&#34;&gt;沉浸式登山&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/480567097/?spm_id_from=333.999.0.0&#34;&gt;Mew_喵喵&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/441981477/?spm_id_from=333.999.0.0&#34;&gt;秘密仙人掌&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;登山装备清单&#34;&gt;登山装备清单&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/mountaineeringEquipment.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/mountaineeringEquipment.png&#34; alt=&#34;mountaineeringEquipment&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;h1 id=&#34;run&#34;&gt;Run&lt;/h1&gt;
&lt;h2 id=&#34;衣物穿脱&#34;&gt;衣物穿脱&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/RunningOnAndOff.jpg&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/RunningOnAndOff.jpg&#34; alt=&#34;RunningOnAndOff&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;div style=&#34;font-size:14px;color:#C0C0C0;text-decoration:underline&#34;&gt;图片来自于知乎博主@阿甘跑步，版权归原作者所有&lt;/div&gt; 
&lt;h2 id=&#34;配速表&#34;&gt;配速表&lt;/h2&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/speedTable.jpg&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/speedTable.jpg&#34; alt=&#34;speedTable&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="博客">博客</h1>
<ul>
<li><a href="https://www.owenyoung.com/">Owen 的博客</a>
<ul>
<li><a href="https://www.owenyoung.com/quotes/">收集发人深省的话</a></li>
<li><a href="https://www.owenyoung.com/sources/">探索互联网上高质量的内容</a></li>
</ul>
</li>
<li><a href="https://catcoding.me/">程序员的喵</a></li>
<li><a href="https://www.ruanyifeng.com/blog/">阮一峰的网络日志</a></li>
<li><a href="https://program-think.blogspot.com/">编程随想的博客</a>
<ul>
<li><a href="https://program-think.blogspot.com/2020/11/Game-Theory.html">博弈论入门教程——从基本概念到具体案例</a></li>
<li><a href="https://program-think.blogspot.com/2019/03/Why-Thinking-Hard-So-Hard.html">为什么独立思考这么难？</a></li>
<li><a href="https://program-think.blogspot.com/2020/12/Study-and-Life.html">学习与人生——700篇博文之感悟</a></li>
<li><a href="https://program-think.blogspot.com/2013/09/knowledge-structure.html">如何完善自己的知识结构</a></li>
<li><a href="https://program-think.blogspot.com/2019/10/Systematic-Learning.html">如何【系统性学习】——从“媒介形态”聊到“DIKW 模型”</a></li>
<li><a href="https://program-think.blogspot.com/2013/03/internet-resource-discovery-0.html">如何挖掘网络资源</a></li>
<li><a href="https://program-think.blogspot.com/2013/04/how-to-read-book.html">《如何阅读一本书》——书评及内容纲要</a></li>
</ul>
</li>
</ul>
<h1 id="社区">社区</h1>
<ul>
<li><a href="https://meta.appinn.net/">小众软件论坛</a></li>
<li><a href="https://www.v2ex.com/">V2EX</a> 面向程序员、极客人群的分享交流社区</li>
<li><a href="https://medium.com/">Medium</a> 网络文章发布平台 文章质量高</li>
<li><a href="https://www.buzzing.cc/">Buzzing</a> 国外社交媒体聚合热榜 中文标题</li>
<li><a href="https://news.ycombinator.com/">HackerNews</a></li>
</ul>
<h1 id="工具">工具</h1>
<ul>
<li><a href="https://todo.evestudio.cn/">Todo清单</a> 一款跨平台待办事项与时间管理应用</li>
<li><a href="https://obsidian.md/">Obsidian</a> 知识管理工具</li>
<li><a href="https://hcfy.app/">划词翻译</a> 浏览器翻译插件</li>
<li><a href="https://open.spotify.com/">Spotify</a> 流媒体音乐服务平台</li>
<li><a href="https://notes.fe-mm.com/software/cross-platform.html">软件推荐 | 茂茂物语 (fe-mm.com)</a></li>
</ul>
<h1 id="学习">学习</h1>
<ul>
<li><a href="https://csdiy.wiki/CS%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/">CS自学指南</a></li>
<li><a href="https://xiaolincoding.com/">小林 x 图解计算机基础</a></li>
</ul>
<h1 id="文章">文章</h1>
<ul>
<li><a href="https://addyosmani.com/blog/software-engineering-soft-parts/">Software Engineering - The Soft Parts</a> 软件开发中的软技能</li>
<li><a href="https://sideproject.guide/">Side Project 指南</a></li>
</ul>
<h1 id="资源">资源</h1>
<ul>
<li><a href="https://resource.1kbtool.com/"><strong>Source</strong></a></li>
</ul>
<h2 id="edit">Edit</h2>
<ul>
<li><a href="https://exercism.org/tracks"><strong>Exercism</strong></a> 在线练习编程语言</li>
</ul>
<h2 id="art">Art</h2>
<ul>
<li><a href="https://excalidraw.com/"><strong>Excalidraw</strong></a> 在线白板画图工具</li>
<li><a href="https://gallerix.asia/">Gallerix</a> 绘画和画家</li>
<li><a href="https://mani-unsplash-clone.netlify.app/">Unsplash</a> 无版权图片</li>
<li><a href="https://colorhunt.co/">Color Hunt</a> 设计师和艺术家的调色板</li>
<li><a href="https://game-icons.net/">Game-icons</a> 游戏图标在线存储库</li>
</ul>
<h1 id="outdoor">Outdoor</h1>
<h2 id="入门指南">入门指南</h2>
<ul>
<li>
<p><a href="https://space.bilibili.com/5682935">登山者Black</a></p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1qe411x7gc/?spm_id_from=333.999.0.0&amp;vd_source=ae16ff6478eb15c1b87880540263910b">户外运动安全手册（上）</a></li>
<li><a href="https://www.bilibili.com/video/BV1rf4y1U7FZ/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">户外运动安全手册（下）</a></li>
<li><a href="https://www.bilibili.com/video/BV1xE411j77f/?spm_id_from=333.999.0.0&amp;vd_source=ae16ff6478eb15c1b87880540263910b">洋葱式穿着/户外运动穿什么</a></li>
<li><a href="https://www.bilibili.com/video/BV14U4y1577f/?spm_id_from=333.999.0.0&amp;vd_source=ae16ff6478eb15c1b87880540263910b">户外必备10要素&ndash;可能拯救你生命的十件户外必需品</a></li>
<li><a href="https://www.bilibili.com/video/BV18z411h7Wq/?vd_source=ae16ff6478eb15c1b87880540263910b">户外装备选购终极指南</a></li>
</ul>
</li>
<li>
<p><a href="https://space.bilibili.com/604006215">烛逢</a></p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1CQ4y1v7qo/?spm_id_from=333.788&amp;vd_source=ae16ff6478eb15c1b87880540263910b">户外运动三层穿衣法 | 烛逢</a></li>
<li><a href="https://www.bilibili.com/video/BV1Tr4y1C7XT/?spm_id_from=333.788&amp;vd_source=ae16ff6478eb15c1b87880540263910b">在野外找路-六只脚｜烛逢</a></li>
<li><a href="https://www.bilibili.com/video/BV1af4y1T7dK/?spm_id_from=333.788&amp;vd_source=ae16ff6478eb15c1b87880540263910b">六只脚进阶篇 | 烛逢</a></li>
<li><a href="https://www.bilibili.com/video/BV1Mi4y117Zc/?spm_id_from=333.999.0.0&amp;vd_source=ae16ff6478eb15c1b87880540263910b">两步路使用教学｜烛逢</a></li>
</ul>
</li>
</ul>
<h2 id="两步路路网">两步路路网</h2>
<ol>
<li>下载豌豆荚</li>
<li>在豌豆荚中搜索两步路，下载 v6.7.2版本</li>
<li>在应用商店中关闭自动更新</li>
</ol>
<h2 id="沉浸式登山">沉浸式登山</h2>
<ul>
<li><a href="https://space.bilibili.com/480567097/?spm_id_from=333.999.0.0">Mew_喵喵</a></li>
<li><a href="https://space.bilibili.com/441981477/?spm_id_from=333.999.0.0">秘密仙人掌</a></li>
</ul>
<h2 id="登山装备清单">登山装备清单</h2>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/mountaineeringEquipment.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/mountaineeringEquipment.png" alt="mountaineeringEquipment"  />
</a>
</div>

</p>
<h1 id="run">Run</h1>
<h2 id="衣物穿脱">衣物穿脱</h2>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/RunningOnAndOff.jpg">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/RunningOnAndOff.jpg" alt="RunningOnAndOff"  />
</a>
</div>

</p>
<div style="font-size:14px;color:#C0C0C0;text-decoration:underline">图片来自于知乎博主@阿甘跑步，版权归原作者所有</div> 
<h2 id="配速表">配速表</h2>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/speedTable.jpg">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/speedTable.jpg" alt="speedTable"  />
</a>
</div>

</p>
]]></content:encoded>
    </item>
    
    
    
  </channel>
</rss>
