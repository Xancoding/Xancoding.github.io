<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; on Xan&#39;s Blog</title>
    <link>https://xancoding.cn/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 24 Apr 2023 14:17:47 +0800</lastBuildDate><atom:link href="https://xancoding.cn/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Sort Function &amp; Priority Queue</title>
      <link>https://xancoding.cn/posts/2023-04-24-14-17-47/</link>
      <pubDate>Mon, 24 Apr 2023 14:17:47 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/2023-04-24-14-17-47/</guid>
      <description>&lt;p&gt;当使用 &lt;code&gt;sort函数&lt;/code&gt; 和 &lt;code&gt;Priority_queue优先队列&lt;/code&gt; 时， &lt;code&gt;Container&lt;/code&gt; 中的元素会被自动排序&lt;/p&gt;
&lt;p&gt;当待排列的元素为一个对象时，我们既可以通过自定义比较函数，也可以通过重载运算符来达到目的。&lt;/p&gt;
&lt;p&gt;下面我们对 Object 的讨论都基于下述 &lt;code&gt;Person&lt;/code&gt; 类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Person {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt;:  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	string name;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; age;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	Person(string name, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; age) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;-&amp;gt;name = name;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;-&amp;gt;age = age;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;sort函数&#34;&gt;Sort函数&lt;/h1&gt;
&lt;h2 id=&#34;重载运算符&#34;&gt;重载运算符&lt;/h2&gt;
&lt;p&gt;当 &lt;code&gt;Container&lt;/code&gt; 中的元素是基本数据类型时，使用 &lt;code&gt;less&lt;/code&gt; 是升序排序，使用 &lt;code&gt;greater&lt;/code&gt; 是降序排序&lt;/p&gt;
&lt;p&gt;下面👇对元素为 Object 的情况作详细说明&lt;/p&gt;
&lt;h3 id=&#34;less&#34;&gt;less&lt;/h3&gt;
&lt;p&gt;sort函数在默认情况下使用&lt;code&gt;std::less&lt;/code&gt;作为比较函数类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sort(people.begin(), people.end());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;而&lt;code&gt;std::less&lt;/code&gt;需要重载小于号&lt;code&gt;&amp;lt;&lt;/code&gt;运算符：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Person {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;operator&lt;/span&gt;&amp;lt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; Person &amp;amp;p) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;-&amp;gt;age &amp;lt; p.age;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过上述的重载后，&lt;code&gt;sort&lt;/code&gt; 会将元素按 &lt;code&gt;age&lt;/code&gt; 升序排序&lt;/p&gt;
&lt;p&gt;括号内的 &lt;code&gt;const&lt;/code&gt; 表示其修饰的参数为常量，在函数内不能修改该参数&lt;/p&gt;
&lt;p&gt;括号外的 &lt;code&gt;const&lt;/code&gt; 表示该函数为常成员函数，在函数内不能需修改成员变量&lt;/p&gt;
&lt;p&gt;如果我们把函数体内的 &lt;code&gt;&amp;lt;&lt;/code&gt; 替换为 &lt;code&gt;&amp;gt;&lt;/code&gt;，元素将会按 &lt;code&gt;age&lt;/code&gt; 降序排序&lt;/p&gt;
&lt;h3 id=&#34;greater&#34;&gt;greater&lt;/h3&gt;
&lt;p&gt;还可以使用&lt;code&gt;std::greater&lt;/code&gt;作为比较函数类&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sort(people.begin(), people.end(), greater&amp;lt;&amp;gt;());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;那么就需要重载大于号&lt;code&gt;&amp;gt;&lt;/code&gt;运算符：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Person {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;operator&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; Person &amp;amp;p) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;-&amp;gt;age &amp;gt; p.age;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过上述的重载后，&lt;code&gt;sort&lt;/code&gt; 会将元素按 &lt;code&gt;age&lt;/code&gt; 降序排序&lt;/p&gt;
&lt;h2 id=&#34;自定义比较函数&#34;&gt;自定义比较函数&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; cmp(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; Person &amp;amp;p1, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; Person &amp;amp;p2) {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; p1.age &amp;lt; p2.age;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sort(people.begin(), people.end(), cmp);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过上述操作后，元素将会按 &lt;code&gt;age&lt;/code&gt; 升序排序&lt;/p&gt;
&lt;h1 id=&#34;priority_queue堆优先队列&#34;&gt;Priority_queue堆优先队列&lt;/h1&gt;
&lt;p&gt;堆是一种数据结构，可以用数组或树实现，常用于实现优先队列、排序算法等。&lt;/p&gt;
&lt;p&gt;优先队列（priority queue）就是堆（heap）的一种应用。&lt;/p&gt;
&lt;p&gt;C++中的优先队列实现就是堆优先队列，底层使用堆来实现。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;std::priority_queue&lt;/code&gt;是一个模板类，它的模板参数有三个，分别是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;T&lt;/code&gt;：指定队列中存储的元素类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Container&lt;/code&gt;：指定用于存储元素的容器类型，默认是&lt;code&gt;std::vector&amp;lt;T&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compare&lt;/code&gt;：指定用于比较元素优先级的比较函数类型，默认是&lt;code&gt;std::less&amp;lt;T&amp;gt;&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在C++中，优先队列可以通过指定比较函数来控制是使用大根堆还是小根堆。&lt;/p&gt;
&lt;p&gt;默认情况下，使用 &lt;code&gt;std::less&amp;lt;&amp;gt;&lt;/code&gt; 作为比较函数，则意味着使用大根堆，最大值会优先出队，大根堆(Max Heap)是一种完全二叉树,它满足两个特性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;任意一个节点的值都大于等于其左右子节点的值&lt;/li&gt;
&lt;li&gt;根节点的值最大&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果使用 &lt;code&gt;std::greater&amp;lt;&amp;gt;&lt;/code&gt; 作为比较函数，则意味着使用小根堆，最小值会优先出队&lt;/p&gt;
&lt;h2 id=&#34;常用操作&#34;&gt;常用操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pq.push(elem)&lt;/code&gt;：入队&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pq.pop()&lt;/code&gt;：出队&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pq.top()&lt;/code&gt;：返回堆顶元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重载运算符-1&#34;&gt;重载运算符&lt;/h2&gt;
&lt;h3 id=&#34;less-1&#34;&gt;less&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;priority_queue&amp;lt;T&amp;gt; pq&lt;/code&gt;：默认构造大根堆，需要重载 &lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Person {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;operator&lt;/span&gt;&amp;lt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; Person &amp;amp;p) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;-&amp;gt;age &amp;lt; p.age;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;大根堆，最大值会先出队&lt;/p&gt;
&lt;h3 id=&#34;greater-1&#34;&gt;greater&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;priority_queue&amp;lt;T, vector&amp;lt;T&amp;gt;, greater&amp;lt;&amp;gt;&amp;gt; pq&lt;/code&gt;：构造最小堆，需要重载 &lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Person {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;operator&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; Person &amp;amp;p) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;-&amp;gt;age &amp;gt; p.age;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;小根堆，最小值会先出队&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p>当使用 <code>sort函数</code> 和 <code>Priority_queue优先队列</code> 时， <code>Container</code> 中的元素会被自动排序</p>
<p>当待排列的元素为一个对象时，我们既可以通过自定义比较函数，也可以通过重载运算符来达到目的。</p>
<p>下面我们对 Object 的讨论都基于下述 <code>Person</code> 类</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Person {  
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">public</span>:  
</span></span><span style="display:flex;"><span>	string name;  
</span></span><span style="display:flex;"><span>	<span style="color:#fff;font-weight:bold">int</span> age;  
</span></span><span style="display:flex;"><span>	Person(string name, <span style="color:#fff;font-weight:bold">int</span> age) {  
</span></span><span style="display:flex;"><span>		<span style="color:#fff;font-weight:bold">this</span>-&gt;name = name;  
</span></span><span style="display:flex;"><span>		<span style="color:#fff;font-weight:bold">this</span>-&gt;age = age;  
</span></span><span style="display:flex;"><span>	}  
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><h1 id="sort函数">Sort函数</h1>
<h2 id="重载运算符">重载运算符</h2>
<p>当 <code>Container</code> 中的元素是基本数据类型时，使用 <code>less</code> 是升序排序，使用 <code>greater</code> 是降序排序</p>
<p>下面👇对元素为 Object 的情况作详细说明</p>
<h3 id="less">less</h3>
<p>sort函数在默认情况下使用<code>std::less</code>作为比较函数类</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>sort(people.begin(), people.end());
</span></span></code></pre></div><p>而<code>std::less</code>需要重载小于号<code>&lt;</code>运算符：</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Person {
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#fff;font-weight:bold">bool</span> <span style="color:#fff;font-weight:bold">operator</span>&lt;(<span style="color:#fff;font-weight:bold">const</span> Person &amp;p) <span style="color:#fff;font-weight:bold">const</span> {  
</span></span><span style="display:flex;"><span>		<span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">this</span>-&gt;age &lt; p.age;  
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>经过上述的重载后，<code>sort</code> 会将元素按 <code>age</code> 升序排序</p>
<p>括号内的 <code>const</code> 表示其修饰的参数为常量，在函数内不能修改该参数</p>
<p>括号外的 <code>const</code> 表示该函数为常成员函数，在函数内不能需修改成员变量</p>
<p>如果我们把函数体内的 <code>&lt;</code> 替换为 <code>&gt;</code>，元素将会按 <code>age</code> 降序排序</p>
<h3 id="greater">greater</h3>
<p>还可以使用<code>std::greater</code>作为比较函数类</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>sort(people.begin(), people.end(), greater&lt;&gt;());
</span></span></code></pre></div><p>那么就需要重载大于号<code>&gt;</code>运算符：</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Person {
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#fff;font-weight:bold">bool</span> <span style="color:#fff;font-weight:bold">operator</span>&gt;(<span style="color:#fff;font-weight:bold">const</span> Person &amp;p) <span style="color:#fff;font-weight:bold">const</span> {  
</span></span><span style="display:flex;"><span>		<span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">this</span>-&gt;age &gt; p.age;  
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>经过上述的重载后，<code>sort</code> 会将元素按 <code>age</code> 降序排序</p>
<h2 id="自定义比较函数">自定义比较函数</h2>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">bool</span> cmp(<span style="color:#fff;font-weight:bold">const</span> Person &amp;p1, <span style="color:#fff;font-weight:bold">const</span> Person &amp;p2) {  
</span></span><span style="display:flex;"><span>	<span style="color:#fff;font-weight:bold">return</span> p1.age &lt; p2.age;  
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>sort(people.begin(), people.end(), cmp);
</span></span></code></pre></div><p>经过上述操作后，元素将会按 <code>age</code> 升序排序</p>
<h1 id="priority_queue堆优先队列">Priority_queue堆优先队列</h1>
<p>堆是一种数据结构，可以用数组或树实现，常用于实现优先队列、排序算法等。</p>
<p>优先队列（priority queue）就是堆（heap）的一种应用。</p>
<p>C++中的优先队列实现就是堆优先队列，底层使用堆来实现。</p>
<p><code>std::priority_queue</code>是一个模板类，它的模板参数有三个，分别是：</p>
<ol>
<li><code>T</code>：指定队列中存储的元素类型。</li>
<li><code>Container</code>：指定用于存储元素的容器类型，默认是<code>std::vector&lt;T&gt;</code>。</li>
<li><code>Compare</code>：指定用于比较元素优先级的比较函数类型，默认是<code>std::less&lt;T&gt;</code>。</li>
</ol>
<p>在C++中，优先队列可以通过指定比较函数来控制是使用大根堆还是小根堆。</p>
<p>默认情况下，使用 <code>std::less&lt;&gt;</code> 作为比较函数，则意味着使用大根堆，最大值会优先出队，大根堆(Max Heap)是一种完全二叉树,它满足两个特性:</p>
<ol>
<li>任意一个节点的值都大于等于其左右子节点的值</li>
<li>根节点的值最大</li>
</ol>
<p>如果使用 <code>std::greater&lt;&gt;</code> 作为比较函数，则意味着使用小根堆，最小值会优先出队</p>
<h2 id="常用操作">常用操作</h2>
<ul>
<li><code>pq.push(elem)</code>：入队</li>
<li><code>pq.pop()</code>：出队</li>
<li><code>pq.top()</code>：返回堆顶元素</li>
</ul>
<h2 id="重载运算符-1">重载运算符</h2>
<h3 id="less-1">less</h3>
<ul>
<li><code>priority_queue&lt;T&gt; pq</code>：默认构造大根堆，需要重载 <code>&lt;</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Person {
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#fff;font-weight:bold">bool</span> <span style="color:#fff;font-weight:bold">operator</span>&lt;(<span style="color:#fff;font-weight:bold">const</span> Person &amp;p) <span style="color:#fff;font-weight:bold">const</span> {  
</span></span><span style="display:flex;"><span>		<span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">this</span>-&gt;age &lt; p.age;  
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>大根堆，最大值会先出队</p>
<h3 id="greater-1">greater</h3>
<ul>
<li><code>priority_queue&lt;T, vector&lt;T&gt;, greater&lt;&gt;&gt; pq</code>：构造最小堆，需要重载 <code>&gt;</code></li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Person {
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#fff;font-weight:bold">bool</span> <span style="color:#fff;font-weight:bold">operator</span>&gt;(<span style="color:#fff;font-weight:bold">const</span> Person &amp;p) <span style="color:#fff;font-weight:bold">const</span> {  
</span></span><span style="display:flex;"><span>		<span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">this</span>-&gt;age &gt; p.age;  
</span></span><span style="display:flex;"><span>	}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>小根堆，最小值会先出队</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
