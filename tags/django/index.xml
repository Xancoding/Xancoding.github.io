<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Django on Xan&#39;s Blog</title>
    <link>https://xancoding.cn/tags/django/</link>
    <description>Recent content in Django on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 29 Oct 2022 18:23:59 +0800</lastBuildDate><atom:link href="https://xancoding.cn/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AcWing Django 框架课</title>
      <link>https://xancoding.cn/posts/acwdjango/</link>
      <pubDate>Sat, 29 Oct 2022 18:23:59 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwdjango/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_django/&#34;&gt;AcWing Django 框架课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/punch_the_clock/72/&#34;&gt;AcWing Django 框架课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;django-项目创建&#34;&gt;Django 项目创建&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/72577/&#34;&gt;2.1上课笔记 | 栎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73097/&#34;&gt;2.1上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;启动初始项目&#34;&gt;启动初始项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;django-admin startproject acapp&lt;/code&gt;：在当前目录下创建名为&lt;code&gt;acapp&lt;/code&gt;的&lt;code&gt;django&lt;/code&gt;项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 manage.py runserver 0.0.0.0:8000&lt;/code&gt;：启动项目
&lt;ol&gt;
&lt;li&gt;打开&lt;code&gt;settings.py&lt;/code&gt;，找到&lt;code&gt;ALLOWED_HOSTS=[]&lt;/code&gt;，修改成&lt;code&gt;ALLOWED_HOSTS=[&amp;quot;自己的服务器的公网IP&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;自己的服务器公网IP:8000&lt;/code&gt; 打开Django页面&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建管理员登录页面&#34;&gt;创建管理员登录页面&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在一级&lt;code&gt;acapp&lt;/code&gt;文件夹下，&lt;code&gt;python3 manage.py startapp XXX&lt;/code&gt;，&lt;code&gt;XXX&lt;/code&gt;是可以自定义的app名，这里用&lt;code&gt;game&lt;/code&gt;示例，这时候会多一个文件夹&lt;code&gt;game&lt;/code&gt;，树形结构如图：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- game
|   |-- __init__.py
|   |-- admin.py          # 管理员页面
|   |-- apps.py           # 用的不多
|   |-- migrations        # 存储数据库
|   |   `-- __init__.py
|   |-- models.py         # 定义网站里的数据库表
|   |-- tests.py
|   `-- views.py          # 视图，即函数
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;python3 manage.py migrate&lt;/code&gt;：将所有修改更新进数据库&lt;/li&gt;
&lt;li&gt;创建一个 &lt;strong&gt;管理员用户&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python3 manage.py createsuperuser
&amp;gt; Username (leave blank to use &amp;#39;acs&amp;#39;): admin
&amp;gt; Email address: 
&amp;gt; Password: 123456
&amp;gt; Password (again): 123456
&amp;gt; Superuser created successfully.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后利用该 &lt;strong&gt;管理员用户&lt;/strong&gt; 登录 &lt;code&gt;admin&lt;/code&gt; 页面，即可成功登陆&lt;/p&gt;
&lt;h2 id=&#34;创建用户登录页面&#34;&gt;创建用户登录页面&lt;/h2&gt;
&lt;h3 id=&#34;game-下的各个文件作用&#34;&gt;&lt;code&gt;game&lt;/code&gt; 下的各个文件作用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;templates&lt;/code&gt;目录：管理 &lt;code&gt;html&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urls&lt;/code&gt;目录：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views&lt;/code&gt;目录：管理 &lt;code&gt;http&lt;/code&gt; 函数（接收浏览器请求，返回字符串至浏览器）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;models&lt;/code&gt;目录：管理数据库数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;目录：管理静态文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;consumers&lt;/code&gt;目录：管理&lt;code&gt;websocket&lt;/code&gt;函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实现一个路由重定向&#34;&gt;&lt;strong&gt;实现一个路由重定向&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; 输入网址 -&amp;gt; &lt;code&gt;acapp.urls&lt;/code&gt; -&amp;gt; &lt;code&gt;game.urls&lt;/code&gt; -&amp;gt; &lt;code&gt;game.views.index&lt;/code&gt; -&amp;gt; 展示页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;game.views&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;HttpResponse()&lt;/code&gt;内部使用&lt;code&gt;html&lt;/code&gt;的语法，返回的响应就直接用这个字符串作为页面，转换成&lt;code&gt;html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.http import HttpResponse

def index(request):
    line1 = &amp;#39;&amp;lt;h1 style=&amp;#34;text-align: center&amp;#34;&amp;gt; 第一个网页 &amp;lt;/h1&amp;gt;&amp;#39;
    return HttpResponse(line1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;game.urls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;path(&#39;PATH&#39;, function, name)&lt;/code&gt;的含义是，在用户访问网站的时候，如果是&lt;code&gt;网站/game/PATH&lt;/code&gt;，就会调用&lt;code&gt;function&lt;/code&gt;，名字为&lt;code&gt;name&lt;/code&gt;，这是在&lt;code&gt;/game/&lt;/code&gt;目录下的调用，所以这个&lt;code&gt;PATH&lt;/code&gt;是在&lt;code&gt;/game/&lt;/code&gt;的基础上的&lt;strong&gt;相对路径&lt;/strong&gt;，所以他的&lt;strong&gt;绝对路径&lt;/strong&gt;是&lt;code&gt;网站/game/PATH&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.urls import path
from game.views import index

urlpatterns = [ 
    path(&amp;#34;&amp;#34;, index, name=&amp;#34;index&amp;#34;),
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;acapp.urls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;path(&#39;PATH&#39;, include(&#39;game.urls&#39;))&lt;/code&gt;的含义是：在用户访问网站的时候，如果是&lt;code&gt;网站/PATH&lt;/code&gt;，就会走到&lt;code&gt;/game/urls&lt;/code&gt;，并根据&lt;code&gt;/game/urls.py&lt;/code&gt;来跑路由，就是说，用户在访问&lt;code&gt;网站/&lt;/code&gt;的时候，由于此时调用的函数是&lt;code&gt;include(&#39;game.urls&#39;)&lt;/code&gt;，所以访问&lt;code&gt;网站/&lt;/code&gt;相当于根据&lt;code&gt;game/urls&lt;/code&gt;访问&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [ 
    path(&amp;#39;&amp;#39;, include(&amp;#39;game.urls&amp;#39;)),
    path(&amp;#39;admin/&amp;#39;, admin.site.urls),
] 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后直接打开 &lt;code&gt;ip:socket&lt;/code&gt; 可以直接显示 &lt;code&gt;index&lt;/code&gt; 返回的网页&lt;/p&gt;
&lt;h1 id=&#34;创建菜单界面&#34;&gt;创建菜单界面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3199626/&#34;&gt;3. 创建菜单界面 | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73121/&#34;&gt;3.1 上课笔记 | 大家好今天是&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73707/&#34;&gt;3.1 上课笔记 | 栎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;构建项目框架&#34;&gt;构建项目框架&lt;/h2&gt;
&lt;h3 id=&#34;项目系统设计&#34;&gt;项目系统设计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt;：菜单页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playground&lt;/code&gt;：游戏界面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;settings&lt;/code&gt;：设置界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;项目文件结构&#34;&gt;项目文件结构&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
|-- README.md
|-- acapp
|   |-- __init__.py    # 文件夹在加上 __init__.py 文件后，python 便可以通过 import 来引用该文件夹
|   |-- asgi.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
|-- db.sqlite3
|-- game
|   |-- __init__.py
|   |-- admin.py
|   |-- apps.py
|   |-- migrations
|   |   `-- __init__.py
|   |-- models
|   |   `-- __init__.py
|   |-- static
|   |   |-- css
|   |   |   `-- game.css    # 一般一个工程，只有一个 css 文件就足够了
|   |   |-- image
|   |   |   `-- menu
|   |   |       `-- background.gif
|   |   `-- js
|   |       |-- dist
|   |       |   `-- game.js
|   |       `-- src
|   |           `-- zbase.js    # 总的 js 文件，命名以 z 开头会自动在字典序最后
|   |-- templates
|   |   `-- multiends
|   |       `-- web.html
|   |-- tests.py
|   |-- urls
|   |   |-- __init__.py
|   |   |-- index.py
|   |   |-- menu
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   |-- playground
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   `-- settings
|   |       |-- __init__.py
|   |       `-- index.py
|   `-- views
|       |-- __init__.py
|       |-- index.py
|       |-- menu
|       |   `-- __init__.py
|       |-- playground
|       |   `-- __init__.py
|       `-- settings
|           `-- __init__.py
|-- manage.py
`-- scripts
    `-- compress_game_js.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;js-文件管理&#34;&gt;&lt;code&gt;js&lt;/code&gt; 文件管理&lt;/h4&gt;
&lt;p&gt;一般一个工程会有很多个 &lt;code&gt;.js&lt;/code&gt; 源文件，为了加快网络的传输，也为了每次写新的 &lt;code&gt;.js&lt;/code&gt; 文件不用每个 &lt;code&gt;html&lt;/code&gt; 都额外引入一次&lt;/p&gt;
&lt;p&gt;考虑用一个 &lt;code&gt;src&lt;/code&gt; 源文件夹来存储所有的 &lt;code&gt;.js&lt;/code&gt; 源文件&lt;/p&gt;
&lt;p&gt;然后用 &lt;code&gt;dist&lt;/code&gt; 文件夹来存放由 &lt;code&gt;src&lt;/code&gt; 下所有源文件整合生成的一个目标 &lt;code&gt;.js&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;这样既实现了快速传输的好处，也方便了后续编写 &lt;code&gt;html&lt;/code&gt; 文件时，引入 &lt;code&gt;.js&lt;/code&gt; 的便利&lt;/p&gt;
&lt;p&gt;创建一个脚本实现上述 &lt;strong&gt;整合&lt;/strong&gt; 的功能
&lt;code&gt;~/acapp/scripts/compress_game_js.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &amp;#39;*.js&amp;#39; | sort | xargs cat &amp;gt; ${JS_PATH_DIST}game.js
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;html-文件管理&#34;&gt;&lt;code&gt;html&lt;/code&gt; 文件管理&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;templates&lt;/code&gt; 文件夹下创建 &lt;code&gt;menu&lt;/code&gt;、&lt;code&gt;playground&lt;/code&gt;、&lt;code&gt;settings&lt;/code&gt;、&lt;code&gt;multiends&lt;/code&gt; 四个文件夹，用于存储三个模块和终端的 &lt;code&gt;html&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;multiends&lt;/code&gt; 下创建 &lt;code&gt;web.html&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% load static %}
&amp;lt;!-- Django 中引入全局setting里的变量 static 的语法--&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.acwing.com/static/jquery-ui-dist/jquery-ui.min.css&amp;#34;&amp;gt;
    &amp;lt;script src=&amp;#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- 上述两句引入 jQuery 库 --&amp;gt;
    &amp;lt;!-- 使用引入的变量 static 的语法如下 --&amp;gt;
    &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;{% static &amp;#39;css/game.css&amp;#39; %}&amp;#34;&amp;gt;
    &amp;lt;script src=&amp;#34;{% static &amp;#39;js/dist/game.js&amp;#39; %}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- 分别引入 css 文件和总的 js 文件 --&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body style=&amp;#34;margin: 0&amp;#34;&amp;gt;
    &amp;lt;div id=&amp;#34;ac_game_12345678&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;views-视图管理&#34;&gt;&lt;code&gt;views&lt;/code&gt; 视图管理&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;views&lt;/code&gt; 文件夹下新建三个模块的视图文件夹&lt;/p&gt;
&lt;p&gt;写一个 &lt;code&gt;index.py&lt;/code&gt; 文件，目的是在 &lt;code&gt;web&lt;/code&gt; 端被访问时，返回上面写的 &lt;code&gt;web.html&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.shortcuts import render

def index(request):
  return render(request, &amp;#34;multiends/web.html&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;urls-路由管理&#34;&gt;&lt;code&gt;urls&lt;/code&gt; 路由管理&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;                                     /-- &amp;#34;&amp;#34; -- index
                                    / -- &amp;#34;menu/&amp;#34; -- menu.index
             / &amp;#34;&amp;#34; --&amp;gt; &amp;#34;game.url&amp;#34; --&amp;gt; 
            /                       \ -- &amp;#34;playground/&amp;#34; -- playground.index
id:scoket -&amp;gt;                         \-- &amp;#34;settings/&amp;#34; -- settings.index
            \
             \ &amp;#34;/admin&amp;#34; -- 到达管理员页面
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;~/acapp/acapp/urls.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
  path(&amp;#39;&amp;#39;, include(&amp;#39;game.urls.index&amp;#39;)),
  path(&amp;#39;admin/&amp;#39;, admin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;~/acapp/game/urls/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.urls import path, include
from game.views.index import index

urlpatterns = [ 
    path(&amp;#34;&amp;#34;, index, name=&amp;#34;index&amp;#34;),
    path(&amp;#34;menu/&amp;#34;, include(&amp;#34;game.urls.menu.index&amp;#34;)),
    path(&amp;#34;playground/&amp;#34;, include(&amp;#34;game.urls.playground.index&amp;#34;)),
    path(&amp;#34;settings/&amp;#34;, include(&amp;#34;game.urls.settings.index&amp;#34;))
]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;网页渲染流程&#34;&gt;&lt;strong&gt;网页渲染流程&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;根据用户的链接，首先进入&lt;code&gt;acapp/urls.py&lt;/code&gt;，根据&lt;code&gt;path&lt;/code&gt;再进入&lt;code&gt;game/urls/index.py&lt;/code&gt;，再根据&lt;code&gt;path&lt;/code&gt;进入下一层&lt;code&gt;url&lt;/code&gt;或调用相对应的&lt;code&gt;views&lt;/code&gt;中的&lt;code&gt;index.py&lt;/code&gt;函数，函数接收参数，在网页端渲染&lt;code&gt;templates/multiends&lt;/code&gt;下的&lt;code&gt;web.html&lt;/code&gt;，&lt;code&gt;html&lt;/code&gt;中有&lt;code&gt;JS&lt;/code&gt;执行&lt;/p&gt;
&lt;p&gt;注意：本项目为前后端分离，即通过&lt;code&gt;JS&lt;/code&gt;在&lt;code&gt;client&lt;/code&gt;中渲染项目(动态生成页面)，而不是在&lt;code&gt;server&lt;/code&gt;渲染项目&lt;/p&gt;
&lt;h3 id=&#34;修改全局配置&#34;&gt;修改全局配置&lt;/h3&gt;
&lt;h4 id=&#34;设置时区&#34;&gt;设置时区&lt;/h4&gt;
&lt;p&gt;修改项目的 &lt;strong&gt;UTC&lt;/strong&gt; 时间为 &lt;strong&gt;CN&lt;/strong&gt; 时间&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39; # 原来默认是 UTC
******
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;添加配置文件&#34;&gt;添加配置文件&lt;/h4&gt;
&lt;p&gt;将新创建的 &lt;code&gt;game&lt;/code&gt; 下的 &lt;code&gt;apps.py&lt;/code&gt; 中的 &lt;code&gt;GameConfig&lt;/code&gt; 加到 &lt;code&gt;settings.py&lt;/code&gt; 下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
INSTALLED_APPS = [
  &amp;#39;game.apps.GameConfig&amp;#39;,
  ......
]
******
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明将静态文件路径 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 和 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
import os

......

STATIC_ROOT = os.path.join(BASE_DIR, &amp;#39;static&amp;#39;)
STATIC_URL = &amp;#39;/static/&amp;#39;

MEDIA_ROOT = os.path.join(BASE_DIR, &amp;#39;media&amp;#39;)
MEDIA_URL = &amp;#39;/media/&amp;#39;
******
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建菜单-menu-界面&#34;&gt;创建菜单 &lt;code&gt;menu&lt;/code&gt; 界面&lt;/h2&gt;
&lt;h3 id=&#34;搭建菜单-menu-界面的框架&#34;&gt;搭建菜单 &lt;code&gt;menu&lt;/code&gt; 界面的框架&lt;/h3&gt;
&lt;p&gt;我们采用的 &lt;strong&gt;前后端分离式&lt;/strong&gt; 开发，所有的 &lt;strong&gt;html&lt;/strong&gt; 渲染都要求在前端完成&lt;/p&gt;
&lt;p&gt;开发流程就是，先在 &lt;strong&gt;html&lt;/strong&gt; 里创建好一个有 &lt;strong&gt;id&lt;/strong&gt; 的 &lt;strong&gt;div&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后利用 &lt;strong&gt;js&lt;/strong&gt; 文件，捕获到该 &lt;strong&gt;div&lt;/strong&gt;，并进行 &lt;strong&gt;渲染&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/templates/multiends/web.html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
    &amp;lt;div id=&amp;#34;ac_game_12345678&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGame {
    constructor(id) {
        this.id = id; 
        this.$ac_game = $(&amp;#39;#&amp;#39; + id);
        this.menu = new AcGameMenu(this);
    }   
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(` 
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;css/game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&amp;#39;/static/image/menu/background.gif&amp;#39;);
    background-size: 100% 100%;
    user-select: none;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 &lt;strong&gt;代码逻辑&lt;/strong&gt; 如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt; 页面执行到 &lt;code&gt;js&lt;/code&gt; 代码，利用 &lt;code&gt;AcGame类&lt;/code&gt; 创建对象 &lt;code&gt;ac_game&lt;/code&gt; 同时传递参数 &lt;code&gt;div&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AcGame&lt;/code&gt; 开始执行构造函数，在构造函数中，捕获 &lt;code&gt;html&lt;/code&gt; 标签，并利用 &lt;code&gt;AcGameMenu类&lt;/code&gt; 创建对象 &lt;code&gt;menu&lt;/code&gt;，并将整个对象作为参数下传&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AcGameMenu&lt;/code&gt; 开始执行构造函数，然后创建 &lt;code&gt;html&lt;/code&gt; 代码，加到捕获到的 &lt;code&gt;html&lt;/code&gt; 代码下&lt;/li&gt;
&lt;li&gt;最终成功渲染出背景图片&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;设置菜单-menu-页面的内容&#34;&gt;设置菜单 &lt;code&gt;menu&lt;/code&gt; 页面的内容&lt;/h3&gt;
&lt;p&gt;主要内容就是在主页面中，显示：单人模式、多人模式、设置，三个按钮的选项
&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
    &amp;lt;div class=&amp;#34;ac-game-menu-field&amp;#34;&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&amp;#34;&amp;gt;
            单人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&amp;#34;&amp;gt;
            多人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&amp;#34;&amp;gt;
            设置
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-single-mode&amp;#39;);
        this.$multi_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-multi-mode&amp;#39;);
        this.$settings_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-settings-mode&amp;#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;css/game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&amp;#39;/static/image/menu/background.gif&amp;#39;);
    background-size: 100% 100%;
    user-select: none;
}
.ac-game-menu-field {
    width: 20vw;
    position: relative;
    top: 40vh;
    left: 19vh;
}
.ac-game-menu-field-item {
    height: 7vh;
    width: 18vw;
    color: white;
    font-size: 6vh;
    font-style: italic;
    padding: 2vh;
    margin: 1vh 0;
    cursor: pointer;
    text-align: center;
    background-color: rgba(39, 21, 28, 0.6);
    border-radius: 10px;
    letter-spacing: 0.5vw;
}
.ac-game-menu-field-item:hover {
    transform: scale(1.2);
    transition: 100ms;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;添加-单人模式-监听函数--打开游戏界面-功能&#34;&gt;添加 &amp;lsquo;单人模式&amp;rsquo; 监听函数 —— 打开游戏界面 功能&lt;/h3&gt;
&lt;p&gt;这里要实现的 &lt;strong&gt;逻辑&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;点击 &amp;lsquo;单人模式&amp;rsquo; 按钮触发 &lt;code&gt;click&lt;/code&gt; 事件，随即触发监听函数，开始执行&lt;/li&gt;
&lt;li&gt;关闭 &lt;code&gt;menu&lt;/code&gt; 页面&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;playground&lt;/code&gt; 页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，我们先简易的实现一个 &lt;code&gt;playground&lt;/code&gt; 页面，方便调试该功能
&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    constructor(root) {
        this.root = root;
        this.$playground = $(`&amp;lt;div&amp;gt;游戏界面&amp;lt;/div&amp;gt;`);

        this.hide();
        this.root.$ac_game.append(this.$playground);

        this.start();
    }
    start() {

    }
    show() {    //打开 playground 界面
        this.$playground.show();
    }
    hide() {    //关闭 playground 界面
        this.$playground.hide();
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在实现监听函数功能之前，先在 &lt;code&gt;/src/zbase.js&lt;/code&gt; 即主 &lt;code&gt;js&lt;/code&gt; 文件下，利用 &lt;code&gt;AcGamePlayground&lt;/code&gt; 类创建好 &lt;code&gt;playground&lt;/code&gt; 对象&lt;/p&gt;
&lt;p&gt;这样我们就能在前端，渲染出两个界面了，分别是：&lt;code&gt;menu&lt;/code&gt; 和 &lt;code&gt;playground&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGame {
    constructor(id) {
        this.id = id;
        this.$ac_game = $(&amp;#39;#&amp;#39; + id);
        this.menu = new AcGameMenu(this);
        // 把 playground 对象也建好，这样我们就同时有两个界面了
        this.playground = new AcGamePlayground(this);

        this.start();
    }                    
    start() {

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，我们开始实现 &lt;code&gt;ac-game-menu-field-item-single-mode&lt;/code&gt; 标签的 &lt;code&gt;click&lt;/code&gt; 事件的监听函数&lt;/p&gt;
&lt;p&gt;其功能之前讲过了，就是关闭 &lt;code&gt;menu&lt;/code&gt; 页面，打开 &lt;code&gt;playground&lt;/code&gt; 页面&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
    &amp;lt;div class=&amp;#34;ac-game-menu-field&amp;#34;&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&amp;#34;&amp;gt;
            单人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&amp;#34;&amp;gt;
            多人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&amp;#34;&amp;gt;
            设置
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-single-mode&amp;#39;);
        this.$multi_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-multi-mode&amp;#39;);
        this.$settings_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-settings-mode&amp;#39;);

        this.start();
    }
    start() {
        this.add_listening_events();
    }
    add_listening_events() {
        let outer = this;
        this.$single_mode.click(function(){
            outer.hide();   // 关闭主页面
            outer.root.playground.show();   // 打开游戏界面
        });
    }

    show() {    //显示menu界面
        this.$menu.show();
    }
    hide() {    //隐藏menu界面
        this.$menu.hide();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;创建游戏界面&#34;&gt;创建游戏界面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79181/&#34;&gt;4.1 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;若修改&lt;code&gt;static文件夹&lt;/code&gt;下的相关文件，需在&lt;code&gt;~/acapp&lt;/code&gt;下执行&lt;code&gt;./scripts/compress_game_js.sh&lt;/code&gt;来打包文件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前端的模块化引入&#34;&gt;前端的模块化引入&lt;/h2&gt;
&lt;p&gt;由于在 &lt;code&gt;html&lt;/code&gt; 代码部分，是将整个 &lt;code&gt;game.js&lt;/code&gt; 文件引入&lt;/p&gt;
&lt;p&gt;这样会导致在 &lt;code&gt;game.js&lt;/code&gt; 中定义的变量，会变成整个网页的 &lt;strong&gt;全局变量&lt;/strong&gt;（之后可能会引起变量重名的诸多问题）&lt;/p&gt;
&lt;p&gt;因此，我们考虑使用 &lt;strong&gt;模块化引入&lt;/strong&gt; 的功能，让网页只引入在 &lt;code&gt;html&lt;/code&gt; 中需要的部分&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;web.html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- 首先，先删掉上面整个引入 game.js 的部分 --&amp;gt;
&amp;lt;!-- 然后，下方创建对象的部分，先使用模块化引入 --&amp;gt;
......
    &amp;lt;script type=&amp;#34;module&amp;#34;&amp;gt;
        import {AcGame} from &amp;#34;{% static &amp;#39;js/dist/game.js&amp;#39; %}&amp;#34;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此外，还有修改引入的类，在前面加上 &lt;code&gt;export&lt;/code&gt;，如下修改 &lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export class AcGame {
    ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，在全局中，只会出现引入的模块，其他的 &lt;code&gt;.js&lt;/code&gt; 代码不会出现在全局中&lt;/p&gt;
&lt;h2 id=&#34;构建游戏界面框架&#34;&gt;构建游戏界面框架&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;static/js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;......
    this.$playground = $(`&amp;lt;div class=&amp;#34;ac-game-playground&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;`);
......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;......
.ac-game-playground {
    height: 100%;
    width: 100%;
    user-select: none;  // 禁用右键弹菜单
} 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;实现游戏引擎框架&#34;&gt;&lt;strong&gt;实现游戏引擎框架&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;游戏中，物体在移动，其实现原理是：每一个动作都会渲染多张图片出来，然后图片快速的切换，从而实现动的过程&lt;/p&gt;
&lt;p&gt;因此，需要先实现一个游戏引擎的基类 &lt;code&gt;AcGameObject&lt;/code&gt; ，使得每帧能渲染一张图片出来&lt;/p&gt;
&lt;p&gt;该基类需要具备的功能有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;start()&lt;/code&gt; 在游戏开始的第一帧时需要执行的任务（一般是创建对象）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update()&lt;/code&gt; 在游戏开始后的每一帧均会执行的任务（一般是渲染当前对象的各种状态）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_destroy()&lt;/code&gt; 删掉该物体前需要执行的任务（一般是删掉动画，或者给对手加分）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroy()&lt;/code&gt; 删掉该物体&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据上述逻辑，我们就可以基本搭建出来一个游戏引擎的基类了，具体如下：
&lt;code&gt;/static/js/playground/ac_game_object/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; AC_GAME_OBJECTS = [];   &lt;span style=&#34;color:#007f7f&#34;&gt;// 用于记录当前画布中，需要渲染的对象有哪些
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AC_GAME_OBJECTS.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);  &lt;span style=&#34;color:#007f7f&#34;&gt;// 将当前新建的对象，加入到全局的画布中去，参与渲染
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.has_called_start = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 是否执行过 start 函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;             &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前帧距离上一帧的时间间隔
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 该数据记录是为了后续计算速度等参数的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 只会在第一帧执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 每一帧均会执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_destroy() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 在被销毁前执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    destroy() { &lt;span style=&#34;color:#007f7f&#34;&gt;// 删掉该物体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.on_destroy();  &lt;span style=&#34;color:#007f7f&#34;&gt;//删掉该物体前，执行删前的操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 在全局渲染物体中，找到该物体，并将其删掉
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; AC_GAME_OBJECTS.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (AC_GAME_OBJECTS[i] === &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 三等号，在js里额外加了一层类型相等约束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                AC_GAME_OBJECTS.splice(i, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; last_timestamp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; AC_GAME_ANIMATION = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(timestamp) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 回调函数，实现：每一帧重绘时，都会执行一遍
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; AC_GAME_OBJECTS.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; obj = AC_GAME_OBJECTS[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!obj.has_called_start) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 如果还未执行初始帧动作，就先执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            obj.start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            obj.has_called_start = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 执行过初始帧，就执行每一帧的任务
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            obj.timedelta = timestamp - last_timestamp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            obj.update();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_timestamp = timestamp; &lt;span style=&#34;color:#007f7f&#34;&gt;// 更新最后一次时间戳
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    requestAnimationFrame(AC_GAME_ANIMATION);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requestAnimationFrame(AC_GAME_ANIMATION);   &lt;span style=&#34;color:#007f7f&#34;&gt;// JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;接下来所有的一切游戏，都是基于这个引擎的基类完成的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;实现游戏地图功能&#34;&gt;实现游戏地图功能&lt;/h2&gt;
&lt;p&gt;目标：实现一个每一秒都在渲染的纯黑背景&lt;/p&gt;
&lt;p&gt;虽然现阶段要实现的地图较为简单，但为了后期的拓展性，故还是考虑新建一个文件夹来完成&lt;/p&gt;
&lt;p&gt;然后在 &lt;code&gt;js&lt;/code&gt; 中，已经封装好了一个 &lt;code&gt;canvas&lt;/code&gt; 的 &lt;code&gt;api&lt;/code&gt; 来帮助实现背景画布，直接调用即可&lt;/p&gt;
&lt;p&gt;先铺开画布，然后设置为黑色&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static/js/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// $(&amp;#39;.playground&amp;#39;)对象已经在 css 文件里渲染出高宽了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 现在把他的高宽存下来，往下传递
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.width();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.height();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.game_map = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; GameMap(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;static/js/playground/game-map/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; GameMap &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 继承自游戏引擎基类
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    constructor(playground) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();    &lt;span style=&#34;color:#007f7f&#34;&gt;// 自函数功能：调用基类的构造函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas = $(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`&amp;lt;canvas&amp;gt;&amp;lt;/canvas&amp;gt;`&lt;/span&gt;); &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建一个canvas的jQuery对象，就是我们要实现的画布
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;].getContext(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#007f7f&#34;&gt;// jQuery对象是一个数组，第一个索引是html对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 设置画布的宽高
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.$playground.append(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 游戏地图每帧都要渲染
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;rgba(0, 0, 0, 0.2)&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillRect(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现玩家显示功能&#34;&gt;实现玩家显示功能&lt;/h2&gt;
&lt;p&gt;毛坯版玩家显示，每个玩家定义成一个圆，然后渲染在前端&lt;/p&gt;
&lt;p&gt;需要对于玩家类定义多个参数，以方便日后拓展：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 当前位置的横坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; 当前位置的纵坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radius&lt;/code&gt; 当前的半径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speed&lt;/code&gt; 当前的速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_me&lt;/code&gt; 该对象是否是当前玩家操控的对象（一是区别于 bot，二是区别于 日后联机的其他玩家）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;static/js/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players = [];  &lt;span style=&#34;color:#007f7f&#34;&gt;// 存放当前游戏中的所有玩家
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 将玩家加入游戏中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;static/js/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, x, y, radius, color, speed, is_me) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 把信息都存下来
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me = is_me;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 用于浮点数运算
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 渲染一个圆
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_destroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现玩家移动功能&#34;&gt;实现玩家移动功能&lt;/h2&gt;
&lt;p&gt;移动的实现逻辑很简单，就是让每帧渲染的圆的位置发生移动即可&lt;/p&gt;
&lt;p&gt;上述简单逻辑的实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(....)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们来实现一个向鼠标点击位置移动的功能&lt;/p&gt;
&lt;p&gt;这就需要设置一个 &lt;code&gt;click&lt;/code&gt; 事件的监听函数，分别传递：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标点击事件&lt;/li&gt;
&lt;li&gt;鼠标点击位置的横坐标&lt;/li&gt;
&lt;li&gt;鼠标点击位置的纵坐标&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后开始让圆的位置逐步向鼠标点击位置进行移动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 对于用户玩家，加上监听函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 把鼠标右键调出菜单栏的功能关掉
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.on(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;contextmenu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 把右键控制移动功能加上
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 左键:1 中键:2 右键:3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.move_to(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，我们来实现移动功能的函数 &lt;code&gt;move_to(tx, ty)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(...){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// x方向上的移动速度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// y方向上的移动速度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;   &lt;span style=&#34;color:#007f7f&#34;&gt;// 剩余移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_dist (x1, y1, x2, y2) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 求两点的欧几里得距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dx = x2 - x1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dy = y2 - y1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sqrt(dx * dx + dy * dy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;move_to(tx, ty) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_dist(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算移动角度，api接口：atan2(dy, dx)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(ty - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 位移 1 个单位长度（向着矢量方向移动到单位圆上）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle);  &lt;span style=&#34;color:#007f7f&#34;&gt;// 极直互化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 浮点数精度运算
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算单位帧里的移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; moved = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.min(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 还要减掉移动的距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length -= moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就实现了玩家的移动功能了，可以登录 &lt;code&gt;id:socket&lt;/code&gt; 调试该功能&lt;/p&gt;
&lt;h2 id=&#34;实现火球技能的功能&#34;&gt;实现火球技能的功能&lt;/h2&gt;
&lt;p&gt;火球对象的建立与玩家基本一致，直接照搬，在从细节上改改即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/skill/fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; FireBall &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, player, x, y, radius, vx, vy, color, speed, move_length, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.player = player;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = vx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = vy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = move.length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage = damage;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; moved = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.min(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length -= moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt; * Pi, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在玩家身上实现发火球的功能&lt;/p&gt;
&lt;p&gt;基本实现逻辑：当前选中了火球技能，鼠标左键点击一处，向该处发射一个火球&lt;/p&gt;
&lt;p&gt;因此，为了知道用户是否选择了技能，需要加一个键盘触发事件监听函数，然后加一个鼠标左键触发事件监听函数&lt;/p&gt;
&lt;p&gt;然后发射一个火球即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.cur_skill = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;null&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 记录当前选择的技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 左键:1 中键:2 右键:3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.move_to(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {     &lt;span style=&#34;color:#007f7f&#34;&gt;// 鼠标左键事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (outer.cur_skill === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前已经选中火球技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                outer.shoot_fireball(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        outer.cur_skill = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;null&lt;/span&gt;; &lt;span style=&#34;color:#007f7f&#34;&gt;// 清空当前技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;window&lt;/span&gt;).keydown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;81&lt;/span&gt;) {       &lt;span style=&#34;color:#007f7f&#34;&gt;// 键盘按下事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            outer.cur_skill = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shoot_fireball(tx, ty) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 确定火球的参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; x = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, y = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y; &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球发射点就是当前玩家的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; radius = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.01&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(ty - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle), vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; color = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; speed = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; move_length = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1.0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; damage = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.01&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; FireBall(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, x, y, radius, vx, vy, color, speed, move_length, damage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就成功实现了玩家发射火球的功能了&lt;/p&gt;
&lt;h2 id=&#34;实现单人模式下的人机功能&#34;&gt;实现单人模式下的人机功能&lt;/h2&gt;
&lt;p&gt;先创建好 5 个人机
&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;//创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (len i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样创建出来的 5 个人机是不会行动的&lt;/p&gt;
&lt;p&gt;我们写一个简易的 AI 程序，让他们也会移动&lt;/p&gt;
&lt;p&gt;这里实现的逻辑是：每次随机一个目的地，向目的地移动，然后再随机一个目的地，循环下去&lt;/p&gt;
&lt;p&gt;根据该逻辑，修改两个函数即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 对于用户玩家，加上监听函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; tx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; ty = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_to(tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 如果是人机，停下来时再随机一个方向前进
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; tx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; ty = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_to(tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_destroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[i] === &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.splice(i, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现技能命中效果碰撞检测功能&#34;&gt;实现技能命中效果（碰撞检测功能）&lt;/h2&gt;
&lt;p&gt;实现逻辑：检测两个圆的中心距离是否小于两个圆的半径之和&lt;/p&gt;
&lt;p&gt;小于等于时，代表发生碰撞，开始执行命中效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被击中用户掉血&lt;/li&gt;
&lt;li&gt;被击中用户收到向后击退效果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;碰撞检测写在火球类里，击退效果写在玩家类里&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 碰撞检测
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; player = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.player !== player &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_collision(player)) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 碰撞发生一定是在非施法者身上
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.attack(player);    &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_dist(x1, y1, x2, y2) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 获得两点的欧几里得距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dx = x2 - x1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dy = y2 - y1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sqrt(dx * dx + dy * dy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_collision(player) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 检测两个圆的中心距离是否小于两个圆的半径之和
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; distance = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_dist(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, player.x, player.y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (distance &amp;lt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius + player.radius))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attack(player) {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(player.y - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, player.x - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);   &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算角度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    player.is_attacked(angle, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage); &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中后，自然消失
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;被击退的时候，原来的移动速度应该置为 0，当前的移动应该转为向被击中方向上的移动&lt;/strong&gt;
&lt;code&gt;player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_attacked(angle, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius -= damage;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 受伤，半径减少
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 当半径小于10像素时，代表死亡
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 开始执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed = damage * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed *= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 被击中以后移动速度减半
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed &amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前仍处于击退效果中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vx * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vy * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed *= &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction; &lt;span style=&#34;color:#007f7f&#34;&gt;// 击退速度乘以摩擦系数，已达到削减的目的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;被击中以后的粒子效果特效&#34;&gt;被击中以后的粒子效果特效&lt;/h2&gt;
&lt;p&gt;实现逻辑：被击中以后，在玩家附近随机生成一些粒子小球&lt;/p&gt;
&lt;p&gt;因此我们要先实现 粒子小球 对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static/js/src/playground/particle/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Particle &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, x, y, radius, vx, vy, color, speed) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = vx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = vy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.9&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed *= &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们在被击退功能模块，实现生成粒子小球的效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;粒子小球释放弧度为 $[0,2π)$ 的随机数
&lt;ul&gt;
&lt;li&gt;粒子小球的 x, y 分量比率根据弧度来设定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;粒子小球的起始坐标应与玩家的坐标相同&lt;/li&gt;
&lt;li&gt;粒子小球的颜色与玩家颜色相同&lt;/li&gt;
&lt;li&gt;粒子小球的速度为玩家移动速度的 $10$ 倍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_attacked(angle, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 粒子小球效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; + &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; x = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, y = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; radius = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle), vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; color = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; speed = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Particle(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground, x, y, radius, vx, vy, color, speed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;一些小优化&#34;&gt;一些小优化&lt;/h2&gt;
&lt;h3 id=&#34;人机随机颜色&#34;&gt;人机随机颜色&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_random_color(), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_random_color() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; colors = [&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;pink&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;grey&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; colors[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;人机ai随机攻击操作&#34;&gt;人机AI随机攻击操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor (...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 初始人机冷却攻击时间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;180&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; player = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length)];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.shoot_fireball(player.x, player.y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;部署nginx与对接acapp&#34;&gt;部署nginx与对接acapp&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3257028/&#34;&gt;5. 部署nginx与对接acapp | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79244/&#34;&gt;5.1 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/78903/&#34;&gt;5.1. 上课笔记 | 菊花&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/364622127&#34;&gt;Ngnix 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/36187963b553&#34;&gt;nginx 和uwsgi的区别与作用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nginx是什么&#34;&gt;Nginx是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;uwsgi是什么&#34;&gt;uWSGI是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;uWSGI是一个全功能的HTTP服务器，实现了WSGI、uwsgi、http等协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它要做的就是把HTTP协议转化成语言支持的网络协议。比如把HTTP协议转化成WSGI协议，让Python可以直接使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WSGI协议是Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单来说uWSGI就是用来沟通nginx和django的一座桥梁&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;nginxuwsgidiango-工作流程&#34;&gt;Nginx+uWSGI+Diango 工作流程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nginx&lt;/code&gt; 是对外的服务接口，外部浏览器通过&lt;code&gt;url&lt;/code&gt;访问&lt;code&gt;nginx&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nginx&lt;/code&gt; 接收到浏览器发送过来的&lt;code&gt;http&lt;/code&gt;请求，将包进行解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;code&gt;url&lt;/code&gt;，如果是静态文件请求就直接访问用户给&lt;code&gt;nginx&lt;/code&gt;配置的静态文件目录，直接返回用户请求的静态文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不是静态文件，而是一个动态的请求，那么&lt;code&gt;nginx&lt;/code&gt;就将请求转发给&lt;code&gt;uwsgi&lt;/code&gt;，&lt;code&gt;uwsgi&lt;/code&gt; 接收到请求之后将包进行处理，处理成&lt;code&gt;wsgi&lt;/code&gt;可以接受的格式，并发给&lt;code&gt;wsgi&lt;/code&gt;，&lt;code&gt;wsgi&lt;/code&gt; 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给&lt;code&gt;wsgi&lt;/code&gt;，&lt;code&gt;wsgi&lt;/code&gt;将返回值进行打包，打包成&lt;code&gt;uwsgi&lt;/code&gt;能够接收的格式，&lt;code&gt;uwsgi&lt;/code&gt;接收&lt;code&gt;wsgi&lt;/code&gt; 发送的请求，并转发给&lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;nginx&lt;/code&gt;最终将返回值返回给浏览器&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;uwsgi服务的开启关闭&#34;&gt;uwsgi服务的开启&amp;amp;&amp;amp;关闭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;~/acapp&lt;/code&gt;启动uwsgi服务：&lt;strong&gt;&lt;code&gt;uwsgi --ini scripts/uwsgi.ini&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;关闭uwsgi服务：&lt;code&gt;sudo pkill -f uwsgi -9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;针对-acapp-的优化&#34;&gt;针对 acapp 的优化&lt;/h2&gt;
&lt;h3 id=&#34;打包脚本优化&#34;&gt;打包脚本优化&lt;/h3&gt;
&lt;p&gt;由于现在 &lt;strong&gt;发布版本的脚本文件&lt;/strong&gt; 用的是打包在根目录里的 &lt;strong&gt;static&lt;/strong&gt; 文件夹&lt;/p&gt;
&lt;p&gt;每次修改好 &lt;strong&gt;static&lt;/strong&gt; 文件夹后，不仅需要对 &lt;strong&gt;js&lt;/strong&gt; 文件打包，还需要对 &lt;strong&gt;static&lt;/strong&gt; 文件夹打包&lt;/p&gt;
&lt;p&gt;不放把 &amp;ldquo;将static文件夹打包&amp;rdquo; 的 &lt;strong&gt;shell&lt;/strong&gt; 代码一起加入 &lt;strong&gt;js&lt;/strong&gt; 打包脚本中，从而实现一键打包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scripts/compress_game_js.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &amp;#39;*.js&amp;#39; | sort | xargs cat &amp;gt; ${JS_PATH_DIST}game.js

echo &amp;#34;yes&amp;#34; | python3 manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;鼠标点击事件的相对偏移&#34;&gt;鼠标点击事件的相对偏移&lt;/h3&gt;
&lt;p&gt;由于写游戏界面的时候，玩家移动是按照鼠标相对于当前整个浏览器取的位置参数 &lt;code&gt;e.clientX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;acapp&lt;/code&gt; 里，每个应用是一个小窗口，鼠标点击位置的参数应当是 &lt;strong&gt;相对于整个游戏窗口的位置参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有会导致出现，点击的位置与移动的位置不同，这里需要做出小优化&lt;/p&gt;
&lt;p&gt;优化的逻辑 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$clientX−窗口左侧到浏览器左侧的距离=玩家的目标X$&lt;/li&gt;
&lt;li&gt;$clientY−窗口上侧到浏览器上侧的距离=玩家的目标Y$
这就要用到一个 &lt;code&gt;js&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt; 了 : &lt;code&gt;getBoundingClientRect()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject = object.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.top : 元素上边到视窗上边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.right : 元素右边到视窗左边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.bottom : 元素下边到视窗上边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.left : 元素左边到视窗左边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.width : 是元素自身的宽
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.height : 是元素自身的高
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建 rect 对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; rect = outer.ctx.canvas.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#007f7f&#34;&gt;// 调整偏移量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            outer.move_to(e.clientX - rect.left, e.clientY - rect.top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (outer.cur_skill === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#007f7f&#34;&gt;// 调整偏移量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                outer.shoot_fireball(e.clientX - rect.left, e.clientY - rect.top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将菜单界面重新设为主界面&#34;&gt;将菜单界面重新设为主界面&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/zbase.js&lt;/code&gt; 的注释取消，使之创建出 &lt;strong&gt;menu&lt;/strong&gt; 对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/playground/zbase.js&lt;/code&gt; 的注释取消，并设置逻辑，让 &lt;strong&gt;playground&lt;/strong&gt; 打开后，才进行游戏界面初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root = root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground = $(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`&amp;lt;div class=&amp;#34;ac-game-playground&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.hide();    &lt;span style=&#34;color:#007f7f&#34;&gt;// 初始时隐藏
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 游戏界面生成代码在下面展示 playground 时执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show() {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开 playground 界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 开始生成游戏界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root.$ac_game.append(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.width();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.height();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.game_map = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; GameMap(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players = [];  &lt;span style=&#34;color:#007f7f&#34;&gt;// 存放当前游戏中的所有玩家
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 将玩家加入游戏中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_random_color(), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;调整-css-文件适应窗口&#34;&gt;调整 css 文件，适应窗口&lt;/h3&gt;
&lt;p&gt;在设置 &lt;code&gt;web&lt;/code&gt; 网页的时候，有些设置了绝对值，可能对于窗口化的 &lt;code&gt;acapp&lt;/code&gt; 显示效果差&lt;/p&gt;
&lt;p&gt;将他们修改成相对数值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-menu-field {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;%;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    left: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;%;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-menu-field-item {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    height: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;vh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    font-size: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;vh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_django/">AcWing Django 框架课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/punch_the_clock/72/">AcWing Django 框架课</a></li>
</ul>
<hr>
<h1 id="django-项目创建">Django 项目创建</h1>
<ul>
<li><a href="https://www.acwing.com/solution/content/72577/">2.1上课笔记 | 栎</a></li>
<li><a href="https://www.acwing.com/solution/content/73097/">2.1上课笔记 | Andrew1729</a></li>
</ul>
<hr>
<h2 id="启动初始项目">启动初始项目</h2>
<ol>
<li><code>django-admin startproject acapp</code>：在当前目录下创建名为<code>acapp</code>的<code>django</code>项目</li>
<li><code>python3 manage.py runserver 0.0.0.0:8000</code>：启动项目
<ol>
<li>打开<code>settings.py</code>，找到<code>ALLOWED_HOSTS=[]</code>，修改成<code>ALLOWED_HOSTS=[&quot;自己的服务器的公网IP&quot;]</code></li>
<li>通过<code>自己的服务器公网IP:8000</code> 打开Django页面</li>
</ol>
</li>
</ol>
<h2 id="创建管理员登录页面">创建管理员登录页面</h2>
<ol>
<li>在一级<code>acapp</code>文件夹下，<code>python3 manage.py startapp XXX</code>，<code>XXX</code>是可以自定义的app名，这里用<code>game</code>示例，这时候会多一个文件夹<code>game</code>，树形结构如图：</li>
</ol>
<pre tabindex="0"><code>|-- game
|   |-- __init__.py
|   |-- admin.py          # 管理员页面
|   |-- apps.py           # 用的不多
|   |-- migrations        # 存储数据库
|   |   `-- __init__.py
|   |-- models.py         # 定义网站里的数据库表
|   |-- tests.py
|   `-- views.py          # 视图，即函数
</code></pre><ol start="2">
<li><code>python3 manage.py migrate</code>：将所有修改更新进数据库</li>
<li>创建一个 <strong>管理员用户</strong>：</li>
</ol>
<pre tabindex="0"><code>$ python3 manage.py createsuperuser
&gt; Username (leave blank to use &#39;acs&#39;): admin
&gt; Email address: 
&gt; Password: 123456
&gt; Password (again): 123456
&gt; Superuser created successfully.
</code></pre><p>然后利用该 <strong>管理员用户</strong> 登录 <code>admin</code> 页面，即可成功登陆</p>
<h2 id="创建用户登录页面">创建用户登录页面</h2>
<h3 id="game-下的各个文件作用"><code>game</code> 下的各个文件作用</h3>
<ol>
<li><code>templates</code>目录：管理 <code>html</code>  文件</li>
<li><code>urls</code>目录：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数)</li>
<li><code>views</code>目录：管理 <code>http</code> 函数（接收浏览器请求，返回字符串至浏览器）</li>
<li><code>models</code>目录：管理数据库数据</li>
<li><code>static</code>目录：管理静态文件</li>
<li><code>consumers</code>目录：管理<code>websocket</code>函数</li>
</ol>
<h3 id="实现一个路由重定向"><strong>实现一个路由重定向</strong></h3>
<ul>
<li><code>url</code> 输入网址 -&gt; <code>acapp.urls</code> -&gt; <code>game.urls</code> -&gt; <code>game.views.index</code> -&gt; 展示页面</li>
</ul>
<p><strong>game.views</strong></p>
<p>这其中，<code>HttpResponse()</code>内部使用<code>html</code>的语法，返回的响应就直接用这个字符串作为页面，转换成<code>html</code></p>
<pre tabindex="0"><code>from django.http import HttpResponse

def index(request):
    line1 = &#39;&lt;h1 style=&#34;text-align: center&#34;&gt; 第一个网页 &lt;/h1&gt;&#39;
    return HttpResponse(line1)
</code></pre><p><strong>game.urls</strong></p>
<p>这其中，<code>path('PATH', function, name)</code>的含义是，在用户访问网站的时候，如果是<code>网站/game/PATH</code>，就会调用<code>function</code>，名字为<code>name</code>，这是在<code>/game/</code>目录下的调用，所以这个<code>PATH</code>是在<code>/game/</code>的基础上的<strong>相对路径</strong>，所以他的<strong>绝对路径</strong>是<code>网站/game/PATH</code></p>
<pre tabindex="0"><code>from django.urls import path
from game.views import index

urlpatterns = [ 
    path(&#34;&#34;, index, name=&#34;index&#34;),
]
</code></pre><p><strong>acapp.urls</strong></p>
<p>这其中，<code>path('PATH', include('game.urls'))</code>的含义是：在用户访问网站的时候，如果是<code>网站/PATH</code>，就会走到<code>/game/urls</code>，并根据<code>/game/urls.py</code>来跑路由，就是说，用户在访问<code>网站/</code>的时候，由于此时调用的函数是<code>include('game.urls')</code>，所以访问<code>网站/</code>相当于根据<code>game/urls</code>访问</p>
<pre tabindex="0"><code>from django.contrib import admin
from django.urls import path, include

urlpatterns = [ 
    path(&#39;&#39;, include(&#39;game.urls&#39;)),
    path(&#39;admin/&#39;, admin.site.urls),
] 
</code></pre><p>然后直接打开 <code>ip:socket</code> 可以直接显示 <code>index</code> 返回的网页</p>
<h1 id="创建菜单界面">创建菜单界面</h1>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3199626/">3. 创建菜单界面 | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/73121/">3.1 上课笔记 | 大家好今天是</a></li>
<li><a href="https://www.acwing.com/solution/content/73707/">3.1 上课笔记 | 栎</a></li>
</ul>
<hr>
<h2 id="构建项目框架">构建项目框架</h2>
<h3 id="项目系统设计">项目系统设计</h3>
<ul>
<li><code>menu</code>：菜单页面</li>
<li><code>playground</code>：游戏界面</li>
<li><code>settings</code>：设置界面</li>
</ul>
<h3 id="项目文件结构">项目文件结构</h3>
<pre tabindex="0"><code>.
|-- README.md
|-- acapp
|   |-- __init__.py    # 文件夹在加上 __init__.py 文件后，python 便可以通过 import 来引用该文件夹
|   |-- asgi.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
|-- db.sqlite3
|-- game
|   |-- __init__.py
|   |-- admin.py
|   |-- apps.py
|   |-- migrations
|   |   `-- __init__.py
|   |-- models
|   |   `-- __init__.py
|   |-- static
|   |   |-- css
|   |   |   `-- game.css    # 一般一个工程，只有一个 css 文件就足够了
|   |   |-- image
|   |   |   `-- menu
|   |   |       `-- background.gif
|   |   `-- js
|   |       |-- dist
|   |       |   `-- game.js
|   |       `-- src
|   |           `-- zbase.js    # 总的 js 文件，命名以 z 开头会自动在字典序最后
|   |-- templates
|   |   `-- multiends
|   |       `-- web.html
|   |-- tests.py
|   |-- urls
|   |   |-- __init__.py
|   |   |-- index.py
|   |   |-- menu
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   |-- playground
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   `-- settings
|   |       |-- __init__.py
|   |       `-- index.py
|   `-- views
|       |-- __init__.py
|       |-- index.py
|       |-- menu
|       |   `-- __init__.py
|       |-- playground
|       |   `-- __init__.py
|       `-- settings
|           `-- __init__.py
|-- manage.py
`-- scripts
    `-- compress_game_js.sh
</code></pre><h4 id="js-文件管理"><code>js</code> 文件管理</h4>
<p>一般一个工程会有很多个 <code>.js</code> 源文件，为了加快网络的传输，也为了每次写新的 <code>.js</code> 文件不用每个 <code>html</code> 都额外引入一次</p>
<p>考虑用一个 <code>src</code> 源文件夹来存储所有的 <code>.js</code> 源文件</p>
<p>然后用 <code>dist</code> 文件夹来存放由 <code>src</code> 下所有源文件整合生成的一个目标 <code>.js</code> 文件</p>
<p>这样既实现了快速传输的好处，也方便了后续编写 <code>html</code> 文件时，引入 <code>.js</code> 的便利</p>
<p>创建一个脚本实现上述 <strong>整合</strong> 的功能
<code>~/acapp/scripts/compress_game_js.sh</code></p>
<pre tabindex="0"><code>#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &#39;*.js&#39; | sort | xargs cat &gt; ${JS_PATH_DIST}game.js
</code></pre><h4 id="html-文件管理"><code>html</code> 文件管理</h4>
<p>在 <code>templates</code> 文件夹下创建 <code>menu</code>、<code>playground</code>、<code>settings</code>、<code>multiends</code> 四个文件夹，用于存储三个模块和终端的 <code>html</code> 文件</p>
<p>在 <code>multiends</code> 下创建 <code>web.html</code> 文件</p>
<pre tabindex="0"><code>{% load static %}
&lt;!-- Django 中引入全局setting里的变量 static 的语法--&gt;
&lt;head&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.acwing.com/static/jquery-ui-dist/jquery-ui.min.css&#34;&gt;
    &lt;script src=&#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&#34;&gt;&lt;/script&gt;
    &lt;!-- 上述两句引入 jQuery 库 --&gt;
    &lt;!-- 使用引入的变量 static 的语法如下 --&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;{% static &#39;css/game.css&#39; %}&#34;&gt;
    &lt;script src=&#34;{% static &#39;js/dist/game.js&#39; %}&#34;&gt;&lt;/script&gt;
    &lt;!-- 分别引入 css 文件和总的 js 文件 --&gt;
&lt;/head&gt;

&lt;body style=&#34;margin: 0&#34;&gt;
    &lt;div id=&#34;ac_game_12345678&#34;&gt;&lt;/div&gt;
    &lt;script&gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
&lt;/body&gt;
</code></pre><h4 id="views-视图管理"><code>views</code> 视图管理</h4>
<p>在 <code>views</code> 文件夹下新建三个模块的视图文件夹</p>
<p>写一个 <code>index.py</code> 文件，目的是在 <code>web</code> 端被访问时，返回上面写的 <code>web.html</code> 文件</p>
<pre tabindex="0"><code>from django.shortcuts import render

def index(request):
  return render(request, &#34;multiends/web.html&#34;)
</code></pre><h4 id="urls-路由管理"><code>urls</code> 路由管理</h4>
<pre tabindex="0"><code>                                     /-- &#34;&#34; -- index
                                    / -- &#34;menu/&#34; -- menu.index
             / &#34;&#34; --&gt; &#34;game.url&#34; --&gt; 
            /                       \ -- &#34;playground/&#34; -- playground.index
id:scoket -&gt;                         \-- &#34;settings/&#34; -- settings.index
            \
             \ &#34;/admin&#34; -- 到达管理员页面
</code></pre><p><code>~/acapp/acapp/urls.py</code></p>
<pre tabindex="0"><code>from django.contrib import admin
from django.urls import path, include

urlpatterns = [
  path(&#39;&#39;, include(&#39;game.urls.index&#39;)),
  path(&#39;admin/&#39;, admin.site.urls),
]
</code></pre><p><code>~/acapp/game/urls/index.py</code></p>
<pre tabindex="0"><code>from django.urls import path, include
from game.views.index import index

urlpatterns = [ 
    path(&#34;&#34;, index, name=&#34;index&#34;),
    path(&#34;menu/&#34;, include(&#34;game.urls.menu.index&#34;)),
    path(&#34;playground/&#34;, include(&#34;game.urls.playground.index&#34;)),
    path(&#34;settings/&#34;, include(&#34;game.urls.settings.index&#34;))
]
</code></pre><h4 id="网页渲染流程"><strong>网页渲染流程</strong></h4>
<p>根据用户的链接，首先进入<code>acapp/urls.py</code>，根据<code>path</code>再进入<code>game/urls/index.py</code>，再根据<code>path</code>进入下一层<code>url</code>或调用相对应的<code>views</code>中的<code>index.py</code>函数，函数接收参数，在网页端渲染<code>templates/multiends</code>下的<code>web.html</code>，<code>html</code>中有<code>JS</code>执行</p>
<p>注意：本项目为前后端分离，即通过<code>JS</code>在<code>client</code>中渲染项目(动态生成页面)，而不是在<code>server</code>渲染项目</p>
<h3 id="修改全局配置">修改全局配置</h3>
<h4 id="设置时区">设置时区</h4>
<p>修改项目的 <strong>UTC</strong> 时间为 <strong>CN</strong> 时间</p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
TIME_ZONE = &#39;Asia/Shanghai&#39; # 原来默认是 UTC
******
</code></pre><h4 id="添加配置文件">添加配置文件</h4>
<p>将新创建的 <code>game</code> 下的 <code>apps.py</code> 中的 <code>GameConfig</code> 加到 <code>settings.py</code> 下</p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
INSTALLED_APPS = [
  &#39;game.apps.GameConfig&#39;,
  ......
]
******
</code></pre><p>声明将静态文件路径 <code>STATIC_ROOT</code> 和 <code>MEDIA_ROOT</code></p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
import os

......

STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)
STATIC_URL = &#39;/static/&#39;

MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)
MEDIA_URL = &#39;/media/&#39;
******
</code></pre><h2 id="创建菜单-menu-界面">创建菜单 <code>menu</code> 界面</h2>
<h3 id="搭建菜单-menu-界面的框架">搭建菜单 <code>menu</code> 界面的框架</h3>
<p>我们采用的 <strong>前后端分离式</strong> 开发，所有的 <strong>html</strong> 渲染都要求在前端完成</p>
<p>开发流程就是，先在 <strong>html</strong> 里创建好一个有 <strong>id</strong> 的 <strong>div</strong></p>
<p>然后利用 <strong>js</strong> 文件，捕获到该 <strong>div</strong>，并进行 <strong>渲染</strong></p>
<p><code>/templates/multiends/web.html</code></p>
<pre tabindex="0"><code>...
    &lt;div id=&#34;ac_game_12345678&#34;&gt;&lt;/div&gt;
    &lt;script&gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
...
</code></pre><p><code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>class AcGame {
    constructor(id) {
        this.id = id; 
        this.$ac_game = $(&#39;#&#39; + id);
        this.menu = new AcGameMenu(this);
    }   
}
</code></pre><p><code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(` 
&lt;div class=&#34;ac-game-menu&#34;&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu); 
}
</code></pre><p><code>css/game.css</code></p>
<pre tabindex="0"><code>.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&#39;/static/image/menu/background.gif&#39;);
    background-size: 100% 100%;
    user-select: none;
}
</code></pre><p>这里的 <strong>代码逻辑</strong> 如下：</p>
<ol>
<li><code>html</code> 页面执行到 <code>js</code> 代码，利用 <code>AcGame类</code> 创建对象 <code>ac_game</code> 同时传递参数 <code>div</code> 的 <code>id</code></li>
<li><code>AcGame</code> 开始执行构造函数，在构造函数中，捕获 <code>html</code> 标签，并利用 <code>AcGameMenu类</code> 创建对象 <code>menu</code>，并将整个对象作为参数下传</li>
<li><code>AcGameMenu</code> 开始执行构造函数，然后创建 <code>html</code> 代码，加到捕获到的 <code>html</code> 代码下</li>
<li>最终成功渲染出背景图片</li>
</ol>
<h3 id="设置菜单-menu-页面的内容">设置菜单 <code>menu</code> 页面的内容</h3>
<p>主要内容就是在主页面中，显示：单人模式、多人模式、设置，三个按钮的选项
<code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&lt;div class=&#34;ac-game-menu&#34;&gt;
    &lt;div class=&#34;ac-game-menu-field&#34;&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&#34;&gt;
            单人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&#34;&gt;
            多人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&#34;&gt;
            设置
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&#39;.ac-game-menu-field-item-single-mode&#39;);
        this.$multi_mode = this.$menu.find(&#39;.ac-game-menu-field-item-multi-mode&#39;);
        this.$settings_mode = this.$menu.find(&#39;.ac-game-menu-field-item-settings-mode&#39;);
    }
}
</code></pre><p><code>css/game.css</code></p>
<pre tabindex="0"><code>.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&#39;/static/image/menu/background.gif&#39;);
    background-size: 100% 100%;
    user-select: none;
}
.ac-game-menu-field {
    width: 20vw;
    position: relative;
    top: 40vh;
    left: 19vh;
}
.ac-game-menu-field-item {
    height: 7vh;
    width: 18vw;
    color: white;
    font-size: 6vh;
    font-style: italic;
    padding: 2vh;
    margin: 1vh 0;
    cursor: pointer;
    text-align: center;
    background-color: rgba(39, 21, 28, 0.6);
    border-radius: 10px;
    letter-spacing: 0.5vw;
}
.ac-game-menu-field-item:hover {
    transform: scale(1.2);
    transition: 100ms;
}
</code></pre><h3 id="添加-单人模式-监听函数--打开游戏界面-功能">添加 &lsquo;单人模式&rsquo; 监听函数 —— 打开游戏界面 功能</h3>
<p>这里要实现的 <strong>逻辑</strong>：</p>
<ol>
<li>点击 &lsquo;单人模式&rsquo; 按钮触发 <code>click</code> 事件，随即触发监听函数，开始执行</li>
<li>关闭 <code>menu</code> 页面</li>
<li>打开 <code>playground</code> 页面</li>
</ol>
<p>因此，我们先简易的实现一个 <code>playground</code> 页面，方便调试该功能
<code>js/src/playground/zbase.js</code></p>
<pre tabindex="0"><code>class AcGamePlayground {
    constructor(root) {
        this.root = root;
        this.$playground = $(`&lt;div&gt;游戏界面&lt;/div&gt;`);

        this.hide();
        this.root.$ac_game.append(this.$playground);

        this.start();
    }
    start() {

    }
    show() {    //打开 playground 界面
        this.$playground.show();
    }
    hide() {    //关闭 playground 界面
        this.$playground.hide();
    }

}
</code></pre><p>在实现监听函数功能之前，先在 <code>/src/zbase.js</code> 即主 <code>js</code> 文件下，利用 <code>AcGamePlayground</code> 类创建好 <code>playground</code> 对象</p>
<p>这样我们就能在前端，渲染出两个界面了，分别是：<code>menu</code> 和 <code>playground</code></p>
<p><code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>class AcGame {
    constructor(id) {
        this.id = id;
        this.$ac_game = $(&#39;#&#39; + id);
        this.menu = new AcGameMenu(this);
        // 把 playground 对象也建好，这样我们就同时有两个界面了
        this.playground = new AcGamePlayground(this);

        this.start();
    }                    
    start() {

    }
}
</code></pre><p>然后，我们开始实现 <code>ac-game-menu-field-item-single-mode</code> 标签的 <code>click</code> 事件的监听函数</p>
<p>其功能之前讲过了，就是关闭 <code>menu</code> 页面，打开 <code>playground</code> 页面</p>
<p><code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&lt;div class=&#34;ac-game-menu&#34;&gt;
    &lt;div class=&#34;ac-game-menu-field&#34;&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&#34;&gt;
            单人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&#34;&gt;
            多人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&#34;&gt;
            设置
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&#39;.ac-game-menu-field-item-single-mode&#39;);
        this.$multi_mode = this.$menu.find(&#39;.ac-game-menu-field-item-multi-mode&#39;);
        this.$settings_mode = this.$menu.find(&#39;.ac-game-menu-field-item-settings-mode&#39;);

        this.start();
    }
    start() {
        this.add_listening_events();
    }
    add_listening_events() {
        let outer = this;
        this.$single_mode.click(function(){
            outer.hide();   // 关闭主页面
            outer.root.playground.show();   // 打开游戏界面
        });
    }

    show() {    //显示menu界面
        this.$menu.show();
    }
    hide() {    //隐藏menu界面
        this.$menu.hide();
    }
}
</code></pre><h1 id="创建游戏界面">创建游戏界面</h1>
<ul>
<li><a href="https://www.acwing.com/solution/content/79181/">4.1 上课笔记 | Andrew1729</a></li>
</ul>
<hr>
<blockquote>
<p><strong>若修改<code>static文件夹</code>下的相关文件，需在<code>~/acapp</code>下执行<code>./scripts/compress_game_js.sh</code>来打包文件</strong></p>
</blockquote>
<h2 id="前端的模块化引入">前端的模块化引入</h2>
<p>由于在 <code>html</code> 代码部分，是将整个 <code>game.js</code> 文件引入</p>
<p>这样会导致在 <code>game.js</code> 中定义的变量，会变成整个网页的 <strong>全局变量</strong>（之后可能会引起变量重名的诸多问题）</p>
<p>因此，我们考虑使用 <strong>模块化引入</strong> 的功能，让网页只引入在 <code>html</code> 中需要的部分</p>
<p>修改 <code>web.html</code></p>
<pre tabindex="0"><code>&lt;!-- 首先，先删掉上面整个引入 game.js 的部分 --&gt;
&lt;!-- 然后，下方创建对象的部分，先使用模块化引入 --&gt;
......
    &lt;script type=&#34;module&#34;&gt;
        import {AcGame} from &#34;{% static &#39;js/dist/game.js&#39; %}&#34;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
......
</code></pre><p>此外，还有修改引入的类，在前面加上 <code>export</code>，如下修改 <code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>export class AcGame {
    ......
}
</code></pre><p>这样，在全局中，只会出现引入的模块，其他的 <code>.js</code> 代码不会出现在全局中</p>
<h2 id="构建游戏界面框架">构建游戏界面框架</h2>
<p><code>static/js/src/playground/zbase.js</code></p>
<pre tabindex="0"><code>......
    this.$playground = $(`&lt;div class=&#34;ac-game-playground&#34;&gt;&lt;/div&gt;`);
......
</code></pre><p><code>game.css</code></p>
<pre tabindex="0"><code>......
.ac-game-playground {
    height: 100%;
    width: 100%;
    user-select: none;  // 禁用右键弹菜单
} 
</code></pre><h2 id="实现游戏引擎框架"><strong>实现游戏引擎框架</strong></h2>
<p>游戏中，物体在移动，其实现原理是：每一个动作都会渲染多张图片出来，然后图片快速的切换，从而实现动的过程</p>
<p>因此，需要先实现一个游戏引擎的基类 <code>AcGameObject</code> ，使得每帧能渲染一张图片出来</p>
<p>该基类需要具备的功能有：</p>
<ol>
<li><code>start()</code> 在游戏开始的第一帧时需要执行的任务（一般是创建对象）</li>
<li><code>update()</code> 在游戏开始后的每一帧均会执行的任务（一般是渲染当前对象的各种状态）</li>
<li><code>on_destroy()</code> 删掉该物体前需要执行的任务（一般是删掉动画，或者给对手加分）</li>
<li><code>destroy()</code> 删掉该物体</li>
</ol>
<p>根据上述逻辑，我们就可以基本搭建出来一个游戏引擎的基类了，具体如下：
<code>/static/js/playground/ac_game_object/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> AC_GAME_OBJECTS = [];   <span style="color:#007f7f">// 用于记录当前画布中，需要渲染的对象有哪些
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor() {
</span></span><span style="display:flex;"><span>        AC_GAME_OBJECTS.push(<span style="color:#fff;font-weight:bold">this</span>);  <span style="color:#007f7f">// 将当前新建的对象，加入到全局的画布中去，参与渲染
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.has_called_start = <span style="color:#fff;font-weight:bold">false</span>;  <span style="color:#007f7f">// 是否执行过 start 函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.timedelta = <span style="color:#ff0;font-weight:bold">0</span>;             <span style="color:#007f7f">// 当前帧距离上一帧的时间间隔
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 该数据记录是为了后续计算速度等参数的
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    }
</span></span><span style="display:flex;"><span>    start() {   <span style="color:#007f7f">// 只会在第一帧执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {  <span style="color:#007f7f">// 每一帧均会执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    on_destroy() {  <span style="color:#007f7f">// 在被销毁前执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    destroy() { <span style="color:#007f7f">// 删掉该物体
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.on_destroy();  <span style="color:#007f7f">//删掉该物体前，执行删前的操作
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 在全局渲染物体中，找到该物体，并将其删掉
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; AC_GAME_OBJECTS.length; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (AC_GAME_OBJECTS[i] === <span style="color:#fff;font-weight:bold">this</span>) {  <span style="color:#007f7f">// 三等号，在js里额外加了一层类型相等约束
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                AC_GAME_OBJECTS.splice(i, <span style="color:#ff0;font-weight:bold">1</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">break</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> last_timestamp;
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> AC_GAME_ANIMATION = <span style="color:#fff;font-weight:bold">function</span>(timestamp) {  <span style="color:#007f7f">// 回调函数，实现：每一帧重绘时，都会执行一遍
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; AC_GAME_OBJECTS.length; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> obj = AC_GAME_OBJECTS[i];
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (!obj.has_called_start) { <span style="color:#007f7f">// 如果还未执行初始帧动作，就先执行
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            obj.start();
</span></span><span style="display:flex;"><span>            obj.has_called_start = <span style="color:#fff;font-weight:bold">true</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">else</span> {  <span style="color:#007f7f">// 执行过初始帧，就执行每一帧的任务
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            obj.timedelta = timestamp - last_timestamp;
</span></span><span style="display:flex;"><span>            obj.update();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    last_timestamp = timestamp; <span style="color:#007f7f">// 更新最后一次时间戳
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    requestAnimationFrame(AC_GAME_ANIMATION);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>requestAnimationFrame(AC_GAME_ANIMATION);   <span style="color:#007f7f">// JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等)
</span></span></span></code></pre></div><blockquote>
<p><strong>接下来所有的一切游戏，都是基于这个引擎的基类完成的</strong></p>
</blockquote>
<h2 id="实现游戏地图功能">实现游戏地图功能</h2>
<p>目标：实现一个每一秒都在渲染的纯黑背景</p>
<p>虽然现阶段要实现的地图较为简单，但为了后期的拓展性，故还是考虑新建一个文件夹来完成</p>
<p>然后在 <code>js</code> 中，已经封装好了一个 <code>canvas</code> 的 <code>api</code> 来帮助实现背景画布，直接调用即可</p>
<p>先铺开画布，然后设置为黑色</p>
<p><code>static/js/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// $(&#39;.playground&#39;)对象已经在 css 文件里渲染出高宽了
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 现在把他的高宽存下来，往下传递
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.width = <span style="color:#fff;font-weight:bold">this</span>.$playground.width();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.height = <span style="color:#fff;font-weight:bold">this</span>.$playground.height();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.game_map = <span style="color:#fff;font-weight:bold">new</span> GameMap(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .....
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>static/js/playground/game-map/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> GameMap <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {    <span style="color:#007f7f">// 继承自游戏引擎基类
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    constructor(playground) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();    <span style="color:#007f7f">// 自函数功能：调用基类的构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$canvas = $(<span style="color:#0ff;font-weight:bold">`&lt;canvas&gt;&lt;/canvas&gt;`</span>); <span style="color:#007f7f">// 创建一个canvas的jQuery对象，就是我们要实现的画布
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.$canvas[<span style="color:#ff0;font-weight:bold">0</span>].getContext(<span style="color:#0ff;font-weight:bold">&#39;2d&#39;</span>); <span style="color:#007f7f">// jQuery对象是一个数组，第一个索引是html对象
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 设置画布的宽高
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width = <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height = <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground.$playground.append(<span style="color:#fff;font-weight:bold">this</span>.$canvas);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {  <span style="color:#007f7f">// 游戏地图每帧都要渲染
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#0ff;font-weight:bold">&#34;rgba(0, 0, 0, 0.2)&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillRect(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width, <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><h2 id="实现玩家显示功能">实现玩家显示功能</h2>
<p>毛坯版玩家显示，每个玩家定义成一个圆，然后渲染在前端</p>
<p>需要对于玩家类定义多个参数，以方便日后拓展：</p>
<ol>
<li><code>x</code> 当前位置的横坐标</li>
<li><code>y</code> 当前位置的纵坐标</li>
<li><code>radius</code> 当前的半径</li>
<li><code>speed</code> 当前的速度</li>
<li><code>is_me</code> 该对象是否是当前玩家操控的对象（一是区别于 bot，二是区别于 日后联机的其他玩家）</li>
</ol>
<p><code>static/js/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players = [];  <span style="color:#007f7f">// 存放当前游戏中的所有玩家
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 将玩家加入游戏中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;white&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">true</span>));
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .....
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>static/js/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, x, y, radius, color, speed, is_me) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 把信息都存下来
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.is_me = is_me;
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 用于浮点数运算
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.eps = <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {  <span style="color:#007f7f">// 渲染一个圆
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    on_destroy() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="实现玩家移动功能">实现玩家移动功能</h2>
<p>移动的实现逻辑很简单，就是让每帧渲染的圆的位置发生移动即可</p>
<p>上述简单逻辑的实现如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(....)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#ff0;font-weight:bold">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">1</span>;
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后我们来实现一个向鼠标点击位置移动的功能</p>
<p>这就需要设置一个 <code>click</code> 事件的监听函数，分别传递：</p>
<ol>
<li>鼠标点击事件</li>
<li>鼠标点击位置的横坐标</li>
<li>鼠标点击位置的纵坐标</li>
</ol>
<p>然后开始让圆的位置逐步向鼠标点击位置进行移动</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>start() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 对于用户玩家，加上监听函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>add_listening_events() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 把鼠标右键调出菜单栏的功能关掉
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.on(<span style="color:#0ff;font-weight:bold">&#34;contextmenu&#34;</span>, <span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 把右键控制移动功能加上
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 左键:1 中键:2 右键:3
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            outer.move_to(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后，我们来实现移动功能的函数 <code>move_to(tx, ty)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(...){
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// x方向上的移动速度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// y方向上的移动速度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;   <span style="color:#007f7f">// 剩余移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>get_dist (x1, y1, x2, y2) { <span style="color:#007f7f">// 求两点的欧几里得距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> dx = x2 - x1;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> dy = y2 - y1;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">Math</span>.sqrt(dx * dx + dy * dy);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>move_to(tx, ty) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 计算移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#fff;font-weight:bold">this</span>.get_dist(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, tx, ty);
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 计算移动角度，api接口：atan2(dy, dx)
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(ty - <span style="color:#fff;font-weight:bold">this</span>.y, tx - <span style="color:#fff;font-weight:bold">this</span>.x);
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 位移 1 个单位长度（向着矢量方向移动到单位圆上）
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle);  <span style="color:#007f7f">// 极直互化
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 浮点数精度运算
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 计算单位帧里的移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">let</span> moved = <span style="color:#fff;font-weight:bold">Math</span>.min(<span style="color:#fff;font-weight:bold">this</span>.move_length, <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * moved;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * moved;
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 还要减掉移动的距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.move_length -= moved;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>这样就实现了玩家的移动功能了，可以登录 <code>id:socket</code> 调试该功能</p>
<h2 id="实现火球技能的功能">实现火球技能的功能</h2>
<p>火球对象的建立与玩家基本一致，直接照搬，在从细节上改改即可</p>
<p><code>js/src/playground/skill/fireball/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> FireBall <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, player, x, y, radius, vx, vy, color, speed, move_length, damage) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.player = player;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = vx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = vy;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = move.length;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.damage = damage;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.eps = <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.destroy();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> moved = <span style="color:#fff;font-weight:bold">Math</span>.min(<span style="color:#fff;font-weight:bold">this</span>.move_length, <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * moved;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * moved;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.move_length -= moved;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span> * Pi, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} 
</span></span></code></pre></div><p>然后在玩家身上实现发火球的功能</p>
<p>基本实现逻辑：当前选中了火球技能，鼠标左键点击一处，向该处发射一个火球</p>
<p>因此，为了知道用户是否选择了技能，需要加一个键盘触发事件监听函数，然后加一个鼠标左键触发事件监听函数</p>
<p>然后发射一个火球即可</p>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(...) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.cur_skill = <span style="color:#fff;font-weight:bold">null</span>;  <span style="color:#007f7f">// 记录当前选择的技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>add_listening_events() {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 左键:1 中键:2 右键:3
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            outer.move_to(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">1</span>) {     <span style="color:#007f7f">// 鼠标左键事件
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">if</span> (outer.cur_skill === <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>) {   <span style="color:#007f7f">// 当前已经选中火球技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                outer.shoot_fireball(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        outer.cur_skill = <span style="color:#fff;font-weight:bold">null</span>; <span style="color:#007f7f">// 清空当前技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    });
</span></span><span style="display:flex;"><span>    $(<span style="color:#fff;font-weight:bold">window</span>).keydown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">81</span>) {       <span style="color:#007f7f">// 键盘按下事件
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            outer.cur_skill = <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>shoot_fireball(tx, ty) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 确定火球的参数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> x = <span style="color:#fff;font-weight:bold">this</span>.x, y = <span style="color:#fff;font-weight:bold">this</span>.y; <span style="color:#007f7f">// 火球发射点就是当前玩家的位置
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> radius = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.01</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(ty - <span style="color:#fff;font-weight:bold">this</span>.y, tx - <span style="color:#fff;font-weight:bold">this</span>.x);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle), vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> color = <span style="color:#0ff;font-weight:bold">&#34;orange&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> speed = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.5</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> move_length = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">1.0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> damage = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.01</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> FireBall(<span style="color:#fff;font-weight:bold">this</span>.playground, <span style="color:#fff;font-weight:bold">this</span>, x, y, radius, vx, vy, color, speed, move_length, damage);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这样就成功实现了玩家发射火球的功能了</p>
<h2 id="实现单人模式下的人机功能">实现单人模式下的人机功能</h2>
<p>先创建好 5 个人机
<code>playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#007f7f">//创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">for</span> (len i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;blue&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>这样创建出来的 5 个人机是不会行动的</p>
<p>我们写一个简易的 AI 程序，让他们也会移动</p>
<p>这里实现的逻辑是：每次随机一个目的地，向目的地移动，然后再随机一个目的地，循环下去</p>
<p>根据该逻辑，修改两个函数即可</p>
<p><code>playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>start() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 对于用户玩家，加上监听函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events();
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> tx = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> ty = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_to(tx, ty);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span> update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (!<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 如果是人机，停下来时再随机一个方向前进
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">let</span> tx = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> ty = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.move_to(tx, ty);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>on_destroy() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#fff;font-weight:bold">this</span>.playground.players.length; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.playground.players[i] === <span style="color:#fff;font-weight:bold">this</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.playground.players.splice(i, <span style="color:#ff0;font-weight:bold">1</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="实现技能命中效果碰撞检测功能">实现技能命中效果（碰撞检测功能）</h2>
<p>实现逻辑：检测两个圆的中心距离是否小于两个圆的半径之和</p>
<p>小于等于时，代表发生碰撞，开始执行命中效果：</p>
<ol>
<li>被击中用户掉血</li>
<li>被击中用户收到向后击退效果</li>
</ol>
<p>碰撞检测写在火球类里，击退效果写在玩家类里</p>
<p><code>fireball/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (...) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 碰撞检测
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#fff;font-weight:bold">this</span>.playground.players.length; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> player = <span style="color:#fff;font-weight:bold">this</span>.playground.players[i];
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.player !== player &amp;&amp; <span style="color:#fff;font-weight:bold">this</span>.is_collision(player)) {  <span style="color:#007f7f">// 碰撞发生一定是在非施法者身上
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                <span style="color:#fff;font-weight:bold">this</span>.attack(player);    <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>get_dist(x1, y1, x2, y2) {  <span style="color:#007f7f">// 获得两点的欧几里得距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">let</span> dx = x2 - x1;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> dy = y2 - y1;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">Math</span>.sqrt(dx * dx + dy * dy);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>is_collision(player) {  <span style="color:#007f7f">// 检测两个圆的中心距离是否小于两个圆的半径之和
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> distance = <span style="color:#fff;font-weight:bold">this</span>.get_dist(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, player.x, player.y);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (distance &lt; (<span style="color:#fff;font-weight:bold">this</span>.radius + player.radius))
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">true</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>attack(player) {    <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(player.y - <span style="color:#fff;font-weight:bold">this</span>.y, player.x - <span style="color:#fff;font-weight:bold">this</span>.x);   <span style="color:#007f7f">// 计算角度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    player.is_attacked(angle, <span style="color:#fff;font-weight:bold">this</span>.damage); <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.destroy(); <span style="color:#007f7f">// 火球命中后，自然消失
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span></code></pre></div><p><strong>被击退的时候，原来的移动速度应该置为 0，当前的移动应该转为向被击中方向上的移动</strong>
<code>player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>is_attacked(angle, damage) {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.radius -= damage;  <span style="color:#007f7f">// 受伤，半径减少
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.radius &lt; <span style="color:#ff0;font-weight:bold">10</span>) { <span style="color:#007f7f">// 当半径小于10像素时，代表死亡
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.destroy();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 开始执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.damage_vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.damage_vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.damage_speed = damage * <span style="color:#ff0;font-weight:bold">100</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.speed *= <span style="color:#ff0;font-weight:bold">0.5</span>;  <span style="color:#007f7f">// 被击中以后移动速度减半
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.damage_speed &gt; <span style="color:#fff;font-weight:bold">this</span>.eps) {   <span style="color:#007f7f">// 当前仍处于击退效果中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.damage_vx * <span style="color:#fff;font-weight:bold">this</span>.damage_speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.damage_vy * <span style="color:#fff;font-weight:bold">this</span>.damage_speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.damage_speed *= <span style="color:#fff;font-weight:bold">this</span>.friction; <span style="color:#007f7f">// 击退速度乘以摩擦系数，已达到削减的目的
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="被击中以后的粒子效果特效">被击中以后的粒子效果特效</h2>
<p>实现逻辑：被击中以后，在玩家附近随机生成一些粒子小球</p>
<p>因此我们要先实现 粒子小球 对象</p>
<p><code>static/js/src/playground/particle/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Particle <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, x, y, radius, vx, vy, color, speed) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = vx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = vy;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.friction = <span style="color:#ff0;font-weight:bold">0.9</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.speed &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.destroy;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed *= <span style="color:#fff;font-weight:bold">this</span>.friction;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} 
</span></span></code></pre></div><p>然后我们在被击退功能模块，实现生成粒子小球的效果</p>
<ul>
<li>粒子小球释放弧度为 $[0,2π)$ 的随机数
<ul>
<li>粒子小球的 x, y 分量比率根据弧度来设定</li>
</ul>
</li>
<li>粒子小球的起始坐标应与玩家的坐标相同</li>
<li>粒子小球的颜色与玩家颜色相同</li>
<li>粒子小球的速度为玩家移动速度的 $10$ 倍</li>
</ul>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>is_attacked(angle, damage) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 粒子小球效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">10</span> + <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> x = <span style="color:#fff;font-weight:bold">this</span>.x, y = <span style="color:#fff;font-weight:bold">this</span>.y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> radius = <span style="color:#fff;font-weight:bold">this</span>.radius * <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI * <span style="color:#fff;font-weight:bold">Math</span>.random();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle), vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> color = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> speed = <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#ff0;font-weight:bold">10</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">new</span> Particle(<span style="color:#fff;font-weight:bold">this</span>.playground, x, y, radius, vx, vy, color, speed);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="一些小优化">一些小优化</h2>
<h3 id="人机随机颜色">人机随机颜色</h3>
<p><code>js/src/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(root) {
</span></span><span style="display:flex;"><span>    ......
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#fff;font-weight:bold">this</span>.get_random_color(), <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ......
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>get_random_color() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> colors = [<span style="color:#0ff;font-weight:bold">&#34;blue&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;red&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;pink&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;grey&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;green&#34;</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> colors[<span style="color:#fff;font-weight:bold">Math</span>.floor(<span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">5</span>)];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="人机ai随机攻击操作">人机AI随机攻击操作</h3>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor (...) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.spent_time = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// 初始人机冷却攻击时间
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.spent_time += <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (!<span style="color:#fff;font-weight:bold">this</span>.is_me &amp;&amp; <span style="color:#fff;font-weight:bold">this</span>.spent_time &gt; <span style="color:#ff0;font-weight:bold">4</span> &amp;&amp; <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">180</span> &lt; <span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> player = <span style="color:#fff;font-weight:bold">this</span>.playground.players[<span style="color:#fff;font-weight:bold">Math</span>.floor(<span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.players.length)];
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.shoot_fireball(player.x, player.y);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="部署nginx与对接acapp">部署nginx与对接acapp</h1>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3257028/">5. 部署nginx与对接acapp | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/79244/">5.1 上课笔记 | Andrew1729</a></li>
<li><a href="https://www.acwing.com/solution/content/78903/">5.1. 上课笔记 | 菊花</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/364622127">Ngnix 介绍</a></li>
<li><a href="https://www.jianshu.com/p/36187963b553">nginx 和uwsgi的区别与作用</a></li>
</ul>
<hr>
<h2 id="nginx是什么">Nginx是什么？</h2>
<blockquote>
<p><strong>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器</strong></p>
<p><strong>Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现</strong></p>
<p><strong>Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换</strong></p>
</blockquote>
<h2 id="uwsgi是什么">uWSGI是什么？</h2>
<blockquote>
<p><strong>uWSGI是一个全功能的HTTP服务器，实现了WSGI、uwsgi、http等协议</strong></p>
<p><strong>它要做的就是把HTTP协议转化成语言支持的网络协议。比如把HTTP协议转化成WSGI协议，让Python可以直接使用</strong></p>
<p><strong>WSGI协议是Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口</strong></p>
<p><strong>简单来说uWSGI就是用来沟通nginx和django的一座桥梁</strong></p>
</blockquote>
<h2 id="nginxuwsgidiango-工作流程">Nginx+uWSGI+Diango 工作流程</h2>
<blockquote>
<p><strong><code>nginx</code> 是对外的服务接口，外部浏览器通过<code>url</code>访问<code>nginx</code></strong></p>
<p><strong><code>nginx</code> 接收到浏览器发送过来的<code>http</code>请求，将包进行解析</strong></p>
<p><strong>分析<code>url</code>，如果是静态文件请求就直接访问用户给<code>nginx</code>配置的静态文件目录，直接返回用户请求的静态文件</strong></p>
<p><strong>如果不是静态文件，而是一个动态的请求，那么<code>nginx</code>就将请求转发给<code>uwsgi</code>，<code>uwsgi</code> 接收到请求之后将包进行处理，处理成<code>wsgi</code>可以接受的格式，并发给<code>wsgi</code>，<code>wsgi</code> 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给<code>wsgi</code>，<code>wsgi</code>将返回值进行打包，打包成<code>uwsgi</code>能够接收的格式，<code>uwsgi</code>接收<code>wsgi</code> 发送的请求，并转发给<code>nginx</code>, <code>nginx</code>最终将返回值返回给浏览器</strong></p>
</blockquote>
<h2 id="uwsgi服务的开启关闭">uwsgi服务的开启&amp;&amp;关闭</h2>
<ul>
<li>在<code>~/acapp</code>启动uwsgi服务：<strong><code>uwsgi --ini scripts/uwsgi.ini</code></strong></li>
<li>关闭uwsgi服务：<code>sudo pkill -f uwsgi -9</code></li>
</ul>
<h2 id="针对-acapp-的优化">针对 acapp 的优化</h2>
<h3 id="打包脚本优化">打包脚本优化</h3>
<p>由于现在 <strong>发布版本的脚本文件</strong> 用的是打包在根目录里的 <strong>static</strong> 文件夹</p>
<p>每次修改好 <strong>static</strong> 文件夹后，不仅需要对 <strong>js</strong> 文件打包，还需要对 <strong>static</strong> 文件夹打包</p>
<p>不放把 &ldquo;将static文件夹打包&rdquo; 的 <strong>shell</strong> 代码一起加入 <strong>js</strong> 打包脚本中，从而实现一键打包</p>
<p><code>scripts/compress_game_js.sh</code></p>
<pre tabindex="0"><code>#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &#39;*.js&#39; | sort | xargs cat &gt; ${JS_PATH_DIST}game.js

echo &#34;yes&#34; | python3 manage.py collectstatic
</code></pre><h3 id="鼠标点击事件的相对偏移">鼠标点击事件的相对偏移</h3>
<p>由于写游戏界面的时候，玩家移动是按照鼠标相对于当前整个浏览器取的位置参数 <code>e.clientX</code></p>
<p>而 <code>acapp</code> 里，每个应用是一个小窗口，鼠标点击位置的参数应当是 <strong>相对于整个游戏窗口的位置参数</strong></p>
<p>所有会导致出现，点击的位置与移动的位置不同，这里需要做出小优化</p>
<p>优化的逻辑 :</p>
<ol>
<li>$clientX−窗口左侧到浏览器左侧的距离=玩家的目标X$</li>
<li>$clientY−窗口上侧到浏览器上侧的距离=玩家的目标Y$
这就要用到一个 <code>js</code> 的 <code>API</code> 了 : <code>getBoundingClientRect()</code></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>rectObject = object.getBoundingClientRect();
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>rectObject.top : 元素上边到视窗上边的距离;
</span></span><span style="display:flex;"><span>rectObject.right : 元素右边到视窗左边的距离;
</span></span><span style="display:flex;"><span>rectObject.bottom : 元素下边到视窗上边的距离;
</span></span><span style="display:flex;"><span>rectObject.left : 元素左边到视窗左边的距离;
</span></span><span style="display:flex;"><span>rectObject.width : 是元素自身的宽
</span></span><span style="display:flex;"><span>rectObject.height : 是元素自身的高
</span></span></code></pre></div><p><code>player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span> add_listening_events() {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 创建 rect 对象
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">const</span> rect = outer.ctx.canvas.getBoundingClientRect();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#007f7f">// 调整偏移量
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            outer.move_to(e.clientX - rect.left, e.clientY - rect.top);
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (outer.cur_skill === <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#007f7f">// 调整偏移量
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                outer.shoot_fireball(e.clientX - rect.left, e.clientY - rect.top);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h3 id="将菜单界面重新设为主界面">将菜单界面重新设为主界面</h3>
<p><code>js/zbase.js</code> 的注释取消，使之创建出 <strong>menu</strong> 对象</p>
<p><code>js/playground/zbase.js</code> 的注释取消，并设置逻辑，让 <strong>playground</strong> 打开后，才进行游戏界面初始化</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.root = root;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$playground = $(<span style="color:#0ff;font-weight:bold">`&lt;div class=&#34;ac-game-playground&#34;&gt;&lt;/div&gt;`</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.hide();    <span style="color:#007f7f">// 初始时隐藏
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 游戏界面生成代码在下面展示 playground 时执行
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.start();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    show() {    <span style="color:#007f7f">// 打开 playground 界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.$playground.show();
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 开始生成游戏界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.root.$ac_game.append(<span style="color:#fff;font-weight:bold">this</span>.$playground);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.width = <span style="color:#fff;font-weight:bold">this</span>.$playground.width();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.height = <span style="color:#fff;font-weight:bold">this</span>.$playground.height();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.game_map = <span style="color:#fff;font-weight:bold">new</span> GameMap(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players = [];  <span style="color:#007f7f">// 存放当前游戏中的所有玩家
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 将玩家加入游戏中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;white&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">true</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#fff;font-weight:bold">this</span>.get_random_color(), <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="调整-css-文件适应窗口">调整 css 文件，适应窗口</h3>
<p>在设置 <code>web</code> 网页的时候，有些设置了绝对值，可能对于窗口化的 <code>acapp</code> 显示效果差</p>
<p>将他们修改成相对数值</p>
<p><code>game.css</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>.ac-game-menu-field {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    top: <span style="color:#ff0;font-weight:bold">40</span>%;
</span></span><span style="display:flex;"><span>    left: <span style="color:#ff0;font-weight:bold">20</span>%;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.ac-game-menu-field-item {
</span></span><span style="display:flex;"><span>    height: <span style="color:#ff0;font-weight:bold">6</span>vh;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    font-size: <span style="color:#ff0;font-weight:bold">4</span>vh;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
