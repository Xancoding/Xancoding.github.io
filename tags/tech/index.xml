<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tech on Xan&#39;s Blog</title>
    <link>https://xancoding.github.io/tags/tech/</link>
    <description>Recent content in Tech on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 12 Oct 2022 22:09:45 +0800</lastBuildDate><atom:link href="https://xancoding.github.io/tags/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Account</title>
      <link>https://xancoding.github.io/posts/account/</link>
      <pubDate>Wed, 12 Oct 2022 22:09:45 +0800</pubDate>
      
      <guid>https://xancoding.github.io/posts/account/</guid>
      <description>&lt;p&gt;[[Redis]]&lt;/p&gt;
&lt;h1 id=&#34;django&#34;&gt;Django&lt;/h1&gt;
&lt;h2 id=&#34;用户名密码登录&#34;&gt;用户名密码登录&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/video/3550/&#34;&gt;6.1用户名密码登录-Vedio&lt;/a&gt;
数据表定义：11m02s~21m02s
views &amp;amp; urls &amp;amp; js：25m01s~32m50s~33m37s~47m30s
将头像渲染到角色上：48m~50m20s
登陆界面 HTML+CSS：57m10s~1h42m30s~1h49m56s
登陆界面 逻辑实现：1h50m~1h53m47s~1h58m41s~2h20s~2h32m40s
&lt;a href=&#34;https://www.acwing.com/solution/content/79314/&#34;&gt;6.1 上课笔记&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/solution/content/75831/&#34;&gt;6.1 上课笔记——&lt;strong&gt;客户端请求与Django响应流程&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们在定义完一个数据表之后，需要将其&lt;strong&gt;更新到数据库&lt;/strong&gt;，这时候我们需要执行两句话：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
python3 manage.py makemigrations
python3 manage.py migrate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;客户端请求与Django响应流程&lt;/strong&gt;
用户在客户端通过&lt;code&gt;$.ajax&lt;/code&gt;发送请求，根据&lt;code&gt;urls&lt;/code&gt;路由到对应的&lt;code&gt;views&lt;/code&gt;中的函数，处理&lt;code&gt;request&lt;/code&gt;后返回&lt;code&gt;JsonResponse&lt;/code&gt; 至客户端&lt;/p&gt;
&lt;p&gt;&lt;code&gt;views&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.http &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; JsonResponse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.contrib.auth &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; authenticate, login
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; signin(request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data = request.GET &lt;span style=&#34;color:#007f7f&#34;&gt;# 获取请求的信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    username = data.get(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#007f7f&#34;&gt;# 用户名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    password = data.get(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#007f7f&#34;&gt;# 密码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user = authenticate(username = username, password = password) &lt;span style=&#34;color:#007f7f&#34;&gt;# 从数据库中查找这个用户&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; not user: &lt;span style=&#34;color:#007f7f&#34;&gt;# 如果没有就直接返回不成功&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;用户名或密码不正确&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   login(request, user) &lt;span style=&#34;color:#007f7f&#34;&gt;# 找到了就登录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;urls&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.views.settings.login &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; signin &lt;span style=&#34;color:#007f7f&#34;&gt;# 引入自己写的逻辑&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;login/&amp;#34;&lt;/span&gt;, signin, name = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;settings_login&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#007f7f&#34;&gt;# &amp;#34;settings/login/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;login_on_remote() &lt;span style=&#34;color:#007f7f&#34;&gt;// 在远程服务器上登录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; username = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_username.val(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 获取输入框中的用户名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; password = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_password.val(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 获取输入框中的密码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_error_message.empty(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 清楚错误信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $.ajax({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        url: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;登录URL&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#007f7f&#34;&gt;// 访问url
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        type: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            username: username, &lt;span style=&#34;color:#007f7f&#34;&gt;// 传输数据
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            password: password,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        success: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(resp){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            console.log(resp); &lt;span style=&#34;color:#007f7f&#34;&gt;// 测试输出
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (resp.result === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                location.reload(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 如果成功就刷新
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                outer.$login_error_message.html(resp.result); &lt;span style=&#34;color:#007f7f&#34;&gt;// 如果失败就显示错误信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;第三方登录&#34;&gt;第三方登录&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/video/3565/&#34;&gt;6.2 web端AcWing一键登录-Vedio&lt;/a&gt;
在&lt;code&gt;django&lt;/code&gt;中集成数据库&lt;code&gt;redis&lt;/code&gt;：7m10s~13m20s
&lt;code&gt;redis&lt;/code&gt;命令：13m40s~16m34s
&lt;strong&gt;Oauth2一键授权登录的基本原理&lt;/strong&gt;：17m30s~29m15s~32m51s
数据表添加&lt;code&gt;openid&lt;/code&gt;信息：33m20s~34m47s
&lt;strong&gt;Oauth2一键授权登录的代码实现&lt;/strong&gt;：35m20s~1h25s~1h27m20s
用户点击&lt;code&gt;AcWing一键登录&lt;/code&gt;，通过&lt;code&gt;urls &amp;amp; views&lt;/code&gt;调用&lt;code&gt;apply_code&lt;/code&gt;函数，将&lt;code&gt;state&lt;/code&gt;放到&lt;code&gt;redis&lt;/code&gt;中，将&lt;code&gt;appid &amp;amp; redirect_uri &amp;amp; scope &amp;amp; state&lt;/code&gt; 传入&lt;code&gt;apply_code_url&lt;/code&gt;链接，返回并重定向至&lt;code&gt;apply_code_url&lt;/code&gt;向用户询问是否授权
用户点击&lt;code&gt;同意&lt;/code&gt;后，重定向至&lt;code&gt;redirect_uri&lt;/code&gt;链接，返回参数为&lt;code&gt;code&lt;/code&gt;和&lt;code&gt;state&lt;/code&gt;，通过&lt;code&gt;urls &amp;amp; views&lt;/code&gt;调用&lt;code&gt;receive_code&lt;/code&gt;函数。若验证&lt;code&gt;state&lt;/code&gt;失败，直接重定向至初始界面
若验证&lt;code&gt;state&lt;/code&gt;成功，将&lt;code&gt;appid &amp;amp; code &amp;amp; secret&lt;/code&gt;发送至&lt;code&gt;AcWing服务器&lt;/code&gt;，申请授权令牌&lt;code&gt;access_token&lt;/code&gt;和用户的&lt;code&gt;openid&lt;/code&gt;
若申请令牌成功，将&lt;code&gt;access_token &amp;amp; openid&lt;/code&gt;发送至&lt;code&gt;AcWing服务器&lt;/code&gt;，得到用户信息，创建并登录用户，最后重定向至初始界面
&lt;a href=&#34;https://www.acwing.com/blog/content/12466/&#34;&gt;6.2 &lt;strong&gt;Web端AcWing一键登录-讲义&lt;/strong&gt;&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/solution/content/79354/&#34;&gt;6.2 &lt;strong&gt;上课笔记&lt;/strong&gt;&lt;/a&gt;
&lt;code&gt;redirect_uri = quote(&amp;quot;https://app23.acapp.acwing.com.cn/settings/acwing/web/receive_code&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/video/3566/&#34;&gt;6.3 acapp端AcWing一键登录-Vedio&lt;/a&gt;
&lt;strong&gt;Oauth2一键授权登录的基本原理&lt;/strong&gt;：10m~12m20s~16m35s~18m
&lt;strong&gt;Oauth2一键授权登录的代码实现&lt;/strong&gt;：19m25s~21m~23m25s~34m29s~42m10s
&lt;a href=&#34;https://www.acwing.com/blog/content/12467/&#34;&gt;6.3 acapp端AcWing一键登录-讲义&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/solution/content/79365/&#34;&gt;6.3 上课笔记&lt;/a&gt;&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<p>[[Redis]]</p>
<h1 id="django">Django</h1>
<h2 id="用户名密码登录">用户名密码登录</h2>
<p><a href="https://www.acwing.com/video/3550/">6.1用户名密码登录-Vedio</a>
数据表定义：11m02s~21m02s
views &amp; urls &amp; js：25m01s~32m50s~33m37s~47m30s
将头像渲染到角色上：48m~50m20s
登陆界面 HTML+CSS：57m10s~1h42m30s~1h49m56s
登陆界面 逻辑实现：1h50m~1h53m47s~1h58m41s~2h20s~2h32m40s
<a href="https://www.acwing.com/solution/content/79314/">6.1 上课笔记</a>
<a href="https://www.acwing.com/solution/content/75831/">6.1 上课笔记——<strong>客户端请求与Django响应流程</strong></a></p>
<ul>
<li>我们在定义完一个数据表之后，需要将其<strong>更新到数据库</strong>，这时候我们需要执行两句话：</li>
</ul>
<pre tabindex="0"><code>
python3 manage.py makemigrations
python3 manage.py migrate
</code></pre><p><strong>客户端请求与Django响应流程</strong>
用户在客户端通过<code>$.ajax</code>发送请求，根据<code>urls</code>路由到对应的<code>views</code>中的函数，处理<code>request</code>后返回<code>JsonResponse</code> 至客户端</p>
<p><code>views</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.http <span style="color:#fff;font-weight:bold">import</span> JsonResponse
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.contrib.auth <span style="color:#fff;font-weight:bold">import</span> authenticate, login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> signin(request):
</span></span><span style="display:flex;"><span>    data = request.GET <span style="color:#007f7f"># 获取请求的信息</span>
</span></span><span style="display:flex;"><span>    username = data.get(<span style="color:#0ff;font-weight:bold">&#39;username&#39;</span>) <span style="color:#007f7f"># 用户名</span>
</span></span><span style="display:flex;"><span>    password = data.get(<span style="color:#0ff;font-weight:bold">&#39;password&#39;</span>) <span style="color:#007f7f"># 密码</span>
</span></span><span style="display:flex;"><span>    user = authenticate(username = username, password = password) <span style="color:#007f7f"># 从数据库中查找这个用户</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> not user: <span style="color:#007f7f"># 如果没有就直接返回不成功</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;用户名或密码不正确&#34;</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>   login(request, user) <span style="color:#007f7f"># 找到了就登录</span>
</span></span></code></pre></div><p><code>urls</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.views.settings.login <span style="color:#fff;font-weight:bold">import</span> signin <span style="color:#007f7f"># 引入自己写的逻辑</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>urlpatterns = [
</span></span><span style="display:flex;"><span>    path(<span style="color:#0ff;font-weight:bold">&#34;login/&#34;</span>, signin, name = <span style="color:#0ff;font-weight:bold">&#34;settings_login&#34;</span>), <span style="color:#007f7f"># &#34;settings/login/&#34;</span>
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p><code>js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>login_on_remote() <span style="color:#007f7f">// 在远程服务器上登录
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>{
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> username = <span style="color:#fff;font-weight:bold">this</span>.$login_username.val(); <span style="color:#007f7f">// 获取输入框中的用户名
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> password = <span style="color:#fff;font-weight:bold">this</span>.$login_password.val(); <span style="color:#007f7f">// 获取输入框中的密码
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.$login_error_message.empty(); <span style="color:#007f7f">// 清楚错误信息
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    $.ajax({
</span></span><span style="display:flex;"><span>        url: <span style="color:#0ff;font-weight:bold">&#34;登录URL&#34;</span>, <span style="color:#007f7f">// 访问url
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        type: <span style="color:#0ff;font-weight:bold">&#34;GET&#34;</span>,
</span></span><span style="display:flex;"><span>        data: {
</span></span><span style="display:flex;"><span>            username: username, <span style="color:#007f7f">// 传输数据
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            password: password,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        success: <span style="color:#fff;font-weight:bold">function</span>(resp){
</span></span><span style="display:flex;"><span>            console.log(resp); <span style="color:#007f7f">// 测试输出
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">if</span> (resp.result === <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>) {
</span></span><span style="display:flex;"><span>                location.reload(); <span style="color:#007f7f">// 如果成功就刷新
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            }
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>                outer.$login_error_message.html(resp.result); <span style="color:#007f7f">// 如果失败就显示错误信息
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="第三方登录">第三方登录</h2>
<p><a href="https://www.acwing.com/video/3565/">6.2 web端AcWing一键登录-Vedio</a>
在<code>django</code>中集成数据库<code>redis</code>：7m10s~13m20s
<code>redis</code>命令：13m40s~16m34s
<strong>Oauth2一键授权登录的基本原理</strong>：17m30s~29m15s~32m51s
数据表添加<code>openid</code>信息：33m20s~34m47s
<strong>Oauth2一键授权登录的代码实现</strong>：35m20s~1h25s~1h27m20s
用户点击<code>AcWing一键登录</code>，通过<code>urls &amp; views</code>调用<code>apply_code</code>函数，将<code>state</code>放到<code>redis</code>中，将<code>appid &amp; redirect_uri &amp; scope &amp; state</code> 传入<code>apply_code_url</code>链接，返回并重定向至<code>apply_code_url</code>向用户询问是否授权
用户点击<code>同意</code>后，重定向至<code>redirect_uri</code>链接，返回参数为<code>code</code>和<code>state</code>，通过<code>urls &amp; views</code>调用<code>receive_code</code>函数。若验证<code>state</code>失败，直接重定向至初始界面
若验证<code>state</code>成功，将<code>appid &amp; code &amp; secret</code>发送至<code>AcWing服务器</code>，申请授权令牌<code>access_token</code>和用户的<code>openid</code>
若申请令牌成功，将<code>access_token &amp; openid</code>发送至<code>AcWing服务器</code>，得到用户信息，创建并登录用户，最后重定向至初始界面
<a href="https://www.acwing.com/blog/content/12466/">6.2 <strong>Web端AcWing一键登录-讲义</strong></a>
<a href="https://www.acwing.com/solution/content/79354/">6.2 <strong>上课笔记</strong></a>
<code>redirect_uri = quote(&quot;https://app23.acapp.acwing.com.cn/settings/acwing/web/receive_code&quot;)</code></p>
<p><a href="https://www.acwing.com/video/3566/">6.3 acapp端AcWing一键登录-Vedio</a>
<strong>Oauth2一键授权登录的基本原理</strong>：10m~12m20s~16m35s~18m
<strong>Oauth2一键授权登录的代码实现</strong>：19m25s~21m~23m25s~34m29s~42m10s
<a href="https://www.acwing.com/blog/content/12467/">6.3 acapp端AcWing一键登录-讲义</a>
<a href="https://www.acwing.com/solution/content/79365/">6.3 上课笔记</a></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Django</title>
      <link>https://xancoding.github.io/posts/django/</link>
      <pubDate>Wed, 12 Oct 2022 22:08:28 +0800</pubDate>
      
      <guid>https://xancoding.github.io/posts/django/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/punch_the_clock/72/&#34;&gt;Django框架课&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;[[SSH]]
[[Docker]]
[[SHELL]]
[[Ngnix&amp;amp;uwsgi]]
[[Redis]]
[[WSS]]
[[Django_channels]]
[[账号系统]]
[[JS简易游戏引擎实现]]
[[JS模块引用]]
&lt;a href=&#34;https://www.acwing.com/solution/content/114359/&#34;&gt;acapp 项目自动化运行&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;项目创建运行&#34;&gt;项目创建&amp;amp;运行&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/72577/&#34;&gt;2.1. 创建 django 项目&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh django&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;django-admin startproject acapp&lt;/code&gt;：在当前目录下创建名为&lt;code&gt;acapp&lt;/code&gt;的&lt;code&gt;django&lt;/code&gt;项目&lt;/li&gt;
&lt;li&gt;将项目用&lt;code&gt;git&lt;/code&gt;维护起来
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh-key-gen&lt;/code&gt;：在&lt;code&gt;服务器&lt;/code&gt;中生成密钥（&lt;code&gt;git&lt;/code&gt;通过&lt;code&gt;ssh&lt;/code&gt;传文件）&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;AcGit&lt;/code&gt;中&lt;code&gt;SSH密钥&lt;/code&gt;中添加&lt;code&gt;SSH公钥&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;：创建&lt;code&gt;git&lt;/code&gt;仓库&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;AcGit&lt;/code&gt;上新建空白项目&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
git config --global user.name xxx
git config --global user.email xxx@xxx.com
git add .
git commit -m &amp;#34;xxx&amp;#34;
git remote add origin git@git.acwing.com:xxx/XXX.git #建立连接
git push --set-upstream origin master
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;在本地运行项目： &lt;code&gt;python3 manage.py runserver 0.0.0.0:8000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重点：每个 app 里面有这四个东西
&lt;ul&gt;
&lt;li&gt;Models：管理数据库数据&lt;/li&gt;
&lt;li&gt;Views：管理 &lt;code&gt;http&lt;/code&gt; 函数（接收浏览器请求，返回字符串至浏览器）&lt;/li&gt;
&lt;li&gt;Urls：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数)&lt;/li&gt;
&lt;li&gt;Templates：存储网页模板管理 &lt;code&gt;html&lt;/code&gt;  文件
&lt;a href=&#34;https://www.acwing.com/solution/content/73097/&#34;&gt;2.1上课笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;菜单界面项目架构设计&#34;&gt;菜单界面&amp;amp;项目架构设计&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/video/3519/&#34;&gt;创建菜单界面-Vedio&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3199626/&#34;&gt;创建菜单界面-讲义&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/solution/content/73121/&#34;&gt;3.1 上课笔记&lt;/a&gt;
将 &lt;code&gt;src&lt;/code&gt;文件夹下的 &lt;code&gt;JS&lt;/code&gt;源文件打包至 &lt;code&gt;dist&lt;/code&gt; 文件夹&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;#! /bin/bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;JS_PATH=/home/acs/acapp/game/static/js/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;JS_PATH_DIST=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;${&lt;/span&gt;JS_PATH&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;}&lt;/span&gt;dist/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;JS_PATH_SRC=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;${&lt;/span&gt;JS_PATH&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;}&lt;/span&gt;src/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;find $JS_PATH_SRC -type f -name &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;*.js&amp;#39;&lt;/span&gt; | sort | xargs cat &amp;gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;${&lt;/span&gt;JS_PATH_DIST&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;}&lt;/span&gt;game.js
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;网页渲染流程&lt;/strong&gt;：根据用户的链接，首先进入&lt;code&gt;acapp/urls.py&lt;/code&gt;，根据&lt;code&gt;path&lt;/code&gt;再进入&lt;code&gt;game/urls/index.py&lt;/code&gt;，再根据&lt;code&gt;path&lt;/code&gt;进入下一层&lt;code&gt;url&lt;/code&gt;或调用相对应的&lt;code&gt;views&lt;/code&gt;中的&lt;code&gt;index.py&lt;/code&gt;函数，函数接收参数，在网页端渲染&lt;code&gt;templates/multiends&lt;/code&gt;下的&lt;code&gt;web.html&lt;/code&gt;，&lt;code&gt;html&lt;/code&gt;中有&lt;code&gt;JS&lt;/code&gt;执行
注意：本项目为前后端分离，即通过&lt;code&gt;JS&lt;/code&gt;在&lt;code&gt;client&lt;/code&gt;中渲染项目(动态生成页面)，而不是在&lt;code&gt;server&lt;/code&gt;渲染项目&lt;/p&gt;
&lt;h1 id=&#34;游戏界面&#34;&gt;游戏界面&lt;/h1&gt;
&lt;h3 id=&#34;单人游戏&#34;&gt;单人游戏&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/video/3520/&#34;&gt;4.1 创建游戏界面-Vedio&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/solution/content/79181/&#34;&gt;4.1 上课笔记&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若修改&lt;code&gt;static文件夹&lt;/code&gt;下的相关文件，需在&lt;code&gt;~/acapp&lt;/code&gt;下执行&lt;code&gt;./scripts/compress_game_js.sh&lt;/code&gt;来打包文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;联机对战&#34;&gt;联机对战&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3357332/&#34;&gt;实现联机对战——讲义&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/video/3581/&#34;&gt;7.1 实现联机对战（上）-Vedio&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/blog/content/12692/&#34;&gt;配置channels-redis&lt;/a&gt;
统一长度单位：7m20s~38m
创建的时候相对于窗口大小创建不同元素适应窗口，画的时候要在这个窗口绝对位置去画
增加“联机对战”模式：40m10s~49m
联机原理：50m~1h2m40s
配置channels-redis：1h2m40s~1h09m11s
&lt;a href=&#34;https://www.acwing.com/solution/content/89506/&#34;&gt;7.1 上课笔记&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/video/3582/&#34;&gt;7.2 实现联机对战（下）-Vedio&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/solution/content/88801/&#34;&gt;7.2 上课笔记&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;调试&#34;&gt;调试&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;~/acapp&lt;/code&gt; 文件夹下执行 &lt;code&gt;python3 manage.py shell&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Def clear ():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	For key in cache. Keys (&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		Cache. Delete(key)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;code&gt;from django.core.cache import cache&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;聊天系统&#34;&gt;聊天系统&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/video/3603/&#34;&gt;8.1 聊天功能的实现-Vedio&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/solution/content/89508/&#34;&gt;8.1 上课笔记&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;匹配系统&#34;&gt;匹配系统&lt;/h1&gt;
&lt;p&gt;[[Thrift]]
&lt;a href=&#34;https://www.acwing.com/video/3618/&#34;&gt;9.1 实现匹配系统——thrift服务-Vedio&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/activity/content/code/content/2360556/&#34;&gt;9.1 上课笔记&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;项目收尾&#34;&gt;项目收尾&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3435229/&#34;&gt;讲义&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/video/3619/&#34;&gt;9.2 实现匹配系统——项目收尾-Vedio&lt;/a&gt;
&lt;a href=&#34;https://www.acwing.com/activity/content/code/content/2360556/&#34;&gt;9.2 上课笔记&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;版本更新&#34;&gt;版本更新&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;a href=&#34;https://www.acwing.com/user/myspace/application/update/2433/&#34;&gt;术士之战&lt;/a&gt;中将&lt;strong&gt;js地址&lt;/strong&gt;一栏更新为&lt;code&gt;https://app2433.acapp.acwing.com.cn/static/js/dist/game-版本号.js&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;注：文件夹中对应的文件也需要更改名字&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p><a href="https://www.acwing.com/activity/content/punch_the_clock/72/">Django框架课</a></p>
<hr>
<p>[[SSH]]
[[Docker]]
[[SHELL]]
[[Ngnix&amp;uwsgi]]
[[Redis]]
[[WSS]]
[[Django_channels]]
[[账号系统]]
[[JS简易游戏引擎实现]]
[[JS模块引用]]
<a href="https://www.acwing.com/solution/content/114359/">acapp 项目自动化运行</a></p>
<hr>
<h1 id="项目创建运行">项目创建&amp;运行</h1>
<p><a href="https://www.acwing.com/solution/content/72577/">2.1. 创建 django 项目</a></p>
<ol>
<li><code>ssh django</code></li>
<li><code>django-admin startproject acapp</code>：在当前目录下创建名为<code>acapp</code>的<code>django</code>项目</li>
<li>将项目用<code>git</code>维护起来
<ol>
<li><code>ssh-key-gen</code>：在<code>服务器</code>中生成密钥（<code>git</code>通过<code>ssh</code>传文件）</li>
<li>在<code>AcGit</code>中<code>SSH密钥</code>中添加<code>SSH公钥</code></li>
<li><code>git init</code>：创建<code>git</code>仓库</li>
<li>在<code>AcGit</code>上新建空白项目</li>
</ol>
</li>
</ol>
<pre tabindex="0"><code>
git config --global user.name xxx
git config --global user.email xxx@xxx.com
git add .
git commit -m &#34;xxx&#34;
git remote add origin git@git.acwing.com:xxx/XXX.git #建立连接
git push --set-upstream origin master
</code></pre><ul>
<li>在本地运行项目： <code>python3 manage.py runserver 0.0.0.0:8000</code></li>
<li>重点：每个 app 里面有这四个东西
<ul>
<li>Models：管理数据库数据</li>
<li>Views：管理 <code>http</code> 函数（接收浏览器请求，返回字符串至浏览器）</li>
<li>Urls：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数)</li>
<li>Templates：存储网页模板管理 <code>html</code>  文件
<a href="https://www.acwing.com/solution/content/73097/">2.1上课笔记</a></li>
</ul>
</li>
</ul>
<h1 id="菜单界面项目架构设计">菜单界面&amp;项目架构设计</h1>
<p><a href="https://www.acwing.com/video/3519/">创建菜单界面-Vedio</a>
<a href="https://www.acwing.com/file_system/file/content/whole/index/content/3199626/">创建菜单界面-讲义</a>
<a href="https://www.acwing.com/solution/content/73121/">3.1 上课笔记</a>
将 <code>src</code>文件夹下的 <code>JS</code>源文件打包至 <code>dist</code> 文件夹</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007f7f">#! /bin/bash</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>JS_PATH=/home/acs/acapp/game/static/js/
</span></span><span style="display:flex;"><span>JS_PATH_DIST=<span style="color:#0ff;font-weight:bold">${</span>JS_PATH<span style="color:#0ff;font-weight:bold">}</span>dist/
</span></span><span style="display:flex;"><span>JS_PATH_SRC=<span style="color:#0ff;font-weight:bold">${</span>JS_PATH<span style="color:#0ff;font-weight:bold">}</span>src/
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>find $JS_PATH_SRC -type f -name <span style="color:#0ff;font-weight:bold">&#39;*.js&#39;</span> | sort | xargs cat &gt; <span style="color:#0ff;font-weight:bold">${</span>JS_PATH_DIST<span style="color:#0ff;font-weight:bold">}</span>game.js
</span></span></code></pre></div><p><strong>网页渲染流程</strong>：根据用户的链接，首先进入<code>acapp/urls.py</code>，根据<code>path</code>再进入<code>game/urls/index.py</code>，再根据<code>path</code>进入下一层<code>url</code>或调用相对应的<code>views</code>中的<code>index.py</code>函数，函数接收参数，在网页端渲染<code>templates/multiends</code>下的<code>web.html</code>，<code>html</code>中有<code>JS</code>执行
注意：本项目为前后端分离，即通过<code>JS</code>在<code>client</code>中渲染项目(动态生成页面)，而不是在<code>server</code>渲染项目</p>
<h1 id="游戏界面">游戏界面</h1>
<h3 id="单人游戏">单人游戏</h3>
<p><a href="https://www.acwing.com/video/3520/">4.1 创建游戏界面-Vedio</a>
<a href="https://www.acwing.com/solution/content/79181/">4.1 上课笔记</a></p>
<ul>
<li>若修改<code>static文件夹</code>下的相关文件，需在<code>~/acapp</code>下执行<code>./scripts/compress_game_js.sh</code>来打包文件</li>
</ul>
<h3 id="联机对战">联机对战</h3>
<p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3357332/">实现联机对战——讲义</a>
<a href="https://www.acwing.com/video/3581/">7.1 实现联机对战（上）-Vedio</a>
<a href="https://www.acwing.com/blog/content/12692/">配置channels-redis</a>
统一长度单位：7m20s~38m
创建的时候相对于窗口大小创建不同元素适应窗口，画的时候要在这个窗口绝对位置去画
增加“联机对战”模式：40m10s~49m
联机原理：50m~1h2m40s
配置channels-redis：1h2m40s~1h09m11s
<a href="https://www.acwing.com/solution/content/89506/">7.1 上课笔记</a>
<a href="https://www.acwing.com/video/3582/">7.2 实现联机对战（下）-Vedio</a>
<a href="https://www.acwing.com/solution/content/88801/">7.2 上课笔记</a></p>
<h4 id="调试">调试</h4>
<ol>
<li><code>~/acapp</code> 文件夹下执行 <code>python3 manage.py shell</code></li>
<li></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Def clear ():
</span></span><span style="display:flex;"><span>	For key in cache. Keys (<span style="color:#0ff;font-weight:bold">&#39;*&#39;</span>):
</span></span><span style="display:flex;"><span>		Cache. Delete(key)
</span></span></code></pre></div><ol start="3">
<li><code>from django.core.cache import cache</code></li>
</ol>
<h1 id="聊天系统">聊天系统</h1>
<p><a href="https://www.acwing.com/video/3603/">8.1 聊天功能的实现-Vedio</a>
<a href="https://www.acwing.com/solution/content/89508/">8.1 上课笔记</a></p>
<h1 id="匹配系统">匹配系统</h1>
<p>[[Thrift]]
<a href="https://www.acwing.com/video/3618/">9.1 实现匹配系统——thrift服务-Vedio</a>
<a href="https://www.acwing.com/activity/content/code/content/2360556/">9.1 上课笔记</a></p>
<h1 id="项目收尾">项目收尾</h1>
<p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3435229/">讲义</a>
<a href="https://www.acwing.com/video/3619/">9.2 实现匹配系统——项目收尾-Vedio</a>
<a href="https://www.acwing.com/activity/content/code/content/2360556/">9.2 上课笔记</a></p>
<h1 id="版本更新">版本更新</h1>
<ul>
<li>在<a href="https://www.acwing.com/user/myspace/application/update/2433/">术士之战</a>中将<strong>js地址</strong>一栏更新为<code>https://app2433.acapp.acwing.com.cn/static/js/dist/game-版本号.js</code>
<ul>
<li>注：文件夹中对应的文件也需要更改名字</li>
</ul>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>JS简易游戏引擎实现</title>
      <link>https://xancoding.github.io/posts/acgameproject/</link>
      <pubDate>Wed, 12 Oct 2022 22:06:12 +0800</pubDate>
      
      <guid>https://xancoding.github.io/posts/acgameproject/</guid>
      <description>&lt;h1 id=&#34;简易游戏引擎实现acgameobject&#34;&gt;简易游戏引擎实现（AcGameObject）&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; last_timestp; &lt;span style=&#34;color:#007f7f&#34;&gt;// 上一帧的时间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; AC_GAME_ANIMATION = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(timestp) &lt;span style=&#34;color:#007f7f&#34;&gt;// timestp 是传入的一个参数，就是当前调用的时间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; AC_GAME_OBJECTS.length; ++ i) &lt;span style=&#34;color:#007f7f&#34;&gt;// 所有动的元素都进行更新。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; obj = AC_GAME_OBJECTS[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!obj.has_called_start)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            obj.start(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 调用start()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            obj.has_called_start = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#007f7f&#34;&gt;// 表示已经调用过start()了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            obj.timedelta = timestp - last_timestp; &lt;span style=&#34;color:#007f7f&#34;&gt;// 时间微分
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            obj.update(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 不断调用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_timestp = timestp; &lt;span style=&#34;color:#007f7f&#34;&gt;// 进入下一帧时当前时间戳就是这一帧的时间戳
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    requestAnimationFrame(AC_GAME_ANIMATION); &lt;span style=&#34;color:#007f7f&#34;&gt;// 不断递归调用
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requestAnimationFrame(AC_GAME_ANIMATION); &lt;span style=&#34;color:#007f7f&#34;&gt;// JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<h1 id="简易游戏引擎实现acgameobject">简易游戏引擎实现（AcGameObject）</h1>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> last_timestp; <span style="color:#007f7f">// 上一帧的时间
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">let</span> AC_GAME_ANIMATION = <span style="color:#fff;font-weight:bold">function</span>(timestp) <span style="color:#007f7f">// timestp 是传入的一个参数，就是当前调用的时间
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>{
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; AC_GAME_OBJECTS.length; ++ i) <span style="color:#007f7f">// 所有动的元素都进行更新。
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> obj = AC_GAME_OBJECTS[i];
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (!obj.has_called_start)
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            obj.start(); <span style="color:#007f7f">// 调用start()
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            obj.has_called_start = <span style="color:#fff;font-weight:bold">true</span>; <span style="color:#007f7f">// 表示已经调用过start()了
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">else</span>
</span></span><span style="display:flex;"><span>        {
</span></span><span style="display:flex;"><span>            obj.timedelta = timestp - last_timestp; <span style="color:#007f7f">// 时间微分
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            obj.update(); <span style="color:#007f7f">// 不断调用
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    last_timestp = timestp; <span style="color:#007f7f">// 进入下一帧时当前时间戳就是这一帧的时间戳
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    requestAnimationFrame(AC_GAME_ANIMATION); <span style="color:#007f7f">// 不断递归调用
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>requestAnimationFrame(AC_GAME_ANIMATION); <span style="color:#007f7f">// JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等)
</span></span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
