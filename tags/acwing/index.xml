<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AcWing on Xan&#39;s Blog</title>
    <link>https://xancoding.cn/tags/acwing/</link>
    <description>Recent content in AcWing on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 02 Nov 2022 15:49:03 +0800</lastBuildDate><atom:link href="https://xancoding.cn/tags/acwing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AcWing Web 应用课</title>
      <link>https://xancoding.cn/posts/acwweb/</link>
      <pubDate>Wed, 02 Nov 2022 15:49:03 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwweb/</guid>
      <description>&lt;h1 id=&#34;acwing-web-应用课&#34;&gt;AcWing Web 应用课&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_web/&#34;&gt;AcWing Web 应用课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/punch_the_clock/1150/&#34;&gt;AcWing Web 应用课&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/4078555/&#34;&gt;HTML 基础标签&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/4194723/&#34;&gt;CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/4719082/&#34;&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/5501588/&#34;&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/5639568/&#34;&gt;Vue3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/&#34;&gt;MDN官方文档&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web&#34;&gt;Web 入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/HTML&#34;&gt;HTML —— 构建 Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/CSS&#34;&gt;CSS —— 设计Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript&#34;&gt;JavaScript —— 用户端动态脚本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started&#34;&gt;React 入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started&#34;&gt;Vue 入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial&#34;&gt;Canvas 教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;VSCode&lt;/code&gt; 自动生成缺省的 &lt;code&gt;HTML&lt;/code&gt; 代码框架&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0f0;font-weight:bold&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#007f7f&#34;&gt;lang&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#007f7f&#34;&gt;charset&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#007f7f&#34;&gt;http-equiv&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;X-UA-Compatible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#007f7f&#34;&gt;content&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;IE=edge&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#007f7f&#34;&gt;name&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#007f7f&#34;&gt;content&lt;/span&gt;=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;title&lt;/span&gt;&amp;gt;Document&amp;lt;/&lt;span style=&#34;font-weight:bold&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;font-weight:bold&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;font-weight:bold&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;font-weight:bold&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;输入&lt;code&gt;！&lt;/code&gt;，接着输入 &lt;code&gt;tab&lt;/code&gt; 键，自动生成缺省的 &lt;code&gt;HTML&lt;/code&gt; 代码框架&lt;/li&gt;
&lt;li&gt;再按三下 &lt;code&gt;tab&lt;/code&gt; 键，光标会移动到 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 与 &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt; 之间的空行&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&#34;kof&#34;&gt;KOF&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xancoding/Leaning-jQuery&#34;&gt;KOF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/video/3830/&#34;&gt;AcWing Web 应用课 | 中期项目——拳皇（上） | Vedio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/video/3833/&#34;&gt;AcWing Web 应用课 | 中期项目——拳皇（下） | Vedio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;基础操作&#34;&gt;基础操作&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;操作如下：
角色一: w 跳 a 左移 d 右移 j 拳击 
角色二: ↑ 跳 ← 左移 → 右移 1 拳击
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;文件结构&#34;&gt;文件结构&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- README.md
|-- static
|   |-- css
|   |   `-- base.css
|   |-- images
|   |   |-- background
|   |   |   `-- 0.gif
|   |   `-- player
|   |       `-- kyo
|   |           |-- 0.gif
|   |           |-- 1.gif
|   |           |-- 2.gif
|   |           |-- 3.gif
|   |           |-- 4.gif
|   |           |-- 5.gif
|   |           `-- 6.gif
|   `-- js
|       |-- ac_game_object
|       |   `-- base.js
|       |-- base.js
|       |-- controller
|       |   `-- base.js
|       |-- game_map
|       |   `-- base.js
|       |-- player
|       |   |-- base.js
|       |   `-- kyo.js
|       `-- utils
|           `-- gif.js
`-- templates
    `-- index.html
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;整体架构&#34;&gt;整体架构&lt;/h3&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://bu.dusays.com/2022/11/02/63627b3105c46.png&#34;&gt;
&lt;img src=&#34;https://bu.dusays.com/2022/11/02/63627b3105c46.png&#34; alt=&#34;KOFStructure&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;h3 id=&#34;逻辑结构&#34;&gt;逻辑结构&lt;/h3&gt;
&lt;center&gt; 
	&lt;img style=&#34;border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&#34; src=&#34;https://bu.dusays.com/2022/11/02/63627ace5a2f9.png&#34;&gt;
	&lt;br&gt;
	&lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9; 
	display: inline-block; 
	color: #999; 
	padding: 2px;&#34;&gt;Retrieved from：https://www.acwing.com/solution/content/139831/&lt;/div&gt; 
 &lt;/center&gt;
&lt;h3 id=&#34;html&#34;&gt;HTML&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;templates/index.html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;

&amp;lt;head&amp;gt;

  &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt;

  &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt;

  &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt;

  &amp;lt;title&amp;gt;KOF&amp;lt;/title&amp;gt;

  &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;../static/css/base.css&amp;#34;&amp;gt;

  &amp;lt;script src=&amp;#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;

&amp;lt;/head&amp;gt;

&amp;lt;body&amp;gt;

  &amp;lt;div id=&amp;#34;kof&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;

  

  &amp;lt;script type=&amp;#34;module&amp;#34;&amp;gt;

    import {KOF} from &amp;#39;../static/js/base.js&amp;#39;;

  

    let kof = new KOF(&amp;#39;kof&amp;#39;);

  &amp;lt;/script&amp;gt;

&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;css&#34;&gt;CSS&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;css/base.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#kof {

  width: 1280px;

  height: 720px;

  background-image: url(&amp;#39;../images/background/0.gif&amp;#39;);

  background-size: 200% 100%;

  background-position: top;

  position: absolute;

}

  

#kof&amp;gt;.kof-head {

  width: 100%;

  height: 80px;

  position: absolute;

  top: 0;

  display: flex;

  align-items: center;

}

  

#kof&amp;gt;.kof-head&amp;gt;.kof-head-hp-0 {

  height: 40px;

  width: calc(50% - 60px);

  margin-left: 20px;

  border: white 5px solid;

  box-sizing: border-box;

  border-right: none;

}

  

#kof&amp;gt;.kof-head&amp;gt;.kof-head-timer {

  height: 60px;

  width: 80px;

  background-color: orange;

  border: white 5px solid;

  box-sizing: border-box;

  color: white;

  font-size: 30px;

  font-weight: 800;

  text-align: center;

  line-height: 50px;

  user-select: none;

}

  

#kof&amp;gt;.kof-head&amp;gt;.kof-head-hp-1 {

  height: 40px;

  width: calc(50% - 60px);

  border: white 5px solid;

  box-sizing: border-box;

  border-left: none;

}

  

#kof&amp;gt;.kof-head&amp;gt;.kof-head-hp-0&amp;gt;div {

  background-color: red;

  height: 100%;

  width: 100%;

  float: right;

}

  

#kof&amp;gt;.kof-head&amp;gt;.kof-head-hp-1&amp;gt;div {

  background-color: red;

  height: 100%;

  width: 100%;

}

  

#kof&amp;gt;.kof-head&amp;gt;.kof-head-hp-0&amp;gt;div&amp;gt;div {

  background-color: lightgreen;

  height: 100%;

  width: 100%;

  float: right;

}

  

#kof&amp;gt;.kof-head&amp;gt;.kof-head-hp-1&amp;gt;div&amp;gt;div {

  background-color: lightgreen;

  height: 100%;

  width: 100%;

}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;
&lt;h4 id=&#34;逻辑结构-1&#34;&gt;逻辑结构&lt;/h4&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://bu.dusays.com/2022/11/03/63631ec3461ef.png&#34;&gt;
&lt;img src=&#34;https://bu.dusays.com/2022/11/03/63631ec3461ef.png&#34; alt=&#34;逻辑结构&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;h4 id=&#34;kof-1&#34;&gt;KOF&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;js/base.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import { GameMap } from &amp;#39;../js/game_map/base.js&amp;#39;

import { Kyo } from &amp;#39;../js/player/kyo.js&amp;#39;;

  

export class KOF {

  constructor(id) {

    this.$kof = $(&amp;#39;#&amp;#39; + id);

  

    this.game_map = new GameMap(this);

    this.players = [

      new Kyo(this, {

        id: 0,

        x: 200,

        y: 0,

        width: 120,

        height: 200,

        color: &amp;#39;blue&amp;#39;

      }),

      new Kyo(this, {

        id: 1,

        x: 900,

        y: 0,

        width: 120,

        height: 200,

        color: &amp;#39;red&amp;#39;

      })

    ]

  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;acgameobject&#34;&gt;AcGameObject&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;js/ac_game_object/base.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let AC_GAME_OBJECTS = [];

  

export class AcGameObject {

  constructor() {

    AC_GAME_OBJECTS.push(this);

  

    this.timedelta = 0;

    this.has_call_start = false;

  }

  

  start() {  // 初始化

  
  

  }

  

  update() {  // 每一帧执行一次

  

  }

  

  destory() {  // 删除当前对象

    for (let i in AC_GAME_OBJECTS) {

      if (AC_GAME_OBJECTS[i] === this) {

        AC_GAME_OBJECTS.splice(i, 1);

        break;

      }

    }

  }

}

  

let last_timestamp;   // 上一次执行函数时的时刻

  

/**

 * @description 该函数每一帧执行一次

 * @param {number} timestamp 当前执行函数时的时刻

 */

  

let AC_GAME_OBJECTS_FRAME = (timestamp) =&amp;gt; {

  for (let obj of AC_GAME_OBJECTS) {

    if (!obj.has_call_start) {

      obj.start();

      obj.has_call_start = true;

    } else {

      obj.timedelta = timestamp - last_timestamp;

      obj.update();

    }

  }

  

  last_timestamp = timestamp;

  requestAnimationFrame(AC_GAME_OBJECTS_FRAME);

}

  

requestAnimationFrame(AC_GAME_OBJECTS_FRAME);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;controller&#34;&gt;Controller&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;controller&lt;/code&gt; 控制器，读取玩家的输入
&lt;code&gt;js/constroller/base.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export class Controller {   // 手动实现键盘触发事件——当前按住的按键（效果不同于keydown）

  constructor($canvas) {

    this.$canvas = $canvas;

    this.pressed_keys = new Set();    // Set 对象允许你存储任何类型的唯一值

    this.start();

  }

  

  start() {

    let outer = this;

    this.$canvas.keydown(function(e){   // keydown：某个键是否被按住，事件会连续触发

      outer.pressed_keys.add(e.key);

    });

  

    this.$canvas.keyup(function(e){   // keyup：某个按键是否被释放

      outer.pressed_keys.delete(e.key);

    });

  

  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;gamemap&#34;&gt;GameMap&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;js/game_map/base.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import {AcGameObject} from &amp;#39;../ac_game_object/base.js&amp;#39;

import { Controller } from &amp;#39;../controller/base.js&amp;#39;;

  

export class GameMap extends AcGameObject {

  constructor(root) {

    super();

  

    this.root = root;

    this.$canvas = $(&amp;#39;&amp;lt;canvas width=&amp;#34;1280&amp;#34; height=&amp;#34;720&amp;#34; tabindex=0&amp;gt;&amp;lt;/canvas&amp;gt;&amp;#39;);   // 构造一个jQuery对象  其中，tabindex=&amp;#34;0&amp;#34;使&amp;lt;canvas&amp;gt;元素可以聚焦

    this.ctx = this.$canvas[0].getContext(&amp;#39;2d&amp;#39;);  // this.$canvas[0]是&amp;lt;canvas&amp;gt;元素的DOM对象   this.ctx用于画布的渲染

    this.root.$kof.append(this.$canvas);

    this.$canvas.focus();   // 聚焦，使之可以获取输入

  

    this.controller = new Controller(this.$canvas);

  

    this.root.$kof.append($(`

      &amp;lt;div class=&amp;#34;kof-head&amp;#34;&amp;gt;

        &amp;lt;div class=&amp;#34;kof-head-hp-0&amp;#34;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;#34;kof-head-timer&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;

        &amp;lt;div class=&amp;#34;kof-head-hp-1&amp;#34;&amp;gt;&amp;lt;div&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;

      &amp;lt;/div&amp;gt;

    `));

  

    this.time_left = 60000;  //单位：毫秒

    this.$timer = this.root.$kof.find(&amp;#39;.kof-head-timer&amp;#39;);

  }

  

  start() {

  

  }

  

  update() {

    this.time_left -= this.timedelta;

    if (this.time_left &amp;lt; 0) {

      this.time_left = 0;

  

      let [a, b] = this.root.players;

      if (a.status !== 6 &amp;amp;&amp;amp; b.status !== 6) {

        a.statu = b.status = 6;

        a.frame_current_cnt = b.frame_current_cnt = 0;

        a.vx = b.vx = 0;

      }

    }

    this.$timer.text(parseInt(this.time_left / 1000));

  

    this.render();

  }

  

  render() {

    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);

  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;player&#34;&gt;Player&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;js/player/base.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import { AcGameObject } from &amp;#39;../ac_game_object/base.js&amp;#39;;

  

export class Player extends AcGameObject {

  constructor(root, info) {

    super();

  

    this.root = root;

    this.id = info.id;

    this.x = info.x;

    this.y = info.y;

    this.width = info.width;

    this.height = info.height;

    this.color = info.color;

  

    this.direction = 1;

  

    this.vx = 0;

    this.vy = 0;

  

    this.speedx = 400;  // 水平速度

    this.speedy = -1000;  // 跳跃初始速度

  

    this.gravity = 50;

  

    this.ctx = this.root.game_map.ctx;

    this.pressed_keys = this.root.game_map.controller.pressed_keys;

    this.status = 3;  // 0：静止， 1：向前，2：向后，3：跳跃，4：攻击，5：被攻击，6：死亡   随着项目的完善，动作会变的很多，这时用数组存储字符串代替this.status会更方便

    this.animations = new Map();  // 状态的动作    

    this.frame_current_cnt = 0;  // 当前记录帧数

  

    this.hp = 100;

    this.$hp = this.root.$kof.find(`.kof-head-hp-${this.id}&amp;gt;div`);

    this.$hp_div = this.$hp.find(&amp;#39;div&amp;#39;);

  }

  start() {

  }

  

  update_control() {

    let w, a, d, j;

    if (this.id === 0) {

      w = this.pressed_keys.has(&amp;#39;w&amp;#39;);

      a = this.pressed_keys.has(&amp;#39;a&amp;#39;);

      d = this.pressed_keys.has(&amp;#39;d&amp;#39;);

      j = this.pressed_keys.has(&amp;#39;j&amp;#39;);

    } else {

      w = this.pressed_keys.has(&amp;#39;ArrowUp&amp;#39;);

      a = this.pressed_keys.has(&amp;#39;ArrowLeft&amp;#39;);

      d = this.pressed_keys.has(&amp;#39;ArrowRight&amp;#39;);

      j = this.pressed_keys.has(&amp;#39;1&amp;#39;);

    }

  

    if (this.status === 0 || this.status === 1) {   // 静止状态 || 移动状态

      if (j) {  // 攻击

        this.status = 4;

        this.vx = 0;

        this.frame_current_cnt = 0;

      } else if (w) {  // 跳跃

        if (d) {  // 向右跳

          this.vx = this.speedx;

        } else if (a) {  // 向左跳

          this.vx = -this.speedx;

        } else {  // 垂直跳

          this.vx = 0;

        }

        this.vy = this.speedy;

        this.status = 3;

        this.frame_current_cnt = 0;

  

      } else if (d) {  // 向右移动

        this.vx = this.speedx;

        this.status = 1;

      } else if (a) {  // 向左移动

        this.vx = - this.speedx;

        this.status = 1;

      } else {  // 静止

        this.vx = 0;

      }

    }

  

  }

  update_move() {

    this.vy += this.gravity;

  

    this.x += this.vx * this.timedelta / 1000;

    this.y += this.vy * this.timedelta / 1000;

  

    let [a, b] = this.root.players;

    if (a !== this) [a,b] = [b, a];

  

    let r1 = {

      x1: a.x,

      y1: a.y,

      x2: a.x + a.width,

      y2: a.x + a.height,

    };

    let r2 = {

      x1: b.x,

      y1: b.y,

      x2: b.x + b.width,

      y2: b.x + b.height,

    };

  

    if (this.is_collusion(r1, r2)) {

      b.x += this.vx * this.timedelta / 1000 / 2;

      b.y += this.vy * this.timedelta / 1000 / 2;

      a.x -= this.vx * this.timedelta / 1000 / 2;

      a.y -= this.vy * this.timedelta / 1000 / 2;

  

      if (this.status === 3) this.status = 0;

    }

  

    // 落到平地上后静止

    if (this.y &amp;gt; 450) {

      this.y = 450;

      this.vy = 0;

      if (this.status === 3) this.status = 0;

    }

  

    // 不能超出左右边界

    if (this.x &amp;lt; 0) {

      this.x = 0;

    } else if (this.x + this.width &amp;gt; this.root.game_map.$canvas.width()) {

      this.x = this.root.game_map.$canvas.width() - this.width;

    }

  

  }

  

  update_direction() {

    if (this.status === 6) return;

  

    let players = this.root.players;

    if (players[0] &amp;amp;&amp;amp; players[1]) {

      let me = this, you = players[1 - this.id];

      if (me.x &amp;lt; you.x) me.direction = 1;

      else me.direction = -1;

    }

  }

  

  is_collusion(r1, r2) {  // 判断两个矩阵是否有交集

    if (Math.max(r1.x1, r2.x1) &amp;gt; Math.min(r1.x2, r2.x2))

      return false;

    if (Math.max(r1.y1, r2.y1) &amp;gt; Math.min(r1.y2,r2.y2))

      return false;

    return true;

  }

  

  is_attack() {

    if (this.status === 6) return;

  

    this.status = 5;

    this.frame_current_cnt = 0;

  

    this.hp = Math.max(this.hp - 10, 0);

  

    this.$hp_div.animate({  

      width: this.$hp.parent().width() * this.hp / 100,

    }, 350);

  

    this.$hp.animate({  

      width: this.$hp.parent().width() * this.hp / 100,

    }, 600);

  

    if (this.hp &amp;lt;= 0) {

      this.status = 6;

      this.frame_current_cnt = 0;

      this.vx = 0;

    }

  }

  

  update_attack() {

    if (this.status === 4 &amp;amp;&amp;amp; this.frame_current_cnt === 18) {

      let me = this, you = this.root.players[1 - this.id];

      let r1;  // 攻击判定矩形

      let r2;  // 敌方人物矩形

      if (this.direction &amp;gt;0) {

        r1 = {

          x1: me.x + 120,

          y1: me.y + 40,

          x2: me.x + 120 + 100,

          y2: me.y + 40 + 20,

        }

      } else {

        r1 = {

          x1: me.x + me.width - 120 - 100,

          y1: me.y + 40,

          x2: me.x + me.width - 120 - 100 + 100,

          y2: me.y + 40 + 20,

        }

      }

  

      r2 = {

        x1: you.x,

        y2: you.y,

        x2: you.x + you.width,

        y2: you.y + you.height

      };

  

      if (this.is_collusion(r1, r2)) {

        you.is_attack();

      }

    }

  }

  

  update() {

    this.update_attack();

    this.update_direction();

    this.update_control();

    this.update_move();

    this.render();

  }

  

  render() {

  

    let status = this.status;

  

    if (this.status === 1 &amp;amp;&amp;amp; this.direction * this.vx &amp;lt; 0) status = 2;

  

    let obj = this.animations.get(status);

    if (obj &amp;amp;&amp;amp; obj.loaded) {    // GIF 已经加载完成

      if (this.direction &amp;gt; 0) {  // 正方向

        let k = parseInt(this.frame_current_cnt / obj.frame_rate) % obj.frame_cnt;

        let image = obj.gif.frames[k].image;

        this.ctx.drawImage(image, this.x, this.y + obj.offset_y, image.width * obj.scale, image.height * obj.scale);

      } else {  // 反方向

        this.ctx.save();

        this.ctx.scale(-1, 1);

        this.ctx.translate(-this.root.game_map.$canvas.width(), 0);

  

        let k = parseInt(this.frame_current_cnt / obj.frame_rate) % obj.frame_cnt;

        let image = obj.gif.frames[k].image;

        this.ctx.drawImage(image, this.root.game_map.$canvas.width() - this.width - this.x, this.y + obj.offset_y, image.width * obj.scale, image.height * obj.scale);

  

        this.ctx.restore();

      }

    }

  

    if (status === 4 || status === 5 || status === 6) {  // 确保不会一直循环GIF

      if (this.frame_current_cnt === obj.frame_rate * (obj.frame_cnt - 1)) {

        if (status === 6) {

          this.frame_current_cnt--;

        } else {

          this.status = 0;

        }

      }

    }

  

    this.frame_current_cnt++;

  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/player/kyo.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import { Player } from &amp;#34;../player/base.js&amp;#34;;

import {GIF} from &amp;#39;../utils/gif.js&amp;#39;

  

export class Kyo extends Player {

  constructor(root, info) {

    super(root, info);

  

    this.init_animations();   // 初始化动画

  }

  

  init_animations() {

    let outer = this;

    let offsets = [0, -22, -22, -150, 0, 0, 0];   // 偏移量

    for (let i = 0; i &amp;lt; 7; ++ i) {  // 7个动作

      let gif = GIF();

      gif.load(`/static/images/player/kyo/${i}.gif`);

      this.animations.set(i, {  // 动画

        gif: gif,

        frame_cnt: 0,  // GIF帧数

        frame_rate: 5,  // 每秒的帧数

        offset_y: offsets[i],  // y方向偏移量

        loaded: false,  // 是否加载完成

        scale: 2,  // 放大2倍

      });

  

      gif.onload = function() {   // 加载完成

        let obj = outer.animations.get(i);

        obj.frame_cnt = gif.frames.length;

        obj.loaded = true;

  

        if (i === 3) {

          obj.frame_rate = 4;

        }

      }

    }

  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;gif&#34;&gt;GIF&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/48234696/how-to-put-a-gif-with-canvas/48348567#48348567&#34;&gt;Loading and playing GIF image to canvas&lt;/a&gt;    把玩家的&lt;code&gt;GIF&lt;/code&gt;动画渲染在&lt;code&gt;canvas&lt;/code&gt;上&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;js/utils/gif.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const GIF = function () {

  // **NOT** for commercial use.

  var timerID;                          // timer handle for set time out usage

  var st;                               // holds the stream object when loading.

  var interlaceOffsets = [0, 4, 2, 1]; // used in de-interlacing.

  var interlaceSteps = [8, 8, 4, 2];

  var interlacedBufSize;  // this holds a buffer to de interlace. Created on the first frame and when size changed

  var deinterlaceBuf;

  var pixelBufSize;    // this holds a buffer for pixels. Created on the first frame and when size changed

  var pixelBuf;

  const GIF_FILE = { // gif file data headers

    GCExt: 0xF9,

    COMMENT: 0xFE,

    APPExt: 0xFF,

    UNKNOWN: 0x01, // not sure what this is but need to skip it in parser

    IMAGE: 0x2C,

    EOF: 59,   // This is entered as decimal

    EXT: 0x21,

  };

  // simple buffered stream used to read from the file

  var Stream = function (data) {

      this.data = new Uint8ClampedArray(data);

      this.pos = 0;

      var len = this.data.length;

      this.getString = function (count) { // returns a string from current pos of len count

          var s = &amp;#34;&amp;#34;;

          while (count--) { s += String.fromCharCode(this.data[this.pos++]) }

          return s;

      };

      this.readSubBlocks = function () { // reads a set of blocks as a string

          var size, count, data = &amp;#34;&amp;#34;;

          do {

              count = size = this.data[this.pos++];

              while (count--) { data += String.fromCharCode(this.data[this.pos++]) }

          } while (size !== 0 &amp;amp;&amp;amp; this.pos &amp;lt; len);

          return data;

      }

      this.readSubBlocksB = function () { // reads a set of blocks as binary

          var size, count, data = [];

          do {

              count = size = this.data[this.pos++];

              while (count--) { data.push(this.data[this.pos++]); }

          } while (size !== 0 &amp;amp;&amp;amp; this.pos &amp;lt; len);

          return data;

      }

  };

  // LZW decoder uncompressed each frames pixels

  // this needs to be optimised.

  // minSize is the min dictionary as powers of two

  // size and data is the compressed pixels

  function lzwDecode(minSize, data) {

      var i, pixelPos, pos, clear, eod, size, done, dic, code, last, d, len;

      pos = pixelPos = 0;

      dic = [];

      clear = 1 &amp;lt;&amp;lt; minSize;

      eod = clear + 1;

      size = minSize + 1;

      done = false;

      while (!done) { // JavaScript optimisers like a clear exit though I never use &amp;#39;done&amp;#39; apart from fooling the optimiser

          last = code;

          code = 0;

          for (i = 0; i &amp;lt; size; i++) {

              if (data[pos &amp;gt;&amp;gt; 3] &amp;amp; (1 &amp;lt;&amp;lt; (pos &amp;amp; 7))) { code |= 1 &amp;lt;&amp;lt; i }

              pos++;

          }

          if (code === clear) { // clear and reset the dictionary

              dic = [];

              size = minSize + 1;

              for (i = 0; i &amp;lt; clear; i++) { dic[i] = [i] }

              dic[clear] = [];

              dic[eod] = null;

          } else {

              if (code === eod) { done = true; return }

              if (code &amp;gt;= dic.length) { dic.push(dic[last].concat(dic[last][0])) }

              else if (last !== clear) { dic.push(dic[last].concat(dic[code][0])) }

              d = dic[code];

              len = d.length;

              for (i = 0; i &amp;lt; len; i++) { pixelBuf[pixelPos++] = d[i] }

              if (dic.length === (1 &amp;lt;&amp;lt; size) &amp;amp;&amp;amp; size &amp;lt; 12) { size++ }

          }

      }

  };

  function parseColourTable(count) { // get a colour table of length count  Each entry is 3 bytes, for RGB.

      var colours = [];

      for (var i = 0; i &amp;lt; count; i++) { colours.push([st.data[st.pos++], st.data[st.pos++], st.data[st.pos++]]) }

      return colours;

  }

  function parse() {        // read the header. This is the starting point of the decode and async calls parseBlock

      var bitField;

      st.pos += 6;

      gif.width = (st.data[st.pos++]) + ((st.data[st.pos++]) &amp;lt;&amp;lt; 8);

      gif.height = (st.data[st.pos++]) + ((st.data[st.pos++]) &amp;lt;&amp;lt; 8);

      bitField = st.data[st.pos++];

      gif.colorRes = (bitField &amp;amp; 0b1110000) &amp;gt;&amp;gt; 4;

      gif.globalColourCount = 1 &amp;lt;&amp;lt; ((bitField &amp;amp; 0b111) + 1);

      gif.bgColourIndex = st.data[st.pos++];

      st.pos++;                    // ignoring pixel aspect ratio. if not 0, aspectRatio = (pixelAspectRatio + 15) / 64

      if (bitField &amp;amp; 0b10000000) { gif.globalColourTable = parseColourTable(gif.globalColourCount) } // global colour flag

      setTimeout(parseBlock, 0);

  }

  function parseAppExt() { // get application specific data. Netscape added iterations and terminator. Ignoring that

      st.pos += 1;

      if (&amp;#39;NETSCAPE&amp;#39; === st.getString(8)) { st.pos += 8 }  // ignoring this data. iterations (word) and terminator (byte)

      else {

          st.pos += 3;            // 3 bytes of string usually &amp;#34;2.0&amp;#34; when identifier is NETSCAPE

          st.readSubBlocks();     // unknown app extension

      }

  };

  function parseGCExt() { // get GC data

      var bitField;

      st.pos++;

      bitField = st.data[st.pos++];

      gif.disposalMethod = (bitField &amp;amp; 0b11100) &amp;gt;&amp;gt; 2;

      gif.transparencyGiven = bitField &amp;amp; 0b1 ? true : false; // ignoring bit two that is marked as  userInput???

      gif.delayTime = (st.data[st.pos++]) + ((st.data[st.pos++]) &amp;lt;&amp;lt; 8);

      gif.transparencyIndex = st.data[st.pos++];

      st.pos++;

  };

  function parseImg() {                           // decodes image data to create the indexed pixel image

      var deinterlace, frame, bitField;

      deinterlace = function (width) {                   // de interlace pixel data if needed

          var lines, fromLine, pass, toline;

          lines = pixelBufSize / width;

          fromLine = 0;

          if (interlacedBufSize !== pixelBufSize) {      // create the buffer if size changed or undefined.

              deinterlaceBuf = new Uint8Array(pixelBufSize);

              interlacedBufSize = pixelBufSize;

          }

          for (pass = 0; pass &amp;lt; 4; pass++) {

              for (toLine = interlaceOffsets[pass]; toLine &amp;lt; lines; toLine += interlaceSteps[pass]) {

                  deinterlaceBuf.set(pixelBuf.subarray(fromLine, fromLine + width), toLine * width);

                  fromLine += width;

              }

          }

      };

      frame = {}

      gif.frames.push(frame);

      frame.disposalMethod = gif.disposalMethod;

      frame.time = gif.length;

      frame.delay = gif.delayTime * 10;

      gif.length += frame.delay;

      if (gif.transparencyGiven) { frame.transparencyIndex = gif.transparencyIndex }

      else { frame.transparencyIndex = undefined }

      frame.leftPos = (st.data[st.pos++]) + ((st.data[st.pos++]) &amp;lt;&amp;lt; 8);

      frame.topPos = (st.data[st.pos++]) + ((st.data[st.pos++]) &amp;lt;&amp;lt; 8);

      frame.width = (st.data[st.pos++]) + ((st.data[st.pos++]) &amp;lt;&amp;lt; 8);

      frame.height = (st.data[st.pos++]) + ((st.data[st.pos++]) &amp;lt;&amp;lt; 8);

      bitField = st.data[st.pos++];

      frame.localColourTableFlag = bitField &amp;amp; 0b10000000 ? true : false;

      if (frame.localColourTableFlag) { frame.localColourTable = parseColourTable(1 &amp;lt;&amp;lt; ((bitField &amp;amp; 0b111) + 1)) }

      if (pixelBufSize !== frame.width * frame.height) { // create a pixel buffer if not yet created or if current frame size is different from previous

          pixelBuf = new Uint8Array(frame.width * frame.height);

          pixelBufSize = frame.width * frame.height;

      }

      lzwDecode(st.data[st.pos++], st.readSubBlocksB()); // decode the pixels

      if (bitField &amp;amp; 0b1000000) {                        // de interlace if needed

          frame.interlaced = true;

          deinterlace(frame.width);

      } else { frame.interlaced = false }

      processFrame(frame);                               // convert to canvas image

  };

  function processFrame(frame) { // creates a RGBA canvas image from the indexed pixel data.

      var ct, cData, dat, pixCount, ind, useT, i, pixel, pDat, col, frame, ti;

      frame.image = document.createElement(&amp;#39;canvas&amp;#39;);

      frame.image.width = gif.width;

      frame.image.height = gif.height;

      frame.image.ctx = frame.image.getContext(&amp;#34;2d&amp;#34;);

      ct = frame.localColourTableFlag ? frame.localColourTable : gif.globalColourTable;

      if (gif.lastFrame === null) { gif.lastFrame = frame }

      useT = (gif.lastFrame.disposalMethod === 2 || gif.lastFrame.disposalMethod === 3) ? true : false;

      if (!useT) { frame.image.ctx.drawImage(gif.lastFrame.image, 0, 0, gif.width, gif.height) }

      cData = frame.image.ctx.getImageData(frame.leftPos, frame.topPos, frame.width, frame.height);

      ti = frame.transparencyIndex;

      dat = cData.data;

      if (frame.interlaced) { pDat = deinterlaceBuf }

      else { pDat = pixelBuf }

      pixCount = pDat.length;

      ind = 0;

      for (i = 0; i &amp;lt; pixCount; i++) {

          pixel = pDat[i];

          col = ct[pixel];

          if (ti !== pixel) {

              dat[ind++] = col[0];

              dat[ind++] = col[1];

              dat[ind++] = col[2];

              dat[ind++] = 255;      // Opaque.

          } else

              if (useT) {

                  dat[ind + 3] = 0; // Transparent.

                  ind += 4;

              } else { ind += 4 }

      }

      frame.image.ctx.putImageData(cData, frame.leftPos, frame.topPos);

      gif.lastFrame = frame;

      if (!gif.waitTillDone &amp;amp;&amp;amp; typeof gif.onload === &amp;#34;function&amp;#34;) { doOnloadEvent() }// if !waitTillDone the call onload now after first frame is loaded

  };

  // **NOT** for commercial use.

  function finnished() { // called when the load has completed

      gif.loading = false;

      gif.frameCount = gif.frames.length;

      gif.lastFrame = null;

      st = undefined;

      gif.complete = true;

      gif.disposalMethod = undefined;

      gif.transparencyGiven = undefined;

      gif.delayTime = undefined;

      gif.transparencyIndex = undefined;

      gif.waitTillDone = undefined;

      pixelBuf = undefined; // dereference pixel buffer

      deinterlaceBuf = undefined; // dereference interlace buff (may or may not be used);

      pixelBufSize = undefined;

      deinterlaceBuf = undefined;

      gif.currentFrame = 0;

      if (gif.frames.length &amp;gt; 0) { gif.image = gif.frames[0].image }

      doOnloadEvent();

      if (typeof gif.onloadall === &amp;#34;function&amp;#34;) {

          (gif.onloadall.bind(gif))({ type: &amp;#39;loadall&amp;#39;, path: [gif] });

      }

      if (gif.playOnLoad) { gif.play() }

  }

  function canceled() { // called if the load has been cancelled

      finnished();

      if (typeof gif.cancelCallback === &amp;#34;function&amp;#34;) { (gif.cancelCallback.bind(gif))({ type: &amp;#39;canceled&amp;#39;, path: [gif] }) }

  }

  function parseExt() {              // parse extended blocks

      const blockID = st.data[st.pos++];

      if (blockID === GIF_FILE.GCExt) { parseGCExt() }

      else if (blockID === GIF_FILE.COMMENT) { gif.comment += st.readSubBlocks() }

      else if (blockID === GIF_FILE.APPExt) { parseAppExt() }

      else {

          if (blockID === GIF_FILE.UNKNOWN) { st.pos += 13; } // skip unknow block

          st.readSubBlocks();

      }

  

  }

  function parseBlock() { // parsing the blocks

      if (gif.cancel !== undefined &amp;amp;&amp;amp; gif.cancel === true) { canceled(); return }

  

      const blockId = st.data[st.pos++];

      if (blockId === GIF_FILE.IMAGE) { // image block

          parseImg();

          if (gif.firstFrameOnly) { finnished(); return }

      } else if (blockId === GIF_FILE.EOF) { finnished(); return }

      else { parseExt() }

      if (typeof gif.onprogress === &amp;#34;function&amp;#34;) {

          gif.onprogress({ bytesRead: st.pos, totalBytes: st.data.length, frame: gif.frames.length });

      }

      setTimeout(parseBlock, 0); // parsing frame async so processes can get some time in.

  };

  function cancelLoad(callback) { // cancels the loading. This will cancel the load before the next frame is decoded

      if (gif.complete) { return false }

      gif.cancelCallback = callback;

      gif.cancel = true;

      return true;

  }

  function error(type) {

      if (typeof gif.onerror === &amp;#34;function&amp;#34;) { (gif.onerror.bind(this))({ type: type, path: [this] }) }

      gif.onload = gif.onerror = undefined;

      gif.loading = false;

  }

  function doOnloadEvent() { // fire onload event if set

      gif.currentFrame = 0;

      gif.nextFrameAt = gif.lastFrameAt = new Date().valueOf(); // just sets the time now

      if (typeof gif.onload === &amp;#34;function&amp;#34;) { (gif.onload.bind(gif))({ type: &amp;#39;load&amp;#39;, path: [gif] }) }

      gif.onerror = gif.onload = undefined;

  }

  function dataLoaded(data) { // Data loaded create stream and parse

      st = new Stream(data);

      parse();

  }

  function loadGif(filename) { // starts the load

      var ajax = new XMLHttpRequest();

      ajax.responseType = &amp;#34;arraybuffer&amp;#34;;

      ajax.onload = function (e) {

          if (e.target.status === 404) { error(&amp;#34;File not found&amp;#34;) }

          else if (e.target.status &amp;gt;= 200 &amp;amp;&amp;amp; e.target.status &amp;lt; 300) { dataLoaded(ajax.response) }

          else { error(&amp;#34;Loading error : &amp;#34; + e.target.status) }

      };

      ajax.open(&amp;#39;GET&amp;#39;, filename, true);

      ajax.send();

      ajax.onerror = function (e) { error(&amp;#34;File error&amp;#34;) };

      this.src = filename;

      this.loading = true;

  }

  function play() { // starts play if paused

      if (!gif.playing) {

          gif.paused = false;

          gif.playing = true;

          playing();

      }

  }

  function pause() { // stops play

      gif.paused = true;

      gif.playing = false;

      clearTimeout(timerID);

  }

  function togglePlay() {

      if (gif.paused || !gif.playing) { gif.play() }

      else { gif.pause() }

  }

  function seekFrame(frame) { // seeks to frame number.

      clearTimeout(timerID);

      gif.currentFrame = frame % gif.frames.length;

      if (gif.playing) { playing() }

      else { gif.image = gif.frames[gif.currentFrame].image }

  }

  function seek(time) { // time in Seconds  // seek to frame that would be displayed at time

      clearTimeout(timerID);

      if (time &amp;lt; 0) { time = 0 }

      time *= 1000; // in ms

      time %= gif.length;

      var frame = 0;

      while (time &amp;gt; gif.frames[frame].time + gif.frames[frame].delay &amp;amp;&amp;amp; frame &amp;lt; gif.frames.length) { frame += 1 }

      gif.currentFrame = frame;

      if (gif.playing) { playing() }

      else { gif.image = gif.frames[gif.currentFrame].image }

  }

  function playing() {

      var delay;

      var frame;

      if (gif.playSpeed === 0) {

          gif.pause();

          return;

      } else {

          if (gif.playSpeed &amp;lt; 0) {

              gif.currentFrame -= 1;

              if (gif.currentFrame &amp;lt; 0) { gif.currentFrame = gif.frames.length - 1 }

              frame = gif.currentFrame;

              frame -= 1;

              if (frame &amp;lt; 0) { frame = gif.frames.length - 1 }

              delay = -gif.frames[frame].delay * 1 / gif.playSpeed;

          } else {

              gif.currentFrame += 1;

              gif.currentFrame %= gif.frames.length;

              delay = gif.frames[gif.currentFrame].delay * 1 / gif.playSpeed;

          }

          gif.image = gif.frames[gif.currentFrame].image;

          timerID = setTimeout(playing, delay);

      }

  }

  var gif = {                      // the gif image object

      onload: null,       // fire on load. Use waitTillDone = true to have load fire at end or false to fire on first frame

      onerror: null,       // fires on error

      onprogress: null,       // fires a load progress event

      onloadall: null,       // event fires when all frames have loaded and gif is ready

      paused: false,      // true if paused

      playing: false,      // true if playing

      waitTillDone: true,       // If true onload will fire when all frames loaded, if false, onload will fire when first frame has loaded

      loading: false,      // true if still loading

      firstFrameOnly: false,      // if true only load the first frame

      width: null,       // width in pixels

      height: null,       // height in pixels

      frames: [],         // array of frames

      comment: &amp;#34;&amp;#34;,         // comments if found in file. Note I remember that some gifs have comments per frame if so this will be all comment concatenated

      length: 0,          // gif length in ms (1/1000 second)

      currentFrame: 0,          // current frame.

      frameCount: 0,          // number of frames

      playSpeed: 1,          // play speed 1 normal, 2 twice 0.5 half, -1 reverse etc...

      lastFrame: null,       // temp hold last frame loaded so you can display the gif as it loads

      image: null,       // the current image at the currentFrame

      playOnLoad: true,       // if true starts playback when loaded

      // functions

      load: loadGif,    // call this to load a file

      cancel: cancelLoad, // call to stop loading

      play: play,       // call to start play

      pause: pause,      // call to pause

      seek: seek,       // call to seek to time

      seekFrame: seekFrame,  // call to seek to frame

      togglePlay: togglePlay, // call to toggle play and pause state

  };

  return gif;

}

  

export {

  GIF

}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;状态机&#34;&gt;状态机&lt;/h4&gt;
&lt;center&gt; 
	&lt;img style=&#34;border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);&#34; src=&#34;https://bu.dusays.com/2022/11/03/636315494cea8.png&#34;&gt;
	&lt;br&gt;
	&lt;div style=&#34;color:orange; border-bottom: 1px solid #d9d9d9; 
	display: inline-block; 
	color: #999; 
	padding: 2px;&#34;&gt;0：静止    1：移动     3：跳跃&lt;/div&gt; 
 &lt;/center&gt;
</description>
      <content:encoded><![CDATA[<h1 id="acwing-web-应用课">AcWing Web 应用课</h1>
<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_web/">AcWing Web 应用课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/punch_the_clock/1150/">AcWing Web 应用课</a>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/4078555/">HTML 基础标签</a></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/4194723/">CSS</a></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/4719082/">JavaScript</a></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/5501588/">React</a></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/5639568/">Vue3</a></li>
</ul>
</li>
<li><a href="https://developer.mozilla.org/zh-CN/">MDN官方文档</a>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web">Web 入门</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/HTML">HTML —— 构建 Web</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS">CSS —— 设计Web</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript">JavaScript —— 用户端动态脚本</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started">React 入门</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/Vue_getting_started">Vue 入门</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">Canvas 教程</a></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><code>VSCode</code> 自动生成缺省的 <code>HTML</code> 代码框架</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-HTML" data-lang="HTML"><span style="display:flex;"><span><span style="color:#0f0;font-weight:bold">&lt;!DOCTYPE html&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="font-weight:bold">html</span> <span style="color:#007f7f">lang</span>=<span style="color:#0ff;font-weight:bold">&#34;en&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="font-weight:bold">head</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;<span style="font-weight:bold">meta</span> <span style="color:#007f7f">charset</span>=<span style="color:#0ff;font-weight:bold">&#34;UTF-8&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;<span style="font-weight:bold">meta</span> <span style="color:#007f7f">http-equiv</span>=<span style="color:#0ff;font-weight:bold">&#34;X-UA-Compatible&#34;</span> <span style="color:#007f7f">content</span>=<span style="color:#0ff;font-weight:bold">&#34;IE=edge&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;<span style="font-weight:bold">meta</span> <span style="color:#007f7f">name</span>=<span style="color:#0ff;font-weight:bold">&#34;viewport&#34;</span> <span style="color:#007f7f">content</span>=<span style="color:#0ff;font-weight:bold">&#34;width=device-width, initial-scale=1.0&#34;</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;<span style="font-weight:bold">title</span>&gt;Document&lt;/<span style="font-weight:bold">title</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="font-weight:bold">head</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;<span style="font-weight:bold">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="font-weight:bold">body</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>&lt;/<span style="font-weight:bold">html</span>&gt;
</span></span></code></pre></div><ol>
<li>输入<code>！</code>，接着输入 <code>tab</code> 键，自动生成缺省的 <code>HTML</code> 代码框架</li>
<li>再按三下 <code>tab</code> 键，光标会移动到 <code>&lt;body&gt;</code> 与 <code>&lt;/body&gt;</code> 之间的空行</li>
</ol>
<hr>
<h2 id="kof">KOF</h2>
<ul>
<li><a href="https://github.com/Xancoding/Leaning-jQuery">KOF</a></li>
<li><a href="https://www.acwing.com/video/3830/">AcWing Web 应用课 | 中期项目——拳皇（上） | Vedio</a></li>
<li><a href="https://www.acwing.com/video/3833/">AcWing Web 应用课 | 中期项目——拳皇（下） | Vedio</a></li>
</ul>
<hr>
<h3 id="基础操作">基础操作</h3>
<pre tabindex="0"><code>操作如下：
角色一: w 跳 a 左移 d 右移 j 拳击 
角色二: ↑ 跳 ← 左移 → 右移 1 拳击
</code></pre><h3 id="文件结构">文件结构</h3>
<pre tabindex="0"><code>|-- README.md
|-- static
|   |-- css
|   |   `-- base.css
|   |-- images
|   |   |-- background
|   |   |   `-- 0.gif
|   |   `-- player
|   |       `-- kyo
|   |           |-- 0.gif
|   |           |-- 1.gif
|   |           |-- 2.gif
|   |           |-- 3.gif
|   |           |-- 4.gif
|   |           |-- 5.gif
|   |           `-- 6.gif
|   `-- js
|       |-- ac_game_object
|       |   `-- base.js
|       |-- base.js
|       |-- controller
|       |   `-- base.js
|       |-- game_map
|       |   `-- base.js
|       |-- player
|       |   |-- base.js
|       |   `-- kyo.js
|       `-- utils
|           `-- gif.js
`-- templates
    `-- index.html
</code></pre><h3 id="整体架构">整体架构</h3>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://bu.dusays.com/2022/11/02/63627b3105c46.png">
<img src="https://bu.dusays.com/2022/11/02/63627b3105c46.png" alt="KOFStructure"  />
</a>
</div>

</p>
<h3 id="逻辑结构">逻辑结构</h3>
<center> 
	<img style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://bu.dusays.com/2022/11/02/63627ace5a2f9.png">
	<br>
	<div style="color:orange; border-bottom: 1px solid #d9d9d9; 
	display: inline-block; 
	color: #999; 
	padding: 2px;">Retrieved from：https://www.acwing.com/solution/content/139831/</div> 
 </center>
<h3 id="html">HTML</h3>
<p><code>templates/index.html</code></p>
<pre tabindex="0"><code>&lt;!DOCTYPE html&gt;

&lt;html lang=&#34;en&#34;&gt;

&lt;head&gt;

  &lt;meta charset=&#34;UTF-8&#34;&gt;

  &lt;meta http-equiv=&#34;X-UA-Compatible&#34; content=&#34;IE=edge&#34;&gt;

  &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;

  &lt;title&gt;KOF&lt;/title&gt;

  &lt;link rel=&#34;stylesheet&#34; href=&#34;../static/css/base.css&#34;&gt;

  &lt;script src=&#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&#34;&gt;&lt;/script&gt;

&lt;/head&gt;

&lt;body&gt;

  &lt;div id=&#34;kof&#34;&gt;&lt;/div&gt;

  

  &lt;script type=&#34;module&#34;&gt;

    import {KOF} from &#39;../static/js/base.js&#39;;

  

    let kof = new KOF(&#39;kof&#39;);

  &lt;/script&gt;

&lt;/body&gt;

&lt;/html&gt;
</code></pre><h3 id="css">CSS</h3>
<p><code>css/base.css</code></p>
<pre tabindex="0"><code>#kof {

  width: 1280px;

  height: 720px;

  background-image: url(&#39;../images/background/0.gif&#39;);

  background-size: 200% 100%;

  background-position: top;

  position: absolute;

}

  

#kof&gt;.kof-head {

  width: 100%;

  height: 80px;

  position: absolute;

  top: 0;

  display: flex;

  align-items: center;

}

  

#kof&gt;.kof-head&gt;.kof-head-hp-0 {

  height: 40px;

  width: calc(50% - 60px);

  margin-left: 20px;

  border: white 5px solid;

  box-sizing: border-box;

  border-right: none;

}

  

#kof&gt;.kof-head&gt;.kof-head-timer {

  height: 60px;

  width: 80px;

  background-color: orange;

  border: white 5px solid;

  box-sizing: border-box;

  color: white;

  font-size: 30px;

  font-weight: 800;

  text-align: center;

  line-height: 50px;

  user-select: none;

}

  

#kof&gt;.kof-head&gt;.kof-head-hp-1 {

  height: 40px;

  width: calc(50% - 60px);

  border: white 5px solid;

  box-sizing: border-box;

  border-left: none;

}

  

#kof&gt;.kof-head&gt;.kof-head-hp-0&gt;div {

  background-color: red;

  height: 100%;

  width: 100%;

  float: right;

}

  

#kof&gt;.kof-head&gt;.kof-head-hp-1&gt;div {

  background-color: red;

  height: 100%;

  width: 100%;

}

  

#kof&gt;.kof-head&gt;.kof-head-hp-0&gt;div&gt;div {

  background-color: lightgreen;

  height: 100%;

  width: 100%;

  float: right;

}

  

#kof&gt;.kof-head&gt;.kof-head-hp-1&gt;div&gt;div {

  background-color: lightgreen;

  height: 100%;

  width: 100%;

}
</code></pre><h3 id="javascript">JavaScript</h3>
<h4 id="逻辑结构-1">逻辑结构</h4>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://bu.dusays.com/2022/11/03/63631ec3461ef.png">
<img src="https://bu.dusays.com/2022/11/03/63631ec3461ef.png" alt="逻辑结构"  />
</a>
</div>

</p>
<h4 id="kof-1">KOF</h4>
<p><code>js/base.js</code></p>
<pre tabindex="0"><code>import { GameMap } from &#39;../js/game_map/base.js&#39;

import { Kyo } from &#39;../js/player/kyo.js&#39;;

  

export class KOF {

  constructor(id) {

    this.$kof = $(&#39;#&#39; + id);

  

    this.game_map = new GameMap(this);

    this.players = [

      new Kyo(this, {

        id: 0,

        x: 200,

        y: 0,

        width: 120,

        height: 200,

        color: &#39;blue&#39;

      }),

      new Kyo(this, {

        id: 1,

        x: 900,

        y: 0,

        width: 120,

        height: 200,

        color: &#39;red&#39;

      })

    ]

  }

}
</code></pre><h4 id="acgameobject">AcGameObject</h4>
<p><code>js/ac_game_object/base.js</code></p>
<pre tabindex="0"><code>let AC_GAME_OBJECTS = [];

  

export class AcGameObject {

  constructor() {

    AC_GAME_OBJECTS.push(this);

  

    this.timedelta = 0;

    this.has_call_start = false;

  }

  

  start() {  // 初始化

  
  

  }

  

  update() {  // 每一帧执行一次

  

  }

  

  destory() {  // 删除当前对象

    for (let i in AC_GAME_OBJECTS) {

      if (AC_GAME_OBJECTS[i] === this) {

        AC_GAME_OBJECTS.splice(i, 1);

        break;

      }

    }

  }

}

  

let last_timestamp;   // 上一次执行函数时的时刻

  

/**

 * @description 该函数每一帧执行一次

 * @param {number} timestamp 当前执行函数时的时刻

 */

  

let AC_GAME_OBJECTS_FRAME = (timestamp) =&gt; {

  for (let obj of AC_GAME_OBJECTS) {

    if (!obj.has_call_start) {

      obj.start();

      obj.has_call_start = true;

    } else {

      obj.timedelta = timestamp - last_timestamp;

      obj.update();

    }

  }

  

  last_timestamp = timestamp;

  requestAnimationFrame(AC_GAME_OBJECTS_FRAME);

}

  

requestAnimationFrame(AC_GAME_OBJECTS_FRAME);
</code></pre><h4 id="controller">Controller</h4>
<ul>
<li><code>controller</code> 控制器，读取玩家的输入
<code>js/constroller/base.js</code></li>
</ul>
<pre tabindex="0"><code>export class Controller {   // 手动实现键盘触发事件——当前按住的按键（效果不同于keydown）

  constructor($canvas) {

    this.$canvas = $canvas;

    this.pressed_keys = new Set();    // Set 对象允许你存储任何类型的唯一值

    this.start();

  }

  

  start() {

    let outer = this;

    this.$canvas.keydown(function(e){   // keydown：某个键是否被按住，事件会连续触发

      outer.pressed_keys.add(e.key);

    });

  

    this.$canvas.keyup(function(e){   // keyup：某个按键是否被释放

      outer.pressed_keys.delete(e.key);

    });

  

  }

}
</code></pre><h4 id="gamemap">GameMap</h4>
<p><code>js/game_map/base.js</code></p>
<pre tabindex="0"><code>import {AcGameObject} from &#39;../ac_game_object/base.js&#39;

import { Controller } from &#39;../controller/base.js&#39;;

  

export class GameMap extends AcGameObject {

  constructor(root) {

    super();

  

    this.root = root;

    this.$canvas = $(&#39;&lt;canvas width=&#34;1280&#34; height=&#34;720&#34; tabindex=0&gt;&lt;/canvas&gt;&#39;);   // 构造一个jQuery对象  其中，tabindex=&#34;0&#34;使&lt;canvas&gt;元素可以聚焦

    this.ctx = this.$canvas[0].getContext(&#39;2d&#39;);  // this.$canvas[0]是&lt;canvas&gt;元素的DOM对象   this.ctx用于画布的渲染

    this.root.$kof.append(this.$canvas);

    this.$canvas.focus();   // 聚焦，使之可以获取输入

  

    this.controller = new Controller(this.$canvas);

  

    this.root.$kof.append($(`

      &lt;div class=&#34;kof-head&#34;&gt;

        &lt;div class=&#34;kof-head-hp-0&#34;&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

        &lt;div class=&#34;kof-head-timer&#34;&gt;&lt;/div&gt;

        &lt;div class=&#34;kof-head-hp-1&#34;&gt;&lt;div&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;

      &lt;/div&gt;

    `));

  

    this.time_left = 60000;  //单位：毫秒

    this.$timer = this.root.$kof.find(&#39;.kof-head-timer&#39;);

  }

  

  start() {

  

  }

  

  update() {

    this.time_left -= this.timedelta;

    if (this.time_left &lt; 0) {

      this.time_left = 0;

  

      let [a, b] = this.root.players;

      if (a.status !== 6 &amp;&amp; b.status !== 6) {

        a.statu = b.status = 6;

        a.frame_current_cnt = b.frame_current_cnt = 0;

        a.vx = b.vx = 0;

      }

    }

    this.$timer.text(parseInt(this.time_left / 1000));

  

    this.render();

  }

  

  render() {

    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);

  }

}
</code></pre><h4 id="player">Player</h4>
<p><code>js/player/base.js</code></p>
<pre tabindex="0"><code>import { AcGameObject } from &#39;../ac_game_object/base.js&#39;;

  

export class Player extends AcGameObject {

  constructor(root, info) {

    super();

  

    this.root = root;

    this.id = info.id;

    this.x = info.x;

    this.y = info.y;

    this.width = info.width;

    this.height = info.height;

    this.color = info.color;

  

    this.direction = 1;

  

    this.vx = 0;

    this.vy = 0;

  

    this.speedx = 400;  // 水平速度

    this.speedy = -1000;  // 跳跃初始速度

  

    this.gravity = 50;

  

    this.ctx = this.root.game_map.ctx;

    this.pressed_keys = this.root.game_map.controller.pressed_keys;

    this.status = 3;  // 0：静止， 1：向前，2：向后，3：跳跃，4：攻击，5：被攻击，6：死亡   随着项目的完善，动作会变的很多，这时用数组存储字符串代替this.status会更方便

    this.animations = new Map();  // 状态的动作    

    this.frame_current_cnt = 0;  // 当前记录帧数

  

    this.hp = 100;

    this.$hp = this.root.$kof.find(`.kof-head-hp-${this.id}&gt;div`);

    this.$hp_div = this.$hp.find(&#39;div&#39;);

  }

  start() {

  }

  

  update_control() {

    let w, a, d, j;

    if (this.id === 0) {

      w = this.pressed_keys.has(&#39;w&#39;);

      a = this.pressed_keys.has(&#39;a&#39;);

      d = this.pressed_keys.has(&#39;d&#39;);

      j = this.pressed_keys.has(&#39;j&#39;);

    } else {

      w = this.pressed_keys.has(&#39;ArrowUp&#39;);

      a = this.pressed_keys.has(&#39;ArrowLeft&#39;);

      d = this.pressed_keys.has(&#39;ArrowRight&#39;);

      j = this.pressed_keys.has(&#39;1&#39;);

    }

  

    if (this.status === 0 || this.status === 1) {   // 静止状态 || 移动状态

      if (j) {  // 攻击

        this.status = 4;

        this.vx = 0;

        this.frame_current_cnt = 0;

      } else if (w) {  // 跳跃

        if (d) {  // 向右跳

          this.vx = this.speedx;

        } else if (a) {  // 向左跳

          this.vx = -this.speedx;

        } else {  // 垂直跳

          this.vx = 0;

        }

        this.vy = this.speedy;

        this.status = 3;

        this.frame_current_cnt = 0;

  

      } else if (d) {  // 向右移动

        this.vx = this.speedx;

        this.status = 1;

      } else if (a) {  // 向左移动

        this.vx = - this.speedx;

        this.status = 1;

      } else {  // 静止

        this.vx = 0;

      }

    }

  

  }

  update_move() {

    this.vy += this.gravity;

  

    this.x += this.vx * this.timedelta / 1000;

    this.y += this.vy * this.timedelta / 1000;

  

    let [a, b] = this.root.players;

    if (a !== this) [a,b] = [b, a];

  

    let r1 = {

      x1: a.x,

      y1: a.y,

      x2: a.x + a.width,

      y2: a.x + a.height,

    };

    let r2 = {

      x1: b.x,

      y1: b.y,

      x2: b.x + b.width,

      y2: b.x + b.height,

    };

  

    if (this.is_collusion(r1, r2)) {

      b.x += this.vx * this.timedelta / 1000 / 2;

      b.y += this.vy * this.timedelta / 1000 / 2;

      a.x -= this.vx * this.timedelta / 1000 / 2;

      a.y -= this.vy * this.timedelta / 1000 / 2;

  

      if (this.status === 3) this.status = 0;

    }

  

    // 落到平地上后静止

    if (this.y &gt; 450) {

      this.y = 450;

      this.vy = 0;

      if (this.status === 3) this.status = 0;

    }

  

    // 不能超出左右边界

    if (this.x &lt; 0) {

      this.x = 0;

    } else if (this.x + this.width &gt; this.root.game_map.$canvas.width()) {

      this.x = this.root.game_map.$canvas.width() - this.width;

    }

  

  }

  

  update_direction() {

    if (this.status === 6) return;

  

    let players = this.root.players;

    if (players[0] &amp;&amp; players[1]) {

      let me = this, you = players[1 - this.id];

      if (me.x &lt; you.x) me.direction = 1;

      else me.direction = -1;

    }

  }

  

  is_collusion(r1, r2) {  // 判断两个矩阵是否有交集

    if (Math.max(r1.x1, r2.x1) &gt; Math.min(r1.x2, r2.x2))

      return false;

    if (Math.max(r1.y1, r2.y1) &gt; Math.min(r1.y2,r2.y2))

      return false;

    return true;

  }

  

  is_attack() {

    if (this.status === 6) return;

  

    this.status = 5;

    this.frame_current_cnt = 0;

  

    this.hp = Math.max(this.hp - 10, 0);

  

    this.$hp_div.animate({  

      width: this.$hp.parent().width() * this.hp / 100,

    }, 350);

  

    this.$hp.animate({  

      width: this.$hp.parent().width() * this.hp / 100,

    }, 600);

  

    if (this.hp &lt;= 0) {

      this.status = 6;

      this.frame_current_cnt = 0;

      this.vx = 0;

    }

  }

  

  update_attack() {

    if (this.status === 4 &amp;&amp; this.frame_current_cnt === 18) {

      let me = this, you = this.root.players[1 - this.id];

      let r1;  // 攻击判定矩形

      let r2;  // 敌方人物矩形

      if (this.direction &gt;0) {

        r1 = {

          x1: me.x + 120,

          y1: me.y + 40,

          x2: me.x + 120 + 100,

          y2: me.y + 40 + 20,

        }

      } else {

        r1 = {

          x1: me.x + me.width - 120 - 100,

          y1: me.y + 40,

          x2: me.x + me.width - 120 - 100 + 100,

          y2: me.y + 40 + 20,

        }

      }

  

      r2 = {

        x1: you.x,

        y2: you.y,

        x2: you.x + you.width,

        y2: you.y + you.height

      };

  

      if (this.is_collusion(r1, r2)) {

        you.is_attack();

      }

    }

  }

  

  update() {

    this.update_attack();

    this.update_direction();

    this.update_control();

    this.update_move();

    this.render();

  }

  

  render() {

  

    let status = this.status;

  

    if (this.status === 1 &amp;&amp; this.direction * this.vx &lt; 0) status = 2;

  

    let obj = this.animations.get(status);

    if (obj &amp;&amp; obj.loaded) {    // GIF 已经加载完成

      if (this.direction &gt; 0) {  // 正方向

        let k = parseInt(this.frame_current_cnt / obj.frame_rate) % obj.frame_cnt;

        let image = obj.gif.frames[k].image;

        this.ctx.drawImage(image, this.x, this.y + obj.offset_y, image.width * obj.scale, image.height * obj.scale);

      } else {  // 反方向

        this.ctx.save();

        this.ctx.scale(-1, 1);

        this.ctx.translate(-this.root.game_map.$canvas.width(), 0);

  

        let k = parseInt(this.frame_current_cnt / obj.frame_rate) % obj.frame_cnt;

        let image = obj.gif.frames[k].image;

        this.ctx.drawImage(image, this.root.game_map.$canvas.width() - this.width - this.x, this.y + obj.offset_y, image.width * obj.scale, image.height * obj.scale);

  

        this.ctx.restore();

      }

    }

  

    if (status === 4 || status === 5 || status === 6) {  // 确保不会一直循环GIF

      if (this.frame_current_cnt === obj.frame_rate * (obj.frame_cnt - 1)) {

        if (status === 6) {

          this.frame_current_cnt--;

        } else {

          this.status = 0;

        }

      }

    }

  

    this.frame_current_cnt++;

  }

}
</code></pre><p><code>js/player/kyo.js</code></p>
<pre tabindex="0"><code>import { Player } from &#34;../player/base.js&#34;;

import {GIF} from &#39;../utils/gif.js&#39;

  

export class Kyo extends Player {

  constructor(root, info) {

    super(root, info);

  

    this.init_animations();   // 初始化动画

  }

  

  init_animations() {

    let outer = this;

    let offsets = [0, -22, -22, -150, 0, 0, 0];   // 偏移量

    for (let i = 0; i &lt; 7; ++ i) {  // 7个动作

      let gif = GIF();

      gif.load(`/static/images/player/kyo/${i}.gif`);

      this.animations.set(i, {  // 动画

        gif: gif,

        frame_cnt: 0,  // GIF帧数

        frame_rate: 5,  // 每秒的帧数

        offset_y: offsets[i],  // y方向偏移量

        loaded: false,  // 是否加载完成

        scale: 2,  // 放大2倍

      });

  

      gif.onload = function() {   // 加载完成

        let obj = outer.animations.get(i);

        obj.frame_cnt = gif.frames.length;

        obj.loaded = true;

  

        if (i === 3) {

          obj.frame_rate = 4;

        }

      }

    }

  }

}
</code></pre><h4 id="gif">GIF</h4>
<ul>
<li><a href="https://stackoverflow.com/questions/48234696/how-to-put-a-gif-with-canvas/48348567#48348567">Loading and playing GIF image to canvas</a>    把玩家的<code>GIF</code>动画渲染在<code>canvas</code>上</li>
</ul>
<hr>
<p><code>js/utils/gif.js</code></p>
<pre tabindex="0"><code>const GIF = function () {

  // **NOT** for commercial use.

  var timerID;                          // timer handle for set time out usage

  var st;                               // holds the stream object when loading.

  var interlaceOffsets = [0, 4, 2, 1]; // used in de-interlacing.

  var interlaceSteps = [8, 8, 4, 2];

  var interlacedBufSize;  // this holds a buffer to de interlace. Created on the first frame and when size changed

  var deinterlaceBuf;

  var pixelBufSize;    // this holds a buffer for pixels. Created on the first frame and when size changed

  var pixelBuf;

  const GIF_FILE = { // gif file data headers

    GCExt: 0xF9,

    COMMENT: 0xFE,

    APPExt: 0xFF,

    UNKNOWN: 0x01, // not sure what this is but need to skip it in parser

    IMAGE: 0x2C,

    EOF: 59,   // This is entered as decimal

    EXT: 0x21,

  };

  // simple buffered stream used to read from the file

  var Stream = function (data) {

      this.data = new Uint8ClampedArray(data);

      this.pos = 0;

      var len = this.data.length;

      this.getString = function (count) { // returns a string from current pos of len count

          var s = &#34;&#34;;

          while (count--) { s += String.fromCharCode(this.data[this.pos++]) }

          return s;

      };

      this.readSubBlocks = function () { // reads a set of blocks as a string

          var size, count, data = &#34;&#34;;

          do {

              count = size = this.data[this.pos++];

              while (count--) { data += String.fromCharCode(this.data[this.pos++]) }

          } while (size !== 0 &amp;&amp; this.pos &lt; len);

          return data;

      }

      this.readSubBlocksB = function () { // reads a set of blocks as binary

          var size, count, data = [];

          do {

              count = size = this.data[this.pos++];

              while (count--) { data.push(this.data[this.pos++]); }

          } while (size !== 0 &amp;&amp; this.pos &lt; len);

          return data;

      }

  };

  // LZW decoder uncompressed each frames pixels

  // this needs to be optimised.

  // minSize is the min dictionary as powers of two

  // size and data is the compressed pixels

  function lzwDecode(minSize, data) {

      var i, pixelPos, pos, clear, eod, size, done, dic, code, last, d, len;

      pos = pixelPos = 0;

      dic = [];

      clear = 1 &lt;&lt; minSize;

      eod = clear + 1;

      size = minSize + 1;

      done = false;

      while (!done) { // JavaScript optimisers like a clear exit though I never use &#39;done&#39; apart from fooling the optimiser

          last = code;

          code = 0;

          for (i = 0; i &lt; size; i++) {

              if (data[pos &gt;&gt; 3] &amp; (1 &lt;&lt; (pos &amp; 7))) { code |= 1 &lt;&lt; i }

              pos++;

          }

          if (code === clear) { // clear and reset the dictionary

              dic = [];

              size = minSize + 1;

              for (i = 0; i &lt; clear; i++) { dic[i] = [i] }

              dic[clear] = [];

              dic[eod] = null;

          } else {

              if (code === eod) { done = true; return }

              if (code &gt;= dic.length) { dic.push(dic[last].concat(dic[last][0])) }

              else if (last !== clear) { dic.push(dic[last].concat(dic[code][0])) }

              d = dic[code];

              len = d.length;

              for (i = 0; i &lt; len; i++) { pixelBuf[pixelPos++] = d[i] }

              if (dic.length === (1 &lt;&lt; size) &amp;&amp; size &lt; 12) { size++ }

          }

      }

  };

  function parseColourTable(count) { // get a colour table of length count  Each entry is 3 bytes, for RGB.

      var colours = [];

      for (var i = 0; i &lt; count; i++) { colours.push([st.data[st.pos++], st.data[st.pos++], st.data[st.pos++]]) }

      return colours;

  }

  function parse() {        // read the header. This is the starting point of the decode and async calls parseBlock

      var bitField;

      st.pos += 6;

      gif.width = (st.data[st.pos++]) + ((st.data[st.pos++]) &lt;&lt; 8);

      gif.height = (st.data[st.pos++]) + ((st.data[st.pos++]) &lt;&lt; 8);

      bitField = st.data[st.pos++];

      gif.colorRes = (bitField &amp; 0b1110000) &gt;&gt; 4;

      gif.globalColourCount = 1 &lt;&lt; ((bitField &amp; 0b111) + 1);

      gif.bgColourIndex = st.data[st.pos++];

      st.pos++;                    // ignoring pixel aspect ratio. if not 0, aspectRatio = (pixelAspectRatio + 15) / 64

      if (bitField &amp; 0b10000000) { gif.globalColourTable = parseColourTable(gif.globalColourCount) } // global colour flag

      setTimeout(parseBlock, 0);

  }

  function parseAppExt() { // get application specific data. Netscape added iterations and terminator. Ignoring that

      st.pos += 1;

      if (&#39;NETSCAPE&#39; === st.getString(8)) { st.pos += 8 }  // ignoring this data. iterations (word) and terminator (byte)

      else {

          st.pos += 3;            // 3 bytes of string usually &#34;2.0&#34; when identifier is NETSCAPE

          st.readSubBlocks();     // unknown app extension

      }

  };

  function parseGCExt() { // get GC data

      var bitField;

      st.pos++;

      bitField = st.data[st.pos++];

      gif.disposalMethod = (bitField &amp; 0b11100) &gt;&gt; 2;

      gif.transparencyGiven = bitField &amp; 0b1 ? true : false; // ignoring bit two that is marked as  userInput???

      gif.delayTime = (st.data[st.pos++]) + ((st.data[st.pos++]) &lt;&lt; 8);

      gif.transparencyIndex = st.data[st.pos++];

      st.pos++;

  };

  function parseImg() {                           // decodes image data to create the indexed pixel image

      var deinterlace, frame, bitField;

      deinterlace = function (width) {                   // de interlace pixel data if needed

          var lines, fromLine, pass, toline;

          lines = pixelBufSize / width;

          fromLine = 0;

          if (interlacedBufSize !== pixelBufSize) {      // create the buffer if size changed or undefined.

              deinterlaceBuf = new Uint8Array(pixelBufSize);

              interlacedBufSize = pixelBufSize;

          }

          for (pass = 0; pass &lt; 4; pass++) {

              for (toLine = interlaceOffsets[pass]; toLine &lt; lines; toLine += interlaceSteps[pass]) {

                  deinterlaceBuf.set(pixelBuf.subarray(fromLine, fromLine + width), toLine * width);

                  fromLine += width;

              }

          }

      };

      frame = {}

      gif.frames.push(frame);

      frame.disposalMethod = gif.disposalMethod;

      frame.time = gif.length;

      frame.delay = gif.delayTime * 10;

      gif.length += frame.delay;

      if (gif.transparencyGiven) { frame.transparencyIndex = gif.transparencyIndex }

      else { frame.transparencyIndex = undefined }

      frame.leftPos = (st.data[st.pos++]) + ((st.data[st.pos++]) &lt;&lt; 8);

      frame.topPos = (st.data[st.pos++]) + ((st.data[st.pos++]) &lt;&lt; 8);

      frame.width = (st.data[st.pos++]) + ((st.data[st.pos++]) &lt;&lt; 8);

      frame.height = (st.data[st.pos++]) + ((st.data[st.pos++]) &lt;&lt; 8);

      bitField = st.data[st.pos++];

      frame.localColourTableFlag = bitField &amp; 0b10000000 ? true : false;

      if (frame.localColourTableFlag) { frame.localColourTable = parseColourTable(1 &lt;&lt; ((bitField &amp; 0b111) + 1)) }

      if (pixelBufSize !== frame.width * frame.height) { // create a pixel buffer if not yet created or if current frame size is different from previous

          pixelBuf = new Uint8Array(frame.width * frame.height);

          pixelBufSize = frame.width * frame.height;

      }

      lzwDecode(st.data[st.pos++], st.readSubBlocksB()); // decode the pixels

      if (bitField &amp; 0b1000000) {                        // de interlace if needed

          frame.interlaced = true;

          deinterlace(frame.width);

      } else { frame.interlaced = false }

      processFrame(frame);                               // convert to canvas image

  };

  function processFrame(frame) { // creates a RGBA canvas image from the indexed pixel data.

      var ct, cData, dat, pixCount, ind, useT, i, pixel, pDat, col, frame, ti;

      frame.image = document.createElement(&#39;canvas&#39;);

      frame.image.width = gif.width;

      frame.image.height = gif.height;

      frame.image.ctx = frame.image.getContext(&#34;2d&#34;);

      ct = frame.localColourTableFlag ? frame.localColourTable : gif.globalColourTable;

      if (gif.lastFrame === null) { gif.lastFrame = frame }

      useT = (gif.lastFrame.disposalMethod === 2 || gif.lastFrame.disposalMethod === 3) ? true : false;

      if (!useT) { frame.image.ctx.drawImage(gif.lastFrame.image, 0, 0, gif.width, gif.height) }

      cData = frame.image.ctx.getImageData(frame.leftPos, frame.topPos, frame.width, frame.height);

      ti = frame.transparencyIndex;

      dat = cData.data;

      if (frame.interlaced) { pDat = deinterlaceBuf }

      else { pDat = pixelBuf }

      pixCount = pDat.length;

      ind = 0;

      for (i = 0; i &lt; pixCount; i++) {

          pixel = pDat[i];

          col = ct[pixel];

          if (ti !== pixel) {

              dat[ind++] = col[0];

              dat[ind++] = col[1];

              dat[ind++] = col[2];

              dat[ind++] = 255;      // Opaque.

          } else

              if (useT) {

                  dat[ind + 3] = 0; // Transparent.

                  ind += 4;

              } else { ind += 4 }

      }

      frame.image.ctx.putImageData(cData, frame.leftPos, frame.topPos);

      gif.lastFrame = frame;

      if (!gif.waitTillDone &amp;&amp; typeof gif.onload === &#34;function&#34;) { doOnloadEvent() }// if !waitTillDone the call onload now after first frame is loaded

  };

  // **NOT** for commercial use.

  function finnished() { // called when the load has completed

      gif.loading = false;

      gif.frameCount = gif.frames.length;

      gif.lastFrame = null;

      st = undefined;

      gif.complete = true;

      gif.disposalMethod = undefined;

      gif.transparencyGiven = undefined;

      gif.delayTime = undefined;

      gif.transparencyIndex = undefined;

      gif.waitTillDone = undefined;

      pixelBuf = undefined; // dereference pixel buffer

      deinterlaceBuf = undefined; // dereference interlace buff (may or may not be used);

      pixelBufSize = undefined;

      deinterlaceBuf = undefined;

      gif.currentFrame = 0;

      if (gif.frames.length &gt; 0) { gif.image = gif.frames[0].image }

      doOnloadEvent();

      if (typeof gif.onloadall === &#34;function&#34;) {

          (gif.onloadall.bind(gif))({ type: &#39;loadall&#39;, path: [gif] });

      }

      if (gif.playOnLoad) { gif.play() }

  }

  function canceled() { // called if the load has been cancelled

      finnished();

      if (typeof gif.cancelCallback === &#34;function&#34;) { (gif.cancelCallback.bind(gif))({ type: &#39;canceled&#39;, path: [gif] }) }

  }

  function parseExt() {              // parse extended blocks

      const blockID = st.data[st.pos++];

      if (blockID === GIF_FILE.GCExt) { parseGCExt() }

      else if (blockID === GIF_FILE.COMMENT) { gif.comment += st.readSubBlocks() }

      else if (blockID === GIF_FILE.APPExt) { parseAppExt() }

      else {

          if (blockID === GIF_FILE.UNKNOWN) { st.pos += 13; } // skip unknow block

          st.readSubBlocks();

      }

  

  }

  function parseBlock() { // parsing the blocks

      if (gif.cancel !== undefined &amp;&amp; gif.cancel === true) { canceled(); return }

  

      const blockId = st.data[st.pos++];

      if (blockId === GIF_FILE.IMAGE) { // image block

          parseImg();

          if (gif.firstFrameOnly) { finnished(); return }

      } else if (blockId === GIF_FILE.EOF) { finnished(); return }

      else { parseExt() }

      if (typeof gif.onprogress === &#34;function&#34;) {

          gif.onprogress({ bytesRead: st.pos, totalBytes: st.data.length, frame: gif.frames.length });

      }

      setTimeout(parseBlock, 0); // parsing frame async so processes can get some time in.

  };

  function cancelLoad(callback) { // cancels the loading. This will cancel the load before the next frame is decoded

      if (gif.complete) { return false }

      gif.cancelCallback = callback;

      gif.cancel = true;

      return true;

  }

  function error(type) {

      if (typeof gif.onerror === &#34;function&#34;) { (gif.onerror.bind(this))({ type: type, path: [this] }) }

      gif.onload = gif.onerror = undefined;

      gif.loading = false;

  }

  function doOnloadEvent() { // fire onload event if set

      gif.currentFrame = 0;

      gif.nextFrameAt = gif.lastFrameAt = new Date().valueOf(); // just sets the time now

      if (typeof gif.onload === &#34;function&#34;) { (gif.onload.bind(gif))({ type: &#39;load&#39;, path: [gif] }) }

      gif.onerror = gif.onload = undefined;

  }

  function dataLoaded(data) { // Data loaded create stream and parse

      st = new Stream(data);

      parse();

  }

  function loadGif(filename) { // starts the load

      var ajax = new XMLHttpRequest();

      ajax.responseType = &#34;arraybuffer&#34;;

      ajax.onload = function (e) {

          if (e.target.status === 404) { error(&#34;File not found&#34;) }

          else if (e.target.status &gt;= 200 &amp;&amp; e.target.status &lt; 300) { dataLoaded(ajax.response) }

          else { error(&#34;Loading error : &#34; + e.target.status) }

      };

      ajax.open(&#39;GET&#39;, filename, true);

      ajax.send();

      ajax.onerror = function (e) { error(&#34;File error&#34;) };

      this.src = filename;

      this.loading = true;

  }

  function play() { // starts play if paused

      if (!gif.playing) {

          gif.paused = false;

          gif.playing = true;

          playing();

      }

  }

  function pause() { // stops play

      gif.paused = true;

      gif.playing = false;

      clearTimeout(timerID);

  }

  function togglePlay() {

      if (gif.paused || !gif.playing) { gif.play() }

      else { gif.pause() }

  }

  function seekFrame(frame) { // seeks to frame number.

      clearTimeout(timerID);

      gif.currentFrame = frame % gif.frames.length;

      if (gif.playing) { playing() }

      else { gif.image = gif.frames[gif.currentFrame].image }

  }

  function seek(time) { // time in Seconds  // seek to frame that would be displayed at time

      clearTimeout(timerID);

      if (time &lt; 0) { time = 0 }

      time *= 1000; // in ms

      time %= gif.length;

      var frame = 0;

      while (time &gt; gif.frames[frame].time + gif.frames[frame].delay &amp;&amp; frame &lt; gif.frames.length) { frame += 1 }

      gif.currentFrame = frame;

      if (gif.playing) { playing() }

      else { gif.image = gif.frames[gif.currentFrame].image }

  }

  function playing() {

      var delay;

      var frame;

      if (gif.playSpeed === 0) {

          gif.pause();

          return;

      } else {

          if (gif.playSpeed &lt; 0) {

              gif.currentFrame -= 1;

              if (gif.currentFrame &lt; 0) { gif.currentFrame = gif.frames.length - 1 }

              frame = gif.currentFrame;

              frame -= 1;

              if (frame &lt; 0) { frame = gif.frames.length - 1 }

              delay = -gif.frames[frame].delay * 1 / gif.playSpeed;

          } else {

              gif.currentFrame += 1;

              gif.currentFrame %= gif.frames.length;

              delay = gif.frames[gif.currentFrame].delay * 1 / gif.playSpeed;

          }

          gif.image = gif.frames[gif.currentFrame].image;

          timerID = setTimeout(playing, delay);

      }

  }

  var gif = {                      // the gif image object

      onload: null,       // fire on load. Use waitTillDone = true to have load fire at end or false to fire on first frame

      onerror: null,       // fires on error

      onprogress: null,       // fires a load progress event

      onloadall: null,       // event fires when all frames have loaded and gif is ready

      paused: false,      // true if paused

      playing: false,      // true if playing

      waitTillDone: true,       // If true onload will fire when all frames loaded, if false, onload will fire when first frame has loaded

      loading: false,      // true if still loading

      firstFrameOnly: false,      // if true only load the first frame

      width: null,       // width in pixels

      height: null,       // height in pixels

      frames: [],         // array of frames

      comment: &#34;&#34;,         // comments if found in file. Note I remember that some gifs have comments per frame if so this will be all comment concatenated

      length: 0,          // gif length in ms (1/1000 second)

      currentFrame: 0,          // current frame.

      frameCount: 0,          // number of frames

      playSpeed: 1,          // play speed 1 normal, 2 twice 0.5 half, -1 reverse etc...

      lastFrame: null,       // temp hold last frame loaded so you can display the gif as it loads

      image: null,       // the current image at the currentFrame

      playOnLoad: true,       // if true starts playback when loaded

      // functions

      load: loadGif,    // call this to load a file

      cancel: cancelLoad, // call to stop loading

      play: play,       // call to start play

      pause: pause,      // call to pause

      seek: seek,       // call to seek to time

      seekFrame: seekFrame,  // call to seek to frame

      togglePlay: togglePlay, // call to toggle play and pause state

  };

  return gif;

}

  

export {

  GIF

}
</code></pre><h4 id="状态机">状态机</h4>
<center> 
	<img style="border-radius: 0.3125em; box-shadow: 0 2px 4px 0 rgba(34,36,38,.12),0 2px 10px 0 rgba(34,36,38,.08);" src="https://bu.dusays.com/2022/11/03/636315494cea8.png">
	<br>
	<div style="color:orange; border-bottom: 1px solid #d9d9d9; 
	display: inline-block; 
	color: #999; 
	padding: 2px;">0：静止    1：移动     3：跳跃</div> 
 </center>
]]></content:encoded>
    </item>
    
    <item>
      <title>AcWing Django 框架课</title>
      <link>https://xancoding.cn/posts/acwdjango/</link>
      <pubDate>Sat, 29 Oct 2022 18:23:59 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwdjango/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_django/&#34;&gt;AcWing Django 框架课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/punch_the_clock/72/&#34;&gt;AcWing Django 框架课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;django-项目创建&#34;&gt;Django 项目创建&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/72577/&#34;&gt;2.1上课笔记 | 栎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73097/&#34;&gt;2.1上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;启动初始项目&#34;&gt;启动初始项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;django-admin startproject acapp&lt;/code&gt;：在当前目录下创建名为&lt;code&gt;acapp&lt;/code&gt;的&lt;code&gt;django&lt;/code&gt;项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 manage.py runserver 0.0.0.0:8000&lt;/code&gt;：启动项目
&lt;ol&gt;
&lt;li&gt;打开&lt;code&gt;settings.py&lt;/code&gt;，找到&lt;code&gt;ALLOWED_HOSTS=[]&lt;/code&gt;，修改成&lt;code&gt;ALLOWED_HOSTS=[&amp;quot;自己的服务器的公网IP&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;自己的服务器公网IP:8000&lt;/code&gt; 打开Django页面&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建管理员登录页面&#34;&gt;创建管理员登录页面&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在一级&lt;code&gt;acapp&lt;/code&gt;文件夹下，&lt;code&gt;python3 manage.py startapp XXX&lt;/code&gt;，&lt;code&gt;XXX&lt;/code&gt;是可以自定义的app名，这里用&lt;code&gt;game&lt;/code&gt;示例，这时候会多一个文件夹&lt;code&gt;game&lt;/code&gt;，树形结构如图：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- game
|   |-- __init__.py
|   |-- admin.py          # 管理员页面
|   |-- apps.py           # 用的不多
|   |-- migrations        # 存储数据库
|   |   `-- __init__.py
|   |-- models.py         # 定义网站里的数据库表
|   |-- tests.py
|   `-- views.py          # 视图，即函数
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;python3 manage.py migrate&lt;/code&gt;：将所有修改更新进数据库&lt;/li&gt;
&lt;li&gt;创建一个 &lt;strong&gt;管理员用户&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python3 manage.py createsuperuser
&amp;gt; Username (leave blank to use &amp;#39;acs&amp;#39;): admin
&amp;gt; Email address: 
&amp;gt; Password: 123456
&amp;gt; Password (again): 123456
&amp;gt; Superuser created successfully.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后利用该 &lt;strong&gt;管理员用户&lt;/strong&gt; 登录 &lt;code&gt;admin&lt;/code&gt; 页面，即可成功登陆&lt;/p&gt;
&lt;h2 id=&#34;创建用户登录页面&#34;&gt;创建用户登录页面&lt;/h2&gt;
&lt;h3 id=&#34;game-下的各个文件作用&#34;&gt;&lt;code&gt;game&lt;/code&gt; 下的各个文件作用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;templates&lt;/code&gt;目录：管理 &lt;code&gt;html&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urls&lt;/code&gt;目录：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views&lt;/code&gt;目录：管理 &lt;code&gt;http&lt;/code&gt; 函数（接收浏览器请求，返回字符串至浏览器）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;models&lt;/code&gt;目录：管理数据库数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;目录：管理静态文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;consumers&lt;/code&gt;目录：管理&lt;code&gt;websocket&lt;/code&gt;函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实现一个路由重定向&#34;&gt;实现一个路由重定向&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; 输入网址 -&amp;gt; &lt;code&gt;acapp.urls&lt;/code&gt; -&amp;gt; &lt;code&gt;game.urls&lt;/code&gt; -&amp;gt; &lt;code&gt;game.views.index&lt;/code&gt; -&amp;gt; 展示页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;game.views&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;HttpResponse()&lt;/code&gt;内部使用&lt;code&gt;html&lt;/code&gt;的语法，返回的响应就直接用这个字符串作为页面，转换成&lt;code&gt;html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.http import HttpResponse

def index(request):
    line1 = &amp;#39;&amp;lt;h1 style=&amp;#34;text-align: center&amp;#34;&amp;gt; 第一个网页 &amp;lt;/h1&amp;gt;&amp;#39;
    return HttpResponse(line1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;game.urls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;path(&#39;PATH&#39;, function, name)&lt;/code&gt;的含义是，在用户访问网站的时候，如果是&lt;code&gt;网站/game/PATH&lt;/code&gt;，就会调用&lt;code&gt;function&lt;/code&gt;，名字为&lt;code&gt;name&lt;/code&gt;，这是在&lt;code&gt;/game/&lt;/code&gt;目录下的调用，所以这个&lt;code&gt;PATH&lt;/code&gt;是在&lt;code&gt;/game/&lt;/code&gt;的基础上的&lt;strong&gt;相对路径&lt;/strong&gt;，所以他的&lt;strong&gt;绝对路径&lt;/strong&gt;是&lt;code&gt;网站/game/PATH&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.urls import path
from game.views import index

urlpatterns = [ 
    path(&amp;#34;&amp;#34;, index, name=&amp;#34;index&amp;#34;),
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;acapp.urls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;path(&#39;PATH&#39;, include(&#39;game.urls&#39;))&lt;/code&gt;的含义是：在用户访问网站的时候，如果是&lt;code&gt;网站/PATH&lt;/code&gt;，就会走到&lt;code&gt;/game/urls&lt;/code&gt;，并根据&lt;code&gt;/game/urls.py&lt;/code&gt;来跑路由，就是说，用户在访问&lt;code&gt;网站/&lt;/code&gt;的时候，由于此时调用的函数是&lt;code&gt;include(&#39;game.urls&#39;)&lt;/code&gt;，所以访问&lt;code&gt;网站/&lt;/code&gt;相当于根据&lt;code&gt;game/urls&lt;/code&gt;访问&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [ 
    path(&amp;#39;&amp;#39;, include(&amp;#39;game.urls&amp;#39;)),
    path(&amp;#39;admin/&amp;#39;, admin.site.urls),
] 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后直接打开 &lt;code&gt;ip:socket&lt;/code&gt; 可以直接显示 &lt;code&gt;index&lt;/code&gt; 返回的网页&lt;/p&gt;
&lt;h1 id=&#34;创建菜单界面&#34;&gt;创建菜单界面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3199626/&#34;&gt;3. 创建菜单界面 | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73121/&#34;&gt;3.1 上课笔记 | 大家好今天是&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73707/&#34;&gt;3.1 上课笔记 | 栎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;构建项目框架&#34;&gt;构建项目框架&lt;/h2&gt;
&lt;h3 id=&#34;项目系统设计&#34;&gt;项目系统设计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt;：菜单页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playground&lt;/code&gt;：游戏界面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;settings&lt;/code&gt;：设置界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;项目文件结构&#34;&gt;项目文件结构&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
|-- README.md
|-- acapp
|   |-- __init__.py    # 文件夹在加上 __init__.py 文件后，python 便可以通过 import 来引用该文件夹
|   |-- asgi.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
|-- db.sqlite3
|-- game
|   |-- __init__.py
|   |-- admin.py
|   |-- apps.py
|   |-- migrations
|   |   `-- __init__.py
|   |-- models
|   |   `-- __init__.py
|   |-- static
|   |   |-- css
|   |   |   `-- game.css    # 一般一个工程，只有一个 css 文件就足够了
|   |   |-- image
|   |   |   `-- menu
|   |   |       `-- background.gif
|   |   `-- js
|   |       |-- dist
|   |       |   `-- game.js
|   |       `-- src
|   |           `-- zbase.js    # 总的 js 文件，命名以 z 开头会自动在字典序最后
|   |-- templates
|   |   `-- multiends
|   |       `-- web.html
|   |-- tests.py
|   |-- urls
|   |   |-- __init__.py
|   |   |-- index.py
|   |   |-- menu
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   |-- playground
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   `-- settings
|   |       |-- __init__.py
|   |       `-- index.py
|   `-- views
|       |-- __init__.py
|       |-- index.py
|       |-- menu
|       |   `-- __init__.py
|       |-- playground
|       |   `-- __init__.py
|       `-- settings
|           `-- __init__.py
|-- manage.py
`-- scripts
    `-- compress_game_js.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;js-文件管理&#34;&gt;&lt;code&gt;js&lt;/code&gt; 文件管理&lt;/h4&gt;
&lt;p&gt;一般一个工程会有很多个 &lt;code&gt;.js&lt;/code&gt; 源文件，为了加快网络的传输，也为了每次写新的 &lt;code&gt;.js&lt;/code&gt; 文件不用每个 &lt;code&gt;html&lt;/code&gt; 都额外引入一次&lt;/p&gt;
&lt;p&gt;考虑用一个 &lt;code&gt;src&lt;/code&gt; 源文件夹来存储所有的 &lt;code&gt;.js&lt;/code&gt; 源文件&lt;/p&gt;
&lt;p&gt;然后用 &lt;code&gt;dist&lt;/code&gt; 文件夹来存放由 &lt;code&gt;src&lt;/code&gt; 下所有源文件整合生成的一个目标 &lt;code&gt;.js&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;这样既实现了快速传输的好处，也方便了后续编写 &lt;code&gt;html&lt;/code&gt; 文件时，引入 &lt;code&gt;.js&lt;/code&gt; 的便利&lt;/p&gt;
&lt;p&gt;创建一个脚本实现上述 &lt;strong&gt;整合&lt;/strong&gt; 的功能
&lt;code&gt;~/acapp/scripts/compress_game_js.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &amp;#39;*.js&amp;#39; | sort | xargs cat &amp;gt; ${JS_PATH_DIST}game.js
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;html-文件管理&#34;&gt;&lt;code&gt;html&lt;/code&gt; 文件管理&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;templates&lt;/code&gt; 文件夹下创建 &lt;code&gt;menu&lt;/code&gt;、&lt;code&gt;playground&lt;/code&gt;、&lt;code&gt;settings&lt;/code&gt;、&lt;code&gt;multiends&lt;/code&gt; 四个文件夹，用于存储三个模块和终端的 &lt;code&gt;html&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;multiends&lt;/code&gt; 下创建 &lt;code&gt;web.html&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% load static %}
&amp;lt;!-- Django 中引入全局setting里的变量 static 的语法--&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.acwing.com/static/jquery-ui-dist/jquery-ui.min.css&amp;#34;&amp;gt;
    &amp;lt;script src=&amp;#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- 上述两句引入 jQuery 库 --&amp;gt;
    &amp;lt;!-- 使用引入的变量 static 的语法如下 --&amp;gt;
    &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;{% static &amp;#39;css/game.css&amp;#39; %}&amp;#34;&amp;gt;
    &amp;lt;script src=&amp;#34;{% static &amp;#39;js/dist/game.js&amp;#39; %}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- 分别引入 css 文件和总的 js 文件 --&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body style=&amp;#34;margin: 0&amp;#34;&amp;gt;
    &amp;lt;div id=&amp;#34;ac_game_12345678&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;views-视图管理&#34;&gt;&lt;code&gt;views&lt;/code&gt; 视图管理&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;views&lt;/code&gt; 文件夹下新建三个模块的视图文件夹&lt;/p&gt;
&lt;p&gt;写一个 &lt;code&gt;index.py&lt;/code&gt; 文件，目的是在 &lt;code&gt;web&lt;/code&gt; 端被访问时，返回上面写的 &lt;code&gt;web.html&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.shortcuts import render

def index(request):
  return render(request, &amp;#34;multiends/web.html&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;urls-路由管理&#34;&gt;&lt;code&gt;urls&lt;/code&gt; 路由管理&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;                                     /-- &amp;#34;&amp;#34; -- index
                                    / -- &amp;#34;menu/&amp;#34; -- menu.index
             / &amp;#34;&amp;#34; --&amp;gt; &amp;#34;game.url&amp;#34; --&amp;gt; 
            /                       \ -- &amp;#34;playground/&amp;#34; -- playground.index
id:scoket -&amp;gt;                         \-- &amp;#34;settings/&amp;#34; -- settings.index
            \
             \ &amp;#34;/admin&amp;#34; -- 到达管理员页面
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;~/acapp/acapp/urls.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
  path(&amp;#39;&amp;#39;, include(&amp;#39;game.urls.index&amp;#39;)),
  path(&amp;#39;admin/&amp;#39;, admin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;~/acapp/game/urls/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.urls import path, include
from game.views.index import index

urlpatterns = [ 
    path(&amp;#34;&amp;#34;, index, name=&amp;#34;index&amp;#34;),
    path(&amp;#34;menu/&amp;#34;, include(&amp;#34;game.urls.menu.index&amp;#34;)),
    path(&amp;#34;playground/&amp;#34;, include(&amp;#34;game.urls.playground.index&amp;#34;)),
    path(&amp;#34;settings/&amp;#34;, include(&amp;#34;game.urls.settings.index&amp;#34;))
]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;网页渲染流程&#34;&gt;网页渲染流程&lt;/h4&gt;
&lt;p&gt;根据用户的链接，首先进入&lt;code&gt;acapp/urls.py&lt;/code&gt;，根据&lt;code&gt;path&lt;/code&gt;再进入&lt;code&gt;game/urls/index.py&lt;/code&gt;，再根据&lt;code&gt;path&lt;/code&gt;进入下一层&lt;code&gt;url&lt;/code&gt;或调用相对应的&lt;code&gt;views&lt;/code&gt;中的&lt;code&gt;index.py&lt;/code&gt;函数，函数接收参数，在网页端渲染&lt;code&gt;templates/multiends&lt;/code&gt;下的&lt;code&gt;web.html&lt;/code&gt;，&lt;code&gt;html&lt;/code&gt;中有&lt;code&gt;JS&lt;/code&gt;执行&lt;/p&gt;
&lt;p&gt;注意：本项目为前后端分离，即通过&lt;code&gt;JS&lt;/code&gt;在&lt;code&gt;client&lt;/code&gt;中渲染项目(动态生成页面)，而不是在&lt;code&gt;server&lt;/code&gt;渲染项目&lt;/p&gt;
&lt;h3 id=&#34;修改全局配置&#34;&gt;修改全局配置&lt;/h3&gt;
&lt;h4 id=&#34;设置时区&#34;&gt;设置时区&lt;/h4&gt;
&lt;p&gt;修改项目的 &lt;strong&gt;UTC&lt;/strong&gt; 时间为 &lt;strong&gt;CN&lt;/strong&gt; 时间&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39; # 原来默认是 UTC
******
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;添加配置文件&#34;&gt;添加配置文件&lt;/h4&gt;
&lt;p&gt;将新创建的 &lt;code&gt;game&lt;/code&gt; 下的 &lt;code&gt;apps.py&lt;/code&gt; 中的 &lt;code&gt;GameConfig&lt;/code&gt; 加到 &lt;code&gt;settings.py&lt;/code&gt; 下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
INSTALLED_APPS = [
  &amp;#39;game.apps.GameConfig&amp;#39;,
  ......
]
******
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明将静态文件路径 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 和 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
import os

......

STATIC_ROOT = os.path.join(BASE_DIR, &amp;#39;static&amp;#39;)
STATIC_URL = &amp;#39;/static/&amp;#39;

MEDIA_ROOT = os.path.join(BASE_DIR, &amp;#39;media&amp;#39;)
MEDIA_URL = &amp;#39;/media/&amp;#39;
******
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建菜单-menu-界面&#34;&gt;创建菜单 &lt;code&gt;menu&lt;/code&gt; 界面&lt;/h2&gt;
&lt;h3 id=&#34;搭建菜单-menu-界面的框架&#34;&gt;搭建菜单 &lt;code&gt;menu&lt;/code&gt; 界面的框架&lt;/h3&gt;
&lt;p&gt;我们采用的 &lt;strong&gt;前后端分离式&lt;/strong&gt; 开发，所有的 &lt;strong&gt;html&lt;/strong&gt; 渲染都要求在前端完成&lt;/p&gt;
&lt;p&gt;开发流程就是，先在 &lt;strong&gt;html&lt;/strong&gt; 里创建好一个有 &lt;strong&gt;id&lt;/strong&gt; 的 &lt;strong&gt;div&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后利用 &lt;strong&gt;js&lt;/strong&gt; 文件，捕获到该 &lt;strong&gt;div&lt;/strong&gt;，并进行 &lt;strong&gt;渲染&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/templates/multiends/web.html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
    &amp;lt;div id=&amp;#34;ac_game_12345678&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGame {
    constructor(id) {
        this.id = id; 
        this.$ac_game = $(&amp;#39;#&amp;#39; + id);
        this.menu = new AcGameMenu(this);
    }   
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(` 
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;css/game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&amp;#39;/static/image/menu/background.gif&amp;#39;);
    background-size: 100% 100%;
    user-select: none;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 &lt;strong&gt;代码逻辑&lt;/strong&gt; 如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt; 页面执行到 &lt;code&gt;js&lt;/code&gt; 代码，利用 &lt;code&gt;AcGame类&lt;/code&gt; 创建对象 &lt;code&gt;ac_game&lt;/code&gt; 同时传递参数 &lt;code&gt;div&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AcGame&lt;/code&gt; 开始执行构造函数，在构造函数中，捕获 &lt;code&gt;html&lt;/code&gt; 标签，并利用 &lt;code&gt;AcGameMenu类&lt;/code&gt; 创建对象 &lt;code&gt;menu&lt;/code&gt;，并将整个对象作为参数下传&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AcGameMenu&lt;/code&gt; 开始执行构造函数，然后创建 &lt;code&gt;html&lt;/code&gt; 代码，加到捕获到的 &lt;code&gt;html&lt;/code&gt; 代码下&lt;/li&gt;
&lt;li&gt;最终成功渲染出背景图片&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;设置菜单-menu-页面的内容&#34;&gt;设置菜单 &lt;code&gt;menu&lt;/code&gt; 页面的内容&lt;/h3&gt;
&lt;p&gt;主要内容就是在主页面中，显示：单人模式、多人模式、设置，三个按钮的选项
&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
    &amp;lt;div class=&amp;#34;ac-game-menu-field&amp;#34;&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&amp;#34;&amp;gt;
            单人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&amp;#34;&amp;gt;
            多人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&amp;#34;&amp;gt;
            设置
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-single-mode&amp;#39;);
        this.$multi_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-multi-mode&amp;#39;);
        this.$settings_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-settings-mode&amp;#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;css/game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&amp;#39;/static/image/menu/background.gif&amp;#39;);
    background-size: 100% 100%;
    user-select: none;
}
.ac-game-menu-field {
    width: 20vw;
    position: relative;
    top: 40vh;
    left: 19vh;
}
.ac-game-menu-field-item {
    height: 7vh;
    width: 18vw;
    color: white;
    font-size: 6vh;
    font-style: italic;
    padding: 2vh;
    margin: 1vh 0;
    cursor: pointer;
    text-align: center;
    background-color: rgba(39, 21, 28, 0.6);
    border-radius: 10px;
    letter-spacing: 0.5vw;
}
.ac-game-menu-field-item:hover {
    transform: scale(1.2);
    transition: 100ms;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;添加-单人模式-监听函数--打开游戏界面-功能&#34;&gt;添加 &amp;lsquo;单人模式&amp;rsquo; 监听函数 —— 打开游戏界面 功能&lt;/h3&gt;
&lt;p&gt;这里要实现的 &lt;strong&gt;逻辑&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;点击 &amp;lsquo;单人模式&amp;rsquo; 按钮触发 &lt;code&gt;click&lt;/code&gt; 事件，随即触发监听函数，开始执行&lt;/li&gt;
&lt;li&gt;关闭 &lt;code&gt;menu&lt;/code&gt; 页面&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;playground&lt;/code&gt; 页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，我们先简易的实现一个 &lt;code&gt;playground&lt;/code&gt; 页面，方便调试该功能
&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    constructor(root) {
        this.root = root;
        this.$playground = $(`&amp;lt;div&amp;gt;游戏界面&amp;lt;/div&amp;gt;`);

        this.hide();
        this.root.$ac_game.append(this.$playground);

        this.start();
    }
    start() {

    }
    show() {    //打开 playground 界面
        this.$playground.show();
    }
    hide() {    //关闭 playground 界面
        this.$playground.hide();
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在实现监听函数功能之前，先在 &lt;code&gt;/src/zbase.js&lt;/code&gt; 即主 &lt;code&gt;js&lt;/code&gt; 文件下，利用 &lt;code&gt;AcGamePlayground&lt;/code&gt; 类创建好 &lt;code&gt;playground&lt;/code&gt; 对象&lt;/p&gt;
&lt;p&gt;这样我们就能在前端，渲染出两个界面了，分别是：&lt;code&gt;menu&lt;/code&gt; 和 &lt;code&gt;playground&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGame {
    constructor(id) {
        this.id = id;
        this.$ac_game = $(&amp;#39;#&amp;#39; + id);
        this.menu = new AcGameMenu(this);
        // 把 playground 对象也建好，这样我们就同时有两个界面了
        this.playground = new AcGamePlayground(this);

        this.start();
    }                    
    start() {

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，我们开始实现 &lt;code&gt;ac-game-menu-field-item-single-mode&lt;/code&gt; 标签的 &lt;code&gt;click&lt;/code&gt; 事件的监听函数&lt;/p&gt;
&lt;p&gt;其功能之前讲过了，就是关闭 &lt;code&gt;menu&lt;/code&gt; 页面，打开 &lt;code&gt;playground&lt;/code&gt; 页面&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
    &amp;lt;div class=&amp;#34;ac-game-menu-field&amp;#34;&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&amp;#34;&amp;gt;
            单人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&amp;#34;&amp;gt;
            多人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&amp;#34;&amp;gt;
            设置
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-single-mode&amp;#39;);
        this.$multi_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-multi-mode&amp;#39;);
        this.$settings_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-settings-mode&amp;#39;);

        this.start();
    }
    start() {
        this.add_listening_events();
    }
    add_listening_events() {
        let outer = this;
        this.$single_mode.click(function(){
            outer.hide();   // 关闭主页面
            outer.root.playground.show();   // 打开游戏界面
        });
    }

    show() {    //显示menu界面
        this.$menu.show();
    }
    hide() {    //隐藏menu界面
        this.$menu.hide();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;创建游戏界面&#34;&gt;创建游戏界面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79181/&#34;&gt;4.1 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;若修改&lt;code&gt;static文件夹&lt;/code&gt;下的相关文件，需在&lt;code&gt;~/acapp&lt;/code&gt;下执行&lt;code&gt;./scripts/compress_game_js.sh&lt;/code&gt;来打包文件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前端的模块化引入&#34;&gt;前端的模块化引入&lt;/h2&gt;
&lt;p&gt;由于在 &lt;code&gt;html&lt;/code&gt; 代码部分，是将整个 &lt;code&gt;game.js&lt;/code&gt; 文件引入&lt;/p&gt;
&lt;p&gt;这样会导致在 &lt;code&gt;game.js&lt;/code&gt; 中定义的变量，会变成整个网页的 &lt;strong&gt;全局变量&lt;/strong&gt;（之后可能会引起变量重名的诸多问题）&lt;/p&gt;
&lt;p&gt;因此，我们考虑使用 &lt;strong&gt;模块化引入&lt;/strong&gt; 的功能，让网页只引入在 &lt;code&gt;html&lt;/code&gt; 中需要的部分&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;web.html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- 首先，先删掉上面整个引入 game.js 的部分 --&amp;gt;
&amp;lt;!-- 然后，下方创建对象的部分，先使用模块化引入 --&amp;gt;
......
    &amp;lt;script type=&amp;#34;module&amp;#34;&amp;gt;
        import {AcGame} from &amp;#34;{% static &amp;#39;js/dist/game.js&amp;#39; %}&amp;#34;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此外，还有修改引入的类，在前面加上 &lt;code&gt;export&lt;/code&gt;，如下修改 &lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export class AcGame {
    ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，在全局中，只会出现引入的模块，其他的 &lt;code&gt;.js&lt;/code&gt; 代码不会出现在全局中&lt;/p&gt;
&lt;h2 id=&#34;构建游戏界面框架&#34;&gt;构建游戏界面框架&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;static/js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;......
    this.$playground = $(`&amp;lt;div class=&amp;#34;ac-game-playground&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;`);
......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;......
.ac-game-playground {
    height: 100%;
    width: 100%;
    user-select: none;  // 禁用右键弹菜单
} 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;实现游戏引擎框架&#34;&gt;实现游戏引擎框架&lt;/h2&gt;
&lt;p&gt;游戏中，物体在移动，其实现原理是：每一个动作都会渲染多张图片出来，然后图片快速的切换，从而实现动的过程&lt;/p&gt;
&lt;p&gt;因此，需要先实现一个游戏引擎的基类 &lt;code&gt;AcGameObject&lt;/code&gt; ，使得每帧能渲染一张图片出来&lt;/p&gt;
&lt;p&gt;该基类需要具备的功能有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;start()&lt;/code&gt; 在游戏开始的第一帧时需要执行的任务（一般是创建对象）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update()&lt;/code&gt; 在游戏开始后的每一帧均会执行的任务（一般是渲染当前对象的各种状态）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_destroy()&lt;/code&gt; 删掉该物体前需要执行的任务（一般是删掉动画，或者给对手加分）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroy()&lt;/code&gt; 删掉该物体&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据上述逻辑，我们就可以基本搭建出来一个游戏引擎的基类了，具体如下：
&lt;code&gt;/static/js/playground/ac_game_object/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; AC_GAME_OBJECTS = [];   &lt;span style=&#34;color:#007f7f&#34;&gt;// 用于记录当前画布中，需要渲染的对象有哪些
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AC_GAME_OBJECTS.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);  &lt;span style=&#34;color:#007f7f&#34;&gt;// 将当前新建的对象，加入到全局的画布中去，参与渲染
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.has_called_start = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 是否执行过 start 函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;             &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前帧距离上一帧的时间间隔
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 该数据记录是为了后续计算速度等参数的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 只会在第一帧执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 每一帧均会执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_destroy() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 在被销毁前执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    destroy() { &lt;span style=&#34;color:#007f7f&#34;&gt;// 删掉该物体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.on_destroy();  &lt;span style=&#34;color:#007f7f&#34;&gt;//删掉该物体前，执行删前的操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 在全局渲染物体中，找到该物体，并将其删掉
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; AC_GAME_OBJECTS.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (AC_GAME_OBJECTS[i] === &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 三等号，在js里额外加了一层类型相等约束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                AC_GAME_OBJECTS.splice(i, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; last_timestamp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; AC_GAME_ANIMATION = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(timestamp) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 回调函数，实现：每一帧重绘时，都会执行一遍
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; AC_GAME_OBJECTS.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; obj = AC_GAME_OBJECTS[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!obj.has_called_start) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 如果还未执行初始帧动作，就先执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            obj.start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            obj.has_called_start = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 执行过初始帧，就执行每一帧的任务
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            obj.timedelta = timestamp - last_timestamp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            obj.update();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_timestamp = timestamp; &lt;span style=&#34;color:#007f7f&#34;&gt;// 更新最后一次时间戳
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    requestAnimationFrame(AC_GAME_ANIMATION);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requestAnimationFrame(AC_GAME_ANIMATION);   &lt;span style=&#34;color:#007f7f&#34;&gt;// JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;接下来所有的一切游戏，都是基于这个引擎的基类完成的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;实现游戏地图功能&#34;&gt;实现游戏地图功能&lt;/h2&gt;
&lt;p&gt;目标：实现一个每一秒都在渲染的纯黑背景&lt;/p&gt;
&lt;p&gt;虽然现阶段要实现的地图较为简单，但为了后期的拓展性，故还是考虑新建一个文件夹来完成&lt;/p&gt;
&lt;p&gt;然后在 &lt;code&gt;js&lt;/code&gt; 中，已经封装好了一个 &lt;code&gt;canvas&lt;/code&gt; 的 &lt;code&gt;api&lt;/code&gt; 来帮助实现背景画布，直接调用即可&lt;/p&gt;
&lt;p&gt;先铺开画布，然后设置为黑色&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static/js/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// $(&amp;#39;.playground&amp;#39;)对象已经在 css 文件里渲染出高宽了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 现在把他的高宽存下来，往下传递
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.width();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.height();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.game_map = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; GameMap(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;static/js/playground/game-map/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; GameMap &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 继承自游戏引擎基类
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    constructor(playground) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();    &lt;span style=&#34;color:#007f7f&#34;&gt;// 自函数功能：调用基类的构造函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas = $(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`&amp;lt;canvas&amp;gt;&amp;lt;/canvas&amp;gt;`&lt;/span&gt;); &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建一个canvas的jQuery对象，就是我们要实现的画布
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;].getContext(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#007f7f&#34;&gt;// jQuery对象是一个数组，第一个索引是html对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 设置画布的宽高
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.$playground.append(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 游戏地图每帧都要渲染
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;rgba(0, 0, 0, 0.2)&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillRect(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现玩家显示功能&#34;&gt;实现玩家显示功能&lt;/h2&gt;
&lt;p&gt;毛坯版玩家显示，每个玩家定义成一个圆，然后渲染在前端&lt;/p&gt;
&lt;p&gt;需要对于玩家类定义多个参数，以方便日后拓展：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 当前位置的横坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; 当前位置的纵坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radius&lt;/code&gt; 当前的半径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speed&lt;/code&gt; 当前的速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_me&lt;/code&gt; 该对象是否是当前玩家操控的对象（一是区别于 bot，二是区别于 日后联机的其他玩家）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;static/js/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players = [];  &lt;span style=&#34;color:#007f7f&#34;&gt;// 存放当前游戏中的所有玩家
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 将玩家加入游戏中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;static/js/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, x, y, radius, color, speed, is_me) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 把信息都存下来
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me = is_me;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 用于浮点数运算
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 渲染一个圆
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_destroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现玩家移动功能&#34;&gt;实现玩家移动功能&lt;/h2&gt;
&lt;p&gt;移动的实现逻辑很简单，就是让每帧渲染的圆的位置发生移动即可&lt;/p&gt;
&lt;p&gt;上述简单逻辑的实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(....)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们来实现一个向鼠标点击位置移动的功能&lt;/p&gt;
&lt;p&gt;这就需要设置一个 &lt;code&gt;click&lt;/code&gt; 事件的监听函数，分别传递：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标点击事件&lt;/li&gt;
&lt;li&gt;鼠标点击位置的横坐标&lt;/li&gt;
&lt;li&gt;鼠标点击位置的纵坐标&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后开始让圆的位置逐步向鼠标点击位置进行移动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 对于用户玩家，加上监听函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 把鼠标右键调出菜单栏的功能关掉
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.on(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;contextmenu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 把右键控制移动功能加上
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 左键:1 中键:2 右键:3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.move_to(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，我们来实现移动功能的函数 &lt;code&gt;move_to(tx, ty)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(...){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// x方向上的移动速度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// y方向上的移动速度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;   &lt;span style=&#34;color:#007f7f&#34;&gt;// 剩余移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_dist (x1, y1, x2, y2) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 求两点的欧几里得距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dx = x2 - x1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dy = y2 - y1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sqrt(dx * dx + dy * dy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;move_to(tx, ty) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_dist(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算移动角度，api接口：atan2(dy, dx)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(ty - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 位移 1 个单位长度（向着矢量方向移动到单位圆上）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle);  &lt;span style=&#34;color:#007f7f&#34;&gt;// 极直互化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 浮点数精度运算
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算单位帧里的移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; moved = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.min(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 还要减掉移动的距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length -= moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就实现了玩家的移动功能了，可以登录 &lt;code&gt;id:socket&lt;/code&gt; 调试该功能&lt;/p&gt;
&lt;h2 id=&#34;实现火球技能的功能&#34;&gt;实现火球技能的功能&lt;/h2&gt;
&lt;p&gt;火球对象的建立与玩家基本一致，直接照搬，在从细节上改改即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/skill/fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; FireBall &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, player, x, y, radius, vx, vy, color, speed, move_length, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.player = player;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = vx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = vy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = move.length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage = damage;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; moved = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.min(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length -= moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt; * Pi, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在玩家身上实现发火球的功能&lt;/p&gt;
&lt;p&gt;基本实现逻辑：当前选中了火球技能，鼠标左键点击一处，向该处发射一个火球&lt;/p&gt;
&lt;p&gt;因此，为了知道用户是否选择了技能，需要加一个键盘触发事件监听函数，然后加一个鼠标左键触发事件监听函数&lt;/p&gt;
&lt;p&gt;然后发射一个火球即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.cur_skill = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;null&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 记录当前选择的技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 左键:1 中键:2 右键:3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.move_to(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {     &lt;span style=&#34;color:#007f7f&#34;&gt;// 鼠标左键事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (outer.cur_skill === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前已经选中火球技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                outer.shoot_fireball(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        outer.cur_skill = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;null&lt;/span&gt;; &lt;span style=&#34;color:#007f7f&#34;&gt;// 清空当前技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;window&lt;/span&gt;).keydown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;81&lt;/span&gt;) {       &lt;span style=&#34;color:#007f7f&#34;&gt;// 键盘按下事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            outer.cur_skill = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shoot_fireball(tx, ty) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 确定火球的参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; x = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, y = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y; &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球发射点就是当前玩家的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; radius = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.01&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(ty - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle), vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; color = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; speed = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; move_length = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1.0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; damage = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.01&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; FireBall(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, x, y, radius, vx, vy, color, speed, move_length, damage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就成功实现了玩家发射火球的功能了&lt;/p&gt;
&lt;h2 id=&#34;实现单人模式下的人机功能&#34;&gt;实现单人模式下的人机功能&lt;/h2&gt;
&lt;p&gt;先创建好 5 个人机
&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;//创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (len i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样创建出来的 5 个人机是不会行动的&lt;/p&gt;
&lt;p&gt;我们写一个简易的 AI 程序，让他们也会移动&lt;/p&gt;
&lt;p&gt;这里实现的逻辑是：每次随机一个目的地，向目的地移动，然后再随机一个目的地，循环下去&lt;/p&gt;
&lt;p&gt;根据该逻辑，修改两个函数即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 对于用户玩家，加上监听函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; tx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; ty = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_to(tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 如果是人机，停下来时再随机一个方向前进
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; tx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; ty = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_to(tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_destroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[i] === &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.splice(i, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现技能命中效果碰撞检测功能&#34;&gt;实现技能命中效果（碰撞检测功能）&lt;/h2&gt;
&lt;p&gt;实现逻辑：检测两个圆的中心距离是否小于两个圆的半径之和&lt;/p&gt;
&lt;p&gt;小于等于时，代表发生碰撞，开始执行命中效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被击中用户掉血&lt;/li&gt;
&lt;li&gt;被击中用户收到向后击退效果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;碰撞检测写在火球类里，击退效果写在玩家类里&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 碰撞检测
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; player = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.player !== player &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_collision(player)) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 碰撞发生一定是在非施法者身上
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.attack(player);    &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_dist(x1, y1, x2, y2) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 获得两点的欧几里得距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dx = x2 - x1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dy = y2 - y1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sqrt(dx * dx + dy * dy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_collision(player) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 检测两个圆的中心距离是否小于两个圆的半径之和
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; distance = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_dist(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, player.x, player.y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (distance &amp;lt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius + player.radius))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attack(player) {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(player.y - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, player.x - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);   &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算角度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    player.is_attacked(angle, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage); &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中后，自然消失
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;被击退的时候，原来的移动速度应该置为 0，当前的移动应该转为向被击中方向上的移动&lt;/strong&gt;
&lt;code&gt;player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_attacked(angle, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius -= damage;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 受伤，半径减少
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 当半径小于10像素时，代表死亡
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 开始执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed = damage * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed *= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 被击中以后移动速度减半
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed &amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前仍处于击退效果中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vx * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vy * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed *= &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction; &lt;span style=&#34;color:#007f7f&#34;&gt;// 击退速度乘以摩擦系数，已达到削减的目的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;被击中以后的粒子效果特效&#34;&gt;被击中以后的粒子效果特效&lt;/h2&gt;
&lt;p&gt;实现逻辑：被击中以后，在玩家附近随机生成一些粒子小球&lt;/p&gt;
&lt;p&gt;因此我们要先实现 粒子小球 对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static/js/src/playground/particle/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Particle &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, x, y, radius, vx, vy, color, speed) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = vx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = vy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.9&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed *= &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们在被击退功能模块，实现生成粒子小球的效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;粒子小球释放弧度为 $[0,2π)$ 的随机数
&lt;ul&gt;
&lt;li&gt;粒子小球的 x, y 分量比率根据弧度来设定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;粒子小球的起始坐标应与玩家的坐标相同&lt;/li&gt;
&lt;li&gt;粒子小球的颜色与玩家颜色相同&lt;/li&gt;
&lt;li&gt;粒子小球的速度为玩家移动速度的 $10$ 倍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_attacked(angle, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 粒子小球效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; + &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; x = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, y = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; radius = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle), vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; color = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; speed = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Particle(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground, x, y, radius, vx, vy, color, speed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;一些小优化&#34;&gt;一些小优化&lt;/h2&gt;
&lt;h3 id=&#34;人机随机颜色&#34;&gt;人机随机颜色&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_random_color(), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_random_color() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; colors = [&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;pink&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;grey&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; colors[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;人机ai随机攻击操作&#34;&gt;人机AI随机攻击操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor (...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 初始人机冷却攻击时间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;180&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; player = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length)];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.shoot_fireball(player.x, player.y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;部署nginx与对接acappஐ&#34;&gt;部署nginx与对接acappஐ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3257028/&#34;&gt;5. 部署nginx与对接acapp | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79244/&#34;&gt;5.1 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/78903/&#34;&gt;5.1. 上课笔记 | 菊花&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/364622127&#34;&gt;Ngnix 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/36187963b553&#34;&gt;nginx 和uwsgi的区别与作用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nginx是什么&#34;&gt;Nginx是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;uwsgi是什么&#34;&gt;uWSGI是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;uWSGI是一个全功能的HTTP服务器，实现了WSGI、uwsgi、http等协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它要做的就是把HTTP协议转化成语言支持的网络协议。比如把HTTP协议转化成WSGI协议，让Python可以直接使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WSGI协议是Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单来说uWSGI就是用来沟通nginx和django的一座桥梁&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;nginxuwsgidiango-工作流程&#34;&gt;Nginx+uWSGI+Diango 工作流程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nginx&lt;/code&gt; 是对外的服务接口，外部浏览器通过&lt;code&gt;url&lt;/code&gt;访问&lt;code&gt;nginx&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nginx&lt;/code&gt; 接收到浏览器发送过来的&lt;code&gt;http&lt;/code&gt;请求，将包进行解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;code&gt;url&lt;/code&gt;，如果是静态文件请求就直接访问用户给&lt;code&gt;nginx&lt;/code&gt;配置的静态文件目录，直接返回用户请求的静态文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不是静态文件，而是一个动态的请求，那么&lt;code&gt;nginx&lt;/code&gt;就将请求转发给&lt;code&gt;uwsgi&lt;/code&gt;，&lt;code&gt;uwsgi&lt;/code&gt; 接收到请求之后将包进行处理，处理成&lt;code&gt;wsgi&lt;/code&gt;可以接受的格式，并发给&lt;code&gt;wsgi&lt;/code&gt;，&lt;code&gt;wsgi&lt;/code&gt; 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给&lt;code&gt;wsgi&lt;/code&gt;，&lt;code&gt;wsgi&lt;/code&gt;将返回值进行打包，打包成&lt;code&gt;uwsgi&lt;/code&gt;能够接收的格式，&lt;code&gt;uwsgi&lt;/code&gt;接收&lt;code&gt;wsgi&lt;/code&gt; 发送的请求，并转发给&lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;nginx&lt;/code&gt;最终将返回值返回给浏览器&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;uwsgi服务的开启关闭&#34;&gt;uwsgi服务的开启&amp;amp;&amp;amp;关闭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;~/acapp&lt;/code&gt;启动uwsgi服务：&lt;strong&gt;&lt;code&gt;uwsgi --ini scripts/uwsgi.ini&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;关闭uwsgi服务：&lt;code&gt;sudo pkill -f uwsgi -9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;针对-acapp-的优化&#34;&gt;针对 acapp 的优化&lt;/h2&gt;
&lt;h3 id=&#34;打包脚本优化&#34;&gt;打包脚本优化&lt;/h3&gt;
&lt;p&gt;由于现在 &lt;strong&gt;发布版本的脚本文件&lt;/strong&gt; 用的是打包在根目录里的 &lt;strong&gt;static&lt;/strong&gt; 文件夹&lt;/p&gt;
&lt;p&gt;每次修改好 &lt;strong&gt;static&lt;/strong&gt; 文件夹后，不仅需要对 &lt;strong&gt;js&lt;/strong&gt; 文件打包，还需要对 &lt;strong&gt;static&lt;/strong&gt; 文件夹打包&lt;/p&gt;
&lt;p&gt;不放把 &amp;ldquo;将static文件夹打包&amp;rdquo; 的 &lt;strong&gt;shell&lt;/strong&gt; 代码一起加入 &lt;strong&gt;js&lt;/strong&gt; 打包脚本中，从而实现一键打包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scripts/compress_game_js.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &amp;#39;*.js&amp;#39; | sort | xargs cat &amp;gt; ${JS_PATH_DIST}game.js

echo &amp;#34;yes&amp;#34; | python3 manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;鼠标点击事件的相对偏移&#34;&gt;鼠标点击事件的相对偏移&lt;/h3&gt;
&lt;p&gt;由于写游戏界面的时候，玩家移动是按照鼠标相对于当前整个浏览器取的位置参数 &lt;code&gt;e.clientX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;acapp&lt;/code&gt; 里，每个应用是一个小窗口，鼠标点击位置的参数应当是 &lt;strong&gt;相对于整个游戏窗口的位置参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有会导致出现，点击的位置与移动的位置不同，这里需要做出小优化&lt;/p&gt;
&lt;p&gt;优化的逻辑 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$clientX−窗口左侧到浏览器左侧的距离=玩家的目标X$&lt;/li&gt;
&lt;li&gt;$clientY−窗口上侧到浏览器上侧的距离=玩家的目标Y$
这就要用到一个 &lt;code&gt;js&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt; 了 : &lt;code&gt;getBoundingClientRect()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject = object.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.top : 元素上边到视窗上边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.right : 元素右边到视窗左边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.bottom : 元素下边到视窗上边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.left : 元素左边到视窗左边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.width : 是元素自身的宽
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.height : 是元素自身的高
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建 rect 对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; rect = outer.ctx.canvas.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#007f7f&#34;&gt;// 调整偏移量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            outer.move_to(e.clientX - rect.left, e.clientY - rect.top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (outer.cur_skill === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#007f7f&#34;&gt;// 调整偏移量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                outer.shoot_fireball(e.clientX - rect.left, e.clientY - rect.top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将菜单界面重新设为主界面&#34;&gt;将菜单界面重新设为主界面&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/zbase.js&lt;/code&gt; 的注释取消，使之创建出 &lt;strong&gt;menu&lt;/strong&gt; 对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/playground/zbase.js&lt;/code&gt; 的注释取消，并设置逻辑，让 &lt;strong&gt;playground&lt;/strong&gt; 打开后，才进行游戏界面初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root = root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground = $(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`&amp;lt;div class=&amp;#34;ac-game-playground&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.hide();    &lt;span style=&#34;color:#007f7f&#34;&gt;// 初始时隐藏
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 游戏界面生成代码在下面展示 playground 时执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show() {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开 playground 界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 开始生成游戏界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root.$ac_game.append(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.width();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.height();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.game_map = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; GameMap(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players = [];  &lt;span style=&#34;color:#007f7f&#34;&gt;// 存放当前游戏中的所有玩家
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 将玩家加入游戏中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_random_color(), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;调整-css-文件适应窗口&#34;&gt;调整 css 文件，适应窗口&lt;/h3&gt;
&lt;p&gt;在设置 &lt;code&gt;web&lt;/code&gt; 网页的时候，有些设置了绝对值，可能对于窗口化的 &lt;code&gt;acapp&lt;/code&gt; 显示效果差&lt;/p&gt;
&lt;p&gt;将他们修改成相对数值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-menu-field {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;%;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    left: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;%;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-menu-field-item {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    height: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;vh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    font-size: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;vh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;创建账号系统&#34;&gt;创建账号系统&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3294700/&#34;&gt;6. 创建账号系统 | 讲义&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;用户名密码登录&#34;&gt;用户名密码登录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/blog/content/12373/&#34;&gt;6.1 用户名密码登录 | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79314/&#34;&gt;6.1 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/75831/&#34;&gt;6.1 上课笔记 | 吃饱喝足不学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;客户端请求与django响应流程&#34;&gt;客户端请求与Django响应流程&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;用户在客户端通过&lt;code&gt;$.ajax&lt;/code&gt;发送请求，根据&lt;code&gt;urls&lt;/code&gt;路由到对应的&lt;code&gt;views&lt;/code&gt;中的函数，处理&lt;code&gt;request&lt;/code&gt;后返回&lt;code&gt;JsonResponse&lt;/code&gt; 至客户端&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;前期准备工作&#34;&gt;前期准备工作&lt;/h3&gt;
&lt;p&gt;做开发，先开启调试模式，如果不开启，服务器一旦运行错误，就只返回 &lt;code&gt;Error&lt;/code&gt; 报错
&lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;DEBUG = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;True&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;不过 &lt;code&gt;django&lt;/code&gt; 自带的 &lt;code&gt;User&lt;/code&gt; 表并不能满足我们的需求，因此我们需要自己额外建表&lt;/p&gt;
&lt;h3 id=&#34;创建用户表&#34;&gt;创建用户表&lt;/h3&gt;
&lt;p&gt;所有的数据表都存在 &lt;code&gt;models&lt;/code&gt; 里&lt;/p&gt;
&lt;p&gt;我们在 &lt;code&gt;models&lt;/code&gt; 里创建一个 &lt;code&gt;player&lt;/code&gt; 文件夹，用于存储所有的 &lt;code&gt;player&lt;/code&gt; 相关的表&lt;/p&gt;
&lt;p&gt;然后对文件夹初始化 &lt;code&gt;__init__.py&lt;/code&gt;，接着扩充成一个我们需要的数据表&lt;/p&gt;
&lt;p&gt;&lt;code&gt;game/models/player/player.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.db &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; models
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; User
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player(models.Model): &lt;span style=&#34;color:#007f7f&#34;&gt;# Player 类继承自 Model 类&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user = models.OneToOneField(User, on_delete=models.CASCADE)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;# 说明Player是从User表扩充过来的，每一个player都与一个user是一一对应关联关系&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;# 后一个参数是指，当user被删除后，对应的player也要被删除&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;# （感觉就是外键的意思）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    photo = models.URLField(max_length=&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;256&lt;/span&gt;, blank=&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;True&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;# 用于存储用户的头像的url&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;# 指定每个player数据展示在前台的数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; __str__(self):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;str&lt;/span&gt;(self.user)    &lt;span style=&#34;color:#007f7f&#34;&gt;# 展示用户的用户名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;将定义的表，注册到后台 &lt;code&gt;admin&lt;/code&gt; 页面中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;game/admin.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.models.player.player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; Player
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;admin.site.register(Player)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后将创建的数据表更新到 &lt;code&gt;django&lt;/code&gt; 的数据库中去&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$&lt;/span&gt; python3 manage.py makemigrations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Migrations &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;game&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;   game/migrations/&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0001&lt;/span&gt;_initial.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;     - Create model Player
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$&lt;/span&gt; python3 manage.py migrate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Operations to perform:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;   Apply &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;all&lt;/span&gt; migrations: admin, auth, contenttypes, game, sessions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Running migrations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;   Applying game&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;.0001&lt;/span&gt;_initial... OK
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后重启一下服务，就可以在管理员页面看到新建的数据库了&lt;/p&gt;
&lt;h3 id=&#34;实现客户端的类型判别acapp-or-web&#34;&gt;实现客户端的类型判别（ACAPP or WEB）&lt;/h3&gt;
&lt;p&gt;由于我们实现的项目是前后端分离类型，因此对于不同的客户端，前端要控制生成不同的页面&lt;/p&gt;
&lt;p&gt;为了增强扩展性，故这里要实现客户端类型的判别&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;y总&lt;/strong&gt; 已经提前写好了 &lt;strong&gt;ACAPP&lt;/strong&gt; 的接口，如果用户用的是 &lt;strong&gt;ACAPP&lt;/strong&gt; 访问，则在新建对象 &lt;strong&gt;ac_game&lt;/strong&gt; 时，会额外传递一个参数&lt;/p&gt;
&lt;p&gt;我们只需按照这个接口去完成扩充即可&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;之后写小程序之类的同理，额外传一个接口&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;js/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGame {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(id, AcWingOS) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.id = id;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$ac_game = $(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;#&amp;#39;&lt;/span&gt; + id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.AcWingOS = AcWingOS;   &lt;span style=&#34;color:#007f7f&#34;&gt;//如果是acapp端，该变量就会带着一系列y总提供的接口
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.menu = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; AcGameMenu(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; AcGamePlayground(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;构建登录功能框架&#34;&gt;构建登录功能框架&lt;/h3&gt;
&lt;p&gt;基本逻辑 : 用户访问页面 -&amp;gt; 进入登录页面 -&amp;gt; 提交登录信息 -&amp;gt; 核对登录信息 -&amp;gt; 返回登陆结果和其他信息&lt;/p&gt;
&lt;p&gt;每实现一个函数，就需要实现三个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;views&lt;/code&gt; : 实现具体的调用数据库的逻辑&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urls&lt;/code&gt; : 实现一个路由&lt;/li&gt;
&lt;li&gt;&lt;code&gt;js&lt;/code&gt; : 前端实现GET上述接口的过程&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;欲实现流程 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户访问网站，通过先前完成的路由，访问到 &lt;code&gt;web.html &lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;web.html&lt;/code&gt; 中的 &lt;code&gt;js&lt;/code&gt; 部分创建了一个 &lt;code&gt;AcGame&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AcGame&lt;/code&gt; 对象创建的过程中，生成了 &lt;code&gt;Settings&lt;/code&gt; 对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Settings&lt;/code&gt; 对象创建完成后，调用 &lt;code&gt;Settings.start()&lt;/code&gt; 函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Settings.start()&lt;/code&gt; 函数调用了 &lt;code&gt;Settings.getinfo()&lt;/code&gt; 函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Settings.getinfo()&lt;/code&gt; 函数中执行了 &lt;code&gt;ajax&lt;/code&gt; 向 &lt;code&gt;getinfo&lt;/code&gt; 接口发起一个含参数 &lt;code&gt;platform&lt;/code&gt; 的 &lt;code&gt;GET&lt;/code&gt; 请求&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;urls&lt;/code&gt; 路由的实现，最终定位到 &lt;code&gt;views/settings/getinfo.py&lt;/code&gt; 文件的 &lt;code&gt;getinfo(request)&lt;/code&gt; 函数&lt;/li&gt;
&lt;li&gt;根据传递过来的 &lt;code&gt;platform&lt;/code&gt; 函数，实现不同的 &lt;code&gt;JsonResponse&lt;/code&gt; 返回&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Settings.getinfo()&lt;/code&gt; 接受到了 &lt;code&gt;response&lt;/code&gt; 完成上述基本逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;views&#34;&gt;views&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;views/settings/getinfo.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.http &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; JsonResponse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.models.player.player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; Player
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; getinfo_acapp(request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    player = Player.objects.all()[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;]    &lt;span style=&#34;color:#007f7f&#34;&gt;# 取出数据库中第一个用户(调试该功能)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;: player.user.username,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;: player.photo,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; getinfo_web(request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    player = Player.objects.all()[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;]    &lt;span style=&#34;color:#007f7f&#34;&gt;# 取出数据库中第一个用户(调试该功能)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;: player.user.username,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;: player.photo,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; getinfo(request):   &lt;span style=&#34;color:#007f7f&#34;&gt;# 处理请求&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    platform = request.GET.get(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;platform&amp;#39;&lt;/span&gt;)  &lt;span style=&#34;color:#007f7f&#34;&gt;# 根据请求的平台不同，进行不同返回处理&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; platform == &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;ACAPP&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; getinfo_acapp(request)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;elif&lt;/span&gt; platform == &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WEB&amp;#34;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; getinfo_web(request)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;urls&#34;&gt;urls&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;urls/settings/index.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; path
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.views.settings.getinfo &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; getinfo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;getinfo/&amp;#34;&lt;/span&gt;, getinfo, name=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;settings_getinfo&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;路由建立好以后，访问 &lt;code&gt;xxxx/settings/getinfo&lt;/code&gt;，可以看到 &lt;code&gt;getinfo.py&lt;/code&gt; 返回的 &lt;code&gt;JSON&lt;/code&gt; 类型的 &lt;code&gt;JSONResponse&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;js&#34;&gt;js&lt;/h4&gt;
&lt;p&gt;网页刚访问时，应先将 &lt;code&gt;menu&lt;/code&gt; 关闭，然后打开登录界面，随意先修改一个让 &lt;code&gt;menu&lt;/code&gt; 初始关闭&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static/js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGameMenu {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$menu.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;static/js/src/settings/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Settings {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root = root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.platform = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;WEB&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root.AcWingOS) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.platform = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;ACAPP&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.getinfo();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    register() {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开注册界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    login() {       &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开登录界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getinfo() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $.ajax({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            url: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://app1117.acapp.acwing.com.cn/settings/getinfo/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            type: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                platform: outer.platform,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            success: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(resp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                console.log(resp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (resp.result === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;) {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 登录成功，关闭登录界面，打开主菜单
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                    outer.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    outer.root.menu.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    outer.login();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    hide() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后不要忘记在 &lt;code&gt;根js&lt;/code&gt; 下创建对象&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGame {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(id, AcWingOS) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.settings = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Settings(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样基本框架就完成了&lt;/p&gt;
&lt;h4 id=&#34;完善-http-请求的函数&#34;&gt;完善 HTTP 请求的函数&lt;/h4&gt;
&lt;p&gt;如果用户未登录，返回信息 &amp;ldquo;not login&amp;rdquo;&lt;/p&gt;
&lt;p&gt;如果用户登录，返回信息 &amp;ldquo;success&amp;rdquo; 以及用户名和头像&lt;/p&gt;
&lt;p&gt;&lt;code&gt;views/setting/getinfo.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-py&#34; data-lang=&#34;py&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; getinfo_web(request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user = request.user
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; not user.is_authenticated:   &lt;span style=&#34;color:#007f7f&#34;&gt;# 未登录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;not login&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt;:                           &lt;span style=&#34;color:#007f7f&#34;&gt;# 已登录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        player = Player.objects.get(user=user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;: player.user.username,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;photo&amp;#39;&lt;/span&gt;: player.photo,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意前后台是一个登录系统，因此要先退掉后台，再测试&lt;/p&gt;
&lt;h3 id=&#34;将用户头像渲染到玩家上&#34;&gt;将用户头像渲染到玩家上&lt;/h3&gt;
&lt;p&gt;将返回的 &lt;code&gt;JsonResponse&lt;/code&gt; 存到 &lt;code&gt;Settings&lt;/code&gt; 类的变量中
&lt;code&gt;settings/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Settings {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.username = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.photo = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    getinfo() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $.ajax({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            success: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(resp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (resp.result === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    outer.username = resp.username;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    outer.photo = resp.photo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ..
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在 &lt;code&gt;Player&lt;/code&gt; 里把用户的头像渲染到对应的玩家上&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.img = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Image();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.img.src = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.root.settings.photo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.save();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.stroke();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.clip();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.drawImage(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.img, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                               &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.restore();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;实现登录界面的前端&#34;&gt;实现登录界面的前端&lt;/h3&gt;
&lt;p&gt;先完成登录界面显示的逻辑&lt;/p&gt;
&lt;p&gt;&lt;code&gt;settings/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Settings {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    register() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开注册界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    login() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开登录界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    hide() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$settings.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$settings.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;实现前端的基础框架&#34;&gt;实现前端的基础框架&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;settings/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Settings {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$settings = $(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;lt;div class=&amp;#34;ac-game-settings&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;    &amp;lt;div class=&amp;#34;ac-game-settings-login&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-title&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            登录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-username&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div class=&amp;#34;ac-game-settings-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;用户名&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-password&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div class=&amp;#34;ac-game-settings-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                &amp;lt;input type=&amp;#34;password&amp;#34; placeholder=&amp;#34;密码&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-submit&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div class=&amp;#34;ac-game-settings-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                &amp;lt;button&amp;gt;登录&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-error-message&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-option&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            注册
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-acwing&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;img width=&amp;#34;30&amp;#34; src=&amp;#34;https://app165.acapp.acwing.com.cn/static/image/settings/acwing_logo.png&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                AcWing一键登录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;    &amp;lt;div class=&amp;#34;ac-game-settings-register&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-title&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            注册
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-username&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div class=&amp;#34;ac-game-settings-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                &amp;lt;input type=&amp;#34;text&amp;#34; placeholder=&amp;#34;用户名&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-password ac-game-settings-password-first&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div class=&amp;#34;ac-game-settings-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                &amp;lt;input type=&amp;#34;password&amp;#34; placeholder=&amp;#34;密码&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-password ac-game-settings-password-second&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div class=&amp;#34;ac-game-settings-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                &amp;lt;input type=&amp;#34;password&amp;#34; placeholder=&amp;#34;确认密码&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-submit&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div class=&amp;#34;ac-game-settings-item&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                &amp;lt;button&amp;gt;注册&amp;lt;/button&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-error-message&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-option&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            登录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;div class=&amp;#34;ac-game-settings-acwing&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;img width=&amp;#34;30&amp;#34; src=&amp;#34;https://app165.acapp.acwing.com.cn/static/image/settings/acwing_logo.png&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;                AcWing一键登录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;        &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;    &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$settings.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-login&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_username = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-username input&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_password = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-password input&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_submit = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-submit button&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_error_message = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-error-message&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_register = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-option&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$settings.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-register&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_username = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-username input&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_password = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-password-first input&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_password_confirm = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-password-second input&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_submit = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-submit button&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_error_message = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-error-message&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_login = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.find(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;.ac-game-settings-option&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root.$ac_game.append(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$settings);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对应的 &lt;code&gt;css&lt;/code&gt; 文件部分：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;css/game.css&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;background-image&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;url&lt;/span&gt;(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;/static/image/menu/background.gif&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;background-size&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;user-select&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;none&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-login {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;41&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transform&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.7&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-title {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;white&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;text-align&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;padding-top&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;margin-bottom&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-username {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-password {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-submit {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-acwing {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-item {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-item &amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;input&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;line-height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transform&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-item &amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;button&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;white&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;line-height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transform&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;#4CAF50&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-error-message {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;red&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.8&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;inline&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;float&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;left&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;padding-left&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-option {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;white&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;inline&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;float&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;right&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;padding-right&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cursor&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pointer&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-acwing &amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;img&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transform&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;cursor&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pointer&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-acwing &amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;div&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;white&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1.5&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;text-align&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-settings-register {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;49&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transform&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.7&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;实现登录注册的相互切换&#34;&gt;实现登录/注册的相互切换&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Settings {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.getinfo();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events_login();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events_register();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_listening_events_login() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_register.click(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.register();   &lt;span style=&#34;color:#007f7f&#34;&gt;// 跳到注册界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_listening_events_register() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_login.click(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.login();      &lt;span style=&#34;color:#007f7f&#34;&gt;// 跳到登录界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;实现登录功能&#34;&gt;实现登录功能&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;views/settings/login.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.http &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; JsonResponse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.contrib.auth &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; authenticate, login
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; signin(request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data = request.GET
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    username = data.get(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;username&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    password = data.get(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user = authenticate(username=username, password=password)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; not user:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;用户名或密码不正确&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    login(request, user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;urls/settings/index.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.urls &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; path
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.views.settings.getinfo &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; getinfo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.views.settings.login &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; signin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;getinfo/&amp;#34;&lt;/span&gt;, getinfo, name=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;settings_getinfo&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;login/&amp;#34;&lt;/span&gt;, signin, name=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;settings_login&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;settings/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Settings{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_listening_events_login() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_submit.click(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.login_on_remote();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    login_on_remote() {     &lt;span style=&#34;color:#007f7f&#34;&gt;// 在远程服务器上登录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; username = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_username.val();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; password = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_password.val();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_error_message.empty();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $.ajax({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            url: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://app1117.acapp.acwing.com.cn/settings/login/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            type: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                username: username,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                password: password,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            success: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(resp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                console.log(resp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (resp.result === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    location.reload();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    outer.$login_error_message.html(resp.result);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;实现登出功能&#34;&gt;实现登出功能&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;views/settings/logout.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.http &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; JsonResponse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.contrib.auth &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; logout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; signout(request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user = request.user
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; not user.is_authenticated:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    logout(request)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;urls/settings/index.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.views.settings.logout &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; signout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;logout/&amp;#34;&lt;/span&gt;, signout, name=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;settings_logout&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;settings/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;login_on_remote() {     &lt;span style=&#34;color:#007f7f&#34;&gt;// 在远程服务器上登录
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; username = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_username.val();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; password = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_password.val();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$login_error_message.empty();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $.ajax({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        url: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://app1117.acapp.acwing.com.cn/settings/login/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        type: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            username: username,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            password: password,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        success: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(resp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            console.log(resp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (resp.result === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                location.reload();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                outer.$login_error_message.html(resp.result);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;再顺便将 &lt;code&gt;menu&lt;/code&gt; 菜单页面里的 &lt;code&gt;设置&lt;/code&gt; 按钮也绑定上登出功能&lt;/p&gt;
&lt;p&gt;&lt;code&gt;menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$settings_mode.click(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        outer.root.settings.logout_on_remote();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;实现注册功能&#34;&gt;实现注册功能&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;views/settings/register.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.http &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; JsonResponse
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.contrib.auth &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; login
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; User
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.models.player.player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; Player
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;def&lt;/span&gt; register(request):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data = request.GET
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    username = data.get(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;).strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    password = data.get(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;).strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    password_confirm = data.get(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;password_confirm&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;).strip()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; not username or not password:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;用户名或密码不能为空&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; password != password_confirm:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;两个密码不一致&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; User.objects.filter(username=username).exists():
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;用户名已存在&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user = User(username=username)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user.set_password(password)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    user.save()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Player.objects.create(user=user, photo=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://cdn.acwing.com/media/user/profile/photo/42832_lg_f999efc3c8.png&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    login(request, user)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; JsonResponse({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;result&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;urls/settings/index.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; game.views.settings.register &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; register
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;urlpatterns = [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    path(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;register/&amp;#34;&lt;/span&gt;, register, name=&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;settings_register&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;settings/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_listening_events_register() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_submit.click(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        outer.register_on_remote();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;register_on_remote() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 在远程服务器上注册
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; username = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_username.val();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; password = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_password.val();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; password_confirm = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_password_confirm.val();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$register_error_message.empty();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $.ajax({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        url: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;https://app1117.acapp.acwing.com.cn/settings/register/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        type: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        data: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            username: username,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            password: password,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            password_confirm: password_confirm,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        success: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(resp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            console.log(resp);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (resp.result === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                location.reload();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                outer.$register_error_message.html(resp.result);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;redisஐ&#34;&gt;Redisஐ&lt;/h2&gt;
&lt;h3 id=&#34;redis是什么&#34;&gt;Redis是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Redis&lt;/code&gt; 是一款内存高速缓存数据库&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;为什么要使用redis&#34;&gt;为什么要使用Redis?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我们目前用的是&lt;code&gt;Django&lt;/code&gt;自带的数据库&lt;code&gt;Sqlite&lt;/code&gt;。&lt;code&gt;Django&lt;/code&gt;是很容易将数据库迁移到&lt;code&gt;mySQL&lt;/code&gt;的。但是存储效率不如&lt;code&gt;redis&lt;/code&gt;，因为&lt;code&gt;redis&lt;/code&gt;是内存数据库，所以调用东西都非常快，存的是一个一个的&lt;code&gt;&amp;lt;key, value&amp;gt;&lt;/code&gt;，而且是单线程的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;在django中集成redis&#34;&gt;在Django中集成Redis&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装 &lt;code&gt;django_redis&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install django_redis
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置 &lt;code&gt;settings.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CACHES = { 
    &amp;#39;default&amp;#39;: {
        &amp;#39;BACKEND&amp;#39;: &amp;#39;django_redis.cache.RedisCache&amp;#39;,
        &amp;#39;LOCATION&amp;#39;: &amp;#39;redis://127.0.0.1:6379/1&amp;#39;,
        &amp;#34;OPTIONS&amp;#34;: {
            &amp;#34;CLIENT_CLASS&amp;#34;: &amp;#34;django_redis.client.DefaultClient&amp;#34;,
        },  
    },  
}
USER_AGENTS_CACHE = &amp;#39;default&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;启动 &lt;code&gt;redis-server&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo redis-server /etc/redis/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;在-django-后台里操纵-redis&#34;&gt;在 Django 后台里操纵 Redis&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python3 manage.py shell&amp;#39;

In [1]: from django.core.cache import cache # 引入redis

In [2]: cache.keys(&amp;#39;*&amp;#39;)                     # 查询redis里所有的关键字
Out[2]: []

In [3]: cache.set(&amp;#39;yxc&amp;#39;, 1, 5)              # 插入一个key-val，存在 5 s
Out[3]: True

In [4]: cache.keys(&amp;#39;*&amp;#39;)                     # 查询redis里所有的关键字
Out[4]: [&amp;#39;yxc&amp;#39;]

In [5]: cache.set(&amp;#39;yxc&amp;#39;, 2, None)           # 插入一个key-val，不会过期
Out[5]: True

In [6]: cache.set(&amp;#39;abc&amp;#39;, 3, None)
Out[6]: True

In [7]: cache.keys(&amp;#39;y*&amp;#39;)
Out[7]: [&amp;#39;yxc&amp;#39;]

In [8]: cache.has_key(&amp;#39;abc&amp;#39;)
Out[8]: True

In [9]: cache.has_key(&amp;#39;abcd&amp;#39;)
Out[9]: False

In [10]: cache.get(&amp;#39;yxc&amp;#39;)
Out[10]: 2

In [11]: cache.delete(&amp;#39;yxc&amp;#39;)
Out[11]: True

In [12]: cache.keys(&amp;#39;*&amp;#39;)
Out[12]: [&amp;#39;abc&amp;#39;]

In [13]:
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;web端acwing一键登录ஐ&#34;&gt;Web端AcWing一键登录ஐ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/blog/content/12466/&#34;&gt;6.2 Web端AcWing一键登录 | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79354/&#34;&gt;6.2 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/video/3565/&#34;&gt;6.2 Web端AcWing一键登录 | Vedio&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Oauth2一键授权登录的基本原理&lt;/strong&gt;：$17m30s——29m15s——32m51s$&lt;/li&gt;
&lt;li&gt;数据表添加&lt;code&gt;openid&lt;/code&gt;信息：$33m20s——34m47s$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Oauth2一键授权登录的代码实现&lt;/strong&gt;：$35m20s——1h25s——1h27m20s$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;用户点击&lt;code&gt;AcWing一键登录&lt;/code&gt;，通过&lt;code&gt;urls &amp;amp; views&lt;/code&gt;调用&lt;code&gt;apply_code&lt;/code&gt;函数，将&lt;code&gt;state&lt;/code&gt;放到&lt;code&gt;redis&lt;/code&gt;中，将&lt;code&gt;appid &amp;amp; redirect_uri &amp;amp; scope &amp;amp; state&lt;/code&gt; 传入&lt;code&gt;apply_code_url&lt;/code&gt;链接，返回并重定向至&lt;code&gt;apply_code_url&lt;/code&gt;向用户询问是否授权&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用户点击&lt;code&gt;同意&lt;/code&gt;后，重定向至&lt;code&gt;redirect_uri&lt;/code&gt;链接，返回参数为&lt;code&gt;code&lt;/code&gt;和&lt;code&gt;state&lt;/code&gt;，通过&lt;code&gt;urls &amp;amp; views&lt;/code&gt;调用&lt;code&gt;receive_code&lt;/code&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若验证&lt;code&gt;state&lt;/code&gt;失败，直接重定向至初始界面&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若验证&lt;code&gt;state&lt;/code&gt;成功，将&lt;code&gt;appid &amp;amp; code &amp;amp; secret&lt;/code&gt;发送至&lt;code&gt;AcWing服务器&lt;/code&gt;，申请授权令牌&lt;code&gt;access_token&lt;/code&gt;和用户的&lt;code&gt;openid&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若申请令牌成功，将&lt;code&gt;access_token &amp;amp; openid&lt;/code&gt;发送至&lt;code&gt;AcWing服务器&lt;/code&gt;，得到用户信息，创建并登录用户，最后重定向至初始界面&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;acapp端acwing一键登录ஐ&#34;&gt;AcApp端AcWing一键登录ஐ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/blog/content/12467/&#34;&gt;6.3 AcApp端AcWing一键登录 | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79365/&#34;&gt;6.3 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/video/3566/&#34;&gt;6.3 Acapp端AcWing一键登录 | Vedio&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Oauth2一键授权登录的基本原理&lt;/strong&gt;：$10m——12m20s——16m35s——18m$&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Oauth2一键授权登录的代码实现&lt;/strong&gt;：$19m25s——21m——23m25s——34m29s——42m10s$&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;实现联机对战ஐ&#34;&gt;实现联机对战ஐ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3357332/&#34;&gt;7. 实现联机对战 | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/89506/&#34;&gt;7.1 上课笔记 | 大菜狗&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/88801/&#34;&gt;7.2 上课笔记 | 菊花&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;统一长度单位&#34;&gt;统一长度单位&lt;/h2&gt;
&lt;p&gt;由于联机对战的时候，每个用户的客户端长宽不一样&lt;/p&gt;
&lt;p&gt;在之前完成的游戏界面里，我们会根据当前客户端的大小，进行渲染&lt;/p&gt;
&lt;p&gt;但是在联机对战的时候，应当让所有玩家的游戏界面保持同步才可以&lt;/p&gt;
&lt;p&gt;所有，就引入了 &lt;strong&gt;统一长度单位&lt;/strong&gt; 的目标&lt;/p&gt;
&lt;h3 id=&#34;地图渲染&#34;&gt;地图渲染&lt;/h3&gt;
&lt;h4 id=&#34;地图-169-等比例缩放&#34;&gt;地图 16:9 等比例缩放&lt;/h4&gt;
&lt;p&gt;实现逻辑：根据当前用户的客户端大小，统一渲染成 &lt;strong&gt;16:9&lt;/strong&gt; 的游戏界面，且随着用户调整窗口大小，也动态调整&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root.$ac_game.append(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground);&lt;span style=&#34;color:#007f7f&#34;&gt;// 未来可能会多次 show 因此把创建场景挪到这里
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;window&lt;/span&gt;).resize(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.resize();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resize() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.width();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.height();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; unit = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.min(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;);  &lt;span style=&#34;color:#007f7f&#34;&gt;// 以最小的作为基准，渲染
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width = unit * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;16&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height = unit * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;9&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.resize();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.scale = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height;   &lt;span style=&#34;color:#007f7f&#34;&gt;// resize时，其他元素的渲染大小都以当前渲染的高度为基准，存为 scale 变量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.game_map) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.game_map.resize();  &lt;span style=&#34;color:#007f7f&#34;&gt;//如果此时地图已创建，则resize一下
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show() {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开 playground 界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.resize();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;js/src/playground/game_map/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; GameMap &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resize() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;地图居中&#34;&gt;地图居中&lt;/h4&gt;
&lt;p&gt;直接把 &lt;code&gt;canvas&lt;/code&gt; 元素，用相对位置居中即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;css/game.css&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-playground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f00&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;grey&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-playground &amp;gt; &lt;span style=&#34;font-weight:bold&#34;&gt;canvas&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transform&lt;/span&gt;: &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;-50&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;解决地图-resize-时会出现渐变成黑色的情况&#34;&gt;解决地图 resize 时，会出现渐变成黑色的情况&lt;/h4&gt;
&lt;p&gt;原由是因为我们的实现逻辑是：每帧会渲染一层半透明的黑色背景&lt;/p&gt;
&lt;p&gt;也就造就了一开始会出现灰屏的情况，解决方法很简单，直接 resize 完，强制涂一层不透明的黑色即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/game_map/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; GameMap &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resize() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;rgba(0, 0, 0, 1)&amp;#34;&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// resize 完，涂一层不透明的即可
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillRect(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;元素渲染&#34;&gt;元素渲染&lt;/h3&gt;
&lt;p&gt;地图随着尺寸等比例放大缩小的同时，地图内的其他元素也应与背景一同等比例放大缩小&lt;/p&gt;
&lt;p&gt;因此，我们只需把元素全部设为相对大小即可，用我们先前设置的 playground.scale 值即可&lt;/p&gt;
&lt;h4 id=&#34;玩家-player&#34;&gt;玩家 Player&lt;/h4&gt;
&lt;p&gt;初始化的时候，转为传递 &lt;strong&gt;scale&lt;/strong&gt; 的比例值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show() {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开 playground 界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; / &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.scale, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; / &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.scale, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_random_color(), &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; tx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width / &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; ty = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height / &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                outer.move_to((e.clientX - rect.left) / outer.playground.scale, (e.clientY - rect.top) / outer.playground.scale);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (outer.cur_skill === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    outer.shoot_fireball((e.clientX - rect.left) / outer.playground.scale, (e.clientY - rect.top) / outer.playground.scale);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    shoot_fireball(tx, ty) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; x = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, y = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; radius = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.01&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(ty - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle), vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; color = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; speed = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1.0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; damage = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.01&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; FireBall(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, x, y, radius, vx, vy, color, speed, move_length, damage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.update_move();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update_move() { &lt;span style=&#34;color:#007f7f&#34;&gt;// 更新玩家移动
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;180&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed &amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; tx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width / &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; ty = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height / &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; scale = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * scale, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.drawImage(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.img, (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius) * scale, (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius) * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * scale);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * scale, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;火球-fireball&#34;&gt;火球 Fireball&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/skill/fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Fireball {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; scale = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * scale, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;粒子-particle&#34;&gt;粒子 Particle&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/particle/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Particle {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; scale = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.scale;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y * scale, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * scale, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;增加联机对战模式&#34;&gt;增加“联机对战”模式&lt;/h2&gt;
&lt;p&gt;为了区分：用户自己，机器人，联机玩家&lt;/p&gt;
&lt;p&gt;需要把 &lt;code&gt;is_me&lt;/code&gt; 改成字符串，用以表示不同 &lt;strong&gt;Player&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGameMenu{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$single_mode.click(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.root.playground.show(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;single mode&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$multi_mode.click(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.hide();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.root.playground.show(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;multi mode&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Playground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show(mode) {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开 playground 界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; / &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.scale, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;me&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root.settings.username, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root.settings.photo)));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (mode === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;single mode&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; / &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.scale, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_random_color(), &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;robot&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (mode === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;multi mode&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, x, y, radius, color, speed, character, username, photo) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.character = character;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.username = username;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.photo = photo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.character !== &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;robot&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.img = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Image();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.img.src = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.photo;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 同理，根据对应的逻辑，修改后面所有的 is_me 为 character
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;django_channels&#34;&gt;Django_channels&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/bcefda55bce4&#34;&gt;谈谈Websocket &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/dreamroute/p/6247726.html&#34;&gt;HTTP/TCP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;django_channels是什么&#34;&gt;Django_channels是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Django_Channels 是一个为Django 提供异步扩展的库，通常主要用来提供WebSocket 支持和后台任务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;WSS&lt;/code&gt; 是 &lt;code&gt;Web Socket&lt;/code&gt; 协议的安全模式，支持 &lt;code&gt;C/S&lt;/code&gt; 下的双向通信（HTTP协议只支持单向通信）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;配置django_channels&#34;&gt;配置Django_channels&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;安装 &lt;code&gt;channels_redis&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;pip install channels_redis
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置 &lt;code&gt;acapp/asgi.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import os

from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
from django.core.asgi import get_asgi_application
from game.routing import websocket_urlpatterns

os.environ.setdefault(&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;, &amp;#39;acapp.settings&amp;#39;)

application = ProtocolTypeRouter({
    &amp;#34;http&amp;#34;: get_asgi_application(),
    &amp;#34;websocket&amp;#34;: AuthMiddlewareStack(URLRouter(websocket_urlpatterns))
})
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;配置 &lt;code&gt;acapp/settings.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 中添加 &lt;code&gt;channels&lt;/code&gt; ，添加后如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;INSTALLED_APPS = [ 
    &amp;#39;channels&amp;#39;,
    &amp;#39;game.apps.GameConfig&amp;#39;,
    &amp;#39;django.contrib.admin&amp;#39;,
    &amp;#39;django.contrib.auth&amp;#39;,
    &amp;#39;django.contrib.contenttypes&amp;#39;,
    &amp;#39;django.contrib.sessions&amp;#39;,
    &amp;#39;django.contrib.messages&amp;#39;,
    &amp;#39;django.contrib.staticfiles&amp;#39;,
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在文件末尾添加：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ASGI_APPLICATION = &amp;#39;acapp.asgi.application&amp;#39;
CHANNEL_LAYERS = {
    &amp;#34;default&amp;#34;: {
        &amp;#34;BACKEND&amp;#34;: &amp;#34;channels_redis.core.RedisChannelLayer&amp;#34;,
        &amp;#34;CONFIG&amp;#34;: {
            &amp;#34;hosts&amp;#34;: [(&amp;#34;127.0.0.1&amp;#34;, 6379)],
        },
    },
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;配置 &lt;code&gt;game/routing.py&lt;/code&gt;
这一部分的作用相当于 &lt;code&gt;http&lt;/code&gt; 的 &lt;code&gt;urls&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;内容如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.urls import path

websocket_urlpatterns = [
]
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;编写 &lt;code&gt;game/consumers&lt;/code&gt;
这一部分的作用相当于 &lt;code&gt;http&lt;/code&gt; 的 &lt;code&gt;views&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考示例：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from channels.generic.websocket import AsyncWebsocketConsumer
import json

class MultiPlayer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.accept()
        print(&amp;#39;accept&amp;#39;)

        self.room_name = &amp;#34;room&amp;#34;
        await self.channel_layer.group_add(self.room_name, self.channel_name)

    async def disconnect(self, close_code):
        print(&amp;#39;disconnect&amp;#39;)
        await self.channel_layer.group_discard(self.room_name, self.channel_name);


    async def receive(self, text_data):
        data = json.loads(text_data)
        print(data)
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;启动 &lt;code&gt;django_channels&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;~/acapp&lt;/code&gt; 目录下执行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;daphne -b 0.0.0.0 -p 5015 acapp.asgi:application
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;建立 &lt;strong&gt;WSS&lt;/strong&gt; 连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;game/routing.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.urls import path
from game.consumers.multiplayer.index import MultiPlayer

websocket_urlpatterns = [
    path(&amp;#34;wss/multiplayer/&amp;#34;, MultiPlayer.as_asgi(), name=&amp;#34;wss_multiplayer&amp;#34;),
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    ...
    show(mode) {    // 打开 playground 界面
        ...
        if (mode === &amp;#34;single mode&amp;#34;) {
            ...
        } else if (mode === &amp;#34;multi mode&amp;#34;) {
            this.mps = new MultiPlayerSocket(this);
            this.mps.ws.onopen = function() {
                outer.mps.send_create_player();
            };
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;playground/socket/multiplayer/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MultiPlayerSocket {
    constructor(playground) {
        this.playground = playground;
        this.ws = new WebSocket(&amp;#34;wss://app1117.acapp.acwing.com.cn/wss/multiplayer/&amp;#34;);
        this.start();
    }
    start() {
    }
    send_create_player() {
        this.ws.send(JSON.stringify({
            &amp;#39;message&amp;#39;: &amp;#39;hello acapp server&amp;#39;,
        }));
    }
    receive_create_player() {
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编写同步函数&#34;&gt;编写同步函数&lt;/h2&gt;
&lt;p&gt;一共需要完成四个通信：&lt;/p&gt;
&lt;p&gt;（通信的逻辑基本都是先在本地完成，然后将结果返回给服务器，服务器再分发给其他客户端，达成同步）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;create-player&lt;/strong&gt; : 在所有玩家的游戏界面，创建一个新加入的玩家&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;move-to&lt;/strong&gt; : 在所有玩家的游戏界面，将一个角色移动到一个位置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;shoot-fireball&lt;/strong&gt; : 在所有玩家的游戏界面，让一个角色发射一个火球&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;attack&lt;/strong&gt; : 在所有玩家的游戏界面，让一个角色被攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一场游戏里，所有的元素（玩家，火球等）都需要唯一的标识，来方便同步&lt;/p&gt;
&lt;p&gt;为此，我们可以直接修改一下游戏引擎，对于每个元素都创建我们需要的唯一标识&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/ac-game-object/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.uuid = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.create_uuid();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    create_uuid() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; res = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; x = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;parseInt&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;));   &lt;span style=&#34;color:#007f7f&#34;&gt;// [0, 10)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            res += x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; res;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show(mode) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (mode === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;single mode&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (mode === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;multi mode&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.mps = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; MultiPlayerSocket(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.mps.uuid = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;].uuid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.mps.ws.onopen = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                outer.mps.send_create_player();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;playground/socket/multiplayer/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; MultiPlayerSocket {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    send_create_player() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ws.send(JSON.stringify({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;event&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;create_player&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;uuid&amp;#39;&lt;/span&gt;: outer.uuid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;接着，利用通信的方式，使得每个窗口内，逻辑上相同的元素，其 &lt;code&gt;uid&lt;/code&gt; 也相同即可&lt;/p&gt;
&lt;p&gt;原则是：哪个窗口创建的元素，就用他创建时的 &lt;code&gt;uid&lt;/code&gt; 作为整个项目运行时的 &lt;code&gt;uid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后，我们打算用 &lt;strong&gt;redis&lt;/strong&gt; 来实现存储每个游戏房间，以及元素，并初始默认设定每个房间上限 3 人&lt;/p&gt;
&lt;h3 id=&#34;create-player&#34;&gt;create-player&lt;/h3&gt;
&lt;h4 id=&#34;前端&#34;&gt;前端&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;game/static/js/src/playground/socket/multiplayer/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MultiPlayerSocket {
    constructor(playground) {
        this.playground = playground;

        this.ws = new WebSocket(&amp;#34;wss://app1117.acapp.acwing.com.cn/wss/multiplayer/&amp;#34;);

        this.start();
    }
    start() {
        this.receive();
    }
    receive() {
        let outer = this;
        this.ws.onmessage = function(e) {
            let data = JSON.parse(e.data);
            let uuid = data.uuid;
            if (uuid === outer.uuid) return false;

            let event = data.event;
            if (event === &amp;#34;create_player&amp;#34;) {
                outer.receive_create_player(uuid, data.username, data.photo);
            }
        };
    }
    send_create_player(username, photo) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &amp;#39;event&amp;#39;: &amp;#39;create_player&amp;#39;,
            &amp;#39;uuid&amp;#39;: outer.uuid,
            &amp;#39;username&amp;#39;: username,
            &amp;#39;photo&amp;#39;: photo,
        }));
    }
    receive_create_player(uuid, username, photo) {
        let player = new Player(
            this.playground,
            this.playground.width / 2 / this.playground.scale,
            0.5,
            0.05,
            &amp;#34;white&amp;#34;,
            0.15,
            &amp;#34;enemy&amp;#34;,
            username,
            photo,
        );
        player.uuid = uuid;
        this.playground.players.push(player);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;后端&#34;&gt;后端&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;settings.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
ROOM_CAPACITY = 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from channels.generic.websocket import AsyncWebsocketConsumer
import json
from django.conf import settings
from django.core.cache import cache

class MultiPlayer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = None
        for i in range(1000):   # 上限 1k 个房间
            name = &amp;#34;room-%d&amp;#34; % (i)
            # 当前房间为空，或房间内玩家人数不到 ROOM_CAPACITY
            if not cache.has_key(name) or len(cache.get(name)) &amp;lt; settings.ROOM_CAPACITY:
                self.room_name = name
                break
        if not self.room_name:
            return

        await self.accept()

        if not cache.has_key(self.room_name):   # 如果房间不存在，则新建房间
            cache.set(self.room_name, [], 3600) # 有效期 1 小时

        for player in cache.get(self.room_name):    # 对该房间已存在的用户，创建到新加入的用户的游戏界面中
            await self.send(text_data=json.dumps({
                &amp;#39;event&amp;#39;: &amp;#34;create_player&amp;#34;,
                &amp;#39;uuid&amp;#39;: player[&amp;#39;uuid&amp;#39;],
                &amp;#39;username&amp;#39;: player[&amp;#39;username&amp;#39;],
                &amp;#39;photo&amp;#39;: player[&amp;#39;photo&amp;#39;],
            }))
        await self.channel_layer.group_add(self.room_name, self.channel_name)

    async def disconnect(self, close_code):
        print(&amp;#39;disconnect&amp;#39;)
        await self.channel_layer.group_discard(self.room_name, self.channel_name);

    async def create_player(self, data):
        players = cache.get(self.room_name)
        players.append({
            &amp;#39;uuid&amp;#39;: data[&amp;#39;uuid&amp;#39;],
            &amp;#39;username&amp;#39;: data[&amp;#39;username&amp;#39;],
            &amp;#39;photo&amp;#39;: data[&amp;#39;photo&amp;#39;],
        })
        cache.set(self.room_name, players, 3600) # 更新房间存在时间为 1 小时（最后一次加入一名玩家时）
        # 群发消息更新
        await self.channel_layer.group_send(
            self.room_name,
            {
                &amp;#39;type&amp;#39;: &amp;#34;group_create_player&amp;#34;,  # 群发该消息后，作为客户端接受者，所接受用的函数名
                &amp;#39;event&amp;#39;: &amp;#34;create_player&amp;#34;,
                &amp;#39;uuid&amp;#39;: data[&amp;#39;uuid&amp;#39;],
                &amp;#39;username&amp;#39;: data[&amp;#39;username&amp;#39;],
                &amp;#39;photo&amp;#39;: data[&amp;#39;photo&amp;#39;],
            }
        )
    async def group_create_player(self, data):
        await self.send(text_data=json.dumps(data))

    async def receive(self, text_data):
        data = json.loads(text_data)
        event = data[&amp;#39;event&amp;#39;]
        if event == &amp;#34;create_player&amp;#34;:
            await self.create_player(data)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;redis-调试语句&#34;&gt;redis 调试语句&lt;/h4&gt;
&lt;p&gt;打开 shell 交互&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 manage.py shell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后用 py3 交互进行 cache 调试&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.core.cache import cache

def clear():
    for key in cache.keys(&amp;#39;*&amp;#39;):
        cache.delete(key)

cache.keys(&amp;#39;*&amp;#39;) # 查询当前 redis 中所有 key

cache.get(&amp;#39;room-1&amp;#39;) # 查询当前 redis 中 key 为 room-1 的值
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;到目前为止，便可以在不同的窗口渲染同一批玩家了&lt;/p&gt;
&lt;h3 id=&#34;move-to&#34;&gt;move-to&lt;/h3&gt;
&lt;h4 id=&#34;前端-1&#34;&gt;前端&lt;/h4&gt;
&lt;p&gt;客户端的通信的发出和接受函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;game/static/js/src/playground/socket/multiplayer/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MultiPlayerSocket {
    ...
    receive() {
        let outer = this;
        this.ws.onmessage = function(e) {
            ...
            else if (event === &amp;#34;move_to&amp;#34;) {
                outer.receive_move_to(uuid, data.tx, data.ty);
            }
        };
    }
    send_move_to(tx, ty) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &amp;#39;event&amp;#39;: &amp;#39;move_to&amp;#39;,
            &amp;#39;uuid&amp;#39;: outer.uuid,
            &amp;#39;tx&amp;#39;: tx,
            &amp;#39;ty&amp;#39;: ty,
        }));
    }
    get_player(uuid) {
        let players = this.playground.players;
        for (let i = 0; i &amp;lt; players.length; i ++ ) {
            let player = players[i];
            if (player.uuid === uuid) {
                return player;
            }
        }
        return null;
    }
    receive_move_to(uuid, tx, ty) {
        let player = this.get_player(uuid);
        if (player) {
            player.move_to(tx, ty);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了让游戏界面中对于要移动的元素做出移动动作，需要对 &lt;code&gt;move_to&lt;/code&gt; 函数做出一些修改&lt;/p&gt;
&lt;p&gt;首先要标识出当前为多人模式，然后模式为多人模式时，每次移动都会触发一次通信&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    ...
    show(mode) {
        ...
        this.mode = mode;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    ...
    add_listening_events() {
      ...
       this.playground.game_map.$canvas.mousedown(function(e) {
           ...
           if (e.which === 3) {
               let tx = (e.clientX - rect.left) / outer.playground.scale;
               let ty = (e.clientY - rect.top) / outer.playground.scale;
               outer.move_to(tx, ty);
               if (outer.playground.mode === &amp;#34;multi mode&amp;#34;) {
                   outer.playground.mps.send_move_to(tx, ty);
               }
           }
           ...
   }
   ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;后端-1&#34;&gt;后端&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;async def move_to(self, data):
    await self.channel_layer.group_send(
        self.room_name,
        {
            &amp;#39;type&amp;#39;: &amp;#34;group_send_event&amp;#34;,
            &amp;#39;event&amp;#39;: &amp;#34;move_to&amp;#34;,
            &amp;#39;uuid&amp;#39;: data[&amp;#39;uuid&amp;#39;],
            &amp;#39;tx&amp;#39;: data[&amp;#39;tx&amp;#39;],
            &amp;#39;ty&amp;#39;: data[&amp;#39;ty&amp;#39;],
        }
    )

async def group_send_event(self, data):
    await self.send(text_data=json.dumps(data))

async def receive(self, text_data):
    data = json.loads(text_data)
    event = data[&amp;#39;event&amp;#39;]
    if event == &amp;#34;create_player&amp;#34;:
        await self.create_player(data)
    elif event == &amp;#34;move_to&amp;#34;:
        await self.move_to(data)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;shoot-fireball&#34;&gt;shoot-fireball&lt;/h3&gt;
&lt;h4 id=&#34;前端-2&#34;&gt;前端&lt;/h4&gt;
&lt;p&gt;用一个数组来存一个玩家发射的所有火球，以便于子弹消失时，将他们找出并对应删掉&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    constructor(playground, x, y, radius, color, speed, character, username, photo) {
        ...
        this.fireballs = [];    // 存该用户发射的所有火球
    }
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.mousedown(function(e) {
            ...
            else if (e.which === 1) {
                let tx = (e.clientX - rect.left) / outer.playground.scale;
                let ty = (e.clientY - rect.top) / outer.playground.scale;
                if (outer.cur_skill === &amp;#34;fireball&amp;#34;) {
                    let fireball = outer.shoot_fireball(tx, ty);
                    if (outer.playground.mode === &amp;#34;multi mode&amp;#34;) {
                        outer.playground.mps.send_shoot_fireball(tx, ty, fireball.uuid);
                    }
                }
            }
            ...
        });
        $(window).keydown(function(e) {
            if (e.which === 81) {           // 键盘按下q事件
                outer.cur_skill = &amp;#34;fireball&amp;#34;;
                return false;
            }
        });
    }
    ...
    shoot_fireball(tx, ty) {
        ...

        let fireball = new FireBall(this.playground, this, x, y, radius, vx, vy, color, speed, move_length, damage);
        this.fireballs.push(fireball);
        return fireball;
    }
    destroy_fireball(uuid) {
        for (let i = 0; i &amp;lt; this.fireballs.length; i ++ ) {
            let fireball = this.fireballs[i];
            if (fireball.uuid == uuid) {
                fireball.destroy();
                break;
            }
        }
    }
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;playground/skill/fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class FireBall extends AcGameObject {
    ...
    on_destory() {
        let fireballs = this.player.fireballs;
        for (let i = 0; i &amp;lt; fireballs.length; i ++ ) {
            if (fireballs[i] === this) {
                fireballs.splice(i, 1);
                break;
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;game/static/js/src/playground/socket/multiplayer/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MultiPlayerSocket {
    ...
    send_shoot_fireball(tx, ty, ball_uuid) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &amp;#39;event&amp;#39;: &amp;#39;move_to&amp;#39;,
            &amp;#39;uuid&amp;#39;: outer.uuid,
            &amp;#39;tx&amp;#39;: tx,
            &amp;#39;ty&amp;#39;: ty,
            &amp;#39;ball_uuid&amp;#39;: ball_uuid;
        }));
    }
    receive_shoot_fireball(uuid, tx, ty, ball_uuid) {
        let player = this.get_player(uuid);
        if (player) {
            let fireball = player.shoot_fireball(tx, ty);
            fireball.uuid = ball_uuid;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;后端-2&#34;&gt;后端&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def shoot_fireball(self, data):
        await self.channel_layer.group_send(
            self.room_name,
            {
                &amp;#39;type&amp;#39;: &amp;#34;group_send_event&amp;#34;,
                &amp;#39;event&amp;#39;: &amp;#34;shoot_fireball&amp;#34;,
                &amp;#39;uuid&amp;#39;: data[&amp;#39;uuid&amp;#39;],
                &amp;#39;tx&amp;#39;: data[&amp;#39;tx&amp;#39;],
                &amp;#39;ty&amp;#39;: data[&amp;#39;ty&amp;#39;],
                &amp;#39;ball_uuid&amp;#39;: data[&amp;#39;ball_uuid&amp;#39;],
            }
        )
    async def receive(self, text_data):
        ...
        elif event == &amp;#34;shoot_fireball&amp;#34;:
            await self.shoot_fireball(data)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;attack&#34;&gt;attack&lt;/h3&gt;
&lt;p&gt;为了只让一个客户端进行攻击命中的判断，因此只有发出方的火球才做碰撞检测&lt;/p&gt;
&lt;p&gt;其他客户端对于该火球只有动画效果&lt;/p&gt;
&lt;p&gt;又由于碰撞检测是在一台客户端上进行的，因此多端之间可能会存在同步上的延迟&lt;/p&gt;
&lt;p&gt;为此的解决方法是：碰撞检测成功时，强制把被击中玩家移动到发起方客户端中的位置，以避免击中延迟上发生的事情&lt;/p&gt;
&lt;h4 id=&#34;前端-3&#34;&gt;前端&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;playground/skill/fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class FireBall extends AcGameObject {
    update() {
        if (this.move_length &amp;lt; this.eps) {
            this.destroy();
            return false;
        }
        this.update_move();

        if (this.player.character !== &amp;#34;enemy&amp;#34;) {
            this.update_attack();
        }
        this.render();
    }
    attack(player) {
        ...
        if (this.playground.mode === &amp;#34;multi mode&amp;#34;) {
            this.playground.mps.send_attack(player.uuid, player.x, player.y, angle, this.damage, this.uuid);
        }
        ...
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    ...
    receive_attack(x, y, angle, damage, ball_uuid, attacker) {
        attacker.destroy_fireball(ball_uuid);
        this.x = x;
        this.y = y;
        this.is_attacked(angle, damage);
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;game/static/js/src/playground/socket/multiplayer/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MultiPlayerSocket {
    ...
    send_attack(attackee_uuid, x, y, angle, damage, ball_uuid) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &amp;#39;event&amp;#39;: &amp;#34;attack&amp;#34;,
            &amp;#39;uuid&amp;#39;: outer.uuid,
            &amp;#39;attackee_uuid&amp;#39;: attackee_uuid,
            &amp;#39;x&amp;#39;: x,
            &amp;#39;y&amp;#39;: y,
            &amp;#39;angle&amp;#39;: angle,
            &amp;#39;damage&amp;#39;: damage,
            &amp;#39;ball_uuid&amp;#39;: ball_uuid,
        }));
    }
    receive_attack(uuid, attackee_uuid, x, y, angle, damage, ball_uuid) {
        let attacker = this.get_player(uuid);
        let attackee = this.get_player(attackee_uuid);
        if (attacker &amp;amp;&amp;amp; attackee) {
            attackee.receive_attack(x, y, angle, damage, ball_uuid, attacker);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;后端-3&#34;&gt;后端&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def attack(self, data):
        await self.channel_layer.group_send(
            self.room_name,
            {
                &amp;#39;type&amp;#39;: &amp;#34;group_send_event&amp;#34;,
                &amp;#39;event&amp;#39;: &amp;#34;attack&amp;#34;,
                &amp;#39;uuid&amp;#39;: data[&amp;#39;uuid&amp;#39;],
                &amp;#39;x&amp;#39;: data[&amp;#39;x&amp;#39;],
                &amp;#39;y&amp;#39;: data[&amp;#39;y&amp;#39;],
                &amp;#39;angle&amp;#39;: data[&amp;#39;angle&amp;#39;],
                &amp;#39;damage&amp;#39;: data[&amp;#39;damage&amp;#39;],
                &amp;#39;ball_uuid&amp;#39;: data[&amp;#39;ball_uuid&amp;#39;],
            }
        )
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;游戏的小优化&#34;&gt;游戏的小优化&lt;/h2&gt;
&lt;h3 id=&#34;多人模式下游戏没有开始前玩家不可以移动&#34;&gt;多人模式下游戏没有开始前，玩家不可以移动&lt;/h3&gt;
&lt;p&gt;为此我们先引入一个状态机：&lt;code&gt;&#39;waiting&#39; -&amp;gt; &#39;fighting&#39; -&amp;gt; &#39;over&#39;&lt;/code&gt; 来标识当前游戏进行的状态&lt;/p&gt;
&lt;p&gt;然后用一个 &lt;code&gt;notice_board&lt;/code&gt; 计分板在前端显示出来&lt;/p&gt;
&lt;p&gt;实现的逻辑就是：游戏初始时为 &lt;code&gt;waiting&lt;/code&gt; 状态，房间内人数满 3 人时，才会进入 &lt;code&gt;fighting&lt;/code&gt;，角色死亡时为 &lt;code&gt;over&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;且发射火球，移动等行为，当且仅当玩家状态为 &lt;code&gt;fighting&lt;/code&gt; 时，才可以做&lt;/p&gt;
&lt;p&gt;然后设定火球技能的 cd 为 3 秒，且在游戏进入 &lt;code&gt;fighting&lt;/code&gt; 时，先自动进入 cd 状态&lt;/p&gt;
&lt;p&gt;这样就实现了初始 3 秒内，任何玩家不可攻击&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/notice_board/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class NoticeBoard extends AcGameObject {
    constructor(playground) {
        super();

        this.playground = playground;
        this.ctx = this.playground.game_map.ctx;
        this.text = &amp;#34;已就绪：0人&amp;#34;;
    }
    start() {
    }

    write(text) {
        this.text = text;
    }

    update() {
        this.render();
    }

    render() {
        this.ctx.font = &amp;#34;20px serif&amp;#34;;
        this.ctx.fillStyle = &amp;#34;white&amp;#34;;
        this.ctx.textAlign = &amp;#34;center&amp;#34;;
        this.ctx.fillText(this.text, this.playground.width / 2, 20);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    ...
    show(mode) {
        ...
        this.state = &amp;#34;waiting&amp;#34;;     // waiting -&amp;gt; fighting -&amp;gt; over
        this.notice_board = new NoticeBoard(this);
        this.player_count = 0;
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    ...
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.mousedown(function(e) {
            if (outer.playground.state !== &amp;#34;fighting&amp;#34;)
                return false;
            ...
        }
        $(window).keydown(function(e) {
            if (outer.playground.state !== &amp;#34;fighting&amp;#34;)
                return false;
            ...
        });
    }
    start() {
        this.playground.player_count ++ ;
        this.playground.notice_board.write(&amp;#34;已就绪：&amp;#34; + this.playground.player_count + &amp;#34;人&amp;#34;);
        if (this.playground.player_count &amp;gt;= 3) {
            this.playground.state = &amp;#34;fighting&amp;#34;;
            this.playground.notice_board.write(&amp;#34;Fighting&amp;#34;);
        }
        ...
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;技能cd&#34;&gt;技能CD&lt;/h3&gt;
&lt;p&gt;给火球技能设置 3s 的 cd，实现逻辑很简单，设定一个 cool_time 变量，每次渲染的时候减去上次渲染的时间间隔&lt;/p&gt;
&lt;p&gt;然后 cool_time 为 0 时，技能才可以成功释放&lt;/p&gt;
&lt;p&gt;另外修改冷却时间，只用修改自己的即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    constructor(...) {
        ...
        if (this.character === &amp;#34;me&amp;#34;) {
            this.fireball_coldtime = 3; // 单位：s
        }
    }
    ...
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.mousedown(function(e) {
            ...
            else if (e.which === 1) {
                ...
                if (outer.cur_skill === &amp;#34;fireball&amp;#34;) {
                    ...
                    if (outer.playground.mode === &amp;#34;multi mode&amp;#34;) {
                        outer.playground.mps.send_shoot_fireball(tx, ty, fireball.uuid);
                    }
                    outer.fireball_coldtime = 3;
                }
            }
            ...
        });
        $(window).keydown(function(e) {
            ...
            if (outer.fireball_coldtime &amp;gt;= outer.eps)
                return false;
            ...
        });
    }
    update() {
        ...
        if (this.character === &amp;#34;me&amp;#34; &amp;amp;&amp;amp; this.playground.state === &amp;#34;fighting&amp;#34;) {
            this.update_coldtime();
        }
        ...
    }
    update_coldtime() {
        this.fireball_coldtime -= this.timedelta / 1000;
        this.fireball_coldtime = Math.max(0, this.fireball_coldtime);
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;用图片来渲染技能cd&#34;&gt;用图片来渲染技能CD&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    constructor(...) {
        ...
        if (this.character === &amp;#34;me&amp;#34;) {
            this.fireball_coldtime = 3; // 单位：s
            this.fireball_img = new Image();
            this.fireball_img.src = &amp;#34;https://cdn.acwing.com/media/article/image/2021/12/02/1_9340c86053-fireball.png&amp;#34;;
        }
    }
    ...
    render() {
        ...
        if (this.character === &amp;#34;me&amp;#34; &amp;amp;&amp;amp; this.playground.state === &amp;#34;fighting&amp;#34;) {
            this.render_skill_coldtime();
        }
    }
     render_skill_coldtime() {
        let scale = this.playground.scale;
        let x = 1.5, y = 0.9, r = 0.04;

        // 渲染技能图标
        this.ctx.save();
        this.ctx.beginPath();
        this.ctx.arc(x * scale, y * scale, r * scale, 0, Math.PI * 2, false);
        this.ctx.stroke();
        this.ctx.clip();
        this.ctx.drawImage(this.fireball_img, (x - r) * scale, (y - r) * scale, r * 2 * scale, r * 2 * scale);
        this.ctx.restore();

        // 渲染冷却指示
        if (this.fireball_coldtime &amp;gt;= this.eps){
            this.ctx.beginPath();
            this.ctx.moveTo(x * scale, y * scale);
            this.ctx.arc(x * scale, y * scale, r * scale, 0 - Math.PI / 2, Math.PI * 2 * (1 - this.fireball_coldtime / 3) - Math.PI / 2, true);
            this.ctx.lineTo(x * scale, y * scale);
            this.ctx.fillStyle = &amp;#34;rgba(0, 0, 255, 0.6)&amp;#34;;
            this.ctx.fill();
        }
    }
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;添加一个闪现技能&#34;&gt;添加一个闪现技能&lt;/h3&gt;
&lt;h4 id=&#34;单机部分&#34;&gt;单机部分&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    constructor(...) {
        ...
        if (this.character === &amp;#34;me&amp;#34;) {
            ...
            this.blink_coldtime = 5;
            this.blink_img = new Image();
            this.blink_img.src = &amp;#34;https://cdn.acwing.com/media/article/image/2021/12/02/1_daccabdc53-blink.png&amp;#34;;
        }
    }
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.mousedown(function(e) {
            ...
            else if (e.which === 1) {
                ...
                else if (outer.cur_skill === &amp;#34;blink&amp;#34;) {
                    outer.blink(tx, ty);
                    // 同步函数
                    if (outer.playground.mode === &amp;#34;multi mode&amp;#34;) {
                        outer.playground.mps.send_blink(tx, ty);
                    }
                    outer.blink_coldtime = 5;
                }
            }
            outer.cur_skill = null; // 清空当前技能
        });
        $(window).keydown(function(e) {
            ...
            else if (e.which === 70) {    // f键
                if (outer.blink_coldtime &amp;gt;= outer.eps) return true;
                outer.cur_skill = &amp;#34;blink&amp;#34;;
                return false;
            }
        });
    }
    ...
    blink(tx, ty) {
        let d = this.get_dist(this.x, this.y, tx, ty);
        d = Math.min(d, 0.5);
        let angle = Math.atan2(ty - this.y, tx - this.x);
        this.x += d * Math.cos(angle);
        this.y += d * Math.sin(angle);

        this.move_length = 0;   // 闪现完停下来
    }
    ...
    render_skill_coldtime() {
        ...
        x = 1.62, y = 0.9, r = 0.04;
        // 闪现技能
        // 渲染技能图标
        this.ctx.save();
        this.ctx.beginPath();
        this.ctx.arc(x * scale, y * scale, r * scale, 0, Math.PI * 2, false);
        this.ctx.stroke();
        this.ctx.clip();
        this.ctx.drawImage(this.blink_img, (x - r) * scale, (y - r) * scale, r * 2 * scale, r * 2 * scale);
        this.ctx.restore();

        // 渲染冷却指示
        if (this.blink_coldtime &amp;gt;= this.eps){
            this.ctx.beginPath();
            this.ctx.moveTo(x * scale, y * scale);
            this.ctx.arc(x * scale, y * scale, r * scale, 0 - Math.PI / 2, Math.PI * 2 * (1 - this.blink_coldtime / 5) - Math.PI / 2, true);
            this.ctx.lineTo(x * scale, y * scale);
            this.ctx.fillStyle = &amp;#34;rgba(0, 0, 255, 0.6)&amp;#34;;
            this.ctx.fill();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;联机部分&#34;&gt;联机部分&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;game/static/js/src/playground/socket/multiplayer/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MultiPlayerSocket {
    ...
    send_blink(tx, ty) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &amp;#39;event&amp;#39;: &amp;#34;blink&amp;#34;,
            &amp;#39;uuid&amp;#39;: outer.uuid,
            &amp;#39;tx&amp;#39;: tx,
            &amp;#39;ty&amp;#39;: ty,
        }));
    }
    receive_blink(uuid, tx, ty) {
        let player = this.get_player(uuid);
        if (player) {
            player.blink(tx, ty);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def blink(self, data):
        await self.channel_layer.group_send(
            self.room_name,
            {
                &amp;#39;type&amp;#39;: &amp;#34;group_send_event&amp;#34;,
                &amp;#39;event&amp;#39;: &amp;#34;blink&amp;#34;,
                &amp;#39;uuid&amp;#39;: data[&amp;#39;uuid&amp;#39;],
                &amp;#39;tx&amp;#39;: data[&amp;#39;tx&amp;#39;],
                &amp;#39;ty&amp;#39;: data[&amp;#39;ty&amp;#39;],
            }
        )
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;实现聊天系统ஐ&#34;&gt;实现聊天系统ஐ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/89508/&#34;&gt;8.1 上课笔记 | 大菜狗&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;优化键盘绑定事件&#34;&gt;优化键盘绑定事件&lt;/h2&gt;
&lt;p&gt;这部分算是之前的遗留问题，先前的 &lt;code&gt;keydown&lt;/code&gt; 监听事件绑定在了 &lt;code&gt;window&lt;/code&gt; 上会出现一个问题&lt;/p&gt;
&lt;p&gt;如果在一个浏览器内打开多个 &lt;code&gt;ACAPP&lt;/code&gt;，此时按下键位触发 &lt;code&gt;keydown&lt;/code&gt; 事件，会被浏览器内所有的 &lt;code&gt;ACAPP&lt;/code&gt; 都捕获到&lt;/p&gt;
&lt;p&gt;之前影响不大，但对此次要实现的聊天系统就有着致命的影响，即打开一个 &lt;code&gt;ACAPP&lt;/code&gt; 的聊天栏，其他都会被打开&lt;/p&gt;
&lt;p&gt;所有我们要将 &lt;code&gt;keydown&lt;/code&gt; 监听事件绑定到 &lt;code&gt;canvas&lt;/code&gt; 上&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    ...
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.keydown(function(e) {
            if (outer.playground.state !== &amp;#34;fighting&amp;#34;)
                return true;
            if (e.which === 81) {           // 键盘按下q事件
                if (outer.fireball_coldtime &amp;gt;= outer.eps) return true;
                outer.cur_skill = &amp;#34;fireball&amp;#34;;
                return false;
            } else if (e.which === 70) {    // f键
                if (outer.blink_coldtime &amp;gt;= outer.eps) return true;
                outer.cur_skill = &amp;#34;blink&amp;#34;;
                return false;
            }
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;playground/game-map/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class GameMap extends AcGameObject {
    constructor(playground) {
        ...
        this.$canvas = $(`&amp;lt;canvas tabindex=0&amp;gt;&amp;lt;/canvas&amp;gt;`);
        ...
    }
    start() {
        this.$canvas.focus();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;本地前端&#34;&gt;本地前端&lt;/h2&gt;
&lt;p&gt;要实现两个部分： 1. 文本输入框（让用户输入要发送的信息） 2. 历史记录显示框（之前用户发送的信息的显示框）&lt;/p&gt;
&lt;p&gt;欲实现逻辑：用户按下 &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; 后，游戏界面弹出文本输入框，然后聚焦于文本输入框，且同时弹出历史记录显示框 3 秒&lt;/p&gt;
&lt;p&gt;然后用户输入信息后，按下 &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; 后发出信息，接着信息会显示在历史记录显示框最下方，并弹出历史记录显示框 3 秒&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/chat_field/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chat field&lt;/code&gt; 负责管理 文本输入框 和 历史记录显示框&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class ChatField {
    constructor(playground) {
        this.playground = playground;

        this.$history = $(`&amp;lt;div class=&amp;#34;ac-game-chat-field-history&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;`);
        this.$input = $(`&amp;lt;input type=&amp;#34;text&amp;#34; class=&amp;#34;ac-game-chat-field-input&amp;#34;&amp;gt;`);

        this.$history.hide();
        this.$input.hide();

        this.func_id = null;

        this.playground.$playground.append(this.$history);
        this.playground.$playground.append(this.$input);

        this.start();
    }

    start() {
        this.add_listening_events();
    }
    add_listening_events() {
        let outer = this;
        this.$input.keydown(function(e) {
            if (e.which === 27) {   //ESC
                outer.hide_input();
                return false;
            } else if (e.which === 13) {
                let username = outer.playground.root.settings.username;
                let text = outer.$input.val();
                if (text) {
                    outer.$input.val(&amp;#34;&amp;#34;);
                    outer.add_message(username, text);
                }
                return false;
            }
        });
    }
    show_history() {
        let outer = this;
        this.$history.fadeIn();
        if (this.func_id) clearTimeout(this.func_id);
        this.func_id = setTimeout(function() {
            outer.$history.fadeOut();
            outer.func_id = null;
        }, 3000);
    }
    render_message(message) {
        return $(`&amp;lt;div&amp;gt;${message}&amp;lt;/div&amp;gt;`);
    }
    add_message(username, text) {
        this.show_history();
        let message = `[${username}] ${text}`;
        this.$history.append(this.render_message(message));
        this.$history.scrollTop(this.$history[0].scrollHeight);
    }
    show_input() {
        this.show_history();
        this.$input.show();
        this.$input.focus();    // 输入时，聚焦于输入框
    }
    hide_input() {
        this.$input.hide();
        this.playground.game_map.$canvas.focus();   // 退出时，聚焦回游戏界面
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;把它创建出来&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    ...
    show(mode) {    //打开 playground 界面
        ...
        else if (mode === &amp;#34;multi mode&amp;#34;) {
            this.chat_field = new ChatField(this);
            ...
        }

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;添加监听事件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    ...
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.keydown(function(e) {
            if (e.which === 13) {   // enter (显示对话框)
                if (outer.playground.mode === &amp;#34;multi mode&amp;#34;) {
                    outer.playground.chat_field.show_input();
                    return false;
                }
            } else if (e.which === 27) {    // esc（关闭对话框）
                if (outer.playground.mode === &amp;#34;multi mode&amp;#34;) {
                    outer.playground.char_field.hide_input();
                    return false;
                }
            }
            ...
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
.ac-game-chat-field-history {
    position: absolute;
    top: 66%;
    left: 20%;
    transform: translate(-50%, -50%);
    width: 20%;
    height: 32%;
    color: white;
    font-size: 2vh;
    padding: 5px;
    overflow: auto;
}

.ac-game-chat-field-history::-webkit-scrollbar {
    width: 0;
}

.ac-game-chat-field-input {
    position: absolute;
    top: 86%;
    left: 20%;
    transform: translate(-50%, -50%);
    width: 20%;
    height: 3vh;
    color: white;
    font-size: 2vh;
    background-color: rgba(222,225,230, 0.2);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;联机聊天窗&#34;&gt;联机聊天窗&lt;/h2&gt;
&lt;h3 id=&#34;前端-4&#34;&gt;前端&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;playground/chat_field/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class ChatField {
    ...
    add_listening_events() {
        ...
        this.$input.keydown(function(e) {
            ...
            else if (e.which === 13) {
                ...
                if (text) {
                    ...
                    outer.playground.mps.send_message(text);
                }
                ...
            }
        });
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/playground/socket/multiplayer/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class MultiPlayerSocket {
    ...
    send_message(text) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &amp;#39;event&amp;#39;: &amp;#34;message&amp;#34;,
            &amp;#39;uuid&amp;#39;: outer.uuid,
            &amp;#39;username&amp;#39;: outer.playground.root.settings.username,
            &amp;#39;text&amp;#39;: text,
        }));
    }
    receive_message(username, text) {
        this.playground.chat_field.add_message(username, text);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;后端-4&#34;&gt;后端&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def message(self, data):
        await self.channel_layer.group_send(
            self.room_name,
            {
                &amp;#39;type&amp;#39;: &amp;#34;group_send_event&amp;#34;,
                &amp;#39;event&amp;#39;: &amp;#34;message&amp;#34;,
                &amp;#39;uuid&amp;#39;: data[&amp;#39;uuid&amp;#39;],
                &amp;#39;username&amp;#39;: data[&amp;#39;username&amp;#39;],
                &amp;#39;text&amp;#39;: data[&amp;#39;text&amp;#39;],
            }
        )
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;实现匹配系统ஐ&#34;&gt;实现匹配系统ஐ&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3435229/&#34;&gt;9. 实现匹配系统 | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/code/content/2360556/&#34;&gt;9.1 上课笔记 | 一只野生彩色铅笔&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;本章节内容是利用 &lt;code&gt;thrift&lt;/code&gt; 创建客户端-服务端交互的接口&lt;/p&gt;
&lt;p&gt;然后利用该接口完成一个匹配系统&lt;/p&gt;
&lt;p&gt;匹配系统由一个消息队列 + 生产者-消费者模型 + 匹配池 完成&lt;/p&gt;
&lt;p&gt;基本与 Linux基础课 里的部分完全一致&lt;/p&gt;
&lt;p&gt;当时我们是拿 cpp 来写的，写了差不多 200 行&lt;/p&gt;
&lt;p&gt;本节会拿 py 来实现，差不多 140 行即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;thrift&lt;/code&gt; 接口文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace py match_service

service Match {
    i32 add_player(1: i32 score, 2: string uuid, 3: string username, 4: string photo, 5: string channel_name),
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后用该源文件生成接口文件&lt;/p&gt;
&lt;h2 id=&#34;服务端&#34;&gt;服务端&lt;/h2&gt;
&lt;p&gt;配置 &lt;code&gt;asgi.py&lt;/code&gt; 让服务端进程可以调用客户端进程里的函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;acapp/acapp/asgi.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import os

import django
os.environ.setdefault(&amp;#39;DJANGO_SETTINGS_MODULE&amp;#39;, &amp;#39;acapp.settings&amp;#39;)
django.setup()
...
from channels.layers import get_channel_layer
channel_layer = get_channel_layer()
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;acapp/match_system/src/main.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /usr/bin/env python3

import glob
import sys
sys.path.insert(0, glob.glob(&amp;#39;../../&amp;#39;)[0])

from match_server.match_service import Match

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from queue import Queue
from time import sleep
from threading import Thread

from acapp.asgi import channel_layer
from asgiref.sync import async_to_sync
from django.core.cache import cache

queue = Queue()  # 消息队列

class Player:
    def __init__(self, score, uuid, username, photo, channel_name):
        self.score = score
        self.uuid = uuid
        self.username = username
        self.photo = photo
        self.channel_name = channel_name
        self.waiting_time = 0  # 等待时间


class Pool:
    def __init__(self):
        self.players = []

    def add_player(self, player):
        self.players.append(player)

    def check_match(self, a, b):
        dt = abs(a.score - b.score)
        a_max_dif = a.waiting_time * 50
        b_max_dif = b.waiting_time * 50
        return dt &amp;lt;= a_max_dif and dt &amp;lt;= b_max_dif

    def match_success(self, ps):
        print(&amp;#34;Match Success: %s %s %s&amp;#34; % (ps[0].username, ps[1].username, ps[2].username))
        room_name = &amp;#34;room-%s-%s-%s&amp;#34; % (ps[0].uuid, ps[1].uuid, ps[2].uuid)
        players = []
        for p in ps:
            async_to_sync(channel_layer.group_add)(room_name, p.channel_name)
            players.append({
                &amp;#39;uuid&amp;#39;: p.uuid,
                &amp;#39;username&amp;#39;: p.username,
                &amp;#39;photo&amp;#39;: p.photo,
                &amp;#39;hp&amp;#39;: 100,
            })
        cache.set(room_name, players, 3600)  # 有效时间：1小时
        for p in ps:
            async_to_sync(channel_layer.group_send)(
                room_name,
                {
                    &amp;#39;type&amp;#39;: &amp;#34;group_send_event&amp;#34;,
                    &amp;#39;event&amp;#39;: &amp;#34;create_player&amp;#34;,
                    &amp;#39;uuid&amp;#39;: p.uuid,
                    &amp;#39;username&amp;#39;: p.username,
                    &amp;#39;photo&amp;#39;: p.photo,
                }
            )

    def increase_waiting_time(self):
        for player in self.players:
            player.waiting_time += 1

    def match(self):
        while len(self.players) &amp;gt;= 3:
            self.players = sorted(self.players, key=lambda p: p.score)
            flag = False
            for i in range(len(self.players) - 2):
                a, b, c = self.players[i], self.players[i + 1], self.players[i + 2]
                if self.check_match(a, b) and self.check_match(a, c) and self.check_match(b, c):
                    self.match_success([a, b, c])
                    self.players = self.players[:i] + self.players[i + 3:]
                    flag = True
                    break
            if not flag:
                break

        self.increase_waiting_time()



class MatchHandler:
    def add_player(self, score, uuid, username, photo, channel_name):
        print(&amp;#34;Add Player: %s %d&amp;#34; % (username, score))
        player = Player(score, uuid, username, photo, channel_name)
        queue.put(player)
        return 0


def get_player_from_queue():
    try:
        return queue.get_nowait()
    except:
        return None


def worker():
    pool = Pool()
    while True:
        player = get_player_from_queue()
        if player:
            pool.add_player(player)
        else:
            pool.match()
            sleep(1)



if __name__ == &amp;#39;__main__&amp;#39;:
    handler = MatchHandler()
    processor = Match.Processor(handler)
    transport = TSocket.TServerSocket(host=&amp;#39;127.0.0.1&amp;#39;, port=9090)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    server = TServer.TThreadedServer(
        processor, transport, tfactory, pfactory)

    Thread(target=worker, daemon=True).start()

    print(&amp;#39;Starting the server...&amp;#39;)
    server.serve()
    print(&amp;#39;done.&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;客户端&#34;&gt;客户端&lt;/h2&gt;
&lt;p&gt;扩展数据库表，让其可以存放 rank分 的信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;game/models/player/player.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
class Player(models.Model):
    ...
    score = models.IntegerField(default=1500)
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from channels.generic.websocket import AsyncWebsocketConsumer
import json
from django.conf import settings
from django.core.cache import cache

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

from match_system.src.match_server.match_service import Match
from game.models.player.player import Player
from channels.db import database_sync_to_async

class MultiPlayer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.accept()

    async def disconnect(self, close_code):
        if self.room_name:
            await self.channel_layer.group_discard(self.room_name, self.channel_name)

    async def create_player(self, data):
        self.room_name = None
        self.uuid = data[&amp;#39;uuid&amp;#39;]
        # Make socket
        transport = TSocket.TSocket(&amp;#39;127.0.0.1&amp;#39;, 9090)
        # Buffering is critical. Raw sockets are very slow
        transport = TTransport.TBufferedTransport(transport)

        # Wrap in a protocol
        protocol = TBinaryProtocol.TBinaryProtocol(transport)

        # Create a client to use the protocol encoder
        client = Match.Client(protocol)

        def db_get_player():
            return Player.objects.get(user__username=data[&amp;#39;username&amp;#39;])

        player = await database_sync_to_async(db_get_player)()

        # Connect!
        transport.open()

        client.add_player(player.score, data[&amp;#39;uuid&amp;#39;], data[&amp;#39;username&amp;#39;], data[&amp;#39;photo&amp;#39;], self.channel_name)

        # Close!
        transport.close()
    
    async def group_send_event(self, data):
        if not self.room_name:
            keys = cache.keys(&amp;#39;*%s*&amp;#39; % (self.uuid))
            if keys:
                self.room_name = keys[0]
        await self.send(text_data=json.dumps(data))
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;项目收尾ஐ&#34;&gt;项目收尾ஐ&lt;/h1&gt;
&lt;h2 id=&#34;加密压缩js代码&#34;&gt;加密、压缩js代码&lt;/h2&gt;
&lt;p&gt;安装 &lt;code&gt;terser&lt;/code&gt; :&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo apt-get update
sudo apt-get install npm
sudo npm install terser -g
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;terser&lt;/code&gt; 不仅支持文件输入，也支持标准输入。结果会输出到标准输出中。&lt;/p&gt;
&lt;p&gt;使用方式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;terser xxx.js -c -m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们将整合 &lt;code&gt;js&lt;/code&gt; 文件的脚本修改一下即可：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scripts/compress_game_js.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &amp;#39;*.js&amp;#39; | sort | xargs cat | terser -c -m &amp;gt; ${JS_PATH_DIST}game.js

echo &amp;#34;yes&amp;#34; | python3 manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;清理监听函数&#34;&gt;清理监听函数&lt;/h2&gt;
&lt;p&gt;在AcAPP关闭之前触发的事件可以通过如下api添加：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;AcWingOS.api.window.on_close(func);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同一个页面中，多个 &lt;code&gt;acapp&lt;/code&gt; 引入的 &lt;code&gt;js&lt;/code&gt; 代码只会加载一次，因此 &lt;code&gt;AC_GAME_OBJECTS&lt;/code&gt; 等全局变量是同一个页面、同一个 &lt;code&gt;acapp&lt;/code&gt; 的所有窗口共用的&lt;/li&gt;
&lt;li&gt;各自创建的局部变量是独立的，比如 &lt;code&gt;new AcGame()&lt;/code&gt; 创建出的对象各个窗口是独立的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们给每一个窗口创建一个 &lt;code&gt;uid&lt;/code&gt; 然后根据不同的 &lt;code&gt;uid&lt;/code&gt; 进行事件解绑&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    ...
    create_uuid() {
        let res = &amp;#34;&amp;#34;;
        for (let i = 0; i &amp;lt; 8; i ++ ) {
            let x = parseInt(Math.floor(Math.random() * 10));   //[0, 10)
            res += x;
        }
        return res;
    }
    start() {
        let outer = this;
        let uuid = this.create_uuid();
        $(window).on(`resize.${uuid}`, function() {
            outer.resize();
        });

        if (this.root.AcWingOS) {
            outer.root.AcWingOS.api.window.on_close(function() {
                $(window).off(`resize.${uuid}`);
            });
        }
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;编写每局游戏的结束界面&#34;&gt;编写每局游戏的结束界面&lt;/h2&gt;
&lt;p&gt;单独创建一个结束界面，然后游戏结束的时候渲染出该结束界面即可&lt;/p&gt;
&lt;p&gt;因为结束界面要覆盖在游戏界面之上，因此我们需要先修改一下游戏引擎，添加一个 &lt;code&gt;late_update&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在每一帧渲染的内容最后再渲染，从而实现结束界面叠加在游戏界面之上的效果&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ac_game_object/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
class AcGameObject {
    ...
    late_update() { // 每一帧均会执行一次，且在所有 update 执行完后才执行

    }
    ...
}
...
let AC_GAME_ANIMATION = function(timestamp) {
    ...
    for (let i = 0; i &amp;lt; AC_GAME_OBJECTS.length; i ++ ) {
        let obj = AC_GAME_OBJECTS[i];
        obj.late_update();
    }
    ...
}
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们做一个渲染出结束界面的类&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/score_board/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class ScoreBoard extends AcGameObject {
    constructor(playground) {
        super();
        this.playground = playground;
        this.ctx = this.playground.game_map.ctx;

        this.state = null;  // win-胜利；lose-失败

        this.win_img = new Image();
        this.win_img.src = &amp;#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_8f58341a5e-win.png&amp;#34;;

        this.lose_img = new Image();
        this.lose_img.src = &amp;#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_9254b5f95e-lose.png&amp;#34;;
    }
    start() {
    }

    add_listening_events() {    // 点击后，返回主页面
        let outer = this;
        let $canvas = this.playground.game_map.$canvas;

        $canvas.on(&amp;#39;click&amp;#39;, function() {
            outer.playground.hide();
            outer.playground.root.menu.show();
        });
    }

    win() {
        this.state = &amp;#34;win&amp;#34;;
        let outer = this;
        setTimeout(function() {
            outer.add_listening_events();
        }, 1000);   // 1秒后监听点击事件
    }

    lose() {
        this.state = &amp;#34;lose&amp;#34;;
        let outer = this;
        setTimeout(function() {
            outer.add_listening_events();
        }, 1000);   // 1秒后监听点击事件
    }

    late_update() {
        this.render();  // 渲染在图层最上方
    }
    render() {
        let len = this.playground.height / 2;
        if (this.state === &amp;#34;win&amp;#34;) {
            this.ctx.drawImage(this.win_img, this.playground.width / 2 - len / 2, this.playground.height / 2 - len / 2, len, len);
        } else if (this.state === &amp;#34;lose&amp;#34;) {
            this.ctx.drawImage(this.lose_img, this.playground.width / 2 - len / 2, this.playground.height / 2 - len / 2, len, len);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过游戏结束的逻辑判断，渲染结束界面，同时在结束并返回主菜单的时候，重置游戏元素&lt;/p&gt;
&lt;p&gt;游戏元素重置&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    ...
    show(mode) {    // 打开 playground 界面
        ...
        this.score_board = new ScoreBoard(this);
        ...
    }
    ...
    hide() {
        // 清空所有游戏元素
        while (this.players &amp;amp;&amp;amp; this.players.length &amp;gt; 0) {
            this.players[0].destroy();
        }
        if (this.game_map) {
            this.game_map.destroy();
            this.game_map = null;
        }
        if (this.notice_board) {
            this.notice_board.destroy();
            this.notice_board = null;
        }
        if (this.score_board) {
            this.score_board.destroy();
            this.score_board = null;
        }
        this.$playground.empty();   // 清空所有html标签
        this.$playground.hide();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;游戏结束的逻辑判断&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class Player extends AcGameObject {
    ...
    update() {
        ...
        this.update_win();
        ...
    }
    update_win() {
        // 竞赛状态，且只有一名玩家，且改名玩家就是我，则胜利
        if (this.playground.state === &amp;#34;fighting&amp;#34; &amp;amp;&amp;amp; this.character === &amp;#34;me&amp;#34; &amp;amp;&amp;amp; this.playground.players.length === 1) {
            this.playground.state = &amp;#34;over&amp;#34;;
            this.playground.score_board.win();
        }
    }
    ...
    on_destroy() {
        // 我死亡，且游戏处于竞赛状态，则失败
        if (this.character === &amp;#34;me&amp;#34; &amp;amp;&amp;amp; this.playground.state === &amp;#34;fighting&amp;#34;) {
            this.playground.state = &amp;#34;over&amp;#34;
            this.playground.score_board.lose();
        }
        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;更新战绩&#34;&gt;更新战绩&lt;/h2&gt;
&lt;p&gt;这里我们完全交给后端来判断&lt;/p&gt;
&lt;p&gt;在处理广播的 &lt;code&gt;attack&lt;/code&gt; 信息的时候，先前我们额外留了一个参数 &lt;code&gt;hp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;围绕该 &lt;code&gt;hp&lt;/code&gt; 进行续写，若当前房间内 &lt;code&gt;hp&lt;/code&gt; 大于 0 的玩家少于等于 1 个&lt;/p&gt;
&lt;p&gt;则对于所有 &lt;code&gt;hp&lt;/code&gt; 为 0 的玩家减 &lt;code&gt;rank&lt;/code&gt; 分，大于 0 的玩家加 &lt;code&gt;rank&lt;/code&gt; 分&lt;/p&gt;
&lt;p&gt;&lt;code&gt;consumers/multiplayer/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def attack(self, data):
        if not self.room_name:
            return
        players = cache.get(self.room_name)

        if not players:
            return

        for player in players:
            if player[&amp;#39;uuid&amp;#39;] == data[&amp;#39;attackee_uuid&amp;#39;]:
                player[&amp;#39;hp&amp;#39;] -= 25

        remain_cnt = 0
        for player in players:
            if player[&amp;#39;hp&amp;#39;] &amp;gt; 0:
                remain_cnt += 1

        if remain_cnt &amp;gt; 1:  # 继续进行游戏
            if self.room_name:
                cache.set(self.room_name, players, 3600)
        else:   # 结算 
            def db_update_player_score(username, score):
                player = Player.objects.get(user__username=username)
                player.score += score
                player.save()
            for player in players:
                if player[&amp;#39;hp&amp;#39;] &amp;lt;= 0:
                    await database_sync_to_async(db_update_player_score)(player[&amp;#39;username&amp;#39;], -5)
                else:
                    await database_sync_to_async(db_update_player_score)(player[&amp;#39;username&amp;#39;], 10)
        ...
    ...
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;添加faviconico&#34;&gt;添加favicon.ico&lt;/h2&gt;
&lt;p&gt;这是修正一个小 BUG，之前 web 端一直没有网页显示图标，这里给他加上去&lt;/p&gt;
&lt;p&gt;&lt;code&gt;game/templates/multiends/web.html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
&amp;lt;head&amp;gt;
    ...
    &amp;lt;link rel=&amp;#34;icon&amp;#34; href=&amp;#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_be4c11ce5f-acapp.png&amp;#34;&amp;gt;
&amp;lt;/head&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;各种环境命令&#34;&gt;各种环境命令&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;启动&lt;code&gt;django&lt;/code&gt;项目，在&lt;code&gt;~/acapp&lt;/code&gt;目录下执行：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;python3 manage.py runserver 0.0.0.0:8000
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;每次修改好 &lt;code&gt;game/static&lt;/code&gt;  下的文件后，需要在&lt;code&gt;~/acapp&lt;/code&gt;目录下运行打包文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./scripts/compress_game_js.sh
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;在定义完一个数据表之后，需要将创建的数据表更新到 &lt;code&gt;django&lt;/code&gt; 的数据库中去：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$&lt;/span&gt; python3 manage.py makemigrations
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Migrations &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;game&amp;#39;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;   game/migrations/&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0001&lt;/span&gt;_initial.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;     - Create model Player
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f00&#34;&gt;$&lt;/span&gt; python3 manage.py migrate
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Operations to perform:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;   Apply &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;all&lt;/span&gt; migrations: admin, auth, contenttypes, game, sessions
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt; Running migrations:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;   Applying game&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;.0001&lt;/span&gt;_initial... OK
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;启动&lt;code&gt;nginx&lt;/code&gt;服务，用于域名访问：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo /etc/init.d/nginx start
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;启动&lt;code&gt;uwsgi&lt;/code&gt;服务，用于域名访问：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;uwsgi --ini scripts/uwsgi.ini
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;关闭&lt;code&gt;uwsgi&lt;/code&gt;服务：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pkill -f uwsgi -9
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;启动 &lt;code&gt;redis-server&lt;/code&gt;，用于一键登录：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo redis-server /etc/redis/redis.conf
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;启动 &lt;code&gt;Django_channels&lt;/code&gt;，用于联机对战，在&lt;code&gt;~/acapp&lt;/code&gt;目录下执行：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;daphne -b 0.0.0.0 -p 5015 acapp.asgi:application
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;启动&lt;code&gt;thrift&lt;/code&gt;服务，用于匹配系统，在&lt;code&gt;~/acapp/match_system/src/&lt;/code&gt;目录下执行：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./main.py
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;版本更新，在&lt;a href=&#34;https://www.acwing.com/user/myspace/application/update/2433/&#34;&gt;术士之战&lt;/a&gt;中将 &lt;code&gt;js地址&lt;/code&gt; 一栏更新为：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 本地文件夹中对应的文件也需要更改名字
https://app2433.acapp.acwing.com.cn/static/js/dist/game-版本号.js
&lt;/code&gt;&lt;/pre&gt;</description>
      <content:encoded><![CDATA[<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_django/">AcWing Django 框架课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/punch_the_clock/72/">AcWing Django 框架课</a></li>
</ul>
<hr>
<h1 id="django-项目创建">Django 项目创建</h1>
<ul>
<li><a href="https://www.acwing.com/solution/content/72577/">2.1上课笔记 | 栎</a></li>
<li><a href="https://www.acwing.com/solution/content/73097/">2.1上课笔记 | Andrew1729</a></li>
</ul>
<hr>
<h2 id="启动初始项目">启动初始项目</h2>
<ol>
<li><code>django-admin startproject acapp</code>：在当前目录下创建名为<code>acapp</code>的<code>django</code>项目</li>
<li><code>python3 manage.py runserver 0.0.0.0:8000</code>：启动项目
<ol>
<li>打开<code>settings.py</code>，找到<code>ALLOWED_HOSTS=[]</code>，修改成<code>ALLOWED_HOSTS=[&quot;自己的服务器的公网IP&quot;]</code></li>
<li>通过<code>自己的服务器公网IP:8000</code> 打开Django页面</li>
</ol>
</li>
</ol>
<h2 id="创建管理员登录页面">创建管理员登录页面</h2>
<ol>
<li>在一级<code>acapp</code>文件夹下，<code>python3 manage.py startapp XXX</code>，<code>XXX</code>是可以自定义的app名，这里用<code>game</code>示例，这时候会多一个文件夹<code>game</code>，树形结构如图：</li>
</ol>
<pre tabindex="0"><code>|-- game
|   |-- __init__.py
|   |-- admin.py          # 管理员页面
|   |-- apps.py           # 用的不多
|   |-- migrations        # 存储数据库
|   |   `-- __init__.py
|   |-- models.py         # 定义网站里的数据库表
|   |-- tests.py
|   `-- views.py          # 视图，即函数
</code></pre><ol start="2">
<li><code>python3 manage.py migrate</code>：将所有修改更新进数据库</li>
<li>创建一个 <strong>管理员用户</strong>：</li>
</ol>
<pre tabindex="0"><code>$ python3 manage.py createsuperuser
&gt; Username (leave blank to use &#39;acs&#39;): admin
&gt; Email address: 
&gt; Password: 123456
&gt; Password (again): 123456
&gt; Superuser created successfully.
</code></pre><p>然后利用该 <strong>管理员用户</strong> 登录 <code>admin</code> 页面，即可成功登陆</p>
<h2 id="创建用户登录页面">创建用户登录页面</h2>
<h3 id="game-下的各个文件作用"><code>game</code> 下的各个文件作用</h3>
<ol>
<li><code>templates</code>目录：管理 <code>html</code>  文件</li>
<li><code>urls</code>目录：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数)</li>
<li><code>views</code>目录：管理 <code>http</code> 函数（接收浏览器请求，返回字符串至浏览器）</li>
<li><code>models</code>目录：管理数据库数据</li>
<li><code>static</code>目录：管理静态文件</li>
<li><code>consumers</code>目录：管理<code>websocket</code>函数</li>
</ol>
<h3 id="实现一个路由重定向">实现一个路由重定向</h3>
<ul>
<li><code>url</code> 输入网址 -&gt; <code>acapp.urls</code> -&gt; <code>game.urls</code> -&gt; <code>game.views.index</code> -&gt; 展示页面</li>
</ul>
<p><strong>game.views</strong></p>
<p>这其中，<code>HttpResponse()</code>内部使用<code>html</code>的语法，返回的响应就直接用这个字符串作为页面，转换成<code>html</code></p>
<pre tabindex="0"><code>from django.http import HttpResponse

def index(request):
    line1 = &#39;&lt;h1 style=&#34;text-align: center&#34;&gt; 第一个网页 &lt;/h1&gt;&#39;
    return HttpResponse(line1)
</code></pre><p><strong>game.urls</strong></p>
<p>这其中，<code>path('PATH', function, name)</code>的含义是，在用户访问网站的时候，如果是<code>网站/game/PATH</code>，就会调用<code>function</code>，名字为<code>name</code>，这是在<code>/game/</code>目录下的调用，所以这个<code>PATH</code>是在<code>/game/</code>的基础上的<strong>相对路径</strong>，所以他的<strong>绝对路径</strong>是<code>网站/game/PATH</code></p>
<pre tabindex="0"><code>from django.urls import path
from game.views import index

urlpatterns = [ 
    path(&#34;&#34;, index, name=&#34;index&#34;),
]
</code></pre><p><strong>acapp.urls</strong></p>
<p>这其中，<code>path('PATH', include('game.urls'))</code>的含义是：在用户访问网站的时候，如果是<code>网站/PATH</code>，就会走到<code>/game/urls</code>，并根据<code>/game/urls.py</code>来跑路由，就是说，用户在访问<code>网站/</code>的时候，由于此时调用的函数是<code>include('game.urls')</code>，所以访问<code>网站/</code>相当于根据<code>game/urls</code>访问</p>
<pre tabindex="0"><code>from django.contrib import admin
from django.urls import path, include

urlpatterns = [ 
    path(&#39;&#39;, include(&#39;game.urls&#39;)),
    path(&#39;admin/&#39;, admin.site.urls),
] 
</code></pre><p>然后直接打开 <code>ip:socket</code> 可以直接显示 <code>index</code> 返回的网页</p>
<h1 id="创建菜单界面">创建菜单界面</h1>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3199626/">3. 创建菜单界面 | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/73121/">3.1 上课笔记 | 大家好今天是</a></li>
<li><a href="https://www.acwing.com/solution/content/73707/">3.1 上课笔记 | 栎</a></li>
</ul>
<hr>
<h2 id="构建项目框架">构建项目框架</h2>
<h3 id="项目系统设计">项目系统设计</h3>
<ul>
<li><code>menu</code>：菜单页面</li>
<li><code>playground</code>：游戏界面</li>
<li><code>settings</code>：设置界面</li>
</ul>
<h3 id="项目文件结构">项目文件结构</h3>
<pre tabindex="0"><code>.
|-- README.md
|-- acapp
|   |-- __init__.py    # 文件夹在加上 __init__.py 文件后，python 便可以通过 import 来引用该文件夹
|   |-- asgi.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
|-- db.sqlite3
|-- game
|   |-- __init__.py
|   |-- admin.py
|   |-- apps.py
|   |-- migrations
|   |   `-- __init__.py
|   |-- models
|   |   `-- __init__.py
|   |-- static
|   |   |-- css
|   |   |   `-- game.css    # 一般一个工程，只有一个 css 文件就足够了
|   |   |-- image
|   |   |   `-- menu
|   |   |       `-- background.gif
|   |   `-- js
|   |       |-- dist
|   |       |   `-- game.js
|   |       `-- src
|   |           `-- zbase.js    # 总的 js 文件，命名以 z 开头会自动在字典序最后
|   |-- templates
|   |   `-- multiends
|   |       `-- web.html
|   |-- tests.py
|   |-- urls
|   |   |-- __init__.py
|   |   |-- index.py
|   |   |-- menu
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   |-- playground
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   `-- settings
|   |       |-- __init__.py
|   |       `-- index.py
|   `-- views
|       |-- __init__.py
|       |-- index.py
|       |-- menu
|       |   `-- __init__.py
|       |-- playground
|       |   `-- __init__.py
|       `-- settings
|           `-- __init__.py
|-- manage.py
`-- scripts
    `-- compress_game_js.sh
</code></pre><h4 id="js-文件管理"><code>js</code> 文件管理</h4>
<p>一般一个工程会有很多个 <code>.js</code> 源文件，为了加快网络的传输，也为了每次写新的 <code>.js</code> 文件不用每个 <code>html</code> 都额外引入一次</p>
<p>考虑用一个 <code>src</code> 源文件夹来存储所有的 <code>.js</code> 源文件</p>
<p>然后用 <code>dist</code> 文件夹来存放由 <code>src</code> 下所有源文件整合生成的一个目标 <code>.js</code> 文件</p>
<p>这样既实现了快速传输的好处，也方便了后续编写 <code>html</code> 文件时，引入 <code>.js</code> 的便利</p>
<p>创建一个脚本实现上述 <strong>整合</strong> 的功能
<code>~/acapp/scripts/compress_game_js.sh</code></p>
<pre tabindex="0"><code>#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &#39;*.js&#39; | sort | xargs cat &gt; ${JS_PATH_DIST}game.js
</code></pre><h4 id="html-文件管理"><code>html</code> 文件管理</h4>
<p>在 <code>templates</code> 文件夹下创建 <code>menu</code>、<code>playground</code>、<code>settings</code>、<code>multiends</code> 四个文件夹，用于存储三个模块和终端的 <code>html</code> 文件</p>
<p>在 <code>multiends</code> 下创建 <code>web.html</code> 文件</p>
<pre tabindex="0"><code>{% load static %}
&lt;!-- Django 中引入全局setting里的变量 static 的语法--&gt;
&lt;head&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.acwing.com/static/jquery-ui-dist/jquery-ui.min.css&#34;&gt;
    &lt;script src=&#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&#34;&gt;&lt;/script&gt;
    &lt;!-- 上述两句引入 jQuery 库 --&gt;
    &lt;!-- 使用引入的变量 static 的语法如下 --&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;{% static &#39;css/game.css&#39; %}&#34;&gt;
    &lt;script src=&#34;{% static &#39;js/dist/game.js&#39; %}&#34;&gt;&lt;/script&gt;
    &lt;!-- 分别引入 css 文件和总的 js 文件 --&gt;
&lt;/head&gt;

&lt;body style=&#34;margin: 0&#34;&gt;
    &lt;div id=&#34;ac_game_12345678&#34;&gt;&lt;/div&gt;
    &lt;script&gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
&lt;/body&gt;
</code></pre><h4 id="views-视图管理"><code>views</code> 视图管理</h4>
<p>在 <code>views</code> 文件夹下新建三个模块的视图文件夹</p>
<p>写一个 <code>index.py</code> 文件，目的是在 <code>web</code> 端被访问时，返回上面写的 <code>web.html</code> 文件</p>
<pre tabindex="0"><code>from django.shortcuts import render

def index(request):
  return render(request, &#34;multiends/web.html&#34;)
</code></pre><h4 id="urls-路由管理"><code>urls</code> 路由管理</h4>
<pre tabindex="0"><code>                                     /-- &#34;&#34; -- index
                                    / -- &#34;menu/&#34; -- menu.index
             / &#34;&#34; --&gt; &#34;game.url&#34; --&gt; 
            /                       \ -- &#34;playground/&#34; -- playground.index
id:scoket -&gt;                         \-- &#34;settings/&#34; -- settings.index
            \
             \ &#34;/admin&#34; -- 到达管理员页面
</code></pre><p><code>~/acapp/acapp/urls.py</code></p>
<pre tabindex="0"><code>from django.contrib import admin
from django.urls import path, include

urlpatterns = [
  path(&#39;&#39;, include(&#39;game.urls.index&#39;)),
  path(&#39;admin/&#39;, admin.site.urls),
]
</code></pre><p><code>~/acapp/game/urls/index.py</code></p>
<pre tabindex="0"><code>from django.urls import path, include
from game.views.index import index

urlpatterns = [ 
    path(&#34;&#34;, index, name=&#34;index&#34;),
    path(&#34;menu/&#34;, include(&#34;game.urls.menu.index&#34;)),
    path(&#34;playground/&#34;, include(&#34;game.urls.playground.index&#34;)),
    path(&#34;settings/&#34;, include(&#34;game.urls.settings.index&#34;))
]
</code></pre><h4 id="网页渲染流程">网页渲染流程</h4>
<p>根据用户的链接，首先进入<code>acapp/urls.py</code>，根据<code>path</code>再进入<code>game/urls/index.py</code>，再根据<code>path</code>进入下一层<code>url</code>或调用相对应的<code>views</code>中的<code>index.py</code>函数，函数接收参数，在网页端渲染<code>templates/multiends</code>下的<code>web.html</code>，<code>html</code>中有<code>JS</code>执行</p>
<p>注意：本项目为前后端分离，即通过<code>JS</code>在<code>client</code>中渲染项目(动态生成页面)，而不是在<code>server</code>渲染项目</p>
<h3 id="修改全局配置">修改全局配置</h3>
<h4 id="设置时区">设置时区</h4>
<p>修改项目的 <strong>UTC</strong> 时间为 <strong>CN</strong> 时间</p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
TIME_ZONE = &#39;Asia/Shanghai&#39; # 原来默认是 UTC
******
</code></pre><h4 id="添加配置文件">添加配置文件</h4>
<p>将新创建的 <code>game</code> 下的 <code>apps.py</code> 中的 <code>GameConfig</code> 加到 <code>settings.py</code> 下</p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
INSTALLED_APPS = [
  &#39;game.apps.GameConfig&#39;,
  ......
]
******
</code></pre><p>声明将静态文件路径 <code>STATIC_ROOT</code> 和 <code>MEDIA_ROOT</code></p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
import os

......

STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)
STATIC_URL = &#39;/static/&#39;

MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)
MEDIA_URL = &#39;/media/&#39;
******
</code></pre><h2 id="创建菜单-menu-界面">创建菜单 <code>menu</code> 界面</h2>
<h3 id="搭建菜单-menu-界面的框架">搭建菜单 <code>menu</code> 界面的框架</h3>
<p>我们采用的 <strong>前后端分离式</strong> 开发，所有的 <strong>html</strong> 渲染都要求在前端完成</p>
<p>开发流程就是，先在 <strong>html</strong> 里创建好一个有 <strong>id</strong> 的 <strong>div</strong></p>
<p>然后利用 <strong>js</strong> 文件，捕获到该 <strong>div</strong>，并进行 <strong>渲染</strong></p>
<p><code>/templates/multiends/web.html</code></p>
<pre tabindex="0"><code>...
    &lt;div id=&#34;ac_game_12345678&#34;&gt;&lt;/div&gt;
    &lt;script&gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
...
</code></pre><p><code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>class AcGame {
    constructor(id) {
        this.id = id; 
        this.$ac_game = $(&#39;#&#39; + id);
        this.menu = new AcGameMenu(this);
    }   
}
</code></pre><p><code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(` 
&lt;div class=&#34;ac-game-menu&#34;&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu); 
}
</code></pre><p><code>css/game.css</code></p>
<pre tabindex="0"><code>.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&#39;/static/image/menu/background.gif&#39;);
    background-size: 100% 100%;
    user-select: none;
}
</code></pre><p>这里的 <strong>代码逻辑</strong> 如下：</p>
<ol>
<li><code>html</code> 页面执行到 <code>js</code> 代码，利用 <code>AcGame类</code> 创建对象 <code>ac_game</code> 同时传递参数 <code>div</code> 的 <code>id</code></li>
<li><code>AcGame</code> 开始执行构造函数，在构造函数中，捕获 <code>html</code> 标签，并利用 <code>AcGameMenu类</code> 创建对象 <code>menu</code>，并将整个对象作为参数下传</li>
<li><code>AcGameMenu</code> 开始执行构造函数，然后创建 <code>html</code> 代码，加到捕获到的 <code>html</code> 代码下</li>
<li>最终成功渲染出背景图片</li>
</ol>
<h3 id="设置菜单-menu-页面的内容">设置菜单 <code>menu</code> 页面的内容</h3>
<p>主要内容就是在主页面中，显示：单人模式、多人模式、设置，三个按钮的选项
<code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&lt;div class=&#34;ac-game-menu&#34;&gt;
    &lt;div class=&#34;ac-game-menu-field&#34;&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&#34;&gt;
            单人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&#34;&gt;
            多人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&#34;&gt;
            设置
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&#39;.ac-game-menu-field-item-single-mode&#39;);
        this.$multi_mode = this.$menu.find(&#39;.ac-game-menu-field-item-multi-mode&#39;);
        this.$settings_mode = this.$menu.find(&#39;.ac-game-menu-field-item-settings-mode&#39;);
    }
}
</code></pre><p><code>css/game.css</code></p>
<pre tabindex="0"><code>.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&#39;/static/image/menu/background.gif&#39;);
    background-size: 100% 100%;
    user-select: none;
}
.ac-game-menu-field {
    width: 20vw;
    position: relative;
    top: 40vh;
    left: 19vh;
}
.ac-game-menu-field-item {
    height: 7vh;
    width: 18vw;
    color: white;
    font-size: 6vh;
    font-style: italic;
    padding: 2vh;
    margin: 1vh 0;
    cursor: pointer;
    text-align: center;
    background-color: rgba(39, 21, 28, 0.6);
    border-radius: 10px;
    letter-spacing: 0.5vw;
}
.ac-game-menu-field-item:hover {
    transform: scale(1.2);
    transition: 100ms;
}
</code></pre><h3 id="添加-单人模式-监听函数--打开游戏界面-功能">添加 &lsquo;单人模式&rsquo; 监听函数 —— 打开游戏界面 功能</h3>
<p>这里要实现的 <strong>逻辑</strong>：</p>
<ol>
<li>点击 &lsquo;单人模式&rsquo; 按钮触发 <code>click</code> 事件，随即触发监听函数，开始执行</li>
<li>关闭 <code>menu</code> 页面</li>
<li>打开 <code>playground</code> 页面</li>
</ol>
<p>因此，我们先简易的实现一个 <code>playground</code> 页面，方便调试该功能
<code>js/src/playground/zbase.js</code></p>
<pre tabindex="0"><code>class AcGamePlayground {
    constructor(root) {
        this.root = root;
        this.$playground = $(`&lt;div&gt;游戏界面&lt;/div&gt;`);

        this.hide();
        this.root.$ac_game.append(this.$playground);

        this.start();
    }
    start() {

    }
    show() {    //打开 playground 界面
        this.$playground.show();
    }
    hide() {    //关闭 playground 界面
        this.$playground.hide();
    }

}
</code></pre><p>在实现监听函数功能之前，先在 <code>/src/zbase.js</code> 即主 <code>js</code> 文件下，利用 <code>AcGamePlayground</code> 类创建好 <code>playground</code> 对象</p>
<p>这样我们就能在前端，渲染出两个界面了，分别是：<code>menu</code> 和 <code>playground</code></p>
<p><code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>class AcGame {
    constructor(id) {
        this.id = id;
        this.$ac_game = $(&#39;#&#39; + id);
        this.menu = new AcGameMenu(this);
        // 把 playground 对象也建好，这样我们就同时有两个界面了
        this.playground = new AcGamePlayground(this);

        this.start();
    }                    
    start() {

    }
}
</code></pre><p>然后，我们开始实现 <code>ac-game-menu-field-item-single-mode</code> 标签的 <code>click</code> 事件的监听函数</p>
<p>其功能之前讲过了，就是关闭 <code>menu</code> 页面，打开 <code>playground</code> 页面</p>
<p><code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&lt;div class=&#34;ac-game-menu&#34;&gt;
    &lt;div class=&#34;ac-game-menu-field&#34;&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&#34;&gt;
            单人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&#34;&gt;
            多人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&#34;&gt;
            设置
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&#39;.ac-game-menu-field-item-single-mode&#39;);
        this.$multi_mode = this.$menu.find(&#39;.ac-game-menu-field-item-multi-mode&#39;);
        this.$settings_mode = this.$menu.find(&#39;.ac-game-menu-field-item-settings-mode&#39;);

        this.start();
    }
    start() {
        this.add_listening_events();
    }
    add_listening_events() {
        let outer = this;
        this.$single_mode.click(function(){
            outer.hide();   // 关闭主页面
            outer.root.playground.show();   // 打开游戏界面
        });
    }

    show() {    //显示menu界面
        this.$menu.show();
    }
    hide() {    //隐藏menu界面
        this.$menu.hide();
    }
}
</code></pre><h1 id="创建游戏界面">创建游戏界面</h1>
<ul>
<li><a href="https://www.acwing.com/solution/content/79181/">4.1 上课笔记 | Andrew1729</a></li>
</ul>
<hr>
<blockquote>
<p><strong>若修改<code>static文件夹</code>下的相关文件，需在<code>~/acapp</code>下执行<code>./scripts/compress_game_js.sh</code>来打包文件</strong></p>
</blockquote>
<h2 id="前端的模块化引入">前端的模块化引入</h2>
<p>由于在 <code>html</code> 代码部分，是将整个 <code>game.js</code> 文件引入</p>
<p>这样会导致在 <code>game.js</code> 中定义的变量，会变成整个网页的 <strong>全局变量</strong>（之后可能会引起变量重名的诸多问题）</p>
<p>因此，我们考虑使用 <strong>模块化引入</strong> 的功能，让网页只引入在 <code>html</code> 中需要的部分</p>
<p>修改 <code>web.html</code></p>
<pre tabindex="0"><code>&lt;!-- 首先，先删掉上面整个引入 game.js 的部分 --&gt;
&lt;!-- 然后，下方创建对象的部分，先使用模块化引入 --&gt;
......
    &lt;script type=&#34;module&#34;&gt;
        import {AcGame} from &#34;{% static &#39;js/dist/game.js&#39; %}&#34;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
......
</code></pre><p>此外，还有修改引入的类，在前面加上 <code>export</code>，如下修改 <code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>export class AcGame {
    ......
}
</code></pre><p>这样，在全局中，只会出现引入的模块，其他的 <code>.js</code> 代码不会出现在全局中</p>
<h2 id="构建游戏界面框架">构建游戏界面框架</h2>
<p><code>static/js/src/playground/zbase.js</code></p>
<pre tabindex="0"><code>......
    this.$playground = $(`&lt;div class=&#34;ac-game-playground&#34;&gt;&lt;/div&gt;`);
......
</code></pre><p><code>game.css</code></p>
<pre tabindex="0"><code>......
.ac-game-playground {
    height: 100%;
    width: 100%;
    user-select: none;  // 禁用右键弹菜单
} 
</code></pre><h2 id="实现游戏引擎框架">实现游戏引擎框架</h2>
<p>游戏中，物体在移动，其实现原理是：每一个动作都会渲染多张图片出来，然后图片快速的切换，从而实现动的过程</p>
<p>因此，需要先实现一个游戏引擎的基类 <code>AcGameObject</code> ，使得每帧能渲染一张图片出来</p>
<p>该基类需要具备的功能有：</p>
<ol>
<li><code>start()</code> 在游戏开始的第一帧时需要执行的任务（一般是创建对象）</li>
<li><code>update()</code> 在游戏开始后的每一帧均会执行的任务（一般是渲染当前对象的各种状态）</li>
<li><code>on_destroy()</code> 删掉该物体前需要执行的任务（一般是删掉动画，或者给对手加分）</li>
<li><code>destroy()</code> 删掉该物体</li>
</ol>
<p>根据上述逻辑，我们就可以基本搭建出来一个游戏引擎的基类了，具体如下：
<code>/static/js/playground/ac_game_object/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> AC_GAME_OBJECTS = [];   <span style="color:#007f7f">// 用于记录当前画布中，需要渲染的对象有哪些
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor() {
</span></span><span style="display:flex;"><span>        AC_GAME_OBJECTS.push(<span style="color:#fff;font-weight:bold">this</span>);  <span style="color:#007f7f">// 将当前新建的对象，加入到全局的画布中去，参与渲染
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.has_called_start = <span style="color:#fff;font-weight:bold">false</span>;  <span style="color:#007f7f">// 是否执行过 start 函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.timedelta = <span style="color:#ff0;font-weight:bold">0</span>;             <span style="color:#007f7f">// 当前帧距离上一帧的时间间隔
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 该数据记录是为了后续计算速度等参数的
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    }
</span></span><span style="display:flex;"><span>    start() {   <span style="color:#007f7f">// 只会在第一帧执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {  <span style="color:#007f7f">// 每一帧均会执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    on_destroy() {  <span style="color:#007f7f">// 在被销毁前执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    destroy() { <span style="color:#007f7f">// 删掉该物体
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.on_destroy();  <span style="color:#007f7f">//删掉该物体前，执行删前的操作
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 在全局渲染物体中，找到该物体，并将其删掉
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; AC_GAME_OBJECTS.length; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (AC_GAME_OBJECTS[i] === <span style="color:#fff;font-weight:bold">this</span>) {  <span style="color:#007f7f">// 三等号，在js里额外加了一层类型相等约束
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                AC_GAME_OBJECTS.splice(i, <span style="color:#ff0;font-weight:bold">1</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">break</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> last_timestamp;
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> AC_GAME_ANIMATION = <span style="color:#fff;font-weight:bold">function</span>(timestamp) {  <span style="color:#007f7f">// 回调函数，实现：每一帧重绘时，都会执行一遍
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; AC_GAME_OBJECTS.length; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> obj = AC_GAME_OBJECTS[i];
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (!obj.has_called_start) { <span style="color:#007f7f">// 如果还未执行初始帧动作，就先执行
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            obj.start();
</span></span><span style="display:flex;"><span>            obj.has_called_start = <span style="color:#fff;font-weight:bold">true</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">else</span> {  <span style="color:#007f7f">// 执行过初始帧，就执行每一帧的任务
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            obj.timedelta = timestamp - last_timestamp;
</span></span><span style="display:flex;"><span>            obj.update();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    last_timestamp = timestamp; <span style="color:#007f7f">// 更新最后一次时间戳
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    requestAnimationFrame(AC_GAME_ANIMATION);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>requestAnimationFrame(AC_GAME_ANIMATION);   <span style="color:#007f7f">// JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等)
</span></span></span></code></pre></div><blockquote>
<p><strong>接下来所有的一切游戏，都是基于这个引擎的基类完成的</strong></p>
</blockquote>
<h2 id="实现游戏地图功能">实现游戏地图功能</h2>
<p>目标：实现一个每一秒都在渲染的纯黑背景</p>
<p>虽然现阶段要实现的地图较为简单，但为了后期的拓展性，故还是考虑新建一个文件夹来完成</p>
<p>然后在 <code>js</code> 中，已经封装好了一个 <code>canvas</code> 的 <code>api</code> 来帮助实现背景画布，直接调用即可</p>
<p>先铺开画布，然后设置为黑色</p>
<p><code>static/js/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// $(&#39;.playground&#39;)对象已经在 css 文件里渲染出高宽了
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 现在把他的高宽存下来，往下传递
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.width = <span style="color:#fff;font-weight:bold">this</span>.$playground.width();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.height = <span style="color:#fff;font-weight:bold">this</span>.$playground.height();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.game_map = <span style="color:#fff;font-weight:bold">new</span> GameMap(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .....
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>static/js/playground/game-map/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> GameMap <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {    <span style="color:#007f7f">// 继承自游戏引擎基类
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    constructor(playground) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();    <span style="color:#007f7f">// 自函数功能：调用基类的构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$canvas = $(<span style="color:#0ff;font-weight:bold">`&lt;canvas&gt;&lt;/canvas&gt;`</span>); <span style="color:#007f7f">// 创建一个canvas的jQuery对象，就是我们要实现的画布
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.$canvas[<span style="color:#ff0;font-weight:bold">0</span>].getContext(<span style="color:#0ff;font-weight:bold">&#39;2d&#39;</span>); <span style="color:#007f7f">// jQuery对象是一个数组，第一个索引是html对象
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 设置画布的宽高
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width = <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height = <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground.$playground.append(<span style="color:#fff;font-weight:bold">this</span>.$canvas);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {  <span style="color:#007f7f">// 游戏地图每帧都要渲染
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#0ff;font-weight:bold">&#34;rgba(0, 0, 0, 0.2)&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillRect(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width, <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><h2 id="实现玩家显示功能">实现玩家显示功能</h2>
<p>毛坯版玩家显示，每个玩家定义成一个圆，然后渲染在前端</p>
<p>需要对于玩家类定义多个参数，以方便日后拓展：</p>
<ol>
<li><code>x</code> 当前位置的横坐标</li>
<li><code>y</code> 当前位置的纵坐标</li>
<li><code>radius</code> 当前的半径</li>
<li><code>speed</code> 当前的速度</li>
<li><code>is_me</code> 该对象是否是当前玩家操控的对象（一是区别于 bot，二是区别于 日后联机的其他玩家）</li>
</ol>
<p><code>static/js/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players = [];  <span style="color:#007f7f">// 存放当前游戏中的所有玩家
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 将玩家加入游戏中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;white&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">true</span>));
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .....
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>static/js/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, x, y, radius, color, speed, is_me) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 把信息都存下来
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.is_me = is_me;
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 用于浮点数运算
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.eps = <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {  <span style="color:#007f7f">// 渲染一个圆
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    on_destroy() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="实现玩家移动功能">实现玩家移动功能</h2>
<p>移动的实现逻辑很简单，就是让每帧渲染的圆的位置发生移动即可</p>
<p>上述简单逻辑的实现如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(....)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#ff0;font-weight:bold">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">1</span>;
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后我们来实现一个向鼠标点击位置移动的功能</p>
<p>这就需要设置一个 <code>click</code> 事件的监听函数，分别传递：</p>
<ol>
<li>鼠标点击事件</li>
<li>鼠标点击位置的横坐标</li>
<li>鼠标点击位置的纵坐标</li>
</ol>
<p>然后开始让圆的位置逐步向鼠标点击位置进行移动</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>start() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 对于用户玩家，加上监听函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>add_listening_events() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 把鼠标右键调出菜单栏的功能关掉
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.on(<span style="color:#0ff;font-weight:bold">&#34;contextmenu&#34;</span>, <span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 把右键控制移动功能加上
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 左键:1 中键:2 右键:3
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            outer.move_to(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后，我们来实现移动功能的函数 <code>move_to(tx, ty)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(...){
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// x方向上的移动速度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// y方向上的移动速度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;   <span style="color:#007f7f">// 剩余移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>get_dist (x1, y1, x2, y2) { <span style="color:#007f7f">// 求两点的欧几里得距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> dx = x2 - x1;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> dy = y2 - y1;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">Math</span>.sqrt(dx * dx + dy * dy);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>move_to(tx, ty) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 计算移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#fff;font-weight:bold">this</span>.get_dist(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, tx, ty);
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 计算移动角度，api接口：atan2(dy, dx)
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(ty - <span style="color:#fff;font-weight:bold">this</span>.y, tx - <span style="color:#fff;font-weight:bold">this</span>.x);
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 位移 1 个单位长度（向着矢量方向移动到单位圆上）
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle);  <span style="color:#007f7f">// 极直互化
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 浮点数精度运算
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 计算单位帧里的移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">let</span> moved = <span style="color:#fff;font-weight:bold">Math</span>.min(<span style="color:#fff;font-weight:bold">this</span>.move_length, <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * moved;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * moved;
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 还要减掉移动的距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.move_length -= moved;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>这样就实现了玩家的移动功能了，可以登录 <code>id:socket</code> 调试该功能</p>
<h2 id="实现火球技能的功能">实现火球技能的功能</h2>
<p>火球对象的建立与玩家基本一致，直接照搬，在从细节上改改即可</p>
<p><code>js/src/playground/skill/fireball/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> FireBall <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, player, x, y, radius, vx, vy, color, speed, move_length, damage) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.player = player;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = vx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = vy;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = move.length;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.damage = damage;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.eps = <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.destroy();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> moved = <span style="color:#fff;font-weight:bold">Math</span>.min(<span style="color:#fff;font-weight:bold">this</span>.move_length, <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * moved;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * moved;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.move_length -= moved;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span> * Pi, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} 
</span></span></code></pre></div><p>然后在玩家身上实现发火球的功能</p>
<p>基本实现逻辑：当前选中了火球技能，鼠标左键点击一处，向该处发射一个火球</p>
<p>因此，为了知道用户是否选择了技能，需要加一个键盘触发事件监听函数，然后加一个鼠标左键触发事件监听函数</p>
<p>然后发射一个火球即可</p>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(...) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.cur_skill = <span style="color:#fff;font-weight:bold">null</span>;  <span style="color:#007f7f">// 记录当前选择的技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>add_listening_events() {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 左键:1 中键:2 右键:3
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            outer.move_to(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">1</span>) {     <span style="color:#007f7f">// 鼠标左键事件
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">if</span> (outer.cur_skill === <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>) {   <span style="color:#007f7f">// 当前已经选中火球技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                outer.shoot_fireball(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        outer.cur_skill = <span style="color:#fff;font-weight:bold">null</span>; <span style="color:#007f7f">// 清空当前技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    });
</span></span><span style="display:flex;"><span>    $(<span style="color:#fff;font-weight:bold">window</span>).keydown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">81</span>) {       <span style="color:#007f7f">// 键盘按下事件
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            outer.cur_skill = <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>shoot_fireball(tx, ty) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 确定火球的参数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> x = <span style="color:#fff;font-weight:bold">this</span>.x, y = <span style="color:#fff;font-weight:bold">this</span>.y; <span style="color:#007f7f">// 火球发射点就是当前玩家的位置
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> radius = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.01</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(ty - <span style="color:#fff;font-weight:bold">this</span>.y, tx - <span style="color:#fff;font-weight:bold">this</span>.x);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle), vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> color = <span style="color:#0ff;font-weight:bold">&#34;orange&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> speed = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.5</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> move_length = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">1.0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> damage = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.01</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> FireBall(<span style="color:#fff;font-weight:bold">this</span>.playground, <span style="color:#fff;font-weight:bold">this</span>, x, y, radius, vx, vy, color, speed, move_length, damage);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这样就成功实现了玩家发射火球的功能了</p>
<h2 id="实现单人模式下的人机功能">实现单人模式下的人机功能</h2>
<p>先创建好 5 个人机
<code>playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#007f7f">//创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">for</span> (len i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;blue&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>这样创建出来的 5 个人机是不会行动的</p>
<p>我们写一个简易的 AI 程序，让他们也会移动</p>
<p>这里实现的逻辑是：每次随机一个目的地，向目的地移动，然后再随机一个目的地，循环下去</p>
<p>根据该逻辑，修改两个函数即可</p>
<p><code>playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>start() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 对于用户玩家，加上监听函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events();
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> tx = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> ty = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_to(tx, ty);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span> update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (!<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 如果是人机，停下来时再随机一个方向前进
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">let</span> tx = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> ty = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.move_to(tx, ty);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>on_destroy() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#fff;font-weight:bold">this</span>.playground.players.length; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.playground.players[i] === <span style="color:#fff;font-weight:bold">this</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.playground.players.splice(i, <span style="color:#ff0;font-weight:bold">1</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="实现技能命中效果碰撞检测功能">实现技能命中效果（碰撞检测功能）</h2>
<p>实现逻辑：检测两个圆的中心距离是否小于两个圆的半径之和</p>
<p>小于等于时，代表发生碰撞，开始执行命中效果：</p>
<ol>
<li>被击中用户掉血</li>
<li>被击中用户收到向后击退效果</li>
</ol>
<p>碰撞检测写在火球类里，击退效果写在玩家类里</p>
<p><code>fireball/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (...) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 碰撞检测
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#fff;font-weight:bold">this</span>.playground.players.length; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> player = <span style="color:#fff;font-weight:bold">this</span>.playground.players[i];
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.player !== player &amp;&amp; <span style="color:#fff;font-weight:bold">this</span>.is_collision(player)) {  <span style="color:#007f7f">// 碰撞发生一定是在非施法者身上
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                <span style="color:#fff;font-weight:bold">this</span>.attack(player);    <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>get_dist(x1, y1, x2, y2) {  <span style="color:#007f7f">// 获得两点的欧几里得距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">let</span> dx = x2 - x1;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> dy = y2 - y1;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">Math</span>.sqrt(dx * dx + dy * dy);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>is_collision(player) {  <span style="color:#007f7f">// 检测两个圆的中心距离是否小于两个圆的半径之和
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> distance = <span style="color:#fff;font-weight:bold">this</span>.get_dist(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, player.x, player.y);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (distance &lt; (<span style="color:#fff;font-weight:bold">this</span>.radius + player.radius))
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">true</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>attack(player) {    <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(player.y - <span style="color:#fff;font-weight:bold">this</span>.y, player.x - <span style="color:#fff;font-weight:bold">this</span>.x);   <span style="color:#007f7f">// 计算角度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    player.is_attacked(angle, <span style="color:#fff;font-weight:bold">this</span>.damage); <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.destroy(); <span style="color:#007f7f">// 火球命中后，自然消失
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span></code></pre></div><p><strong>被击退的时候，原来的移动速度应该置为 0，当前的移动应该转为向被击中方向上的移动</strong>
<code>player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>is_attacked(angle, damage) {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.radius -= damage;  <span style="color:#007f7f">// 受伤，半径减少
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.radius &lt; <span style="color:#ff0;font-weight:bold">10</span>) { <span style="color:#007f7f">// 当半径小于10像素时，代表死亡
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.destroy();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 开始执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.damage_vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.damage_vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.damage_speed = damage * <span style="color:#ff0;font-weight:bold">100</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.speed *= <span style="color:#ff0;font-weight:bold">0.5</span>;  <span style="color:#007f7f">// 被击中以后移动速度减半
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.damage_speed &gt; <span style="color:#fff;font-weight:bold">this</span>.eps) {   <span style="color:#007f7f">// 当前仍处于击退效果中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.damage_vx * <span style="color:#fff;font-weight:bold">this</span>.damage_speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.damage_vy * <span style="color:#fff;font-weight:bold">this</span>.damage_speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.damage_speed *= <span style="color:#fff;font-weight:bold">this</span>.friction; <span style="color:#007f7f">// 击退速度乘以摩擦系数，已达到削减的目的
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="被击中以后的粒子效果特效">被击中以后的粒子效果特效</h2>
<p>实现逻辑：被击中以后，在玩家附近随机生成一些粒子小球</p>
<p>因此我们要先实现 粒子小球 对象</p>
<p><code>static/js/src/playground/particle/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Particle <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, x, y, radius, vx, vy, color, speed) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = vx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = vy;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.friction = <span style="color:#ff0;font-weight:bold">0.9</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.speed &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.destroy;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed *= <span style="color:#fff;font-weight:bold">this</span>.friction;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} 
</span></span></code></pre></div><p>然后我们在被击退功能模块，实现生成粒子小球的效果</p>
<ul>
<li>粒子小球释放弧度为 $[0,2π)$ 的随机数
<ul>
<li>粒子小球的 x, y 分量比率根据弧度来设定</li>
</ul>
</li>
<li>粒子小球的起始坐标应与玩家的坐标相同</li>
<li>粒子小球的颜色与玩家颜色相同</li>
<li>粒子小球的速度为玩家移动速度的 $10$ 倍</li>
</ul>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>is_attacked(angle, damage) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 粒子小球效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">10</span> + <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> x = <span style="color:#fff;font-weight:bold">this</span>.x, y = <span style="color:#fff;font-weight:bold">this</span>.y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> radius = <span style="color:#fff;font-weight:bold">this</span>.radius * <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI * <span style="color:#fff;font-weight:bold">Math</span>.random();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle), vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> color = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> speed = <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#ff0;font-weight:bold">10</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">new</span> Particle(<span style="color:#fff;font-weight:bold">this</span>.playground, x, y, radius, vx, vy, color, speed);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="一些小优化">一些小优化</h2>
<h3 id="人机随机颜色">人机随机颜色</h3>
<p><code>js/src/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(root) {
</span></span><span style="display:flex;"><span>    ......
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#fff;font-weight:bold">this</span>.get_random_color(), <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ......
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>get_random_color() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> colors = [<span style="color:#0ff;font-weight:bold">&#34;blue&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;red&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;pink&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;grey&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;green&#34;</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> colors[<span style="color:#fff;font-weight:bold">Math</span>.floor(<span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">5</span>)];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="人机ai随机攻击操作">人机AI随机攻击操作</h3>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor (...) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.spent_time = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// 初始人机冷却攻击时间
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.spent_time += <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (!<span style="color:#fff;font-weight:bold">this</span>.is_me &amp;&amp; <span style="color:#fff;font-weight:bold">this</span>.spent_time &gt; <span style="color:#ff0;font-weight:bold">4</span> &amp;&amp; <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">180</span> &lt; <span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> player = <span style="color:#fff;font-weight:bold">this</span>.playground.players[<span style="color:#fff;font-weight:bold">Math</span>.floor(<span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.players.length)];
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.shoot_fireball(player.x, player.y);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="部署nginx与对接acappஐ">部署nginx与对接acappஐ</h1>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3257028/">5. 部署nginx与对接acapp | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/79244/">5.1 上课笔记 | Andrew1729</a></li>
<li><a href="https://www.acwing.com/solution/content/78903/">5.1. 上课笔记 | 菊花</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/364622127">Ngnix 介绍</a></li>
<li><a href="https://www.jianshu.com/p/36187963b553">nginx 和uwsgi的区别与作用</a></li>
</ul>
<hr>
<h2 id="nginx是什么">Nginx是什么？</h2>
<blockquote>
<p><strong>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器</strong></p>
<p><strong>Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现</strong></p>
<p><strong>Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换</strong></p>
</blockquote>
<h2 id="uwsgi是什么">uWSGI是什么？</h2>
<blockquote>
<p><strong>uWSGI是一个全功能的HTTP服务器，实现了WSGI、uwsgi、http等协议</strong></p>
<p><strong>它要做的就是把HTTP协议转化成语言支持的网络协议。比如把HTTP协议转化成WSGI协议，让Python可以直接使用</strong></p>
<p><strong>WSGI协议是Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口</strong></p>
<p><strong>简单来说uWSGI就是用来沟通nginx和django的一座桥梁</strong></p>
</blockquote>
<h2 id="nginxuwsgidiango-工作流程">Nginx+uWSGI+Diango 工作流程</h2>
<blockquote>
<p><strong><code>nginx</code> 是对外的服务接口，外部浏览器通过<code>url</code>访问<code>nginx</code></strong></p>
<p><strong><code>nginx</code> 接收到浏览器发送过来的<code>http</code>请求，将包进行解析</strong></p>
<p><strong>分析<code>url</code>，如果是静态文件请求就直接访问用户给<code>nginx</code>配置的静态文件目录，直接返回用户请求的静态文件</strong></p>
<p><strong>如果不是静态文件，而是一个动态的请求，那么<code>nginx</code>就将请求转发给<code>uwsgi</code>，<code>uwsgi</code> 接收到请求之后将包进行处理，处理成<code>wsgi</code>可以接受的格式，并发给<code>wsgi</code>，<code>wsgi</code> 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给<code>wsgi</code>，<code>wsgi</code>将返回值进行打包，打包成<code>uwsgi</code>能够接收的格式，<code>uwsgi</code>接收<code>wsgi</code> 发送的请求，并转发给<code>nginx</code>, <code>nginx</code>最终将返回值返回给浏览器</strong></p>
</blockquote>
<h2 id="uwsgi服务的开启关闭">uwsgi服务的开启&amp;&amp;关闭</h2>
<ul>
<li>在<code>~/acapp</code>启动uwsgi服务：<strong><code>uwsgi --ini scripts/uwsgi.ini</code></strong></li>
<li>关闭uwsgi服务：<code>sudo pkill -f uwsgi -9</code></li>
</ul>
<h2 id="针对-acapp-的优化">针对 acapp 的优化</h2>
<h3 id="打包脚本优化">打包脚本优化</h3>
<p>由于现在 <strong>发布版本的脚本文件</strong> 用的是打包在根目录里的 <strong>static</strong> 文件夹</p>
<p>每次修改好 <strong>static</strong> 文件夹后，不仅需要对 <strong>js</strong> 文件打包，还需要对 <strong>static</strong> 文件夹打包</p>
<p>不放把 &ldquo;将static文件夹打包&rdquo; 的 <strong>shell</strong> 代码一起加入 <strong>js</strong> 打包脚本中，从而实现一键打包</p>
<p><code>scripts/compress_game_js.sh</code></p>
<pre tabindex="0"><code>#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &#39;*.js&#39; | sort | xargs cat &gt; ${JS_PATH_DIST}game.js

echo &#34;yes&#34; | python3 manage.py collectstatic
</code></pre><h3 id="鼠标点击事件的相对偏移">鼠标点击事件的相对偏移</h3>
<p>由于写游戏界面的时候，玩家移动是按照鼠标相对于当前整个浏览器取的位置参数 <code>e.clientX</code></p>
<p>而 <code>acapp</code> 里，每个应用是一个小窗口，鼠标点击位置的参数应当是 <strong>相对于整个游戏窗口的位置参数</strong></p>
<p>所有会导致出现，点击的位置与移动的位置不同，这里需要做出小优化</p>
<p>优化的逻辑 :</p>
<ol>
<li>$clientX−窗口左侧到浏览器左侧的距离=玩家的目标X$</li>
<li>$clientY−窗口上侧到浏览器上侧的距离=玩家的目标Y$
这就要用到一个 <code>js</code> 的 <code>API</code> 了 : <code>getBoundingClientRect()</code></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>rectObject = object.getBoundingClientRect();
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>rectObject.top : 元素上边到视窗上边的距离;
</span></span><span style="display:flex;"><span>rectObject.right : 元素右边到视窗左边的距离;
</span></span><span style="display:flex;"><span>rectObject.bottom : 元素下边到视窗上边的距离;
</span></span><span style="display:flex;"><span>rectObject.left : 元素左边到视窗左边的距离;
</span></span><span style="display:flex;"><span>rectObject.width : 是元素自身的宽
</span></span><span style="display:flex;"><span>rectObject.height : 是元素自身的高
</span></span></code></pre></div><p><code>player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span> add_listening_events() {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 创建 rect 对象
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">const</span> rect = outer.ctx.canvas.getBoundingClientRect();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#007f7f">// 调整偏移量
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            outer.move_to(e.clientX - rect.left, e.clientY - rect.top);
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (outer.cur_skill === <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#007f7f">// 调整偏移量
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                outer.shoot_fireball(e.clientX - rect.left, e.clientY - rect.top);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h3 id="将菜单界面重新设为主界面">将菜单界面重新设为主界面</h3>
<p><code>js/zbase.js</code> 的注释取消，使之创建出 <strong>menu</strong> 对象</p>
<p><code>js/playground/zbase.js</code> 的注释取消，并设置逻辑，让 <strong>playground</strong> 打开后，才进行游戏界面初始化</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.root = root;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$playground = $(<span style="color:#0ff;font-weight:bold">`&lt;div class=&#34;ac-game-playground&#34;&gt;&lt;/div&gt;`</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.hide();    <span style="color:#007f7f">// 初始时隐藏
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 游戏界面生成代码在下面展示 playground 时执行
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.start();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    show() {    <span style="color:#007f7f">// 打开 playground 界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.$playground.show();
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 开始生成游戏界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.root.$ac_game.append(<span style="color:#fff;font-weight:bold">this</span>.$playground);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.width = <span style="color:#fff;font-weight:bold">this</span>.$playground.width();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.height = <span style="color:#fff;font-weight:bold">this</span>.$playground.height();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.game_map = <span style="color:#fff;font-weight:bold">new</span> GameMap(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players = [];  <span style="color:#007f7f">// 存放当前游戏中的所有玩家
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 将玩家加入游戏中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;white&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">true</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#fff;font-weight:bold">this</span>.get_random_color(), <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="调整-css-文件适应窗口">调整 css 文件，适应窗口</h3>
<p>在设置 <code>web</code> 网页的时候，有些设置了绝对值，可能对于窗口化的 <code>acapp</code> 显示效果差</p>
<p>将他们修改成相对数值</p>
<p><code>game.css</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>.ac-game-menu-field {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    top: <span style="color:#ff0;font-weight:bold">40</span>%;
</span></span><span style="display:flex;"><span>    left: <span style="color:#ff0;font-weight:bold">20</span>%;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.ac-game-menu-field-item {
</span></span><span style="display:flex;"><span>    height: <span style="color:#ff0;font-weight:bold">6</span>vh;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    font-size: <span style="color:#ff0;font-weight:bold">4</span>vh;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h1 id="创建账号系统">创建账号系统</h1>
<p><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3294700/">6. 创建账号系统 | 讲义</a></p>
<hr>
<h2 id="用户名密码登录">用户名密码登录</h2>
<ul>
<li><a href="https://www.acwing.com/blog/content/12373/">6.1 用户名密码登录 | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/79314/">6.1 上课笔记 | Andrew1729</a></li>
<li><a href="https://www.acwing.com/solution/content/75831/">6.1 上课笔记 | 吃饱喝足不学习</a></li>
</ul>
<hr>
<h3 id="客户端请求与django响应流程">客户端请求与Django响应流程</h3>
<blockquote>
<p><strong>用户在客户端通过<code>$.ajax</code>发送请求，根据<code>urls</code>路由到对应的<code>views</code>中的函数，处理<code>request</code>后返回<code>JsonResponse</code> 至客户端</strong></p>
</blockquote>
<h3 id="前期准备工作">前期准备工作</h3>
<p>做开发，先开启调试模式，如果不开启，服务器一旦运行错误，就只返回 <code>Error</code> 报错
<code>settings.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>DEBUG = <span style="color:#fff;font-weight:bold">True</span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>不过 <code>django</code> 自带的 <code>User</code> 表并不能满足我们的需求，因此我们需要自己额外建表</p>
<h3 id="创建用户表">创建用户表</h3>
<p>所有的数据表都存在 <code>models</code> 里</p>
<p>我们在 <code>models</code> 里创建一个 <code>player</code> 文件夹，用于存储所有的 <code>player</code> 相关的表</p>
<p>然后对文件夹初始化 <code>__init__.py</code>，接着扩充成一个我们需要的数据表</p>
<p><code>game/models/player/player.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.db <span style="color:#fff;font-weight:bold">import</span> models
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.contrib.auth.models <span style="color:#fff;font-weight:bold">import</span> User
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player(models.Model): <span style="color:#007f7f"># Player 类继承自 Model 类</span>
</span></span><span style="display:flex;"><span>    user = models.OneToOneField(User, on_delete=models.CASCADE)
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f"># 说明Player是从User表扩充过来的，每一个player都与一个user是一一对应关联关系</span>
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f"># 后一个参数是指，当user被删除后，对应的player也要被删除</span>
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f"># （感觉就是外键的意思）</span>
</span></span><span style="display:flex;"><span>    photo = models.URLField(max_length=<span style="color:#ff0;font-weight:bold">256</span>, blank=<span style="color:#fff;font-weight:bold">True</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f"># 用于存储用户的头像的url</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f"># 指定每个player数据展示在前台的数据</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">def</span> __str__(self):
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">str</span>(self.user)    <span style="color:#007f7f"># 展示用户的用户名</span>
</span></span></code></pre></div><p>将定义的表，注册到后台 <code>admin</code> 页面中</p>
<p><code>game/admin.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.models.player.player <span style="color:#fff;font-weight:bold">import</span> Player
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>admin.site.register(Player)
</span></span></code></pre></div><p>然后将创建的数据表更新到 <code>django</code> 的数据库中去</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f00">$</span> python3 manage.py makemigrations
</span></span><span style="display:flex;"><span>&gt; Migrations <span style="color:#fff;font-weight:bold">for</span> <span style="color:#0ff;font-weight:bold">&#39;game&#39;</span>:
</span></span><span style="display:flex;"><span>&gt;   game/migrations/<span style="color:#ff0;font-weight:bold">0001</span>_initial.py
</span></span><span style="display:flex;"><span>&gt;     - Create model Player
</span></span><span style="display:flex;"><span><span style="color:#f00">$</span> 
</span></span><span style="display:flex;"><span><span style="color:#f00">$</span> python3 manage.py migrate
</span></span><span style="display:flex;"><span>&gt; Operations to perform:
</span></span><span style="display:flex;"><span>&gt;   Apply <span style="color:#fff;font-weight:bold">all</span> migrations: admin, auth, contenttypes, game, sessions
</span></span><span style="display:flex;"><span>&gt; Running migrations:
</span></span><span style="display:flex;"><span>&gt;   Applying game<span style="color:#ff0;font-weight:bold">.0001</span>_initial... OK
</span></span></code></pre></div><p>然后重启一下服务，就可以在管理员页面看到新建的数据库了</p>
<h3 id="实现客户端的类型判别acapp-or-web">实现客户端的类型判别（ACAPP or WEB）</h3>
<p>由于我们实现的项目是前后端分离类型，因此对于不同的客户端，前端要控制生成不同的页面</p>
<p>为了增强扩展性，故这里要实现客户端类型的判别</p>
<p><strong>y总</strong> 已经提前写好了 <strong>ACAPP</strong> 的接口，如果用户用的是 <strong>ACAPP</strong> 访问，则在新建对象 <strong>ac_game</strong> 时，会额外传递一个参数</p>
<p>我们只需按照这个接口去完成扩充即可</p>
<blockquote>
<p><strong>之后写小程序之类的同理，额外传一个接口</strong></p>
</blockquote>
<p><code>js/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">export</span> <span style="color:#fff;font-weight:bold">class</span> AcGame {
</span></span><span style="display:flex;"><span>    constructor(id, AcWingOS) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.id = id;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$ac_game = $(<span style="color:#0ff;font-weight:bold">&#39;#&#39;</span> + id);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.AcWingOS = AcWingOS;   <span style="color:#007f7f">//如果是acapp端，该变量就会带着一系列y总提供的接口
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.menu = <span style="color:#fff;font-weight:bold">new</span> AcGameMenu(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground = <span style="color:#fff;font-weight:bold">new</span> AcGamePlayground(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.start();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="构建登录功能框架">构建登录功能框架</h3>
<p>基本逻辑 : 用户访问页面 -&gt; 进入登录页面 -&gt; 提交登录信息 -&gt; 核对登录信息 -&gt; 返回登陆结果和其他信息</p>
<p>每实现一个函数，就需要实现三个部分：</p>
<ol>
<li><code>views</code> : 实现具体的调用数据库的逻辑</li>
<li><code>urls</code> : 实现一个路由</li>
<li><code>js</code> : 前端实现GET上述接口的过程</li>
</ol>
<p>欲实现流程 :</p>
<ol>
<li>用户访问网站，通过先前完成的路由，访问到 <code>web.html </code></li>
<li><code>web.html</code> 中的 <code>js</code> 部分创建了一个 <code>AcGame</code> 对象</li>
<li><code>AcGame</code> 对象创建的过程中，生成了 <code>Settings</code> 对象</li>
<li><code>Settings</code> 对象创建完成后，调用 <code>Settings.start()</code> 函数</li>
<li><code>Settings.start()</code> 函数调用了 <code>Settings.getinfo()</code> 函数</li>
<li><code>Settings.getinfo()</code> 函数中执行了 <code>ajax</code> 向 <code>getinfo</code> 接口发起一个含参数 <code>platform</code> 的 <code>GET</code> 请求</li>
<li>通过 <code>urls</code> 路由的实现，最终定位到 <code>views/settings/getinfo.py</code> 文件的 <code>getinfo(request)</code> 函数</li>
<li>根据传递过来的 <code>platform</code> 函数，实现不同的 <code>JsonResponse</code> 返回</li>
<li><code>Settings.getinfo()</code> 接受到了 <code>response</code> 完成上述基本逻辑</li>
</ol>
<h4 id="views">views</h4>
<p><code>views/settings/getinfo.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.http <span style="color:#fff;font-weight:bold">import</span> JsonResponse
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.models.player.player <span style="color:#fff;font-weight:bold">import</span> Player
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> getinfo_acapp(request):
</span></span><span style="display:flex;"><span>    player = Player.objects.all()[<span style="color:#ff0;font-weight:bold">0</span>]    <span style="color:#007f7f"># 取出数据库中第一个用户(调试该功能)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;username&#39;</span>: player.user.username,
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;photo&#39;</span>: player.photo,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> getinfo_web(request):
</span></span><span style="display:flex;"><span>    player = Player.objects.all()[<span style="color:#ff0;font-weight:bold">0</span>]    <span style="color:#007f7f"># 取出数据库中第一个用户(调试该功能)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>,
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;username&#39;</span>: player.user.username,
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;photo&#39;</span>: player.photo,
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> getinfo(request):   <span style="color:#007f7f"># 处理请求</span>
</span></span><span style="display:flex;"><span>    platform = request.GET.get(<span style="color:#0ff;font-weight:bold">&#39;platform&#39;</span>)  <span style="color:#007f7f"># 根据请求的平台不同，进行不同返回处理</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> platform == <span style="color:#0ff;font-weight:bold">&#34;ACAPP&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> getinfo_acapp(request)
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">elif</span> platform == <span style="color:#0ff;font-weight:bold">&#34;WEB&#34;</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> getinfo_web(request)
</span></span></code></pre></div><h4 id="urls">urls</h4>
<p><code>urls/settings/index.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.urls <span style="color:#fff;font-weight:bold">import</span> path
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.views.settings.getinfo <span style="color:#fff;font-weight:bold">import</span> getinfo
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>urlpatterns = [
</span></span><span style="display:flex;"><span>    path(<span style="color:#0ff;font-weight:bold">&#34;getinfo/&#34;</span>, getinfo, name=<span style="color:#0ff;font-weight:bold">&#34;settings_getinfo&#34;</span>),
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p>路由建立好以后，访问 <code>xxxx/settings/getinfo</code>，可以看到 <code>getinfo.py</code> 返回的 <code>JSON</code> 类型的 <code>JSONResponse</code></p>
<h4 id="js">js</h4>
<p>网页刚访问时，应先将 <code>menu</code> 关闭，然后打开登录界面，随意先修改一个让 <code>menu</code> 初始关闭</p>
<p><code>static/js/src/menu/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGameMenu {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$menu.hide();
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span></code></pre></div><p><code>static/js/src/settings/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Settings {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.root = root;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.platform = <span style="color:#0ff;font-weight:bold">&#34;WEB&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.root.AcWingOS) <span style="color:#fff;font-weight:bold">this</span>.platform = <span style="color:#0ff;font-weight:bold">&#34;ACAPP&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.start();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.getinfo();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    register() {    <span style="color:#007f7f">// 打开注册界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    }
</span></span><span style="display:flex;"><span>    login() {       <span style="color:#007f7f">// 打开登录界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    }
</span></span><span style="display:flex;"><span>    getinfo() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>        $.ajax({
</span></span><span style="display:flex;"><span>            url: <span style="color:#0ff;font-weight:bold">&#34;https://app1117.acapp.acwing.com.cn/settings/getinfo/&#34;</span>,
</span></span><span style="display:flex;"><span>            type: <span style="color:#0ff;font-weight:bold">&#34;GET&#34;</span>,
</span></span><span style="display:flex;"><span>            data: {
</span></span><span style="display:flex;"><span>                platform: outer.platform,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            success: <span style="color:#fff;font-weight:bold">function</span>(resp) {
</span></span><span style="display:flex;"><span>                console.log(resp);
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">if</span> (resp.result === <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>) {    <span style="color:#007f7f">// 登录成功，关闭登录界面，打开主菜单
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                    outer.hide();
</span></span><span style="display:flex;"><span>                    outer.root.menu.show();
</span></span><span style="display:flex;"><span>                } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>                    outer.login();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    hide() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    show() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后不要忘记在 <code>根js</code> 下创建对象</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">export</span> <span style="color:#fff;font-weight:bold">class</span> AcGame {
</span></span><span style="display:flex;"><span>    constructor(id, AcWingOS) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.settings = <span style="color:#fff;font-weight:bold">new</span> Settings(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这样基本框架就完成了</p>
<h4 id="完善-http-请求的函数">完善 HTTP 请求的函数</h4>
<p>如果用户未登录，返回信息 &ldquo;not login&rdquo;</p>
<p>如果用户登录，返回信息 &ldquo;success&rdquo; 以及用户名和头像</p>
<p><code>views/setting/getinfo.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-py" data-lang="py"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> getinfo_web(request):
</span></span><span style="display:flex;"><span>    user = request.user
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> not user.is_authenticated:   <span style="color:#007f7f"># 未登录</span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;not login&#34;</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">else</span>:                           <span style="color:#007f7f"># 已登录</span>
</span></span><span style="display:flex;"><span>        player = Player.objects.get(user=user)
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;username&#39;</span>: player.user.username,
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;photo&#39;</span>: player.photo,
</span></span><span style="display:flex;"><span>        })
</span></span></code></pre></div><p>注意前后台是一个登录系统，因此要先退掉后台，再测试</p>
<h3 id="将用户头像渲染到玩家上">将用户头像渲染到玩家上</h3>
<p>将返回的 <code>JsonResponse</code> 存到 <code>Settings</code> 类的变量中
<code>settings/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Settings {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.username = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.photo = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    getinfo() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>        $.ajax({
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>            success: <span style="color:#fff;font-weight:bold">function</span>(resp) {
</span></span><span style="display:flex;"><span>                ...
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">if</span> (resp.result === <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>) {
</span></span><span style="display:flex;"><span>                    outer.username = resp.username;
</span></span><span style="display:flex;"><span>                    outer.photo = resp.photo;
</span></span><span style="display:flex;"><span>                    ...
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                ..
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后在 <code>Player</code> 里把用户的头像渲染到对应的玩家上</p>
<p><code>playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player {
</span></span><span style="display:flex;"><span>    constructor(...) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.img = <span style="color:#fff;font-weight:bold">new</span> Image();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.img.src = <span style="color:#fff;font-weight:bold">this</span>.playground.root.settings.photo;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.save();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">Math</span>.PI * <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.stroke();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.clip();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.drawImage(<span style="color:#fff;font-weight:bold">this</span>.img, <span style="color:#fff;font-weight:bold">this</span>.x - <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#fff;font-weight:bold">this</span>.y - <span style="color:#fff;font-weight:bold">this</span>.radius, 
</span></span><span style="display:flex;"><span>                               <span style="color:#fff;font-weight:bold">this</span>.radius * <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.radius * <span style="color:#ff0;font-weight:bold">2</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.restore();
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="实现登录界面的前端">实现登录界面的前端</h3>
<p>先完成登录界面显示的逻辑</p>
<p><code>settings/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Settings {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    register() {  <span style="color:#007f7f">// 打开注册界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.$login.hide();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register.show();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    login() {  <span style="color:#007f7f">// 打开登录界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.$register.hide();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login.show();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    hide() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$settings.hide();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    show() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$settings.show();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="实现前端的基础框架">实现前端的基础框架</h4>
<p><code>settings/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Settings {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$settings = $(<span style="color:#0ff;font-weight:bold">`
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">&lt;div class=&#34;ac-game-settings&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">    &lt;div class=&#34;ac-game-settings-login&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-title&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            登录
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-username&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div class=&#34;ac-game-settings-item&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                &lt;input type=&#34;text&#34; placeholder=&#34;用户名&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-password&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div class=&#34;ac-game-settings-item&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                &lt;input type=&#34;password&#34; placeholder=&#34;密码&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-submit&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div class=&#34;ac-game-settings-item&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                &lt;button&gt;登录&lt;/button&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-error-message&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-option&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            注册
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;br&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-acwing&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;img width=&#34;30&#34; src=&#34;https://app165.acapp.acwing.com.cn/static/image/settings/acwing_logo.png&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;br&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                AcWing一键登录
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">    &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">    &lt;div class=&#34;ac-game-settings-register&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-title&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            注册
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-username&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div class=&#34;ac-game-settings-item&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                &lt;input type=&#34;text&#34; placeholder=&#34;用户名&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-password ac-game-settings-password-first&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div class=&#34;ac-game-settings-item&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                &lt;input type=&#34;password&#34; placeholder=&#34;密码&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-password ac-game-settings-password-second&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div class=&#34;ac-game-settings-item&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                &lt;input type=&#34;password&#34; placeholder=&#34;确认密码&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-submit&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div class=&#34;ac-game-settings-item&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                &lt;button&gt;注册&lt;/button&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-error-message&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-option&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            登录
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;br&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;div class=&#34;ac-game-settings-acwing&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;img width=&#34;30&#34; src=&#34;https://app165.acapp.acwing.com.cn/static/image/settings/acwing_logo.png&#34;&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;br&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">                AcWing一键登录
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">            &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">        &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">    &lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">&lt;/div&gt;
</span></span></span><span style="display:flex;"><span><span style="color:#0ff;font-weight:bold">`</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login = <span style="color:#fff;font-weight:bold">this</span>.$settings.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-login&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login_username = <span style="color:#fff;font-weight:bold">this</span>.$login.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-username input&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login_password = <span style="color:#fff;font-weight:bold">this</span>.$login.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-password input&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login_submit = <span style="color:#fff;font-weight:bold">this</span>.$login.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-submit button&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login_error_message = <span style="color:#fff;font-weight:bold">this</span>.$login.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-error-message&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login_register = <span style="color:#fff;font-weight:bold">this</span>.$login.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-option&#34;</span>);
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login.hide();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register = <span style="color:#fff;font-weight:bold">this</span>.$settings.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-register&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register_username = <span style="color:#fff;font-weight:bold">this</span>.$register.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-username input&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register_password = <span style="color:#fff;font-weight:bold">this</span>.$register.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-password-first input&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register_password_confirm = <span style="color:#fff;font-weight:bold">this</span>.$register.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-password-second input&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register_submit = <span style="color:#fff;font-weight:bold">this</span>.$register.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-submit button&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register_error_message = <span style="color:#fff;font-weight:bold">this</span>.$register.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-error-message&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register_login = <span style="color:#fff;font-weight:bold">this</span>.$register.find(<span style="color:#0ff;font-weight:bold">&#34;.ac-game-settings-option&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register.hide();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.root.$ac_game.append(<span style="color:#fff;font-weight:bold">this</span>.$settings);
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>对应的 <code>css</code> 文件部分：</p>
<p><code>css/game.css</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>.ac-game-settings {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">width</span>: <span style="color:#ff0;font-weight:bold">100</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">height</span>: <span style="color:#ff0;font-weight:bold">100</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">background-image</span>: <span style="color:#fff;font-weight:bold">url</span>(<span style="color:#0ff;font-weight:bold">&#34;/static/image/menu/background.gif&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">background-size</span>: <span style="color:#ff0;font-weight:bold">100</span><span style="color:#fff;font-weight:bold">%</span> <span style="color:#ff0;font-weight:bold">100</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">user-select</span>: <span style="color:#fff;font-weight:bold">none</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-login {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">height</span>: <span style="color:#ff0;font-weight:bold">41</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">width</span>: <span style="color:#ff0;font-weight:bold">20</span><span style="color:#fff;font-weight:bold">vw</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">position</span>: <span style="color:#fff;font-weight:bold">relative</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">top</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">left</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">transform</span>: <span style="color:#fff;font-weight:bold">translate</span>(<span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>, <span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">background-color</span>: <span style="color:#fff;font-weight:bold">rgba</span>(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0.7</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">border-radius</span>: <span style="color:#ff0;font-weight:bold">5</span><span style="color:#fff;font-weight:bold">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-title {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">color</span>: <span style="color:#fff;font-weight:bold">white</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">font-size</span>: <span style="color:#ff0;font-weight:bold">3</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">text-align</span>: <span style="color:#fff;font-weight:bold">center</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">padding-top</span>: <span style="color:#ff0;font-weight:bold">2</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">margin-bottom</span>: <span style="color:#ff0;font-weight:bold">2</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-username {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">display</span>: <span style="color:#fff;font-weight:bold">block</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">height</span>: <span style="color:#ff0;font-weight:bold">7</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-password {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">display</span>: <span style="color:#fff;font-weight:bold">block</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">height</span>: <span style="color:#ff0;font-weight:bold">7</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-submit {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">display</span>: <span style="color:#fff;font-weight:bold">block</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">height</span>: <span style="color:#ff0;font-weight:bold">7</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-acwing {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">display</span>: <span style="color:#fff;font-weight:bold">block</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">height</span>: <span style="color:#ff0;font-weight:bold">7</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-item {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">width</span>: <span style="color:#ff0;font-weight:bold">100</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">height</span>: <span style="color:#ff0;font-weight:bold">100</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-item &gt; <span style="font-weight:bold">input</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">width</span>: <span style="color:#ff0;font-weight:bold">90</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">line-height</span>: <span style="color:#ff0;font-weight:bold">3</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">position</span>: <span style="color:#fff;font-weight:bold">relative</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">top</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">left</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">transform</span>: <span style="color:#fff;font-weight:bold">translate</span>(<span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>, <span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-item &gt; <span style="font-weight:bold">button</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">color</span>: <span style="color:#fff;font-weight:bold">white</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">width</span>: <span style="color:#ff0;font-weight:bold">90</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">line-height</span>: <span style="color:#ff0;font-weight:bold">3</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">position</span>: <span style="color:#fff;font-weight:bold">relative</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">top</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">left</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">transform</span>: <span style="color:#fff;font-weight:bold">translate</span>(<span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>, <span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">background-color</span>: <span style="color:#ff0;font-weight:bold">#4CAF50</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">border-radius</span>: <span style="color:#ff0;font-weight:bold">5</span><span style="color:#fff;font-weight:bold">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-error-message {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">color</span>: <span style="color:#fff;font-weight:bold">red</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">font-size</span>: <span style="color:#ff0;font-weight:bold">0.8</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">display</span>: <span style="color:#fff;font-weight:bold">inline</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">float</span>: <span style="color:#fff;font-weight:bold">left</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">padding-left</span>: <span style="color:#ff0;font-weight:bold">1</span><span style="color:#fff;font-weight:bold">vw</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-option {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">color</span>: <span style="color:#fff;font-weight:bold">white</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">font-size</span>: <span style="color:#ff0;font-weight:bold">2</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">display</span>: <span style="color:#fff;font-weight:bold">inline</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">float</span>: <span style="color:#fff;font-weight:bold">right</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">padding-right</span>: <span style="color:#ff0;font-weight:bold">1</span><span style="color:#fff;font-weight:bold">vw</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">cursor</span>: <span style="color:#fff;font-weight:bold">pointer</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-acwing &gt; <span style="font-weight:bold">img</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">position</span>: <span style="color:#fff;font-weight:bold">relative</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">top</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">left</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">transform</span>: <span style="color:#fff;font-weight:bold">translate</span>(<span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>, <span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">cursor</span>: <span style="color:#fff;font-weight:bold">pointer</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">display</span>: <span style="color:#fff;font-weight:bold">block</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-acwing &gt; <span style="font-weight:bold">div</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">color</span>: <span style="color:#fff;font-weight:bold">white</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">font-size</span>: <span style="color:#ff0;font-weight:bold">1.5</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">text-align</span>: <span style="color:#fff;font-weight:bold">center</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">display</span>: <span style="color:#fff;font-weight:bold">block</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>.ac-game-settings-register {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">height</span>: <span style="color:#ff0;font-weight:bold">49</span><span style="color:#fff;font-weight:bold">vh</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">width</span>: <span style="color:#ff0;font-weight:bold">20</span><span style="color:#fff;font-weight:bold">vw</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">position</span>: <span style="color:#fff;font-weight:bold">relative</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">top</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">left</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">transform</span>: <span style="color:#fff;font-weight:bold">translate</span>(<span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>, <span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">background-color</span>: <span style="color:#fff;font-weight:bold">rgba</span>(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0.7</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">border-radius</span>: <span style="color:#ff0;font-weight:bold">5</span><span style="color:#fff;font-weight:bold">px</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="实现登录注册的相互切换">实现登录/注册的相互切换</h4>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Settings {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.getinfo();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    add_listening_events() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events_login();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events_register();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    add_listening_events_login() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login_register.click(<span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>            outer.register();   <span style="color:#007f7f">// 跳到注册界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        });
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    add_listening_events_register() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$register_login.click(<span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>            outer.login();      <span style="color:#007f7f">// 跳到登录界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="实现登录功能">实现登录功能</h3>
<p><code>views/settings/login.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.http <span style="color:#fff;font-weight:bold">import</span> JsonResponse
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.contrib.auth <span style="color:#fff;font-weight:bold">import</span> authenticate, login
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> signin(request):
</span></span><span style="display:flex;"><span>    data = request.GET
</span></span><span style="display:flex;"><span>    username = data.get(<span style="color:#0ff;font-weight:bold">&#39;username&#39;</span>)
</span></span><span style="display:flex;"><span>    password = data.get(<span style="color:#0ff;font-weight:bold">&#39;password&#39;</span>)
</span></span><span style="display:flex;"><span>    user = authenticate(username=username, password=password)
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> not user:
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;用户名或密码不正确&#34;</span>
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    login(request, user)
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>
</span></span><span style="display:flex;"><span>    })
</span></span></code></pre></div><p><code>urls/settings/index.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.urls <span style="color:#fff;font-weight:bold">import</span> path
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.views.settings.getinfo <span style="color:#fff;font-weight:bold">import</span> getinfo
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.views.settings.login <span style="color:#fff;font-weight:bold">import</span> signin
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>urlpatterns = [
</span></span><span style="display:flex;"><span>    path(<span style="color:#0ff;font-weight:bold">&#34;getinfo/&#34;</span>, getinfo, name=<span style="color:#0ff;font-weight:bold">&#34;settings_getinfo&#34;</span>),
</span></span><span style="display:flex;"><span>    path(<span style="color:#0ff;font-weight:bold">&#34;login/&#34;</span>, signin, name=<span style="color:#0ff;font-weight:bold">&#34;settings_login&#34;</span>),
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p><code>settings/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Settings{
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    add_listening_events_login() {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login_submit.click(<span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>            outer.login_on_remote();
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    login_on_remote() {     <span style="color:#007f7f">// 在远程服务器上登录
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> username = <span style="color:#fff;font-weight:bold">this</span>.$login_username.val();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> password = <span style="color:#fff;font-weight:bold">this</span>.$login_password.val();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$login_error_message.empty();
</span></span><span style="display:flex;"><span>        $.ajax({
</span></span><span style="display:flex;"><span>            url: <span style="color:#0ff;font-weight:bold">&#34;https://app1117.acapp.acwing.com.cn/settings/login/&#34;</span>,
</span></span><span style="display:flex;"><span>            type: <span style="color:#0ff;font-weight:bold">&#34;GET&#34;</span>,
</span></span><span style="display:flex;"><span>            data: {
</span></span><span style="display:flex;"><span>                username: username,
</span></span><span style="display:flex;"><span>                password: password,
</span></span><span style="display:flex;"><span>            },
</span></span><span style="display:flex;"><span>            success: <span style="color:#fff;font-weight:bold">function</span>(resp) {
</span></span><span style="display:flex;"><span>                console.log(resp);
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">if</span> (resp.result === <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>) {
</span></span><span style="display:flex;"><span>                    location.reload();
</span></span><span style="display:flex;"><span>                } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>                    outer.$login_error_message.html(resp.result);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="实现登出功能">实现登出功能</h3>
<p><code>views/settings/logout.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.http <span style="color:#fff;font-weight:bold">import</span> JsonResponse
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.contrib.auth <span style="color:#fff;font-weight:bold">import</span> logout
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> signout(request):
</span></span><span style="display:flex;"><span>    user = request.user
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> not user.is_authenticated:
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>,
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    logout(request)
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>,
</span></span><span style="display:flex;"><span>    })
</span></span></code></pre></div><p><code>urls/settings/index.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.views.settings.logout <span style="color:#fff;font-weight:bold">import</span> signout
</span></span><span style="display:flex;"><span>urlpatterns = [
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    path(<span style="color:#0ff;font-weight:bold">&#34;logout/&#34;</span>, signout, name=<span style="color:#0ff;font-weight:bold">&#34;settings_logout&#34;</span>),
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p><code>settings/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>login_on_remote() {     <span style="color:#007f7f">// 在远程服务器上登录
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> username = <span style="color:#fff;font-weight:bold">this</span>.$login_username.val();
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> password = <span style="color:#fff;font-weight:bold">this</span>.$login_password.val();
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.$login_error_message.empty();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $.ajax({
</span></span><span style="display:flex;"><span>        url: <span style="color:#0ff;font-weight:bold">&#34;https://app1117.acapp.acwing.com.cn/settings/login/&#34;</span>,
</span></span><span style="display:flex;"><span>        type: <span style="color:#0ff;font-weight:bold">&#34;GET&#34;</span>,
</span></span><span style="display:flex;"><span>        data: {
</span></span><span style="display:flex;"><span>            username: username,
</span></span><span style="display:flex;"><span>            password: password,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        success: <span style="color:#fff;font-weight:bold">function</span>(resp) {
</span></span><span style="display:flex;"><span>            console.log(resp);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (resp.result === <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>) {
</span></span><span style="display:flex;"><span>                location.reload();
</span></span><span style="display:flex;"><span>            } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>                outer.$login_error_message.html(resp.result);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>再顺便将 <code>menu</code> 菜单页面里的 <code>设置</code> 按钮也绑定上登出功能</p>
<p><code>menu/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>add_listening_events() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.$settings_mode.click(<span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        outer.root.settings.logout_on_remote();
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="实现注册功能">实现注册功能</h3>
<p><code>views/settings/register.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.http <span style="color:#fff;font-weight:bold">import</span> JsonResponse
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.contrib.auth <span style="color:#fff;font-weight:bold">import</span> login
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> django.contrib.auth.models <span style="color:#fff;font-weight:bold">import</span> User
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.models.player.player <span style="color:#fff;font-weight:bold">import</span> Player
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">def</span> register(request):
</span></span><span style="display:flex;"><span>    data = request.GET
</span></span><span style="display:flex;"><span>    username = data.get(<span style="color:#0ff;font-weight:bold">&#34;username&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>).strip()
</span></span><span style="display:flex;"><span>    password = data.get(<span style="color:#0ff;font-weight:bold">&#34;password&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>).strip()
</span></span><span style="display:flex;"><span>    password_confirm = data.get(<span style="color:#0ff;font-weight:bold">&#34;password_confirm&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>).strip()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> not username or not password:
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;用户名或密码不能为空&#34;</span>,
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> password != password_confirm:
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;两个密码不一致&#34;</span>,
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> User.objects.filter(username=username).exists():
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;用户名已存在&#34;</span>,
</span></span><span style="display:flex;"><span>        })
</span></span><span style="display:flex;"><span>    user = User(username=username)
</span></span><span style="display:flex;"><span>    user.set_password(password)
</span></span><span style="display:flex;"><span>    user.save()
</span></span><span style="display:flex;"><span>    Player.objects.create(user=user, photo=<span style="color:#0ff;font-weight:bold">&#34;https://cdn.acwing.com/media/user/profile/photo/42832_lg_f999efc3c8.png&#34;</span>)
</span></span><span style="display:flex;"><span>    login(request, user)
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> JsonResponse({
</span></span><span style="display:flex;"><span>        <span style="color:#0ff;font-weight:bold">&#39;result&#39;</span>: <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>,
</span></span><span style="display:flex;"><span>    })
</span></span></code></pre></div><p><code>urls/settings/index.py</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">from</span> game.views.settings.register <span style="color:#fff;font-weight:bold">import</span> register
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>urlpatterns = [
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    path(<span style="color:#0ff;font-weight:bold">&#34;register/&#34;</span>, register, name=<span style="color:#0ff;font-weight:bold">&#34;settings_register&#34;</span>),
</span></span><span style="display:flex;"><span>]
</span></span></code></pre></div><p><code>settings/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>add_listening_events_register() {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.$register_submit.click(<span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>        outer.register_on_remote();
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>register_on_remote() {  <span style="color:#007f7f">// 在远程服务器上注册
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> username = <span style="color:#fff;font-weight:bold">this</span>.$register_username.val();
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> password = <span style="color:#fff;font-weight:bold">this</span>.$register_password.val();
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> password_confirm = <span style="color:#fff;font-weight:bold">this</span>.$register_password_confirm.val();
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.$register_error_message.empty();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    $.ajax({
</span></span><span style="display:flex;"><span>        url: <span style="color:#0ff;font-weight:bold">&#34;https://app1117.acapp.acwing.com.cn/settings/register/&#34;</span>,
</span></span><span style="display:flex;"><span>        type: <span style="color:#0ff;font-weight:bold">&#34;GET&#34;</span>,
</span></span><span style="display:flex;"><span>        data: {
</span></span><span style="display:flex;"><span>            username: username,
</span></span><span style="display:flex;"><span>            password: password,
</span></span><span style="display:flex;"><span>            password_confirm: password_confirm,
</span></span><span style="display:flex;"><span>        },
</span></span><span style="display:flex;"><span>        success: <span style="color:#fff;font-weight:bold">function</span>(resp) {
</span></span><span style="display:flex;"><span>            console.log(resp);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (resp.result === <span style="color:#0ff;font-weight:bold">&#34;success&#34;</span>) {
</span></span><span style="display:flex;"><span>                location.reload();
</span></span><span style="display:flex;"><span>            } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>                outer.$register_error_message.html(resp.result);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    })
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h2 id="redisஐ">Redisஐ</h2>
<h3 id="redis是什么">Redis是什么？</h3>
<blockquote>
<p><strong><code>Redis</code> 是一款内存高速缓存数据库</strong></p>
</blockquote>
<h3 id="为什么要使用redis">为什么要使用Redis?</h3>
<blockquote>
<p><strong>我们目前用的是<code>Django</code>自带的数据库<code>Sqlite</code>。<code>Django</code>是很容易将数据库迁移到<code>mySQL</code>的。但是存储效率不如<code>redis</code>，因为<code>redis</code>是内存数据库，所以调用东西都非常快，存的是一个一个的<code>&lt;key, value&gt;</code>，而且是单线程的</strong></p>
</blockquote>
<h3 id="在django中集成redis">在Django中集成Redis</h3>
<ol>
<li>安装 <code>django_redis</code></li>
</ol>
<pre tabindex="0"><code>pip install django_redis
</code></pre><ol start="2">
<li>配置 <code>settings.py</code></li>
</ol>
<pre tabindex="0"><code>CACHES = { 
    &#39;default&#39;: {
        &#39;BACKEND&#39;: &#39;django_redis.cache.RedisCache&#39;,
        &#39;LOCATION&#39;: &#39;redis://127.0.0.1:6379/1&#39;,
        &#34;OPTIONS&#34;: {
            &#34;CLIENT_CLASS&#34;: &#34;django_redis.client.DefaultClient&#34;,
        },  
    },  
}
USER_AGENTS_CACHE = &#39;default&#39;
</code></pre><ol start="3">
<li>启动 <code>redis-server</code></li>
</ol>
<pre tabindex="0"><code>sudo redis-server /etc/redis/redis.conf
</code></pre><h3 id="在-django-后台里操纵-redis">在 Django 后台里操纵 Redis</h3>
<pre tabindex="0"><code>$ python3 manage.py shell&#39;

In [1]: from django.core.cache import cache # 引入redis

In [2]: cache.keys(&#39;*&#39;)                     # 查询redis里所有的关键字
Out[2]: []

In [3]: cache.set(&#39;yxc&#39;, 1, 5)              # 插入一个key-val，存在 5 s
Out[3]: True

In [4]: cache.keys(&#39;*&#39;)                     # 查询redis里所有的关键字
Out[4]: [&#39;yxc&#39;]

In [5]: cache.set(&#39;yxc&#39;, 2, None)           # 插入一个key-val，不会过期
Out[5]: True

In [6]: cache.set(&#39;abc&#39;, 3, None)
Out[6]: True

In [7]: cache.keys(&#39;y*&#39;)
Out[7]: [&#39;yxc&#39;]

In [8]: cache.has_key(&#39;abc&#39;)
Out[8]: True

In [9]: cache.has_key(&#39;abcd&#39;)
Out[9]: False

In [10]: cache.get(&#39;yxc&#39;)
Out[10]: 2

In [11]: cache.delete(&#39;yxc&#39;)
Out[11]: True

In [12]: cache.keys(&#39;*&#39;)
Out[12]: [&#39;abc&#39;]

In [13]:
</code></pre><h2 id="web端acwing一键登录ஐ">Web端AcWing一键登录ஐ</h2>
<ul>
<li><a href="https://www.acwing.com/blog/content/12466/">6.2 Web端AcWing一键登录 | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/79354/">6.2 上课笔记 | Andrew1729</a></li>
<li><a href="https://www.acwing.com/video/3565/">6.2 Web端AcWing一键登录 | Vedio</a>
<ol>
<li><strong>Oauth2一键授权登录的基本原理</strong>：$17m30s——29m15s——32m51s$</li>
<li>数据表添加<code>openid</code>信息：$33m20s——34m47s$</li>
<li><strong>Oauth2一键授权登录的代码实现</strong>：$35m20s——1h25s——1h27m20s$</li>
</ol>
</li>
</ul>
<hr>
<blockquote>
<p><strong>用户点击<code>AcWing一键登录</code>，通过<code>urls &amp; views</code>调用<code>apply_code</code>函数，将<code>state</code>放到<code>redis</code>中，将<code>appid &amp; redirect_uri &amp; scope &amp; state</code> 传入<code>apply_code_url</code>链接，返回并重定向至<code>apply_code_url</code>向用户询问是否授权</strong></p>
<p><strong>用户点击<code>同意</code>后，重定向至<code>redirect_uri</code>链接，返回参数为<code>code</code>和<code>state</code>，通过<code>urls &amp; views</code>调用<code>receive_code</code>函数</strong></p>
<p><strong>若验证<code>state</code>失败，直接重定向至初始界面</strong></p>
<p><strong>若验证<code>state</code>成功，将<code>appid &amp; code &amp; secret</code>发送至<code>AcWing服务器</code>，申请授权令牌<code>access_token</code>和用户的<code>openid</code></strong></p>
<p><strong>若申请令牌成功，将<code>access_token &amp; openid</code>发送至<code>AcWing服务器</code>，得到用户信息，创建并登录用户，最后重定向至初始界面</strong></p>
</blockquote>
<h2 id="acapp端acwing一键登录ஐ">AcApp端AcWing一键登录ஐ</h2>
<ul>
<li><a href="https://www.acwing.com/blog/content/12467/">6.3 AcApp端AcWing一键登录 | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/79365/">6.3 上课笔记 | Andrew1729</a></li>
<li><a href="https://www.acwing.com/video/3566/">6.3 Acapp端AcWing一键登录 | Vedio</a>
<ol>
<li><strong>Oauth2一键授权登录的基本原理</strong>：$10m——12m20s——16m35s——18m$</li>
<li><strong>Oauth2一键授权登录的代码实现</strong>：$19m25s——21m——23m25s——34m29s——42m10s$</li>
</ol>
</li>
</ul>
<hr>
<h1 id="实现联机对战ஐ">实现联机对战ஐ</h1>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3357332/">7. 实现联机对战 | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/89506/">7.1 上课笔记 | 大菜狗</a></li>
<li><a href="https://www.acwing.com/solution/content/88801/">7.2 上课笔记 | 菊花</a></li>
</ul>
<hr>
<h2 id="统一长度单位">统一长度单位</h2>
<p>由于联机对战的时候，每个用户的客户端长宽不一样</p>
<p>在之前完成的游戏界面里，我们会根据当前客户端的大小，进行渲染</p>
<p>但是在联机对战的时候，应当让所有玩家的游戏界面保持同步才可以</p>
<p>所有，就引入了 <strong>统一长度单位</strong> 的目标</p>
<h3 id="地图渲染">地图渲染</h3>
<h4 id="地图-169-等比例缩放">地图 16:9 等比例缩放</h4>
<p>实现逻辑：根据当前用户的客户端大小，统一渲染成 <strong>16:9</strong> 的游戏界面，且随着用户调整窗口大小，也动态调整</p>
<p><code>js/src/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.root.$ac_game.append(<span style="color:#fff;font-weight:bold">this</span>.$playground);<span style="color:#007f7f">// 未来可能会多次 show 因此把创建场景挪到这里
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>        $(<span style="color:#fff;font-weight:bold">window</span>).resize(<span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>            outer.resize();
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    resize() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.width = <span style="color:#fff;font-weight:bold">this</span>.$playground.width();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.height = <span style="color:#fff;font-weight:bold">this</span>.$playground.height();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> unit = <span style="color:#fff;font-weight:bold">Math</span>.min(<span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">16</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">9</span>);  <span style="color:#007f7f">// 以最小的作为基准，渲染
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.width = unit * <span style="color:#ff0;font-weight:bold">16</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.height = unit * <span style="color:#ff0;font-weight:bold">9</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.resize();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.scale = <span style="color:#fff;font-weight:bold">this</span>.height;   <span style="color:#007f7f">// resize时，其他元素的渲染大小都以当前渲染的高度为基准，存为 scale 变量
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.game_map) <span style="color:#fff;font-weight:bold">this</span>.game_map.resize();  <span style="color:#007f7f">//如果此时地图已创建，则resize一下
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    }
</span></span><span style="display:flex;"><span>    show() {    <span style="color:#007f7f">// 打开 playground 界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.$playground.show();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.resize();
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>js/src/playground/game_map/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> GameMap <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    resize() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width = <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height = <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="地图居中">地图居中</h4>
<p>直接把 <code>canvas</code> 元素，用相对位置居中即可</p>
<p><code>css/game.css</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-css" data-lang="css"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>.ac-game-playground {
</span></span><span style="display:flex;"><span>    <span style="color:#f00">...</span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">background-color</span>: <span style="color:#fff;font-weight:bold">grey</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.ac-game-playground &gt; <span style="font-weight:bold">canvas</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">position</span>: <span style="color:#fff;font-weight:bold">relative</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">top</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">left</span>: <span style="color:#ff0;font-weight:bold">50</span><span style="color:#fff;font-weight:bold">%</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">transform</span>: <span style="color:#fff;font-weight:bold">translate</span>(<span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>, <span style="color:#ff0;font-weight:bold">-50</span><span style="color:#fff;font-weight:bold">%</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="解决地图-resize-时会出现渐变成黑色的情况">解决地图 resize 时，会出现渐变成黑色的情况</h4>
<p>原由是因为我们的实现逻辑是：每帧会渲染一层半透明的黑色背景</p>
<p>也就造就了一开始会出现灰屏的情况，解决方法很简单，直接 resize 完，强制涂一层不透明的黑色即可</p>
<p><code>js/src/playground/game_map/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> GameMap <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    resize() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width = <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height = <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#0ff;font-weight:bold">&#34;rgba(0, 0, 0, 1)&#34;</span>;    <span style="color:#007f7f">// resize 完，涂一层不透明的即可
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillRect(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width, <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="元素渲染">元素渲染</h3>
<p>地图随着尺寸等比例放大缩小的同时，地图内的其他元素也应与背景一同等比例放大缩小</p>
<p>因此，我们只需把元素全部设为相对大小即可，用我们先前设置的 playground.scale 值即可</p>
<h4 id="玩家-player">玩家 Player</h4>
<p>初始化的时候，转为传递 <strong>scale</strong> 的比例值</p>
<p><code>js/src/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    show() {    <span style="color:#007f7f">// 打开 playground 界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span> / <span style="color:#fff;font-weight:bold">this</span>.scale, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;white&#34;</span>, <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">true</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span> / <span style="color:#fff;font-weight:bold">this</span>.scale, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#fff;font-weight:bold">this</span>.get_random_color(), <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> tx = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.width / <span style="color:#fff;font-weight:bold">this</span>.playground.scale;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> ty = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.height / <span style="color:#fff;font-weight:bold">this</span>.playground.scale;
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    add_listening_events() {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>                outer.move_to((e.clientX - rect.left) / outer.playground.scale, (e.clientY - rect.top) / outer.playground.scale);
</span></span><span style="display:flex;"><span>            } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">if</span> (outer.cur_skill === <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>) {
</span></span><span style="display:flex;"><span>                    outer.shoot_fireball((e.clientX - rect.left) / outer.playground.scale, (e.clientY - rect.top) / outer.playground.scale);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    shoot_fireball(tx, ty) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> x = <span style="color:#fff;font-weight:bold">this</span>.x, y = <span style="color:#fff;font-weight:bold">this</span>.y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> radius = <span style="color:#ff0;font-weight:bold">0.01</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(ty - <span style="color:#fff;font-weight:bold">this</span>.y, tx - <span style="color:#fff;font-weight:bold">this</span>.x);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle), vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> color = <span style="color:#0ff;font-weight:bold">&#34;orange&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> speed = <span style="color:#ff0;font-weight:bold">0.5</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> move_length = <span style="color:#ff0;font-weight:bold">1.0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> damage = <span style="color:#ff0;font-weight:bold">0.01</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">new</span> FireBall(<span style="color:#fff;font-weight:bold">this</span>.playground, <span style="color:#fff;font-weight:bold">this</span>, x, y, radius, vx, vy, color, speed, move_length, damage);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.update_move();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update_move() { <span style="color:#007f7f">// 更新玩家移动
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (!<span style="color:#fff;font-weight:bold">this</span>.is_me &amp;&amp; <span style="color:#fff;font-weight:bold">this</span>.spent_time &gt; <span style="color:#ff0;font-weight:bold">4</span> &amp;&amp; <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">180</span> &lt; <span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.damage_speed &gt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>                ...
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">if</span> (!<span style="color:#fff;font-weight:bold">this</span>.is_me) {
</span></span><span style="display:flex;"><span>                    <span style="color:#fff;font-weight:bold">let</span> tx = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.width / <span style="color:#fff;font-weight:bold">this</span>.playground.scale;
</span></span><span style="display:flex;"><span>                    <span style="color:#fff;font-weight:bold">let</span> ty = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.height / <span style="color:#fff;font-weight:bold">this</span>.playground.scale;
</span></span><span style="display:flex;"><span>                    ...
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>                ...
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> scale = <span style="color:#fff;font-weight:bold">this</span>.playground.scale;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x * scale, <span style="color:#fff;font-weight:bold">this</span>.y * scale, <span style="color:#fff;font-weight:bold">this</span>.radius * scale, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">Math</span>.PI * <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.drawImage(<span style="color:#fff;font-weight:bold">this</span>.img, (<span style="color:#fff;font-weight:bold">this</span>.x - <span style="color:#fff;font-weight:bold">this</span>.radius) * scale, (<span style="color:#fff;font-weight:bold">this</span>.y - <span style="color:#fff;font-weight:bold">this</span>.radius) * scale, <span style="color:#fff;font-weight:bold">this</span>.radius * <span style="color:#ff0;font-weight:bold">2</span> * scale, <span style="color:#fff;font-weight:bold">this</span>.radius * <span style="color:#ff0;font-weight:bold">2</span> * scale);
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x * scale, <span style="color:#fff;font-weight:bold">this</span>.y * scale, <span style="color:#fff;font-weight:bold">this</span>.radius * scale, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="火球-fireball">火球 Fireball</h4>
<p><code>js/src/playground/skill/fireball/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Fireball {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> scale = <span style="color:#fff;font-weight:bold">this</span>.playground.scale;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x * scale, <span style="color:#fff;font-weight:bold">this</span>.y * scale, <span style="color:#fff;font-weight:bold">this</span>.radius * scale, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h4 id="粒子-particle">粒子 Particle</h4>
<p><code>js/src/playground/particle/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Particle {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> scale = <span style="color:#fff;font-weight:bold">this</span>.playground.scale;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x * scale, <span style="color:#fff;font-weight:bold">this</span>.y * scale, <span style="color:#fff;font-weight:bold">this</span>.radius * scale, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="增加联机对战模式">增加“联机对战”模式</h2>
<p>为了区分：用户自己，机器人，联机玩家</p>
<p>需要把 <code>is_me</code> 改成字符串，用以表示不同 <strong>Player</strong></p>
<p><code>menu/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGameMenu{
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    add_listening_events() {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$single_mode.click(<span style="color:#fff;font-weight:bold">function</span>(){
</span></span><span style="display:flex;"><span>            outer.hide();
</span></span><span style="display:flex;"><span>            outer.root.playground.show(<span style="color:#0ff;font-weight:bold">&#34;single mode&#34;</span>);
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$multi_mode.click(<span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>            outer.hide();
</span></span><span style="display:flex;"><span>            outer.root.playground.show(<span style="color:#0ff;font-weight:bold">&#34;multi mode&#34;</span>);
</span></span><span style="display:flex;"><span>        });
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Playground {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    show(mode) {    <span style="color:#007f7f">// 打开 playground 界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span> / <span style="color:#fff;font-weight:bold">this</span>.scale, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;white&#34;</span>, <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#0ff;font-weight:bold">&#34;me&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.root.settings.username, <span style="color:#fff;font-weight:bold">this</span>.root.settings.photo)));
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (mode === <span style="color:#0ff;font-weight:bold">&#34;single mode&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span> / <span style="color:#fff;font-weight:bold">this</span>.scale, <span style="color:#ff0;font-weight:bold">0.5</span>, <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#fff;font-weight:bold">this</span>.get_random_color(), <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#0ff;font-weight:bold">&#34;robot&#34;</span>));
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (mode === <span style="color:#0ff;font-weight:bold">&#34;multi mode&#34;</span>) {
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, x, y, radius, color, speed, character, username, photo) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.character = character;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.username = username;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.photo = photo;
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.character !== <span style="color:#0ff;font-weight:bold">&#34;robot&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.img = <span style="color:#fff;font-weight:bold">new</span> Image();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.img.src = <span style="color:#fff;font-weight:bold">this</span>.photo;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 同理，根据对应的逻辑，修改后面所有的 is_me 为 character
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span></code></pre></div><h2 id="django_channels">Django_channels</h2>
<ul>
<li><a href="https://www.jianshu.com/p/bcefda55bce4">谈谈Websocket </a></li>
<li><a href="https://www.cnblogs.com/dreamroute/p/6247726.html">HTTP/TCP</a></li>
</ul>
<hr>
<h3 id="django_channels是什么">Django_channels是什么？</h3>
<blockquote>
<p><strong>Django_Channels 是一个为Django 提供异步扩展的库，通常主要用来提供WebSocket 支持和后台任务</strong></p>
<p><strong><code>WSS</code> 是 <code>Web Socket</code> 协议的安全模式，支持 <code>C/S</code> 下的双向通信（HTTP协议只支持单向通信）</strong></p>
</blockquote>
<h3 id="配置django_channels">配置Django_channels</h3>
<ol>
<li>安装 <code>channels_redis</code></li>
</ol>
<pre tabindex="0"><code>pip install channels_redis
</code></pre><ol start="2">
<li>配置 <code>acapp/asgi.py</code></li>
</ol>
<pre tabindex="0"><code>import os

from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
from django.core.asgi import get_asgi_application
from game.routing import websocket_urlpatterns

os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;acapp.settings&#39;)

application = ProtocolTypeRouter({
    &#34;http&#34;: get_asgi_application(),
    &#34;websocket&#34;: AuthMiddlewareStack(URLRouter(websocket_urlpatterns))
})
</code></pre><ol start="3">
<li>配置 <code>acapp/settings.py</code></li>
</ol>
<p>在 <code>INSTALLED_APPS</code> 中添加 <code>channels</code> ，添加后如下所示：</p>
<pre tabindex="0"><code>INSTALLED_APPS = [ 
    &#39;channels&#39;,
    &#39;game.apps.GameConfig&#39;,
    &#39;django.contrib.admin&#39;,
    &#39;django.contrib.auth&#39;,
    &#39;django.contrib.contenttypes&#39;,
    &#39;django.contrib.sessions&#39;,
    &#39;django.contrib.messages&#39;,
    &#39;django.contrib.staticfiles&#39;,
]
</code></pre><p>然后在文件末尾添加：</p>
<pre tabindex="0"><code>ASGI_APPLICATION = &#39;acapp.asgi.application&#39;
CHANNEL_LAYERS = {
    &#34;default&#34;: {
        &#34;BACKEND&#34;: &#34;channels_redis.core.RedisChannelLayer&#34;,
        &#34;CONFIG&#34;: {
            &#34;hosts&#34;: [(&#34;127.0.0.1&#34;, 6379)],
        },
    },
}
</code></pre><ol start="4">
<li>配置 <code>game/routing.py</code>
这一部分的作用相当于 <code>http</code> 的 <code>urls</code></li>
</ol>
<p>内容如下：</p>
<pre tabindex="0"><code>from django.urls import path

websocket_urlpatterns = [
]
</code></pre><ol start="5">
<li>编写 <code>game/consumers</code>
这一部分的作用相当于 <code>http</code> 的 <code>views</code></li>
</ol>
<p>参考示例：</p>
<p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>from channels.generic.websocket import AsyncWebsocketConsumer
import json

class MultiPlayer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.accept()
        print(&#39;accept&#39;)

        self.room_name = &#34;room&#34;
        await self.channel_layer.group_add(self.room_name, self.channel_name)

    async def disconnect(self, close_code):
        print(&#39;disconnect&#39;)
        await self.channel_layer.group_discard(self.room_name, self.channel_name);


    async def receive(self, text_data):
        data = json.loads(text_data)
        print(data)
</code></pre><ol start="6">
<li>启动 <code>django_channels</code></li>
</ol>
<p>在 <code>~/acapp</code> 目录下执行：</p>
<pre tabindex="0"><code>daphne -b 0.0.0.0 -p 5015 acapp.asgi:application
</code></pre><ol start="7">
<li>建立 <strong>WSS</strong> 连接</li>
</ol>
<p><code>game/routing.py</code></p>
<pre tabindex="0"><code>from django.urls import path
from game.consumers.multiplayer.index import MultiPlayer

websocket_urlpatterns = [
    path(&#34;wss/multiplayer/&#34;, MultiPlayer.as_asgi(), name=&#34;wss_multiplayer&#34;),
]
</code></pre><p><code>playground/zbase.js</code></p>
<pre tabindex="0"><code>class AcGamePlayground {
    ...
    show(mode) {    // 打开 playground 界面
        ...
        if (mode === &#34;single mode&#34;) {
            ...
        } else if (mode === &#34;multi mode&#34;) {
            this.mps = new MultiPlayerSocket(this);
            this.mps.ws.onopen = function() {
                outer.mps.send_create_player();
            };
        }

    }
}
</code></pre><p><code>playground/socket/multiplayer/zbase.js</code></p>
<pre tabindex="0"><code>class MultiPlayerSocket {
    constructor(playground) {
        this.playground = playground;
        this.ws = new WebSocket(&#34;wss://app1117.acapp.acwing.com.cn/wss/multiplayer/&#34;);
        this.start();
    }
    start() {
    }
    send_create_player() {
        this.ws.send(JSON.stringify({
            &#39;message&#39;: &#39;hello acapp server&#39;,
        }));
    }
    receive_create_player() {
    }
}
</code></pre><h2 id="编写同步函数">编写同步函数</h2>
<p>一共需要完成四个通信：</p>
<p>（通信的逻辑基本都是先在本地完成，然后将结果返回给服务器，服务器再分发给其他客户端，达成同步）</p>
<ol>
<li><strong>create-player</strong> : 在所有玩家的游戏界面，创建一个新加入的玩家</li>
<li><strong>move-to</strong> : 在所有玩家的游戏界面，将一个角色移动到一个位置</li>
<li><strong>shoot-fireball</strong> : 在所有玩家的游戏界面，让一个角色发射一个火球</li>
<li><strong>attack</strong> : 在所有玩家的游戏界面，让一个角色被攻击</li>
</ol>
<p>一场游戏里，所有的元素（玩家，火球等）都需要唯一的标识，来方便同步</p>
<p>为此，我们可以直接修改一下游戏引擎，对于每个元素都创建我们需要的唯一标识</p>
<p><code>playground/ac-game-object/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor() {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.uuid = <span style="color:#fff;font-weight:bold">this</span>.create_uuid();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    create_uuid() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> res = <span style="color:#0ff;font-weight:bold">&#34;&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">8</span>; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> x = <span style="color:#fff;font-weight:bold">parseInt</span>(<span style="color:#fff;font-weight:bold">Math</span>.floor(<span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">10</span>));   <span style="color:#007f7f">// [0, 10)
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            res += x;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> res;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    show(mode) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (mode === <span style="color:#0ff;font-weight:bold">&#34;single mode&#34;</span>) {
</span></span><span style="display:flex;"><span>            ...
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (mode === <span style="color:#0ff;font-weight:bold">&#34;multi mode&#34;</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.mps = <span style="color:#fff;font-weight:bold">new</span> MultiPlayerSocket(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.mps.uuid = <span style="color:#fff;font-weight:bold">this</span>.players[<span style="color:#ff0;font-weight:bold">0</span>].uuid;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.mps.ws.onopen = <span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>                outer.mps.send_create_player();
</span></span><span style="display:flex;"><span>            };
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>playground/socket/multiplayer/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> MultiPlayerSocket {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    send_create_player() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ws.send(JSON.stringify({
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;event&#39;</span>: <span style="color:#0ff;font-weight:bold">&#39;create_player&#39;</span>,
</span></span><span style="display:flex;"><span>            <span style="color:#0ff;font-weight:bold">&#39;uuid&#39;</span>: outer.uuid,
</span></span><span style="display:flex;"><span>        }));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>接着，利用通信的方式，使得每个窗口内，逻辑上相同的元素，其 <code>uid</code> 也相同即可</p>
<p>原则是：哪个窗口创建的元素，就用他创建时的 <code>uid</code> 作为整个项目运行时的 <code>uid</code></p>
<p>然后，我们打算用 <strong>redis</strong> 来实现存储每个游戏房间，以及元素，并初始默认设定每个房间上限 3 人</p>
<h3 id="create-player">create-player</h3>
<h4 id="前端">前端</h4>
<p><code>game/static/js/src/playground/socket/multiplayer/zbase.js</code></p>
<pre tabindex="0"><code>class MultiPlayerSocket {
    constructor(playground) {
        this.playground = playground;

        this.ws = new WebSocket(&#34;wss://app1117.acapp.acwing.com.cn/wss/multiplayer/&#34;);

        this.start();
    }
    start() {
        this.receive();
    }
    receive() {
        let outer = this;
        this.ws.onmessage = function(e) {
            let data = JSON.parse(e.data);
            let uuid = data.uuid;
            if (uuid === outer.uuid) return false;

            let event = data.event;
            if (event === &#34;create_player&#34;) {
                outer.receive_create_player(uuid, data.username, data.photo);
            }
        };
    }
    send_create_player(username, photo) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &#39;event&#39;: &#39;create_player&#39;,
            &#39;uuid&#39;: outer.uuid,
            &#39;username&#39;: username,
            &#39;photo&#39;: photo,
        }));
    }
    receive_create_player(uuid, username, photo) {
        let player = new Player(
            this.playground,
            this.playground.width / 2 / this.playground.scale,
            0.5,
            0.05,
            &#34;white&#34;,
            0.15,
            &#34;enemy&#34;,
            username,
            photo,
        );
        player.uuid = uuid;
        this.playground.players.push(player);
    }
}
</code></pre><h4 id="后端">后端</h4>
<p><code>settings.py</code></p>
<pre tabindex="0"><code>...
ROOM_CAPACITY = 3
</code></pre><p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>from channels.generic.websocket import AsyncWebsocketConsumer
import json
from django.conf import settings
from django.core.cache import cache

class MultiPlayer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = None
        for i in range(1000):   # 上限 1k 个房间
            name = &#34;room-%d&#34; % (i)
            # 当前房间为空，或房间内玩家人数不到 ROOM_CAPACITY
            if not cache.has_key(name) or len(cache.get(name)) &lt; settings.ROOM_CAPACITY:
                self.room_name = name
                break
        if not self.room_name:
            return

        await self.accept()

        if not cache.has_key(self.room_name):   # 如果房间不存在，则新建房间
            cache.set(self.room_name, [], 3600) # 有效期 1 小时

        for player in cache.get(self.room_name):    # 对该房间已存在的用户，创建到新加入的用户的游戏界面中
            await self.send(text_data=json.dumps({
                &#39;event&#39;: &#34;create_player&#34;,
                &#39;uuid&#39;: player[&#39;uuid&#39;],
                &#39;username&#39;: player[&#39;username&#39;],
                &#39;photo&#39;: player[&#39;photo&#39;],
            }))
        await self.channel_layer.group_add(self.room_name, self.channel_name)

    async def disconnect(self, close_code):
        print(&#39;disconnect&#39;)
        await self.channel_layer.group_discard(self.room_name, self.channel_name);

    async def create_player(self, data):
        players = cache.get(self.room_name)
        players.append({
            &#39;uuid&#39;: data[&#39;uuid&#39;],
            &#39;username&#39;: data[&#39;username&#39;],
            &#39;photo&#39;: data[&#39;photo&#39;],
        })
        cache.set(self.room_name, players, 3600) # 更新房间存在时间为 1 小时（最后一次加入一名玩家时）
        # 群发消息更新
        await self.channel_layer.group_send(
            self.room_name,
            {
                &#39;type&#39;: &#34;group_create_player&#34;,  # 群发该消息后，作为客户端接受者，所接受用的函数名
                &#39;event&#39;: &#34;create_player&#34;,
                &#39;uuid&#39;: data[&#39;uuid&#39;],
                &#39;username&#39;: data[&#39;username&#39;],
                &#39;photo&#39;: data[&#39;photo&#39;],
            }
        )
    async def group_create_player(self, data):
        await self.send(text_data=json.dumps(data))

    async def receive(self, text_data):
        data = json.loads(text_data)
        event = data[&#39;event&#39;]
        if event == &#34;create_player&#34;:
            await self.create_player(data)
</code></pre><h4 id="redis-调试语句">redis 调试语句</h4>
<p>打开 shell 交互</p>
<pre tabindex="0"><code>python3 manage.py shell
</code></pre><p>然后用 py3 交互进行 cache 调试</p>
<pre tabindex="0"><code>from django.core.cache import cache

def clear():
    for key in cache.keys(&#39;*&#39;):
        cache.delete(key)

cache.keys(&#39;*&#39;) # 查询当前 redis 中所有 key

cache.get(&#39;room-1&#39;) # 查询当前 redis 中 key 为 room-1 的值
</code></pre><p>到目前为止，便可以在不同的窗口渲染同一批玩家了</p>
<h3 id="move-to">move-to</h3>
<h4 id="前端-1">前端</h4>
<p>客户端的通信的发出和接受函数</p>
<p><code>game/static/js/src/playground/socket/multiplayer/zbase.js</code></p>
<pre tabindex="0"><code>class MultiPlayerSocket {
    ...
    receive() {
        let outer = this;
        this.ws.onmessage = function(e) {
            ...
            else if (event === &#34;move_to&#34;) {
                outer.receive_move_to(uuid, data.tx, data.ty);
            }
        };
    }
    send_move_to(tx, ty) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &#39;event&#39;: &#39;move_to&#39;,
            &#39;uuid&#39;: outer.uuid,
            &#39;tx&#39;: tx,
            &#39;ty&#39;: ty,
        }));
    }
    get_player(uuid) {
        let players = this.playground.players;
        for (let i = 0; i &lt; players.length; i ++ ) {
            let player = players[i];
            if (player.uuid === uuid) {
                return player;
            }
        }
        return null;
    }
    receive_move_to(uuid, tx, ty) {
        let player = this.get_player(uuid);
        if (player) {
            player.move_to(tx, ty);
        }
    }
}
</code></pre><p>为了让游戏界面中对于要移动的元素做出移动动作，需要对 <code>move_to</code> 函数做出一些修改</p>
<p>首先要标识出当前为多人模式，然后模式为多人模式时，每次移动都会触发一次通信</p>
<p><code>playground/zbase.js</code></p>
<pre tabindex="0"><code>class AcGamePlayground {
    ...
    show(mode) {
        ...
        this.mode = mode;
    }
}
</code></pre><p><code>playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    ...
    add_listening_events() {
      ...
       this.playground.game_map.$canvas.mousedown(function(e) {
           ...
           if (e.which === 3) {
               let tx = (e.clientX - rect.left) / outer.playground.scale;
               let ty = (e.clientY - rect.top) / outer.playground.scale;
               outer.move_to(tx, ty);
               if (outer.playground.mode === &#34;multi mode&#34;) {
                   outer.playground.mps.send_move_to(tx, ty);
               }
           }
           ...
   }
   ...
}
</code></pre><h4 id="后端-1">后端</h4>
<p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>async def move_to(self, data):
    await self.channel_layer.group_send(
        self.room_name,
        {
            &#39;type&#39;: &#34;group_send_event&#34;,
            &#39;event&#39;: &#34;move_to&#34;,
            &#39;uuid&#39;: data[&#39;uuid&#39;],
            &#39;tx&#39;: data[&#39;tx&#39;],
            &#39;ty&#39;: data[&#39;ty&#39;],
        }
    )

async def group_send_event(self, data):
    await self.send(text_data=json.dumps(data))

async def receive(self, text_data):
    data = json.loads(text_data)
    event = data[&#39;event&#39;]
    if event == &#34;create_player&#34;:
        await self.create_player(data)
    elif event == &#34;move_to&#34;:
        await self.move_to(data)
</code></pre><h3 id="shoot-fireball">shoot-fireball</h3>
<h4 id="前端-2">前端</h4>
<p>用一个数组来存一个玩家发射的所有火球，以便于子弹消失时，将他们找出并对应删掉</p>
<p><code>playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    constructor(playground, x, y, radius, color, speed, character, username, photo) {
        ...
        this.fireballs = [];    // 存该用户发射的所有火球
    }
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.mousedown(function(e) {
            ...
            else if (e.which === 1) {
                let tx = (e.clientX - rect.left) / outer.playground.scale;
                let ty = (e.clientY - rect.top) / outer.playground.scale;
                if (outer.cur_skill === &#34;fireball&#34;) {
                    let fireball = outer.shoot_fireball(tx, ty);
                    if (outer.playground.mode === &#34;multi mode&#34;) {
                        outer.playground.mps.send_shoot_fireball(tx, ty, fireball.uuid);
                    }
                }
            }
            ...
        });
        $(window).keydown(function(e) {
            if (e.which === 81) {           // 键盘按下q事件
                outer.cur_skill = &#34;fireball&#34;;
                return false;
            }
        });
    }
    ...
    shoot_fireball(tx, ty) {
        ...

        let fireball = new FireBall(this.playground, this, x, y, radius, vx, vy, color, speed, move_length, damage);
        this.fireballs.push(fireball);
        return fireball;
    }
    destroy_fireball(uuid) {
        for (let i = 0; i &lt; this.fireballs.length; i ++ ) {
            let fireball = this.fireballs[i];
            if (fireball.uuid == uuid) {
                fireball.destroy();
                break;
            }
        }
    }
    ...
</code></pre><p><code>playground/skill/fireball/zbase.js</code></p>
<pre tabindex="0"><code>class FireBall extends AcGameObject {
    ...
    on_destory() {
        let fireballs = this.player.fireballs;
        for (let i = 0; i &lt; fireballs.length; i ++ ) {
            if (fireballs[i] === this) {
                fireballs.splice(i, 1);
                break;
            }
        }
    }
}
</code></pre><p><code>game/static/js/src/playground/socket/multiplayer/zbase.js</code></p>
<pre tabindex="0"><code>class MultiPlayerSocket {
    ...
    send_shoot_fireball(tx, ty, ball_uuid) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &#39;event&#39;: &#39;move_to&#39;,
            &#39;uuid&#39;: outer.uuid,
            &#39;tx&#39;: tx,
            &#39;ty&#39;: ty,
            &#39;ball_uuid&#39;: ball_uuid;
        }));
    }
    receive_shoot_fireball(uuid, tx, ty, ball_uuid) {
        let player = this.get_player(uuid);
        if (player) {
            let fireball = player.shoot_fireball(tx, ty);
            fireball.uuid = ball_uuid;
        }
    }
}
</code></pre><h4 id="后端-2">后端</h4>
<p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def shoot_fireball(self, data):
        await self.channel_layer.group_send(
            self.room_name,
            {
                &#39;type&#39;: &#34;group_send_event&#34;,
                &#39;event&#39;: &#34;shoot_fireball&#34;,
                &#39;uuid&#39;: data[&#39;uuid&#39;],
                &#39;tx&#39;: data[&#39;tx&#39;],
                &#39;ty&#39;: data[&#39;ty&#39;],
                &#39;ball_uuid&#39;: data[&#39;ball_uuid&#39;],
            }
        )
    async def receive(self, text_data):
        ...
        elif event == &#34;shoot_fireball&#34;:
            await self.shoot_fireball(data)
</code></pre><h3 id="attack">attack</h3>
<p>为了只让一个客户端进行攻击命中的判断，因此只有发出方的火球才做碰撞检测</p>
<p>其他客户端对于该火球只有动画效果</p>
<p>又由于碰撞检测是在一台客户端上进行的，因此多端之间可能会存在同步上的延迟</p>
<p>为此的解决方法是：碰撞检测成功时，强制把被击中玩家移动到发起方客户端中的位置，以避免击中延迟上发生的事情</p>
<h4 id="前端-3">前端</h4>
<p><code>playground/skill/fireball/zbase.js</code></p>
<pre tabindex="0"><code>class FireBall extends AcGameObject {
    update() {
        if (this.move_length &lt; this.eps) {
            this.destroy();
            return false;
        }
        this.update_move();

        if (this.player.character !== &#34;enemy&#34;) {
            this.update_attack();
        }
        this.render();
    }
    attack(player) {
        ...
        if (this.playground.mode === &#34;multi mode&#34;) {
            this.playground.mps.send_attack(player.uuid, player.x, player.y, angle, this.damage, this.uuid);
        }
        ...
    }
    ...
}
</code></pre><p><code>playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    ...
    receive_attack(x, y, angle, damage, ball_uuid, attacker) {
        attacker.destroy_fireball(ball_uuid);
        this.x = x;
        this.y = y;
        this.is_attacked(angle, damage);
    }
    ...
}
</code></pre><p><code>game/static/js/src/playground/socket/multiplayer/zbase.js</code></p>
<pre tabindex="0"><code>class MultiPlayerSocket {
    ...
    send_attack(attackee_uuid, x, y, angle, damage, ball_uuid) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &#39;event&#39;: &#34;attack&#34;,
            &#39;uuid&#39;: outer.uuid,
            &#39;attackee_uuid&#39;: attackee_uuid,
            &#39;x&#39;: x,
            &#39;y&#39;: y,
            &#39;angle&#39;: angle,
            &#39;damage&#39;: damage,
            &#39;ball_uuid&#39;: ball_uuid,
        }));
    }
    receive_attack(uuid, attackee_uuid, x, y, angle, damage, ball_uuid) {
        let attacker = this.get_player(uuid);
        let attackee = this.get_player(attackee_uuid);
        if (attacker &amp;&amp; attackee) {
            attackee.receive_attack(x, y, angle, damage, ball_uuid, attacker);
        }
    }
}
</code></pre><h4 id="后端-3">后端</h4>
<p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def attack(self, data):
        await self.channel_layer.group_send(
            self.room_name,
            {
                &#39;type&#39;: &#34;group_send_event&#34;,
                &#39;event&#39;: &#34;attack&#34;,
                &#39;uuid&#39;: data[&#39;uuid&#39;],
                &#39;x&#39;: data[&#39;x&#39;],
                &#39;y&#39;: data[&#39;y&#39;],
                &#39;angle&#39;: data[&#39;angle&#39;],
                &#39;damage&#39;: data[&#39;damage&#39;],
                &#39;ball_uuid&#39;: data[&#39;ball_uuid&#39;],
            }
        )
    ...
</code></pre><h2 id="游戏的小优化">游戏的小优化</h2>
<h3 id="多人模式下游戏没有开始前玩家不可以移动">多人模式下游戏没有开始前，玩家不可以移动</h3>
<p>为此我们先引入一个状态机：<code>'waiting' -&gt; 'fighting' -&gt; 'over'</code> 来标识当前游戏进行的状态</p>
<p>然后用一个 <code>notice_board</code> 计分板在前端显示出来</p>
<p>实现的逻辑就是：游戏初始时为 <code>waiting</code> 状态，房间内人数满 3 人时，才会进入 <code>fighting</code>，角色死亡时为 <code>over</code></p>
<p>且发射火球，移动等行为，当且仅当玩家状态为 <code>fighting</code> 时，才可以做</p>
<p>然后设定火球技能的 cd 为 3 秒，且在游戏进入 <code>fighting</code> 时，先自动进入 cd 状态</p>
<p>这样就实现了初始 3 秒内，任何玩家不可攻击</p>
<p><code>js/src/playground/notice_board/zbase.js</code></p>
<pre tabindex="0"><code>class NoticeBoard extends AcGameObject {
    constructor(playground) {
        super();

        this.playground = playground;
        this.ctx = this.playground.game_map.ctx;
        this.text = &#34;已就绪：0人&#34;;
    }
    start() {
    }

    write(text) {
        this.text = text;
    }

    update() {
        this.render();
    }

    render() {
        this.ctx.font = &#34;20px serif&#34;;
        this.ctx.fillStyle = &#34;white&#34;;
        this.ctx.textAlign = &#34;center&#34;;
        this.ctx.fillText(this.text, this.playground.width / 2, 20);
    }
}
</code></pre><p><code>js/src/playground/zbase.js</code></p>
<pre tabindex="0"><code>class AcGamePlayground {
    ...
    show(mode) {
        ...
        this.state = &#34;waiting&#34;;     // waiting -&gt; fighting -&gt; over
        this.notice_board = new NoticeBoard(this);
        this.player_count = 0;
        ...
    }
}
</code></pre><p><code>js/src/playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    ...
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.mousedown(function(e) {
            if (outer.playground.state !== &#34;fighting&#34;)
                return false;
            ...
        }
        $(window).keydown(function(e) {
            if (outer.playground.state !== &#34;fighting&#34;)
                return false;
            ...
        });
    }
    start() {
        this.playground.player_count ++ ;
        this.playground.notice_board.write(&#34;已就绪：&#34; + this.playground.player_count + &#34;人&#34;);
        if (this.playground.player_count &gt;= 3) {
            this.playground.state = &#34;fighting&#34;;
            this.playground.notice_board.write(&#34;Fighting&#34;);
        }
        ...
    }
    ...
}
</code></pre><h3 id="技能cd">技能CD</h3>
<p>给火球技能设置 3s 的 cd，实现逻辑很简单，设定一个 cool_time 变量，每次渲染的时候减去上次渲染的时间间隔</p>
<p>然后 cool_time 为 0 时，技能才可以成功释放</p>
<p>另外修改冷却时间，只用修改自己的即可</p>
<p><code>js/src/playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    constructor(...) {
        ...
        if (this.character === &#34;me&#34;) {
            this.fireball_coldtime = 3; // 单位：s
        }
    }
    ...
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.mousedown(function(e) {
            ...
            else if (e.which === 1) {
                ...
                if (outer.cur_skill === &#34;fireball&#34;) {
                    ...
                    if (outer.playground.mode === &#34;multi mode&#34;) {
                        outer.playground.mps.send_shoot_fireball(tx, ty, fireball.uuid);
                    }
                    outer.fireball_coldtime = 3;
                }
            }
            ...
        });
        $(window).keydown(function(e) {
            ...
            if (outer.fireball_coldtime &gt;= outer.eps)
                return false;
            ...
        });
    }
    update() {
        ...
        if (this.character === &#34;me&#34; &amp;&amp; this.playground.state === &#34;fighting&#34;) {
            this.update_coldtime();
        }
        ...
    }
    update_coldtime() {
        this.fireball_coldtime -= this.timedelta / 1000;
        this.fireball_coldtime = Math.max(0, this.fireball_coldtime);
    }
    ...
}
</code></pre><h3 id="用图片来渲染技能cd">用图片来渲染技能CD</h3>
<p><code>js/src/playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    constructor(...) {
        ...
        if (this.character === &#34;me&#34;) {
            this.fireball_coldtime = 3; // 单位：s
            this.fireball_img = new Image();
            this.fireball_img.src = &#34;https://cdn.acwing.com/media/article/image/2021/12/02/1_9340c86053-fireball.png&#34;;
        }
    }
    ...
    render() {
        ...
        if (this.character === &#34;me&#34; &amp;&amp; this.playground.state === &#34;fighting&#34;) {
            this.render_skill_coldtime();
        }
    }
     render_skill_coldtime() {
        let scale = this.playground.scale;
        let x = 1.5, y = 0.9, r = 0.04;

        // 渲染技能图标
        this.ctx.save();
        this.ctx.beginPath();
        this.ctx.arc(x * scale, y * scale, r * scale, 0, Math.PI * 2, false);
        this.ctx.stroke();
        this.ctx.clip();
        this.ctx.drawImage(this.fireball_img, (x - r) * scale, (y - r) * scale, r * 2 * scale, r * 2 * scale);
        this.ctx.restore();

        // 渲染冷却指示
        if (this.fireball_coldtime &gt;= this.eps){
            this.ctx.beginPath();
            this.ctx.moveTo(x * scale, y * scale);
            this.ctx.arc(x * scale, y * scale, r * scale, 0 - Math.PI / 2, Math.PI * 2 * (1 - this.fireball_coldtime / 3) - Math.PI / 2, true);
            this.ctx.lineTo(x * scale, y * scale);
            this.ctx.fillStyle = &#34;rgba(0, 0, 255, 0.6)&#34;;
            this.ctx.fill();
        }
    }
    ...
</code></pre><h3 id="添加一个闪现技能">添加一个闪现技能</h3>
<h4 id="单机部分">单机部分</h4>
<p><code>js/src/playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    constructor(...) {
        ...
        if (this.character === &#34;me&#34;) {
            ...
            this.blink_coldtime = 5;
            this.blink_img = new Image();
            this.blink_img.src = &#34;https://cdn.acwing.com/media/article/image/2021/12/02/1_daccabdc53-blink.png&#34;;
        }
    }
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.mousedown(function(e) {
            ...
            else if (e.which === 1) {
                ...
                else if (outer.cur_skill === &#34;blink&#34;) {
                    outer.blink(tx, ty);
                    // 同步函数
                    if (outer.playground.mode === &#34;multi mode&#34;) {
                        outer.playground.mps.send_blink(tx, ty);
                    }
                    outer.blink_coldtime = 5;
                }
            }
            outer.cur_skill = null; // 清空当前技能
        });
        $(window).keydown(function(e) {
            ...
            else if (e.which === 70) {    // f键
                if (outer.blink_coldtime &gt;= outer.eps) return true;
                outer.cur_skill = &#34;blink&#34;;
                return false;
            }
        });
    }
    ...
    blink(tx, ty) {
        let d = this.get_dist(this.x, this.y, tx, ty);
        d = Math.min(d, 0.5);
        let angle = Math.atan2(ty - this.y, tx - this.x);
        this.x += d * Math.cos(angle);
        this.y += d * Math.sin(angle);

        this.move_length = 0;   // 闪现完停下来
    }
    ...
    render_skill_coldtime() {
        ...
        x = 1.62, y = 0.9, r = 0.04;
        // 闪现技能
        // 渲染技能图标
        this.ctx.save();
        this.ctx.beginPath();
        this.ctx.arc(x * scale, y * scale, r * scale, 0, Math.PI * 2, false);
        this.ctx.stroke();
        this.ctx.clip();
        this.ctx.drawImage(this.blink_img, (x - r) * scale, (y - r) * scale, r * 2 * scale, r * 2 * scale);
        this.ctx.restore();

        // 渲染冷却指示
        if (this.blink_coldtime &gt;= this.eps){
            this.ctx.beginPath();
            this.ctx.moveTo(x * scale, y * scale);
            this.ctx.arc(x * scale, y * scale, r * scale, 0 - Math.PI / 2, Math.PI * 2 * (1 - this.blink_coldtime / 5) - Math.PI / 2, true);
            this.ctx.lineTo(x * scale, y * scale);
            this.ctx.fillStyle = &#34;rgba(0, 0, 255, 0.6)&#34;;
            this.ctx.fill();
        }
    }
}
</code></pre><h4 id="联机部分">联机部分</h4>
<p><code>game/static/js/src/playground/socket/multiplayer/zbase.js</code></p>
<pre tabindex="0"><code>class MultiPlayerSocket {
    ...
    send_blink(tx, ty) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &#39;event&#39;: &#34;blink&#34;,
            &#39;uuid&#39;: outer.uuid,
            &#39;tx&#39;: tx,
            &#39;ty&#39;: ty,
        }));
    }
    receive_blink(uuid, tx, ty) {
        let player = this.get_player(uuid);
        if (player) {
            player.blink(tx, ty);
        }
    }
}
</code></pre><p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def blink(self, data):
        await self.channel_layer.group_send(
            self.room_name,
            {
                &#39;type&#39;: &#34;group_send_event&#34;,
                &#39;event&#39;: &#34;blink&#34;,
                &#39;uuid&#39;: data[&#39;uuid&#39;],
                &#39;tx&#39;: data[&#39;tx&#39;],
                &#39;ty&#39;: data[&#39;ty&#39;],
            }
        )
</code></pre><h1 id="实现聊天系统ஐ">实现聊天系统ஐ</h1>
<ul>
<li><a href="https://www.acwing.com/solution/content/89508/">8.1 上课笔记 | 大菜狗</a></li>
</ul>
<hr>
<h2 id="优化键盘绑定事件">优化键盘绑定事件</h2>
<p>这部分算是之前的遗留问题，先前的 <code>keydown</code> 监听事件绑定在了 <code>window</code> 上会出现一个问题</p>
<p>如果在一个浏览器内打开多个 <code>ACAPP</code>，此时按下键位触发 <code>keydown</code> 事件，会被浏览器内所有的 <code>ACAPP</code> 都捕获到</p>
<p>之前影响不大，但对此次要实现的聊天系统就有着致命的影响，即打开一个 <code>ACAPP</code> 的聊天栏，其他都会被打开</p>
<p>所有我们要将 <code>keydown</code> 监听事件绑定到 <code>canvas</code> 上</p>
<p><code>playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    ...
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.keydown(function(e) {
            if (outer.playground.state !== &#34;fighting&#34;)
                return true;
            if (e.which === 81) {           // 键盘按下q事件
                if (outer.fireball_coldtime &gt;= outer.eps) return true;
                outer.cur_skill = &#34;fireball&#34;;
                return false;
            } else if (e.which === 70) {    // f键
                if (outer.blink_coldtime &gt;= outer.eps) return true;
                outer.cur_skill = &#34;blink&#34;;
                return false;
            }
        });
    }
}
</code></pre><p><code>playground/game-map/zbase.js</code></p>
<pre tabindex="0"><code>class GameMap extends AcGameObject {
    constructor(playground) {
        ...
        this.$canvas = $(`&lt;canvas tabindex=0&gt;&lt;/canvas&gt;`);
        ...
    }
    start() {
        this.$canvas.focus();
    }
}
</code></pre><h2 id="本地前端">本地前端</h2>
<p>要实现两个部分： 1. 文本输入框（让用户输入要发送的信息） 2. 历史记录显示框（之前用户发送的信息的显示框）</p>
<p>欲实现逻辑：用户按下 <code>&lt;Enter&gt;</code> 后，游戏界面弹出文本输入框，然后聚焦于文本输入框，且同时弹出历史记录显示框 3 秒</p>
<p>然后用户输入信息后，按下 <code>&lt;Enter&gt;</code> 后发出信息，接着信息会显示在历史记录显示框最下方，并弹出历史记录显示框 3 秒</p>
<p><code>playground/chat_field/zbase.js</code></p>
<p><code>chat field</code> 负责管理 文本输入框 和 历史记录显示框</p>
<pre tabindex="0"><code>class ChatField {
    constructor(playground) {
        this.playground = playground;

        this.$history = $(`&lt;div class=&#34;ac-game-chat-field-history&#34;&gt;&lt;/div&gt;`);
        this.$input = $(`&lt;input type=&#34;text&#34; class=&#34;ac-game-chat-field-input&#34;&gt;`);

        this.$history.hide();
        this.$input.hide();

        this.func_id = null;

        this.playground.$playground.append(this.$history);
        this.playground.$playground.append(this.$input);

        this.start();
    }

    start() {
        this.add_listening_events();
    }
    add_listening_events() {
        let outer = this;
        this.$input.keydown(function(e) {
            if (e.which === 27) {   //ESC
                outer.hide_input();
                return false;
            } else if (e.which === 13) {
                let username = outer.playground.root.settings.username;
                let text = outer.$input.val();
                if (text) {
                    outer.$input.val(&#34;&#34;);
                    outer.add_message(username, text);
                }
                return false;
            }
        });
    }
    show_history() {
        let outer = this;
        this.$history.fadeIn();
        if (this.func_id) clearTimeout(this.func_id);
        this.func_id = setTimeout(function() {
            outer.$history.fadeOut();
            outer.func_id = null;
        }, 3000);
    }
    render_message(message) {
        return $(`&lt;div&gt;${message}&lt;/div&gt;`);
    }
    add_message(username, text) {
        this.show_history();
        let message = `[${username}] ${text}`;
        this.$history.append(this.render_message(message));
        this.$history.scrollTop(this.$history[0].scrollHeight);
    }
    show_input() {
        this.show_history();
        this.$input.show();
        this.$input.focus();    // 输入时，聚焦于输入框
    }
    hide_input() {
        this.$input.hide();
        this.playground.game_map.$canvas.focus();   // 退出时，聚焦回游戏界面
    }
}
</code></pre><p><code>playground/zbase.js</code></p>
<p>把它创建出来</p>
<pre tabindex="0"><code>class AcGamePlayground {
    ...
    show(mode) {    //打开 playground 界面
        ...
        else if (mode === &#34;multi mode&#34;) {
            this.chat_field = new ChatField(this);
            ...
        }

    }
}
</code></pre><p><code>playground/player/zbase.js</code></p>
<p>添加监听事件</p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    ...
    add_listening_events() {
        ...
        this.playground.game_map.$canvas.keydown(function(e) {
            if (e.which === 13) {   // enter (显示对话框)
                if (outer.playground.mode === &#34;multi mode&#34;) {
                    outer.playground.chat_field.show_input();
                    return false;
                }
            } else if (e.which === 27) {    // esc（关闭对话框）
                if (outer.playground.mode === &#34;multi mode&#34;) {
                    outer.playground.char_field.hide_input();
                    return false;
                }
            }
            ...
        }
    }
}
</code></pre><p><code>game.css</code></p>
<pre tabindex="0"><code>...
.ac-game-chat-field-history {
    position: absolute;
    top: 66%;
    left: 20%;
    transform: translate(-50%, -50%);
    width: 20%;
    height: 32%;
    color: white;
    font-size: 2vh;
    padding: 5px;
    overflow: auto;
}

.ac-game-chat-field-history::-webkit-scrollbar {
    width: 0;
}

.ac-game-chat-field-input {
    position: absolute;
    top: 86%;
    left: 20%;
    transform: translate(-50%, -50%);
    width: 20%;
    height: 3vh;
    color: white;
    font-size: 2vh;
    background-color: rgba(222,225,230, 0.2);
}
</code></pre><h2 id="联机聊天窗">联机聊天窗</h2>
<h3 id="前端-4">前端</h3>
<p><code>playground/chat_field/zbase.js</code></p>
<pre tabindex="0"><code>class ChatField {
    ...
    add_listening_events() {
        ...
        this.$input.keydown(function(e) {
            ...
            else if (e.which === 13) {
                ...
                if (text) {
                    ...
                    outer.playground.mps.send_message(text);
                }
                ...
            }
        });
    }
    ...
}
</code></pre><p><code>js/src/playground/socket/multiplayer/zbase.js</code></p>
<pre tabindex="0"><code>class MultiPlayerSocket {
    ...
    send_message(text) {
        let outer = this;
        this.ws.send(JSON.stringify({
            &#39;event&#39;: &#34;message&#34;,
            &#39;uuid&#39;: outer.uuid,
            &#39;username&#39;: outer.playground.root.settings.username,
            &#39;text&#39;: text,
        }));
    }
    receive_message(username, text) {
        this.playground.chat_field.add_message(username, text);
    }
}
</code></pre><h3 id="后端-4">后端</h3>
<p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def message(self, data):
        await self.channel_layer.group_send(
            self.room_name,
            {
                &#39;type&#39;: &#34;group_send_event&#34;,
                &#39;event&#39;: &#34;message&#34;,
                &#39;uuid&#39;: data[&#39;uuid&#39;],
                &#39;username&#39;: data[&#39;username&#39;],
                &#39;text&#39;: data[&#39;text&#39;],
            }
        )
</code></pre><h1 id="实现匹配系统ஐ">实现匹配系统ஐ</h1>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3435229/">9. 实现匹配系统 | 讲义</a></li>
<li><a href="https://www.acwing.com/activity/content/code/content/2360556/">9.1 上课笔记 | 一只野生彩色铅笔</a></li>
</ul>
<hr>
<p>本章节内容是利用 <code>thrift</code> 创建客户端-服务端交互的接口</p>
<p>然后利用该接口完成一个匹配系统</p>
<p>匹配系统由一个消息队列 + 生产者-消费者模型 + 匹配池 完成</p>
<p>基本与 Linux基础课 里的部分完全一致</p>
<p>当时我们是拿 cpp 来写的，写了差不多 200 行</p>
<p>本节会拿 py 来实现，差不多 140 行即可</p>
<p><code>thrift</code> 接口文件</p>
<pre tabindex="0"><code>namespace py match_service

service Match {
    i32 add_player(1: i32 score, 2: string uuid, 3: string username, 4: string photo, 5: string channel_name),
}
</code></pre><p>然后用该源文件生成接口文件</p>
<h2 id="服务端">服务端</h2>
<p>配置 <code>asgi.py</code> 让服务端进程可以调用客户端进程里的函数</p>
<p><code>acapp/acapp/asgi.py</code></p>
<pre tabindex="0"><code>import os

import django
os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;, &#39;acapp.settings&#39;)
django.setup()
...
from channels.layers import get_channel_layer
channel_layer = get_channel_layer()
...
</code></pre><p><code>acapp/match_system/src/main.py</code></p>
<pre tabindex="0"><code>#! /usr/bin/env python3

import glob
import sys
sys.path.insert(0, glob.glob(&#39;../../&#39;)[0])

from match_server.match_service import Match

from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.server import TServer

from queue import Queue
from time import sleep
from threading import Thread

from acapp.asgi import channel_layer
from asgiref.sync import async_to_sync
from django.core.cache import cache

queue = Queue()  # 消息队列

class Player:
    def __init__(self, score, uuid, username, photo, channel_name):
        self.score = score
        self.uuid = uuid
        self.username = username
        self.photo = photo
        self.channel_name = channel_name
        self.waiting_time = 0  # 等待时间


class Pool:
    def __init__(self):
        self.players = []

    def add_player(self, player):
        self.players.append(player)

    def check_match(self, a, b):
        dt = abs(a.score - b.score)
        a_max_dif = a.waiting_time * 50
        b_max_dif = b.waiting_time * 50
        return dt &lt;= a_max_dif and dt &lt;= b_max_dif

    def match_success(self, ps):
        print(&#34;Match Success: %s %s %s&#34; % (ps[0].username, ps[1].username, ps[2].username))
        room_name = &#34;room-%s-%s-%s&#34; % (ps[0].uuid, ps[1].uuid, ps[2].uuid)
        players = []
        for p in ps:
            async_to_sync(channel_layer.group_add)(room_name, p.channel_name)
            players.append({
                &#39;uuid&#39;: p.uuid,
                &#39;username&#39;: p.username,
                &#39;photo&#39;: p.photo,
                &#39;hp&#39;: 100,
            })
        cache.set(room_name, players, 3600)  # 有效时间：1小时
        for p in ps:
            async_to_sync(channel_layer.group_send)(
                room_name,
                {
                    &#39;type&#39;: &#34;group_send_event&#34;,
                    &#39;event&#39;: &#34;create_player&#34;,
                    &#39;uuid&#39;: p.uuid,
                    &#39;username&#39;: p.username,
                    &#39;photo&#39;: p.photo,
                }
            )

    def increase_waiting_time(self):
        for player in self.players:
            player.waiting_time += 1

    def match(self):
        while len(self.players) &gt;= 3:
            self.players = sorted(self.players, key=lambda p: p.score)
            flag = False
            for i in range(len(self.players) - 2):
                a, b, c = self.players[i], self.players[i + 1], self.players[i + 2]
                if self.check_match(a, b) and self.check_match(a, c) and self.check_match(b, c):
                    self.match_success([a, b, c])
                    self.players = self.players[:i] + self.players[i + 3:]
                    flag = True
                    break
            if not flag:
                break

        self.increase_waiting_time()



class MatchHandler:
    def add_player(self, score, uuid, username, photo, channel_name):
        print(&#34;Add Player: %s %d&#34; % (username, score))
        player = Player(score, uuid, username, photo, channel_name)
        queue.put(player)
        return 0


def get_player_from_queue():
    try:
        return queue.get_nowait()
    except:
        return None


def worker():
    pool = Pool()
    while True:
        player = get_player_from_queue()
        if player:
            pool.add_player(player)
        else:
            pool.match()
            sleep(1)



if __name__ == &#39;__main__&#39;:
    handler = MatchHandler()
    processor = Match.Processor(handler)
    transport = TSocket.TServerSocket(host=&#39;127.0.0.1&#39;, port=9090)
    tfactory = TTransport.TBufferedTransportFactory()
    pfactory = TBinaryProtocol.TBinaryProtocolFactory()

    server = TServer.TThreadedServer(
        processor, transport, tfactory, pfactory)

    Thread(target=worker, daemon=True).start()

    print(&#39;Starting the server...&#39;)
    server.serve()
    print(&#39;done.&#39;)
</code></pre><h2 id="客户端">客户端</h2>
<p>扩展数据库表，让其可以存放 rank分 的信息</p>
<p><code>game/models/player/player.py</code></p>
<pre tabindex="0"><code>...
class Player(models.Model):
    ...
    score = models.IntegerField(default=1500)
    ...
</code></pre><p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>from channels.generic.websocket import AsyncWebsocketConsumer
import json
from django.conf import settings
from django.core.cache import cache

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

from match_system.src.match_server.match_service import Match
from game.models.player.player import Player
from channels.db import database_sync_to_async

class MultiPlayer(AsyncWebsocketConsumer):
    async def connect(self):
        await self.accept()

    async def disconnect(self, close_code):
        if self.room_name:
            await self.channel_layer.group_discard(self.room_name, self.channel_name)

    async def create_player(self, data):
        self.room_name = None
        self.uuid = data[&#39;uuid&#39;]
        # Make socket
        transport = TSocket.TSocket(&#39;127.0.0.1&#39;, 9090)
        # Buffering is critical. Raw sockets are very slow
        transport = TTransport.TBufferedTransport(transport)

        # Wrap in a protocol
        protocol = TBinaryProtocol.TBinaryProtocol(transport)

        # Create a client to use the protocol encoder
        client = Match.Client(protocol)

        def db_get_player():
            return Player.objects.get(user__username=data[&#39;username&#39;])

        player = await database_sync_to_async(db_get_player)()

        # Connect!
        transport.open()

        client.add_player(player.score, data[&#39;uuid&#39;], data[&#39;username&#39;], data[&#39;photo&#39;], self.channel_name)

        # Close!
        transport.close()
    
    async def group_send_event(self, data):
        if not self.room_name:
            keys = cache.keys(&#39;*%s*&#39; % (self.uuid))
            if keys:
                self.room_name = keys[0]
        await self.send(text_data=json.dumps(data))
    ...
</code></pre><h1 id="项目收尾ஐ">项目收尾ஐ</h1>
<h2 id="加密压缩js代码">加密、压缩js代码</h2>
<p>安装 <code>terser</code> :</p>
<pre tabindex="0"><code>sudo apt-get update
sudo apt-get install npm
sudo npm install terser -g
</code></pre><p><code>terser</code> 不仅支持文件输入，也支持标准输入。结果会输出到标准输出中。</p>
<p>使用方式：</p>
<pre tabindex="0"><code>terser xxx.js -c -m
</code></pre><p>我们将整合 <code>js</code> 文件的脚本修改一下即可：</p>
<p><code>scripts/compress_game_js.sh</code></p>
<pre tabindex="0"><code>#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &#39;*.js&#39; | sort | xargs cat | terser -c -m &gt; ${JS_PATH_DIST}game.js

echo &#34;yes&#34; | python3 manage.py collectstatic
</code></pre><h2 id="清理监听函数">清理监听函数</h2>
<p>在AcAPP关闭之前触发的事件可以通过如下api添加：</p>
<pre tabindex="0"><code>AcWingOS.api.window.on_close(func);
</code></pre><p>注意：</p>
<ul>
<li>同一个页面中，多个 <code>acapp</code> 引入的 <code>js</code> 代码只会加载一次，因此 <code>AC_GAME_OBJECTS</code> 等全局变量是同一个页面、同一个 <code>acapp</code> 的所有窗口共用的</li>
<li>各自创建的局部变量是独立的，比如 <code>new AcGame()</code> 创建出的对象各个窗口是独立的</li>
</ul>
<p>我们给每一个窗口创建一个 <code>uid</code> 然后根据不同的 <code>uid</code> 进行事件解绑</p>
<p><code>playground/zbase.js</code></p>
<pre tabindex="0"><code>class AcGamePlayground {
    ...
    create_uuid() {
        let res = &#34;&#34;;
        for (let i = 0; i &lt; 8; i ++ ) {
            let x = parseInt(Math.floor(Math.random() * 10));   //[0, 10)
            res += x;
        }
        return res;
    }
    start() {
        let outer = this;
        let uuid = this.create_uuid();
        $(window).on(`resize.${uuid}`, function() {
            outer.resize();
        });

        if (this.root.AcWingOS) {
            outer.root.AcWingOS.api.window.on_close(function() {
                $(window).off(`resize.${uuid}`);
            });
        }
    }
    ...
}
</code></pre><h2 id="编写每局游戏的结束界面">编写每局游戏的结束界面</h2>
<p>单独创建一个结束界面，然后游戏结束的时候渲染出该结束界面即可</p>
<p>因为结束界面要覆盖在游戏界面之上，因此我们需要先修改一下游戏引擎，添加一个 <code>late_update</code></p>
<p>在每一帧渲染的内容最后再渲染，从而实现结束界面叠加在游戏界面之上的效果</p>
<p><code>ac_game_object/zbase.js</code></p>
<pre tabindex="0"><code>...
class AcGameObject {
    ...
    late_update() { // 每一帧均会执行一次，且在所有 update 执行完后才执行

    }
    ...
}
...
let AC_GAME_ANIMATION = function(timestamp) {
    ...
    for (let i = 0; i &lt; AC_GAME_OBJECTS.length; i ++ ) {
        let obj = AC_GAME_OBJECTS[i];
        obj.late_update();
    }
    ...
}
...
</code></pre><p>然后我们做一个渲染出结束界面的类</p>
<p><code>playground/score_board/zbase.js</code></p>
<pre tabindex="0"><code>class ScoreBoard extends AcGameObject {
    constructor(playground) {
        super();
        this.playground = playground;
        this.ctx = this.playground.game_map.ctx;

        this.state = null;  // win-胜利；lose-失败

        this.win_img = new Image();
        this.win_img.src = &#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_8f58341a5e-win.png&#34;;

        this.lose_img = new Image();
        this.lose_img.src = &#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_9254b5f95e-lose.png&#34;;
    }
    start() {
    }

    add_listening_events() {    // 点击后，返回主页面
        let outer = this;
        let $canvas = this.playground.game_map.$canvas;

        $canvas.on(&#39;click&#39;, function() {
            outer.playground.hide();
            outer.playground.root.menu.show();
        });
    }

    win() {
        this.state = &#34;win&#34;;
        let outer = this;
        setTimeout(function() {
            outer.add_listening_events();
        }, 1000);   // 1秒后监听点击事件
    }

    lose() {
        this.state = &#34;lose&#34;;
        let outer = this;
        setTimeout(function() {
            outer.add_listening_events();
        }, 1000);   // 1秒后监听点击事件
    }

    late_update() {
        this.render();  // 渲染在图层最上方
    }
    render() {
        let len = this.playground.height / 2;
        if (this.state === &#34;win&#34;) {
            this.ctx.drawImage(this.win_img, this.playground.width / 2 - len / 2, this.playground.height / 2 - len / 2, len, len);
        } else if (this.state === &#34;lose&#34;) {
            this.ctx.drawImage(this.lose_img, this.playground.width / 2 - len / 2, this.playground.height / 2 - len / 2, len, len);
        }
    }
}
</code></pre><p>通过游戏结束的逻辑判断，渲染结束界面，同时在结束并返回主菜单的时候，重置游戏元素</p>
<p>游戏元素重置</p>
<p><code>playground/zbase.js</code></p>
<pre tabindex="0"><code>class AcGamePlayground {
    ...
    show(mode) {    // 打开 playground 界面
        ...
        this.score_board = new ScoreBoard(this);
        ...
    }
    ...
    hide() {
        // 清空所有游戏元素
        while (this.players &amp;&amp; this.players.length &gt; 0) {
            this.players[0].destroy();
        }
        if (this.game_map) {
            this.game_map.destroy();
            this.game_map = null;
        }
        if (this.notice_board) {
            this.notice_board.destroy();
            this.notice_board = null;
        }
        if (this.score_board) {
            this.score_board.destroy();
            this.score_board = null;
        }
        this.$playground.empty();   // 清空所有html标签
        this.$playground.hide();
    }
}
</code></pre><p>游戏结束的逻辑判断</p>
<p><code>playground/player/zbase.js</code></p>
<pre tabindex="0"><code>class Player extends AcGameObject {
    ...
    update() {
        ...
        this.update_win();
        ...
    }
    update_win() {
        // 竞赛状态，且只有一名玩家，且改名玩家就是我，则胜利
        if (this.playground.state === &#34;fighting&#34; &amp;&amp; this.character === &#34;me&#34; &amp;&amp; this.playground.players.length === 1) {
            this.playground.state = &#34;over&#34;;
            this.playground.score_board.win();
        }
    }
    ...
    on_destroy() {
        // 我死亡，且游戏处于竞赛状态，则失败
        if (this.character === &#34;me&#34; &amp;&amp; this.playground.state === &#34;fighting&#34;) {
            this.playground.state = &#34;over&#34;
            this.playground.score_board.lose();
        }
        ...
    }
}
</code></pre><h2 id="更新战绩">更新战绩</h2>
<p>这里我们完全交给后端来判断</p>
<p>在处理广播的 <code>attack</code> 信息的时候，先前我们额外留了一个参数 <code>hp</code></p>
<p>围绕该 <code>hp</code> 进行续写，若当前房间内 <code>hp</code> 大于 0 的玩家少于等于 1 个</p>
<p>则对于所有 <code>hp</code> 为 0 的玩家减 <code>rank</code> 分，大于 0 的玩家加 <code>rank</code> 分</p>
<p><code>consumers/multiplayer/index.py</code></p>
<pre tabindex="0"><code>...
class MultiPlayer(AsyncWebsocketConsumer):
    ...
    async def attack(self, data):
        if not self.room_name:
            return
        players = cache.get(self.room_name)

        if not players:
            return

        for player in players:
            if player[&#39;uuid&#39;] == data[&#39;attackee_uuid&#39;]:
                player[&#39;hp&#39;] -= 25

        remain_cnt = 0
        for player in players:
            if player[&#39;hp&#39;] &gt; 0:
                remain_cnt += 1

        if remain_cnt &gt; 1:  # 继续进行游戏
            if self.room_name:
                cache.set(self.room_name, players, 3600)
        else:   # 结算 
            def db_update_player_score(username, score):
                player = Player.objects.get(user__username=username)
                player.score += score
                player.save()
            for player in players:
                if player[&#39;hp&#39;] &lt;= 0:
                    await database_sync_to_async(db_update_player_score)(player[&#39;username&#39;], -5)
                else:
                    await database_sync_to_async(db_update_player_score)(player[&#39;username&#39;], 10)
        ...
    ...
</code></pre><h2 id="添加faviconico">添加favicon.ico</h2>
<p>这是修正一个小 BUG，之前 web 端一直没有网页显示图标，这里给他加上去</p>
<p><code>game/templates/multiends/web.html</code></p>
<pre tabindex="0"><code>...
&lt;head&gt;
    ...
    &lt;link rel=&#34;icon&#34; href=&#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_be4c11ce5f-acapp.png&#34;&gt;
&lt;/head&gt;
...
</code></pre><h1 id="各种环境命令">各种环境命令</h1>
<ol>
<li>启动<code>django</code>项目，在<code>~/acapp</code>目录下执行：</li>
</ol>
<pre tabindex="0"><code>python3 manage.py runserver 0.0.0.0:8000
</code></pre><ol start="2">
<li>每次修改好 <code>game/static</code>  下的文件后，需要在<code>~/acapp</code>目录下运行打包文件：</li>
</ol>
<pre tabindex="0"><code>./scripts/compress_game_js.sh
</code></pre><ol start="3">
<li>在定义完一个数据表之后，需要将创建的数据表更新到 <code>django</code> 的数据库中去：</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f00">$</span> python3 manage.py makemigrations
</span></span><span style="display:flex;"><span>&gt; Migrations <span style="color:#fff;font-weight:bold">for</span> <span style="color:#0ff;font-weight:bold">&#39;game&#39;</span>:
</span></span><span style="display:flex;"><span>&gt;   game/migrations/<span style="color:#ff0;font-weight:bold">0001</span>_initial.py
</span></span><span style="display:flex;"><span>&gt;     - Create model Player
</span></span><span style="display:flex;"><span><span style="color:#f00">$</span> 
</span></span><span style="display:flex;"><span><span style="color:#f00">$</span> python3 manage.py migrate
</span></span><span style="display:flex;"><span>&gt; Operations to perform:
</span></span><span style="display:flex;"><span>&gt;   Apply <span style="color:#fff;font-weight:bold">all</span> migrations: admin, auth, contenttypes, game, sessions
</span></span><span style="display:flex;"><span>&gt; Running migrations:
</span></span><span style="display:flex;"><span>&gt;   Applying game<span style="color:#ff0;font-weight:bold">.0001</span>_initial... OK
</span></span></code></pre></div><ol start="4">
<li>启动<code>nginx</code>服务，用于域名访问：</li>
</ol>
<pre tabindex="0"><code>sudo /etc/init.d/nginx start
</code></pre><ol start="5">
<li>启动<code>uwsgi</code>服务，用于域名访问：</li>
</ol>
<pre tabindex="0"><code>uwsgi --ini scripts/uwsgi.ini
</code></pre><ol start="6">
<li>关闭<code>uwsgi</code>服务：</li>
</ol>
<pre tabindex="0"><code>sudo pkill -f uwsgi -9
</code></pre><ol start="7">
<li>启动 <code>redis-server</code>，用于一键登录：</li>
</ol>
<pre tabindex="0"><code>sudo redis-server /etc/redis/redis.conf
</code></pre><ol start="8">
<li>启动 <code>Django_channels</code>，用于联机对战，在<code>~/acapp</code>目录下执行：</li>
</ol>
<pre tabindex="0"><code>daphne -b 0.0.0.0 -p 5015 acapp.asgi:application
</code></pre><ol start="9">
<li>启动<code>thrift</code>服务，用于匹配系统，在<code>~/acapp/match_system/src/</code>目录下执行：</li>
</ol>
<pre tabindex="0"><code>./main.py
</code></pre><ol start="10">
<li>版本更新，在<a href="https://www.acwing.com/user/myspace/application/update/2433/">术士之战</a>中将 <code>js地址</code> 一栏更新为：</li>
</ol>
<pre tabindex="0"><code>// 本地文件夹中对应的文件也需要更改名字
https://app2433.acapp.acwing.com.cn/static/js/dist/game-版本号.js
</code></pre>]]></content:encoded>
    </item>
    
    <item>
      <title>AcWing Linux 基础课</title>
      <link>https://xancoding.cn/posts/acwlinux/</link>
      <pubDate>Sun, 16 Oct 2022 14:23:58 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwlinux/</guid>
      <description>&lt;h1 id=&#34;acwing-linux-基础课&#34;&gt;AcWing Linux 基础课&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/57/&#34;&gt;AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&#34;&gt;命令行的艺术 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;The Missing Semester of Your CS Education&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;terminal&#34;&gt;Terminal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;终端，一个程序，是界面上打开的黑框框本身，&lt;code&gt;shell&lt;/code&gt; 运行于其中&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shell&#34;&gt;Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855530/&#34;&gt;常用文件管理命令 | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855883/&#34;&gt;Shell 语法 | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030391/&#34;&gt;管道、环境变量与常用命令  | AcWing Linux 基础课&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030414/&#34;&gt;常用命令  | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wangdoc.com/bash/&#34;&gt;《Bash 脚本教程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/course-shell/&#34;&gt;第 1 讲 - 课程概览与 Shell | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/shell-tools/&#34;&gt;第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/19556676&#34;&gt;终极 Shell——ZSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;快速入门 zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shell是什么&#34;&gt;Shell是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 是我们通过命令行与操作系统沟通的 &lt;code&gt;程序&lt;/code&gt;，是个 &lt;code&gt;命令行解释器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 负责外界与 &lt;code&gt;Linux 内核&lt;/code&gt; 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt;解释器有 &lt;code&gt;sh&lt;/code&gt;、&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;zsh...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shell常用命令&#34;&gt;Shell常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ag xxx&lt;/code&gt;：搜索当前目录下的所有文件，&lt;strong&gt;检索&lt;code&gt;xxx&lt;/code&gt;字符串&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find /path/to/directory/ -name &#39;*.py&#39;&lt;/code&gt;：&lt;strong&gt;搜索&lt;/strong&gt;某个文件路径下的所有&lt;code&gt;*.py&lt;/code&gt;&lt;strong&gt;文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;：展示当前用户的历史操作。内容存放在&lt;code&gt;~/.bash_history&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep xxx&lt;/code&gt;：从&lt;code&gt;stdin&lt;/code&gt;中读入若干行数据，如果某行中包含&lt;code&gt;xxx&lt;/code&gt;，则输出该行；否则忽略该行，&lt;strong&gt;用于查找文件里符合条件的字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tmux--vim&#34;&gt;Tmux &amp;amp;&amp;amp; Vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855620/&#34;&gt;Tmux和Vim | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2019/10/tmux.html&#34;&gt;Tmux 使用教程 | 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kuanghy.github.io/2016/09/29/tmux&#34;&gt;Tmux 简介与使用 | Huoty&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/articles/5426.html#comments&#34;&gt;简明 VIM 练级攻略 | 酷壳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/editors/&#34;&gt;第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim-adventures.com/&#34;&gt;VIM 大冒险 - Game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tmux-是什么&#34;&gt;Tmux 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Tmux&lt;/code&gt; 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;远程 &lt;code&gt;SSH&lt;/code&gt; 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;tmux--session--window--pane&#34;&gt;Tmux &amp;amp;&amp;amp; Session &amp;amp;&amp;amp; Window &amp;amp;&amp;amp; Pane&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个&lt;code&gt;tmux &lt;/code&gt;可以有好多个&lt;code&gt;session&lt;/code&gt;(会话)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;可以有好多个&lt;code&gt;window&lt;/code&gt;(窗口)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;window&lt;/code&gt;可以有好多个&lt;code&gt;pane&lt;/code&gt;(面板)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;里不超过10个&lt;code&gt;window&lt;/code&gt;是最方便的：可以用0到9迅速切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tmux常用命令&#34;&gt;Tmux常用命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;tmux new -s &amp;lt;session-name&amp;gt;&lt;/code&gt;：新建会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux detach&lt;/code&gt; $or$ &lt;code&gt;Ctrl + a d&lt;/code&gt;：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux attach -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：重新接入某个已存在的会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux kill-session -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：杀死某个会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux switch -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：切换会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux rename-session -t &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt;&lt;/code&gt;：重命名会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux ls&lt;/code&gt; $or$ &lt;code&gt;Ctrl + a s&lt;/code&gt;：查看当前所有的 Tmux 会话&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;tmux&lt;/code&gt;中选中文本时，需要按住 &lt;code&gt;shift&lt;/code&gt; 键&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux&lt;/code&gt;中复制/粘贴文本：
&lt;ol&gt;
&lt;li&gt;按下 &lt;code&gt;Ctrl + a&lt;/code&gt; 后松开手指，然后按 &lt;code&gt;[&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板&lt;/li&gt;
&lt;li&gt;按下 &lt;code&gt;Ctrl + a&lt;/code&gt; 后松开手指，然后按 &lt;code&gt;]&lt;/code&gt; ，会将剪贴板中的内容粘贴到光标处&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vim-是什么&#34;&gt;Vim 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vim常用命令&#34;&gt;Vim常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一般模式切换到编辑模式（常用）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; : 在光标所处位置 &lt;strong&gt;直接&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; : 在光标所处位置的 &lt;strong&gt;下一个字符&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; : 在光标所处位置的 &lt;strong&gt;下一行&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; : 取代当前光标处的字符，然后开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ESC]&lt;/code&gt; : 退出编辑模式，回到一般模式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;光标移动操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;n&amp;lt;Space&amp;gt;&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标 &lt;strong&gt;向右移动&lt;/strong&gt;这一行的n个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&amp;lt;Enter&amp;gt;&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标 &lt;strong&gt;向下移动&lt;/strong&gt;n行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;功能键[Home]&lt;/code&gt;: 光标移动到 &lt;strong&gt;本行开头&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; 或 &lt;code&gt;功能键[End]&lt;/code&gt;: 光标移动到 &lt;strong&gt;本行末尾&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n&lt;/code&gt; 或 &lt;code&gt;nG&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标移动到 &lt;strong&gt;第n行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt;: 光标移动到 &lt;strong&gt;最后一行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg&lt;/code&gt; : 光标移动到 &lt;strong&gt;第一行&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;查找、替换操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/word&lt;/code&gt; : 向 &lt;strong&gt;光标之下&lt;/strong&gt; 寻找 第一个值为 &lt;strong&gt;word&lt;/strong&gt; 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?word&lt;/code&gt; : 向 &lt;strong&gt;光标之上&lt;/strong&gt; 寻找 第一个值为 &lt;strong&gt;word&lt;/strong&gt; 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; : 重复 &lt;strong&gt;前一个&lt;/strong&gt; 查找操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; : 反向 重复 &lt;strong&gt;前一个&lt;/strong&gt; 查找操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n1,n2s/word1/word2/g&lt;/code&gt; : &lt;strong&gt;n1&lt;/strong&gt; 与 &lt;strong&gt;n2&lt;/strong&gt; 为数字，在第 &lt;strong&gt;n1&lt;/strong&gt; 行与 &lt;strong&gt;n2&lt;/strong&gt; 行之间寻找 &lt;strong&gt;word1&lt;/strong&gt; 这个字符串，并将该字符串 替换 为 &lt;strong&gt;word2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,$s/word1/word2/g&lt;/code&gt; : 将全文的 &lt;strong&gt;word1&lt;/strong&gt; 替换为 &lt;strong&gt;word2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,$s/word1/word2/gc&lt;/code&gt; : 将全文的 &lt;strong&gt;word1&lt;/strong&gt; 替换为 &lt;strong&gt;word2&lt;/strong&gt;，且在替换前 &lt;strong&gt;要求用户确认&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文本操作（可搭配 &lt;code&gt;数字+&amp;lt;Enter&amp;gt;/&amp;lt;Space&amp;gt;、0、G、$&lt;/code&gt; 等使用，达到预期组合效果）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; : 选中文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; : 删除选中的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; : 删除当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; : 复制选中的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yy&lt;/code&gt; : 复制当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; : 将复制的数据在光标的下一行/下一个位置 粘贴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; : 撤销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + r&lt;/code&gt; : 取消撤销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; : 将选中的文本整体 &lt;strong&gt;向右缩进一次&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; : 将选中的文本整体 &lt;strong&gt;向左缩进一次&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;命令行操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt; : 保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w!&lt;/code&gt; : 强制保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt; : 退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; : 强制退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; : 保存并退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set paste&lt;/code&gt; : 设置成粘贴模式，取消代码自动缩进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nopaste&lt;/code&gt; : 取消粘贴模式，开启代码自动缩进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nu&lt;/code&gt; : 显示行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nonu&lt;/code&gt; : 隐藏行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:noh&lt;/code&gt;：关闭查找关键词高亮&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + q&lt;/code&gt; : 当&lt;code&gt;vim&lt;/code&gt;卡死时，可以 &lt;strong&gt;取消当前正在执行的命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ssh&#34;&gt;SSH&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898263/&#34;&gt;SSH | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;Adding a new SSH key to your GitHub account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ssh是什么&#34;&gt;SSH是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SSH是一种网络协议，用于计算机之间的加密登录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ssh-免密登录&#34;&gt;SSH 免密登录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh-key-gen&lt;/code&gt; ：在本地服务器生成密钥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd .ssh/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim config&lt;/code&gt; ：定义服务器别名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;ssh-copy-id server&lt;/code&gt;：在本地服务器配置免密登录至云服务器&lt;/li&gt;
&lt;li&gt;免密登录至&lt;code&gt;docker 容器&lt;/code&gt;步骤同上&lt;/li&gt;
&lt;li&gt;配置完成后，就可以直接使用 &lt;code&gt;ssh server&lt;/code&gt; 免密登录啦&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;scp&#34;&gt;SCP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898266/&#34;&gt;SCP | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;scp是什么&#34;&gt;SCP是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;scp-传文件&#34;&gt;SCP 传文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;复制多个文件：&lt;code&gt;scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;复制文件夹 ：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scp -r ~/tmp SERVER:/home/acs/&lt;/code&gt;：将本地家目录中的&lt;code&gt;tmp&lt;/code&gt;文件夹复制到服务器中的&lt;code&gt;/home/acs/&lt;/code&gt;目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scp -r SERVER:homework .&lt;/code&gt;：将服务器中的&lt;code&gt;~/homework/&lt;/code&gt;文件夹复制到本地的当前路径下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2932078/&#34;&gt;Git | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/column/6969263852206686221&#34;&gt;Git从放弃到入门&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6973299611536457742&#34;&gt;Git从放弃到入门：状态与阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://juejin.cn/post/6974039503056928776&#34;&gt;Git从放弃到入门：撤销操作&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2018/10/git-internals.html&#34;&gt;Git 原理入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learngitbranching.js.org/?locale=zh_CN&#34;&gt;Learn Git Braching - Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;Pro Git Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;git是什么&#34;&gt;Git是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;git常用命令&#34;&gt;Git常用命令&lt;/h3&gt;
&lt;h4 id=&#34;常用命令&#34;&gt;常用命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git add XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件添加到暂存区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;给自己看的备注信息&amp;quot;&lt;/code&gt;：将暂存区的内容提交到当前分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要 -u 以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库&lt;code&gt;XXX&lt;/code&gt;下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git restore --staged XX&lt;/code&gt;或&lt;code&gt;git reset HEAD XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;从暂存区里移除&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git checkout XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-全局设置&#34;&gt;Git 全局设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name xxx&lt;/code&gt;：设置全局用户名，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email xxx@xxx.com&lt;/code&gt;：设置全局邮箱地址，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;：将当前目录配置成&lt;code&gt;git&lt;/code&gt;仓库，信息记录在隐藏的&lt;code&gt;.git&lt;/code&gt;文件夹中&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-查看命令&#34;&gt;Git 查看命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git diff XX&lt;/code&gt;：查看&lt;code&gt;XX&lt;/code&gt;文件相对于暂存区修改了哪些内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --pretty=oneline&lt;/code&gt;：用一行来显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reflog&lt;/code&gt;：查看&lt;code&gt;HEAD&lt;/code&gt;指针的移动历史（包括被回滚的版本）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-删除命令&#34;&gt;Git 删除命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git rm --cached XX&lt;/code&gt;：将文件从仓库索引目录中删掉，不希望管理这个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --staged xx&lt;/code&gt;：将&lt;code&gt;xx&lt;/code&gt;从暂存区里移除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout — XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-代码回滚&#34;&gt;Git 代码回滚&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;或&lt;code&gt;git reset --hard HEAD~ &lt;/code&gt;：将代码库回滚到上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^^&lt;/code&gt;：往上回滚两次，以此类推&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD~100&lt;/code&gt;：往上回滚100个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard 版本号&lt;/code&gt;：回滚到某一特定版本&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-远程仓库&#34;&gt;Git 远程仓库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add origin git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将本地仓库关联到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要-u以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin branch_name&lt;/code&gt;：将本地的某个分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库XXX下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-分支命令&#34;&gt;Git 分支命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch branch_name&lt;/code&gt;：创建新分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b branch_name&lt;/code&gt;：创建并切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout branch_name&lt;/code&gt;：切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge branch_name&lt;/code&gt;：将分支&lt;code&gt;branch_name&lt;/code&gt;合并到当前分支上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d branch_name&lt;/code&gt;：删除本地仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-stash-暂存&#34;&gt;Git stash 暂存&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt;：将工作区和暂存区中尚未提交的修改存入栈中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash drop&lt;/code&gt;：删除栈顶存储的修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;：查看栈中所有元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;git更换远程仓库地址&#34;&gt;Git更换远程仓库地址&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote -v  &lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;查看远端地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote &lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;查看远端仓库名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote rm origin &lt;span style=&#34;color:#f00&#34;&gt;#&lt;/span&gt; &lt;span style=&#34;color:#f00&#34;&gt;删除远程的仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git remote &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;add&lt;/span&gt; origin https:&lt;span style=&#34;color:#007f7f&#34;&gt;//github.com/xx/xx.git （新地址） # 重新添加远程仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push --&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;set&lt;/span&gt;-upstream origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;本地项目上传到github&#34;&gt;本地项目上传到GitHub&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;配置&lt;code&gt;ssh-key&lt;/code&gt;实现本地与&lt;code&gt;Git&lt;/code&gt;服务器免密交互&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh-keygen  # 生成密钥
cat .ssh/id_rsa.pub
# 复制密钥，提交到 git 服务器的 ssh 密钥中
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按照下面的操作在本地文件夹配置一下&lt;code&gt;Git&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global user.name xxx  # 设置用户名
git config --global user.email xxx@xxx.com  # 设置用户邮箱

git init
git add .
git commit -m &amp;#34;xxx&amp;#34;
git remote add origin https://github.com/xxx/XXX.git  # 建立连接
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;gitignore的作用&#34;&gt;.gitignore的作用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;工程常识：缓存文件，可执行文件，编译文件 不要传到自己的 git 项目里&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.gitignore的作用就是帮助我们在git add时将我们指定的一些文件自动排除在外，不提交到git当中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Git工作区的根目录下创建一个特殊的&lt;code&gt;.gitignore&lt;/code&gt;文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;thrift&#34;&gt;&lt;strong&gt;Thrift&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/video/3479/&#34;&gt;Thrift | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md&#34;&gt;Thrift_learning - AcGit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog | Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;thrift 官网&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://thrift.apache.org/tutorial/&#34;&gt;Tutorial&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift&#34;&gt;tutorial.thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;thrift是什么&#34;&gt;Thrift是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;例实现一个游戏的匹配服务&#34;&gt;例：实现一个游戏的匹配服务&lt;/h3&gt;
&lt;h4 id=&#34;基本框架&#34;&gt;基本框架&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;游戏应用端 &lt;code&gt;game&lt;/code&gt;（Python3）
&lt;ol&gt;
&lt;li&gt;客户端：与 匹配系统服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;匹配系统服务器 &lt;code&gt;match_system&lt;/code&gt;（C++）
&lt;ol&gt;
&lt;li&gt;服务端：与 游戏应用端 的客户端交互&lt;/li&gt;
&lt;li&gt;客户端：与 数据存储服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据存储服务器（已经实现）
&lt;ol&gt;
&lt;li&gt;服务端：与 匹配系统服务器 的客户端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;文件结构&#34;&gt;文件结构&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;实现过程&#34;&gt;实现过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;定义接口 (&lt;code&gt;thrift&lt;/code&gt; 文件夹用于存放接口 )&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Server&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;match_system&lt;/code&gt;文件夹下生成 C++版本的服务端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen cpp tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将&lt;code&gt;gen cpp&lt;/code&gt; 文件夹重命名，如：&lt;code&gt;match_server&lt;/code&gt;（区别于之后要在此处生成的&lt;code&gt;client_server&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;Match_server.skeleton.cpp&lt;/code&gt; 移动到当前 &lt;code&gt;src&lt;/code&gt; 目录下并重命名为 &lt;code&gt;main.cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;由于移动了 &lt;code&gt;main.cpp&lt;/code&gt; 故需要修改一下&lt;code&gt; main.cpp&lt;/code&gt; 中头文件里关于 &lt;code&gt;Match.h&lt;/code&gt; 的引用路径：&lt;code&gt;#include &amp;quot;Match.h&amp;quot;&lt;/code&gt; -&amp;gt; &lt;code&gt;#include &amp;quot;match_server/Match.h&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;main.cpp&lt;/code&gt;中实现具体业务逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Client&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;game&lt;/code&gt;文件夹下生成 &lt;code&gt;python3&lt;/code&gt; 版本的服务端，然后通过修改得到客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen py tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;删掉 &lt;code&gt;Match_remote &lt;/code&gt;，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 &lt;strong&gt;客户端&lt;/strong&gt; 功能，因此他没有作用，不妨删掉，让文档简洁一点&lt;/li&gt;
&lt;li&gt;利用官网提供的模板，在&lt;code&gt;src&lt;/code&gt;文件夹下编写 &lt;strong&gt;客户端&lt;/strong&gt; 文件 &lt;code&gt;client.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;持久化到云端
&lt;ul&gt;
&lt;li&gt;将 &lt;strong&gt;非编译文件&lt;/strong&gt; 和 &lt;strong&gt;非可执行文件&lt;/strong&gt; 提交到 &lt;code&gt;git&lt;/code&gt; 中去（好的工程习惯）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;注意：先运行服务器后，客户端才能正常运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;thrift-接口&#34;&gt;Thrift 接口&lt;/h4&gt;
&lt;h5 id=&#34;matchthrift&#34;&gt;Match.thrift&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace cpp match_service
struct User {
    1: i32 id,
    2: string name,
    3: i32 scores
}
service Match {
    i32 add_user(1: User user, 2: string info),
    i32 remove_user(1: User user, 2: string info),
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;savethrift&#34;&gt;Save.thrift&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace cpp save_service
service Save {
    /**
     * username: myserver的名称
     * password: myserver的密码的md5值的前8位，用命令md5sum
     * 用户名密码验证成功会返回0，验证失败会返回1
     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中
     */
    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;各版本预览&#34;&gt;各版本预览&lt;/h4&gt;
&lt;h5 id=&#34;match_server10&#34;&gt;Match_server:1.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_client&lt;/code&gt;：创建固定的&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


def main():
    # Make socket
    transport = TSocket.TSocket(&amp;#39;localhost&amp;#39;, 9090)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = Match.Client(protocol)

    # Connect!
    transport.open()

    user = User(1, &amp;#39;yxc&amp;#39;, 1500)
    client.add_user(user, &amp;#34;&amp;#34;)

    # Close!
    transport.close()


# 调用 main 函数
if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    return 0;
  }
};
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
    
  server.serve();
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server20&#34;&gt;Match_server:2.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_client&lt;/code&gt;：根据标准输入来创建&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# 利用 python 在终端读入信息需要引入 stdin
from sys import stdin

# 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息
# 目的是可以一直不断处理信息
# 然后重写 main 函数，使之能不断从终端读入信息
def operate(op, user_id, user_name, score):
    # Make socket 
	transport = TSocket.TSocket(&amp;#39;localhost&amp;#39;, 9090)
	
	# Buffering is critical. Raw sockets are very slow
	transport = TTransport.TBufferedTransport(transport)
	
	# Wrap in a protocol
	protocol = TBinaryProtocol.TBinaryProtocol(transport)
	
	# Create a client to use the protocol encoder
	client = Match.Client(protocol)
	
	# Connect!
	transport.open()

    # 针对 op 参数，分别进行 &amp;#34;增加&amp;#34; 与 &amp;#34;删出&amp;#34; 操作
    user = User(user_id, user_name, score)

    if op == &amp;#34;add&amp;#34;:
        client.add_user(user, &amp;#34;&amp;#34;)
    else:
        client.remove_user(user, &amp;#34;&amp;#34;)
    
    # Close!
	transport.close()

def main():
    for line in stdin:
        op, user_id, user_name, score = line.split(&amp;#39; &amp;#39;)
        operate(op, int(user_id), user_name, int(score))

# 调用 main 函数
if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：自动将用户池中前两个用户匹配到一起&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &amp;gt; 1) {
            auto a = users[0], b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());
            save_result(a.id, b.id);
        }
    }
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server30&#34;&gt;Match_server:3.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save_client&lt;/code&gt;：因为一个节点只能由一个&lt;code&gt;main&lt;/code&gt;方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个&lt;code&gt;main&lt;/code&gt;方法中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 需要额外引入的头文件
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;

// 需要额外声明的命名空间
using namespace  ::save_service;

//重写 save_result 内的内容，使其能够与 &amp;#34;数据存储服务器&amp;#34; 交互
void save_result(int a, int b) { // 记录成功匹配的信息
    printf(&amp;#34;Match Result: %d %d\n&amp;#34;, a, b);

    // Client端的板子
    std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
    std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
    std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
    SaveClient client(protocol);

    try {
        transport-&amp;gt;open();

        //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
        int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
        //输出匹配结果
        if (!res) puts(&amp;#34;success&amp;#34;);
        else puts(&amp;#34;fail&amp;#34;);

        transport-&amp;gt;close();
    } catch (TException&amp;amp; tx) {
        cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：每次只匹配分差小于 50 的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt; // 用于调用 sleep 函数
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
	//重写 save_result 内的内容，使其能够与 &amp;#34;数据存储服务器&amp;#34; 交互
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
        // Client端的板子
        std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
        std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&amp;gt;open();
            //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
            int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
            //输出匹配结果
            if (!res) puts(&amp;#34;success&amp;#34;);
            else puts(&amp;#34;fail&amp;#34;);
            transport-&amp;gt;close();
        } catch (TException&amp;amp; tx) {
            cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
        }
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &amp;gt; 1) {
            // 按照 rank分 排序
            sort(users.begin(), users.end(), [&amp;amp;](User&amp;amp; a, User&amp;amp; b) {
                return a.scores &amp;lt; b.scores;
            });
            bool flag = true;
            for (uint32_t i = 1; i &amp;lt; users.size(); ++ i) {
                auto a = users[i - 1], b = users[i];
                // 两名玩家分数差小于50时进行匹配
                if (b.scores - a.scores &amp;lt;= 50) {
                    users.erase(users.begin() + i - 1, users.begin() + i + 1);
                    save_result(a.id, b.id);
                    flag = false;
                    break;
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server40&#34;&gt;Match_server:4.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：随时间扩大匹配域，每一单位的 &lt;code&gt;wt&lt;/code&gt; 会扩大 $50$ 分 的匹配域&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt; // 用于调用 sleep 函数
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
        // Client端的板子
        std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
        std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&amp;gt;open();
            //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
            int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
            //输出匹配结果
            if (!res) puts(&amp;#34;success&amp;#34;);
            else puts(&amp;#34;fail&amp;#34;);
            transport-&amp;gt;close();
        } catch (TException&amp;amp; tx) {
            cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
        }
    }
    bool check_match(uint32_t i, uint32_t j) {
        auto a = users[i], b = users[j];
        
        int dt = abs(a.scores - b.scores);
        int a_max_dif = wt[i] * 50;
        int b_max_dif = wt[j] * 50;
        return dt &amp;lt;= a_max_dif &amp;amp;&amp;amp; dt &amp;lt;= b_max_dif;
    }
    void match() {
       for (uint32_t i = 0; i &amp;lt; wt.size(); ++ i)
           wt[i] ++;
        while (users.size() &amp;gt; 1) {
            bool flag = true;
            for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
                for (uint32_t j = i + 1; j &amp;lt; users.size(); ++ j) {
                    if (check_match(i, j)) {
                        auto a = users[i], b = users[j];
                        users.erase(users.begin() + j);
                        users.erase(users.begin() + i);
                        wt.erase(wt.begin() + j);
                        wt.erase(wt.begin() + i);
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    if (!flag) break;       
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
        wt.push_back(0);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                wt.erase(wt.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
    vector&amp;lt;int&amp;gt; wt; // 等待时间，单位：s
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 启动服务端
./match_system/src/main

# 启动客户端
python3 game/src/client.py

# 游戏应用端 （op id name scores）
add 1 yxc 2000
add 2 xan 1500
add 3 zagy 2500
remove 3 zagy 2500

# 匹配系统服务器
add_user
add_user
remove_user 
# 等待了 10 s
Match Result: 1 2
success
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;项目地址&#34;&gt;项目地址&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xancoding/Learning-Thrift&#34;&gt;Learning-Thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/blog/content/10878/&#34;&gt;Docker | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html&#34;&gt;Docker 入门教程 | 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;docker是什么&#34;&gt;Docker是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux或Windows操作系统的机器上&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;docker常用命令&#34;&gt;Docker常用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;镜像（images）&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker images&lt;/code&gt;：列出本地所有镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image rm ubuntu:20.04&lt;/code&gt;：删除镜像&lt;code&gt;ubuntu:20.04&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker commit CONTAINER_NAME IMAGE_NAME:TAG&lt;/code&gt;：创建某个&lt;code&gt;container&lt;/code&gt;的镜像，&lt;code&gt;TAG&lt;/code&gt; 为镜像标签，用以记录当前版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker save -o ubuntu_20_04.tar ubuntu:20.04&lt;/code&gt;：将镜像&lt;code&gt;ubuntu:20.04&lt;/code&gt;导出到本地文件&lt;code&gt;ubuntu_20_04.tar&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker load -i ubuntu_20_04.tar&lt;/code&gt;：将镜像&lt;code&gt;ubuntu:20.04&lt;/code&gt;从本地文件&lt;code&gt;ubuntu_20_04.tar&lt;/code&gt;中加载出来&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;容器(container)&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker ps -a&lt;/code&gt;：查看本地的所有容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker start CONTAINER&lt;/code&gt;：启动容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker stop CONTAINER&lt;/code&gt;：停止容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker restart CONTAINER&lt;/code&gt;：重启容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker rm CONTAINER&lt;/code&gt;：删除容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -p HOST_PORT:CONTAINER_PORT --name CONTAINER_NAME -itd IMAGE_NAME:TAG&lt;/code&gt;：将创建并启动一个容器
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;：端口映射，将宿主机的端口和容器的端口进行映射
&lt;ul&gt;
&lt;li&gt;例：&lt;code&gt;-p 20000:22 -p 8000:8000 -p 80:80 -p 443:443&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;22&lt;/code&gt;：&lt;code&gt;ssh&lt;/code&gt;登录服务端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8000&lt;/code&gt;：&lt;code&gt;Django&lt;/code&gt;调试端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;80&lt;/code&gt;：用于&lt;code&gt;HTTP&lt;/code&gt;服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;443&lt;/code&gt;：用于&lt;code&gt;HTTPS&lt;/code&gt;服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker attach CONTAINER&lt;/code&gt;：进入容器
&lt;ul&gt;
&lt;li&gt;先按&lt;code&gt;Ctrl-p&lt;/code&gt;，再按&lt;code&gt;Ctrl-q&lt;/code&gt;可以挂起容器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;docker环境配置&#34;&gt;Docker环境配置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;scp django_lesson_1_0.tar server&lt;/code&gt;：将&lt;code&gt;docker压缩包&lt;/code&gt;传至云服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh server&lt;/code&gt;：免密登录至云服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker load -i django_lesson_1_0.tar&lt;/code&gt;：将&lt;code&gt;docker压缩包&lt;/code&gt;解压缩成&lt;code&gt;docker镜像&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -p 20000:22 8000:8000 --name django -itd django_lesson:1.0&lt;/code&gt; ：利用 &lt;code&gt;镜像django_lesson:1.0&lt;/code&gt; 创建一个命名为 &lt;code&gt;django&lt;/code&gt; 的 &lt;code&gt;docker容器&lt;/code&gt;并启动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker attach my_docker_server&lt;/code&gt;：进入创建的&lt;code&gt;docker容器&lt;/code&gt;（服务器）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adduser acs&lt;/code&gt;：创建&lt;code&gt;acs&lt;/code&gt;用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usermod -aG sudo acs&lt;/code&gt;：为&lt;code&gt;acs&lt;/code&gt;用户分配&lt;code&gt;sudo&lt;/code&gt;权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scp .bashrc .vimrc .tmux.conf django&lt;/code&gt;：将本地服务器的&lt;code&gt;bash&lt;/code&gt;&amp;amp;&lt;code&gt;vim&lt;/code&gt;&amp;amp;&lt;code&gt;tmux&lt;/code&gt;配置文件传至&lt;code&gt;docker 容器&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;docker项目迁移&#34;&gt;Docker项目迁移&lt;/h3&gt;
&lt;p&gt;第一步，登录容器，关闭所有运行中的任务&lt;/p&gt;
&lt;p&gt;第二步，登录运行容器的服务器，然后执行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker commit CONTAINER_NAME django_lesson:1.1  # 将容器保存成镜像，将CONTAINER_NAME替换成容器名称
docker stop CONTAINER_NAME # 关闭容器
docker rm CONTAINER_NAME # 删除容器
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;增加容器的映射端口--80-与-443&#34;&gt;增加容器的映射端口 : 80 与 443&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;给运行中的容器，开通端口，是一件非常麻烦的事情&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个比较好的解决方案 : 先把容器保存成镜像，再删掉容器，然后用镜像生成新的容器，同时打开需要的端口&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一步，登录容器，关闭所有运行中的任务&lt;/p&gt;
&lt;p&gt;第二步，登录运行容器的服务器，然后执行 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker commit CONTAINER_NAME django_lesson:1.1  &lt;span style=&#34;color:#007f7f&#34;&gt;# 将容器保存成镜像，将CONTAINER_NAME替换成容器名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker stop CONTAINER_NAME  &lt;span style=&#34;color:#007f7f&#34;&gt;# 关闭容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rm CONTAINER_NAME &lt;span style=&#34;color:#007f7f&#34;&gt;# 删除容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;# 使用保存的镜像重新创建容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -p 20000:22 -p 8000:8000 -p 80:80 -p 443:443 --name CONTAINER_NAME -itd django_lesson:1.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第三步，去云服务器控制台，在安全组配置中开放80和443端口&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="acwing-linux-基础课">AcWing Linux 基础课</h1>
<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/57/">AcWing Linux 基础课</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术 </a></li>
<li><a href="https://missing-semester-cn.github.io/">The Missing Semester of Your CS Education</a></li>
</ul>
<hr>
<h2 id="terminal">Terminal</h2>
<blockquote>
<p><strong>终端，一个程序，是界面上打开的黑框框本身，<code>shell</code> 运行于其中</strong></p>
</blockquote>
<h2 id="shell">Shell</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855530/">常用文件管理命令 | AcWing Linux 基础课</a></li>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855883/">Shell 语法 | AcWing Linux 基础课</a></strong></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030391/">管道、环境变量与常用命令  | AcWing Linux 基础课</a>
<ul>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030414/">常用命令  | AcWing Linux 基础课</a></strong></li>
</ul>
</li>
<li><a href="https://wangdoc.com/bash/">《Bash 脚本教程》</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/course-shell/">第 1 讲 - 课程概览与 Shell | The missing semester of your CS education</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/shell-tools/">第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19556676">终极 Shell——ZSH</a></li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh">快速入门 zsh</a></li>
</ul>
<hr>
<h3 id="shell是什么">Shell是什么？</h3>
<ul>
<li><code>Shell</code> 是我们通过命令行与操作系统沟通的 <code>程序</code>，是个 <code>命令行解释器</code></li>
<li><code>Shell</code> 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用</li>
<li><code>Shell</code> 负责外界与 <code>Linux 内核</code> 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序</li>
<li><code>Shell</code>解释器有 <code>sh</code>、<code>bash</code>、<code>zsh...</code></li>
</ul>
<h3 id="shell常用命令">Shell常用命令</h3>
<ol>
<li><code>ag xxx</code>：搜索当前目录下的所有文件，<strong>检索<code>xxx</code>字符串</strong></li>
<li><code>find /path/to/directory/ -name '*.py'</code>：<strong>搜索</strong>某个文件路径下的所有<code>*.py</code><strong>文件</strong></li>
<li><code>history</code>：展示当前用户的历史操作。内容存放在<code>~/.bash_history</code>中</li>
<li><code>grep xxx</code>：从<code>stdin</code>中读入若干行数据，如果某行中包含<code>xxx</code>，则输出该行；否则忽略该行，<strong>用于查找文件里符合条件的字符串</strong></li>
</ol>
<h2 id="tmux--vim">Tmux &amp;&amp; Vim</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855620/">Tmux和Vim | AcWing Linux 基础课</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程 | 阮一峰的网络日志</a></li>
<li><a href="http://kuanghy.github.io/2016/09/29/tmux">Tmux 简介与使用 | Huoty&rsquo;s Blog</a></li>
<li><a href="https://coolshell.cn/articles/5426.html#comments">简明 VIM 练级攻略 | 酷壳</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/editors/">第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education</a></li>
<li><a href="https://vim-adventures.com/">VIM 大冒险 - Game</a></li>
</ul>
<hr>
<h3 id="tmux-是什么">Tmux 是什么？</h3>
<blockquote>
<p><strong><code>Tmux</code> 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）</strong></p>
<p><strong>远程 <code>SSH</code> 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。</strong></p>
</blockquote>
<h3 id="tmux--session--window--pane">Tmux &amp;&amp; Session &amp;&amp; Window &amp;&amp; Pane</h3>
<ul>
<li>一个<code>tmux </code>可以有好多个<code>session</code>(会话)</li>
<li>一个<code>session</code>可以有好多个<code>window</code>(窗口)</li>
<li>一个<code>window</code>可以有好多个<code>pane</code>(面板)</li>
<li>一个<code>session</code>里不超过10个<code>window</code>是最方便的：可以用0到9迅速切换</li>
</ul>
<h3 id="tmux常用命令">Tmux常用命令</h3>
<blockquote>
<p><strong>Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b</strong></p>
</blockquote>
<ol>
<li><code>tmux new -s &lt;session-name&gt;</code>：新建会话</li>
<li><code>tmux detach</code> $or$ <code>Ctrl + a d</code>：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行</li>
<li><code>tmux attach -t &lt;session-name&gt;</code>：重新接入某个已存在的会话</li>
<li><code>tmux kill-session -t &lt;session-name&gt;</code>：杀死某个会话</li>
<li><code>tmux switch -t &lt;session-name&gt;</code>：切换会话</li>
<li><code>tmux rename-session -t &lt;old-name&gt; &lt;new-name&gt;</code>：重命名会话</li>
<li><code>tmux ls</code> $or$ <code>Ctrl + a s</code>：查看当前所有的 Tmux 会话</li>
<li>在<code>tmux</code>中选中文本时，需要按住 <code>shift</code> 键</li>
<li><code>tmux</code>中复制/粘贴文本：
<ol>
<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>[</code></li>
<li>用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板</li>
<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>]</code> ，会将剪贴板中的内容粘贴到光标处</li>
</ol>
</li>
</ol>
<h3 id="vim-是什么">Vim 是什么？</h3>
<blockquote>
<p><strong>VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。</strong></p>
</blockquote>
<h3 id="vim常用命令">Vim常用命令</h3>
<ol>
<li>一般模式切换到编辑模式（常用）
<ol>
<li><code>i</code> : 在光标所处位置 <strong>直接</strong> 开始</li>
<li><code>a</code> : 在光标所处位置的 <strong>下一个字符</strong> 开始</li>
<li><code>o</code> : 在光标所处位置的 <strong>下一行</strong> 开始</li>
<li><code>r</code> : 取代当前光标处的字符，然后开始</li>
<li><code>[ESC]</code> : 退出编辑模式，回到一般模式</li>
</ol>
</li>
<li>光标移动操作
<ol>
<li><code>n&lt;Space&gt;</code> : <strong>n</strong> 为数字，光标 <strong>向右移动</strong>这一行的n个字符</li>
<li><code>n&lt;Enter&gt;</code> : <strong>n</strong> 为数字，光标 <strong>向下移动</strong>n行</li>
<li><code>0</code> 或 <code>功能键[Home]</code>: 光标移动到 <strong>本行开头</strong></li>
<li><code>$</code> 或 <code>功能键[End]</code>: 光标移动到 <strong>本行末尾</strong></li>
<li><code>:n</code> 或 <code>nG</code> : <strong>n</strong> 为数字，光标移动到 <strong>第n行</strong></li>
<li><code>G</code>: 光标移动到 <strong>最后一行</strong></li>
<li><code>gg</code> : 光标移动到 <strong>第一行</strong></li>
</ol>
</li>
<li>查找、替换操作
<ol>
<li><code>/word</code> : 向 <strong>光标之下</strong> 寻找 第一个值为 <strong>word</strong> 的字符串</li>
<li><code>?word</code> : 向 <strong>光标之上</strong> 寻找 第一个值为 <strong>word</strong> 的字符串</li>
<li><code>n</code> : 重复 <strong>前一个</strong> 查找操作</li>
<li><code>N</code> : 反向 重复 <strong>前一个</strong> 查找操作</li>
<li><code>:n1,n2s/word1/word2/g</code> : <strong>n1</strong> 与 <strong>n2</strong> 为数字，在第 <strong>n1</strong> 行与 <strong>n2</strong> 行之间寻找 <strong>word1</strong> 这个字符串，并将该字符串 替换 为 <strong>word2</strong></li>
<li><code>:1,$s/word1/word2/g</code> : 将全文的 <strong>word1</strong> 替换为 <strong>word2</strong></li>
<li><code>:1,$s/word1/word2/gc</code> : 将全文的 <strong>word1</strong> 替换为 <strong>word2</strong>，且在替换前 <strong>要求用户确认</strong></li>
</ol>
</li>
<li>文本操作（可搭配 <code>数字+&lt;Enter&gt;/&lt;Space&gt;、0、G、$</code> 等使用，达到预期组合效果）
<ol>
<li><code>v</code> : 选中文本</li>
<li><code>d</code> : 删除选中的文本</li>
<li><code>dd</code> : 删除当前行</li>
<li><code>y</code> : 复制选中的文本</li>
<li><code>yy</code> : 复制当前行</li>
<li><code>p</code> : 将复制的数据在光标的下一行/下一个位置 粘贴</li>
<li><code>u</code> : 撤销</li>
<li><code>Ctrl + r</code> : 取消撤销</li>
<li><code>&gt;</code> : 将选中的文本整体 <strong>向右缩进一次</strong></li>
<li><code>&lt;</code> : 将选中的文本整体 <strong>向左缩进一次</strong></li>
</ol>
</li>
<li>命令行操作
<ol>
<li><code>:w</code> : 保存</li>
<li><code>:w!</code> : 强制保存</li>
<li><code>:q</code> : 退出</li>
<li><code>:q!</code> : 强制退出</li>
<li><code>:wq</code> : 保存并退出</li>
<li><code>:set paste</code> : 设置成粘贴模式，取消代码自动缩进</li>
<li><code>:set nopaste</code> : 取消粘贴模式，开启代码自动缩进</li>
<li><code>:set nu</code> : 显示行号</li>
<li><code>:set nonu</code> : 隐藏行号</li>
<li><code>:noh</code>：关闭查找关键词高亮</li>
</ol>
</li>
<li><code>Ctrl + q</code> : 当<code>vim</code>卡死时，可以 <strong>取消当前正在执行的命令</strong></li>
</ol>
<h2 id="ssh">SSH</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898263/">SSH | AcWing Linux 基础课</a></li>
<li><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Adding a new SSH key to your GitHub account</a></li>
</ul>
<hr>
<h3 id="ssh是什么">SSH是什么？</h3>
<blockquote>
<p><strong>SSH是一种网络协议，用于计算机之间的加密登录</strong></p>
</blockquote>
<h3 id="ssh-免密登录">SSH 免密登录</h3>
<ol>
<li><code>ssh-key-gen</code> ：在本地服务器生成密钥</li>
<li><code>cd .ssh/</code></li>
<li><code>vim config</code> ：定义服务器别名</li>
</ol>
<pre tabindex="0"><code class="language-config" data-lang="config">Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
</code></pre><ol start="4">
<li><code>ssh-copy-id server</code>：在本地服务器配置免密登录至云服务器</li>
<li>免密登录至<code>docker 容器</code>步骤同上</li>
<li>配置完成后，就可以直接使用 <code>ssh server</code> 免密登录啦</li>
</ol>
<h2 id="scp">SCP</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898266/">SCP | AcWing Linux 基础课</a></li>
</ul>
<hr>
<h3 id="scp是什么">SCP是什么？</h3>
<blockquote>
<p><strong>SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录</strong></p>
</blockquote>
<h3 id="scp-传文件">SCP 传文件</h3>
<ul>
<li>复制多个文件：<code>scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH</code></li>
<li>复制文件夹 ：
<ul>
<li><code>scp -r ~/tmp SERVER:/home/acs/</code>：将本地家目录中的<code>tmp</code>文件夹复制到服务器中的<code>/home/acs/</code>目录下</li>
<li><code>scp -r SERVER:homework .</code>：将服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下</li>
</ul>
</li>
</ul>
<h2 id="git">Git</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2932078/">Git | AcWing Linux 基础课</a></li>
<li><a href="https://juejin.cn/column/6969263852206686221">Git从放弃到入门</a>
<ul>
<li><a href="https://juejin.cn/post/6973299611536457742">Git从放弃到入门：状态与阶段</a></li>
<li><strong><a href="https://juejin.cn/post/6974039503056928776">Git从放弃到入门：撤销操作</a></strong></li>
</ul>
</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/10/git-internals.html">Git 原理入门</a></li>
<li><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Braching - Game</a></li>
<li><a href="https://git-scm.com/book/zh/v2">Pro Git Online</a></li>
</ul>
<hr>
<h3 id="git是什么">Git是什么？</h3>
<blockquote>
<p><strong>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</strong></p>
</blockquote>
<h3 id="git常用命令">Git常用命令</h3>
<h4 id="常用命令">常用命令</h4>
<ol>
<li><code>git add XX</code>：将<code>XX</code>文件添加到暂存区</li>
<li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支</li>
<li><code>git push -u (第一次需要 -u 以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库<code>XXX</code>下载到当前目录下</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><strong><code>git status</code>：查看仓库状态</strong></li>
<li><strong>有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？</strong>
<ul>
<li><strong><code>git restore --staged XX</code>或<code>git reset HEAD XX</code>：将<code>XX</code>从暂存区里移除</strong></li>
</ul>
</li>
<li><strong>有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？</strong>
<ul>
<li><strong><code>git checkout XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</strong></li>
</ul>
</li>
</ol>
<h4 id="git-全局设置">Git 全局设置</h4>
<ol>
<li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git init</code>：将当前目录配置成<code>git</code>仓库，信息记录在隐藏的<code>.git</code>文件夹中</li>
</ol>
<h4 id="git-查看命令">Git 查看命令</h4>
<ol>
<li><code>git diff XX</code>：查看<code>XX</code>文件相对于暂存区修改了哪些内容</li>
<li><code>git status</code>：查看仓库状态</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><code>git log --pretty=oneline</code>：用一行来显示</li>
<li><code>git reflog</code>：查看<code>HEAD</code>指针的移动历史（包括被回滚的版本）</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
</ol>
<h4 id="git-删除命令">Git 删除命令</h4>
<ol>
<li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉，不希望管理这个文件</li>
<li><code>git restore --staged xx</code>：将<code>xx</code>从暂存区里移除</li>
<li><code>git checkout — XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</li>
</ol>
<h4 id="git-代码回滚">Git 代码回滚</h4>
<ol>
<li><code>git reset --hard HEAD^</code>或<code>git reset --hard HEAD~ </code>：将代码库回滚到上一个版本</li>
<li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li>
<li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li>
<li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li>
</ol>
<h4 id="git-远程仓库">Git 远程仓库</h4>
<ol>
<li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li>
<li><code>git push -u (第一次需要-u以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-分支命令">Git 分支命令</h4>
<ol>
<li><code>git branch branch_name</code>：创建新分支</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li>
<li><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</li>
<li><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</li>
<li><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-stash-暂存">Git stash 暂存</h4>
<ol>
<li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li>
<li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li>
<li><code>git stash drop</code>：删除栈顶存储的修改</li>
<li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li>
<li><code>git stash list</code>：查看栈中所有元素</li>
</ol>
<h3 id="git更换远程仓库地址">Git更换远程仓库地址</h3>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-csharp" data-lang="csharp"><span style="display:flex;"><span>git remote -v  <span style="color:#f00">#</span> <span style="color:#f00">查看远端地址</span>
</span></span><span style="display:flex;"><span>git remote <span style="color:#f00">#</span> <span style="color:#f00">查看远端仓库名</span>
</span></span><span style="display:flex;"><span>git remote rm origin <span style="color:#f00">#</span> <span style="color:#f00">删除远程的仓库</span>
</span></span><span style="display:flex;"><span>git remote <span style="color:#fff;font-weight:bold">add</span> origin https:<span style="color:#007f7f">//github.com/xx/xx.git （新地址） # 重新添加远程仓库</span>
</span></span><span style="display:flex;"><span>git push --<span style="color:#fff;font-weight:bold">set</span>-upstream origin master
</span></span></code></pre></div><h3 id="本地项目上传到github">本地项目上传到GitHub</h3>
<ol>
<li>配置<code>ssh-key</code>实现本地与<code>Git</code>服务器免密交互</li>
</ol>
<pre tabindex="0"><code>ssh-keygen  # 生成密钥
cat .ssh/id_rsa.pub
# 复制密钥，提交到 git 服务器的 ssh 密钥中
</code></pre><ol start="2">
<li>按照下面的操作在本地文件夹配置一下<code>Git</code>：</li>
</ol>
<pre tabindex="0"><code>git config --global user.name xxx  # 设置用户名
git config --global user.email xxx@xxx.com  # 设置用户邮箱

git init
git add .
git commit -m &#34;xxx&#34;
git remote add origin https://github.com/xxx/XXX.git  # 建立连接
git push -u origin master
</code></pre><h3 id="gitignore的作用">.gitignore的作用</h3>
<blockquote>
<p><strong>工程常识：缓存文件，可执行文件，编译文件 不要传到自己的 git 项目里</strong></p>
<p><strong>.gitignore的作用就是帮助我们在git add时将我们指定的一些文件自动排除在外，不提交到git当中</strong></p>
<p><strong>在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件</strong></p>
</blockquote>
<h2 id="thrift"><strong>Thrift</strong></h2>
<ul>
<li><a href="https://www.acwing.com/video/3479/">Thrift | AcWing Linux 基础课</a></li>
<li><a href="https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md">Thrift_learning - AcGit</a></li>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog | Thrift</a></li>
<li><a href="https://thrift.apache.org/">thrift 官网</a> -&gt; <a href="https://thrift.apache.org/tutorial/">Tutorial</a> -&gt; <a href="https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift">tutorial.thrift</a></li>
</ul>
<hr>
<h3 id="thrift是什么">Thrift是什么？</h3>
<blockquote>
<p><strong>Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架</strong></p>
<p><strong>RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程</strong></p>
<p><strong>Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务</strong></p>
</blockquote>
<h3 id="例实现一个游戏的匹配服务">例：实现一个游戏的匹配服务</h3>
<h4 id="基本框架">基本框架</h4>
<ol>
<li>游戏应用端 <code>game</code>（Python3）
<ol>
<li>客户端：与 匹配系统服务器 的服务端交互</li>
</ol>
</li>
<li>匹配系统服务器 <code>match_system</code>（C++）
<ol>
<li>服务端：与 游戏应用端 的客户端交互</li>
<li>客户端：与 数据存储服务器 的服务端交互</li>
</ol>
</li>
<li>数据存储服务器（已经实现）
<ol>
<li>服务端：与 匹配系统服务器 的客户端交互</li>
</ol>
</li>
</ol>
<h4 id="文件结构">文件结构</h4>
<pre tabindex="0"><code>|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
</code></pre><h4 id="实现过程">实现过程</h4>
<ol>
<li>定义接口 (<code>thrift</code> 文件夹用于存放接口 )</li>
<li>完成 <code>Server</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>match_system</code>文件夹下生成 C++版本的服务端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen cpp tutorial.thrift
</code></pre><ol start="2">
<li>将<code>gen cpp</code> 文件夹重命名，如：<code>match_server</code>（区别于之后要在此处生成的<code>client_server</code>）</li>
<li>把 <code>Match_server.skeleton.cpp</code> 移动到当前 <code>src</code> 目录下并重命名为 <code>main.cpp</code>
<ul>
<li>由于移动了 <code>main.cpp</code> 故需要修改一下<code> main.cpp</code> 中头文件里关于 <code>Match.h</code> 的引用路径：<code>#include &quot;Match.h&quot;</code> -&gt; <code>#include &quot;match_server/Match.h&quot;</code></li>
</ul>
</li>
<li>在<code>main.cpp</code>中实现具体业务逻辑</li>
</ol>
</li>
<li>完成 <code>Client</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>game</code>文件夹下生成 <code>python3</code> 版本的服务端，然后通过修改得到客户端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen py tutorial.thrift
</code></pre><ol start="2">
<li>删掉 <code>Match_remote </code>，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 <strong>客户端</strong> 功能，因此他没有作用，不妨删掉，让文档简洁一点</li>
<li>利用官网提供的模板，在<code>src</code>文件夹下编写 <strong>客户端</strong> 文件 <code>client.py</code></li>
</ol>
</li>
<li>持久化到云端
<ul>
<li>将 <strong>非编译文件</strong> 和 <strong>非可执行文件</strong> 提交到 <code>git</code> 中去（好的工程习惯）
<ul>
<li><code>Cpp</code>
<ul>
<li><code>git restore --stage *.o</code></li>
<li><code>git restore --stage main</code></li>
</ul>
</li>
<li><code>Python</code>
<ul>
<li><code>git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里</code></li>
<li><code>git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>注意：先运行服务器后，客户端才能正常运行</li>
</ul>
<h4 id="thrift-接口">Thrift 接口</h4>
<h5 id="matchthrift">Match.thrift</h5>
<pre tabindex="0"><code>namespace cpp match_service
struct User {
    1: i32 id,
    2: string name,
    3: i32 scores
}
service Match {
    i32 add_user(1: User user, 2: string info),
    i32 remove_user(1: User user, 2: string info),
}
</code></pre><h5 id="savethrift">Save.thrift</h5>
<pre tabindex="0"><code>namespace cpp save_service
service Save {
    /**
     * username: myserver的名称
     * password: myserver的密码的md5值的前8位，用命令md5sum
     * 用户名密码验证成功会返回0，验证失败会返回1
     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中
     */
    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)
}
</code></pre><h4 id="各版本预览">各版本预览</h4>
<h5 id="match_server10">Match_server:1.0</h5>
<ul>
<li><code>match_client</code>：创建固定的<code>User</code></li>
</ul>
<pre tabindex="0"><code>from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


def main():
    # Make socket
    transport = TSocket.TSocket(&#39;localhost&#39;, 9090)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = Match.Client(protocol)

    # Connect!
    transport.open()

    user = User(1, &#39;yxc&#39;, 1500)
    client.add_user(user, &#34;&#34;)

    # Close!
    transport.close()


# 调用 main 函数
if __name__ == &#34;__main__&#34;:
    main()
</code></pre><ul>
<li><code>match_server</code></li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &#34;match_server/Match.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include&lt;iostream&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    return 0;
  }
};
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
    
  server.serve();
  return 0;
}
</code></pre><h5 id="match_server20">Match_server:2.0</h5>
<ul>
<li><code>match_client</code>：根据标准输入来创建<code>User</code></li>
</ul>
<pre tabindex="0"><code>from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# 利用 python 在终端读入信息需要引入 stdin
from sys import stdin

# 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息
# 目的是可以一直不断处理信息
# 然后重写 main 函数，使之能不断从终端读入信息
def operate(op, user_id, user_name, score):
    # Make socket 
	transport = TSocket.TSocket(&#39;localhost&#39;, 9090)
	
	# Buffering is critical. Raw sockets are very slow
	transport = TTransport.TBufferedTransport(transport)
	
	# Wrap in a protocol
	protocol = TBinaryProtocol.TBinaryProtocol(transport)
	
	# Create a client to use the protocol encoder
	client = Match.Client(protocol)
	
	# Connect!
	transport.open()

    # 针对 op 参数，分别进行 &#34;增加&#34; 与 &#34;删出&#34; 操作
    user = User(user_id, user_name, score)

    if op == &#34;add&#34;:
        client.add_user(user, &#34;&#34;)
    else:
        client.remove_user(user, &#34;&#34;)
    
    # Close!
	transport.close()

def main():
    for line in stdin:
        op, user_id, user_name, score = line.split(&#39; &#39;)
        operate(op, int(user_id), user_name, int(score))

# 调用 main 函数
if __name__ == &#34;__main__&#34;:
    main()
</code></pre><ul>
<li><code>match_server</code>：自动将用户池中前两个用户匹配到一起</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &#34;match_server/Match.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &gt; 1) {
            auto a = users[0], b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());
            save_result(a.id, b.id);
        }
    }
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h5 id="match_server30">Match_server:3.0</h5>
<ul>
<li><code>save_client</code>：因为一个节点只能由一个<code>main</code>方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个<code>main</code>方法中</li>
</ul>
<pre tabindex="0"><code>// 需要额外引入的头文件
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;

// 需要额外声明的命名空间
using namespace  ::save_service;

//重写 save_result 内的内容，使其能够与 &#34;数据存储服务器&#34; 交互
void save_result(int a, int b) { // 记录成功匹配的信息
    printf(&#34;Match Result: %d %d\n&#34;, a, b);

    // Client端的板子
    std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
    std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
    std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
    SaveClient client(protocol);

    try {
        transport-&gt;open();

        //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
        int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
        //输出匹配结果
        if (!res) puts(&#34;success&#34;);
        else puts(&#34;fail&#34;);

        transport-&gt;close();
    } catch (TException&amp; tx) {
        cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
    }
}
</code></pre><ul>
<li><code>match_server</code>：每次只匹配分差小于 50 的用户</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;
#include &#34;match_server/Match.h&#34;
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include &lt;unistd.h&gt; // 用于调用 sleep 函数
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
	//重写 save_result 内的内容，使其能够与 &#34;数据存储服务器&#34; 交互
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
        // Client端的板子
        std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
        std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&gt;open();
            //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
            int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
            //输出匹配结果
            if (!res) puts(&#34;success&#34;);
            else puts(&#34;fail&#34;);
            transport-&gt;close();
        } catch (TException&amp; tx) {
            cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
        }
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &gt; 1) {
            // 按照 rank分 排序
            sort(users.begin(), users.end(), [&amp;](User&amp; a, User&amp; b) {
                return a.scores &lt; b.scores;
            });
            bool flag = true;
            for (uint32_t i = 1; i &lt; users.size(); ++ i) {
                auto a = users[i - 1], b = users[i];
                // 两名玩家分数差小于50时进行匹配
                if (b.scores - a.scores &lt;= 50) {
                    users.erase(users.begin() + i - 1, users.begin() + i + 1);
                    save_result(a.id, b.id);
                    flag = false;
                    break;
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h5 id="match_server40">Match_server:4.0</h5>
<ul>
<li><code>match_server</code>：随时间扩大匹配域，每一单位的 <code>wt</code> 会扩大 $50$ 分 的匹配域</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;
#include &#34;match_server/Match.h&#34;
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include &lt;unistd.h&gt; // 用于调用 sleep 函数
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
        // Client端的板子
        std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
        std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&gt;open();
            //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
            int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
            //输出匹配结果
            if (!res) puts(&#34;success&#34;);
            else puts(&#34;fail&#34;);
            transport-&gt;close();
        } catch (TException&amp; tx) {
            cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
        }
    }
    bool check_match(uint32_t i, uint32_t j) {
        auto a = users[i], b = users[j];
        
        int dt = abs(a.scores - b.scores);
        int a_max_dif = wt[i] * 50;
        int b_max_dif = wt[j] * 50;
        return dt &lt;= a_max_dif &amp;&amp; dt &lt;= b_max_dif;
    }
    void match() {
       for (uint32_t i = 0; i &lt; wt.size(); ++ i)
           wt[i] ++;
        while (users.size() &gt; 1) {
            bool flag = true;
            for (uint32_t i = 0; i &lt; users.size(); ++ i) {
                for (uint32_t j = i + 1; j &lt; users.size(); ++ j) {
                    if (check_match(i, j)) {
                        auto a = users[i], b = users[j];
                        users.erase(users.begin() + j);
                        users.erase(users.begin() + i);
                        wt.erase(wt.begin() + j);
                        wt.erase(wt.begin() + i);
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    if (!flag) break;       
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
        wt.push_back(0);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                wt.erase(wt.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
    vector&lt;int&gt; wt; // 等待时间，单位：s
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h4 id="usage">Usage</h4>
<pre tabindex="0"><code># 启动服务端
./match_system/src/main

# 启动客户端
python3 game/src/client.py

# 游戏应用端 （op id name scores）
add 1 yxc 2000
add 2 xan 1500
add 3 zagy 2500
remove 3 zagy 2500

# 匹配系统服务器
add_user
add_user
remove_user 
# 等待了 10 s
Match Result: 1 2
success
</code></pre><h4 id="项目地址">项目地址</h4>
<ul>
<li><a href="https://github.com/Xancoding/Learning-Thrift">Learning-Thrift</a></li>
</ul>
<h2 id="docker">Docker</h2>
<ul>
<li><a href="https://www.acwing.com/blog/content/10878/">Docker | AcWing Linux 基础课</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程 | 阮一峰的网络日志</a></li>
</ul>
<hr>
<h3 id="docker是什么">Docker是什么？</h3>
<blockquote>
<p><strong>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux或Windows操作系统的机器上</strong></p>
</blockquote>
<h3 id="docker常用命令">Docker常用命令</h3>
<ul>
<li><code>镜像（images）</code>
<ol>
<li><code>docker images</code>：列出本地所有镜像</li>
<li><code>docker image rm ubuntu:20.04</code>：删除镜像<code>ubuntu:20.04</code></li>
<li><code>docker commit CONTAINER_NAME IMAGE_NAME:TAG</code>：创建某个<code>container</code>的镜像，<code>TAG</code> 为镜像标签，用以记录当前版本。</li>
<li><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>：将镜像<code>ubuntu:20.04</code>导出到本地文件<code>ubuntu_20_04.tar</code>中</li>
<li><code>docker load -i ubuntu_20_04.tar</code>：将镜像<code>ubuntu:20.04</code>从本地文件<code>ubuntu_20_04.tar</code>中加载出来</li>
</ol>
</li>
<li><code>容器(container)</code>
<ol>
<li><code>docker ps -a</code>：查看本地的所有容器</li>
<li><code>docker start CONTAINER</code>：启动容器</li>
<li><code>docker stop CONTAINER</code>：停止容器</li>
<li><code>docker restart CONTAINER</code>：重启容器</li>
<li><code>docker rm CONTAINER</code>：删除容器</li>
<li><code>docker run -p HOST_PORT:CONTAINER_PORT --name CONTAINER_NAME -itd IMAGE_NAME:TAG</code>：将创建并启动一个容器
<ul>
<li><code>-p</code>：端口映射，将宿主机的端口和容器的端口进行映射
<ul>
<li>例：<code>-p 20000:22 -p 8000:8000 -p 80:80 -p 443:443</code></li>
<li><code>22</code>：<code>ssh</code>登录服务端口</li>
<li><code>8000</code>：<code>Django</code>调试端口</li>
<li><code>80</code>：用于<code>HTTP</code>服务</li>
<li><code>443</code>：用于<code>HTTPS</code>服务</li>
</ul>
</li>
</ul>
</li>
<li><code>docker attach CONTAINER</code>：进入容器
<ul>
<li>先按<code>Ctrl-p</code>，再按<code>Ctrl-q</code>可以挂起容器</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="docker环境配置">Docker环境配置</h3>
<ol>
<li><code>scp django_lesson_1_0.tar server</code>：将<code>docker压缩包</code>传至云服务器</li>
<li><code>ssh server</code>：免密登录至云服务器</li>
<li><code>docker load -i django_lesson_1_0.tar</code>：将<code>docker压缩包</code>解压缩成<code>docker镜像</code></li>
<li><code>docker run -p 20000:22 8000:8000 --name django -itd django_lesson:1.0</code> ：利用 <code>镜像django_lesson:1.0</code> 创建一个命名为 <code>django</code> 的 <code>docker容器</code>并启动</li>
<li><code>docker attach my_docker_server</code>：进入创建的<code>docker容器</code>（服务器）</li>
<li><code>adduser acs</code>：创建<code>acs</code>用户</li>
<li><code>usermod -aG sudo acs</code>：为<code>acs</code>用户分配<code>sudo</code>权限</li>
<li><code>scp .bashrc .vimrc .tmux.conf django</code>：将本地服务器的<code>bash</code>&amp;<code>vim</code>&amp;<code>tmux</code>配置文件传至<code>docker 容器</code></li>
</ol>
<h3 id="docker项目迁移">Docker项目迁移</h3>
<p>第一步，登录容器，关闭所有运行中的任务</p>
<p>第二步，登录运行容器的服务器，然后执行：</p>
<pre tabindex="0"><code>docker commit CONTAINER_NAME django_lesson:1.1  # 将容器保存成镜像，将CONTAINER_NAME替换成容器名称
docker stop CONTAINER_NAME # 关闭容器
docker rm CONTAINER_NAME # 删除容器
</code></pre><h3 id="增加容器的映射端口--80-与-443">增加容器的映射端口 : 80 与 443</h3>
<blockquote>
<p><strong>给运行中的容器，开通端口，是一件非常麻烦的事情</strong></p>
<p><strong>一个比较好的解决方案 : 先把容器保存成镜像，再删掉容器，然后用镜像生成新的容器，同时打开需要的端口</strong></p>
</blockquote>
<p>第一步，登录容器，关闭所有运行中的任务</p>
<p>第二步，登录运行容器的服务器，然后执行 :</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker commit CONTAINER_NAME django_lesson:1.1  <span style="color:#007f7f"># 将容器保存成镜像，将CONTAINER_NAME替换成容器名称</span>
</span></span><span style="display:flex;"><span>docker stop CONTAINER_NAME  <span style="color:#007f7f"># 关闭容器</span>
</span></span><span style="display:flex;"><span>docker rm CONTAINER_NAME <span style="color:#007f7f"># 删除容器</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007f7f"># 使用保存的镜像重新创建容器</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker run -p 20000:22 -p 8000:8000 -p 80:80 -p 443:443 --name CONTAINER_NAME -itd django_lesson:1.1
</span></span></code></pre></div><p>第三步，去云服务器控制台，在安全组配置中开放80和443端口</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
