<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AcWing on Xan&#39;s Blog</title>
    <link>https://xancoding.cn/tags/acwing/</link>
    <description>Recent content in AcWing on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 16 Oct 2022 14:23:58 +0800</lastBuildDate><atom:link href="https://xancoding.cn/tags/acwing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AcWing Linux 基础课</title>
      <link>https://xancoding.cn/posts/acwlinux/</link>
      <pubDate>Sun, 16 Oct 2022 14:23:58 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwlinux/</guid>
      <description>&lt;h1 id=&#34;acwing-linux-基础课&#34;&gt;AcWing Linux 基础课&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/57/&#34;&gt;AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&#34;&gt;命令行的艺术 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;The Missing Semester of Your CS Education&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;terminal&#34;&gt;Terminal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;终端，一个程序，是界面上打开的黑框框本身，&lt;code&gt;shell&lt;/code&gt; 运行于其中&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shell&#34;&gt;Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855530/&#34;&gt;常用文件管理命令 | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855883/&#34;&gt;Shell 语法 | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030391/&#34;&gt;管道、环境变量与常用命令  | AcWing Linux 基础课&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030414/&#34;&gt;常用命令  | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wangdoc.com/bash/&#34;&gt;《Bash 脚本教程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/course-shell/&#34;&gt;第 1 讲 - 课程概览与 Shell | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/shell-tools/&#34;&gt;第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/19556676&#34;&gt;终极 Shell——ZSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;快速入门 zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shell是什么&#34;&gt;Shell是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 是我们通过命令行与操作系统沟通的 &lt;code&gt;程序&lt;/code&gt;，是个 &lt;code&gt;命令行解释器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 负责外界与 &lt;code&gt;Linux 内核&lt;/code&gt; 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt;解释器有 &lt;code&gt;sh&lt;/code&gt;、&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;zsh...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shell常用命令&#34;&gt;Shell常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ag xxx&lt;/code&gt;：搜索当前目录下的所有文件，&lt;strong&gt;检索&lt;code&gt;xxx&lt;/code&gt;字符串&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find /path/to/directory/ -name &#39;*.py&#39;&lt;/code&gt;：&lt;strong&gt;搜索&lt;/strong&gt;某个文件路径下的所有&lt;code&gt;*.py&lt;/code&gt;&lt;strong&gt;文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;：展示当前用户的历史操作。内容存放在&lt;code&gt;~/.bash_history&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep xxx&lt;/code&gt;：从&lt;code&gt;stdin&lt;/code&gt;中读入若干行数据，如果某行中包含&lt;code&gt;xxx&lt;/code&gt;，则输出该行；否则忽略该行，&lt;strong&gt;用于查找文件里符合条件的字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tmux--vim&#34;&gt;Tmux &amp;amp;&amp;amp; Vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855620/&#34;&gt;tmux和vim | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2019/10/tmux.html&#34;&gt;Tmux 使用教程 | 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kuanghy.github.io/2016/09/29/tmux&#34;&gt;Tmux 简介与使用 | Huoty&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/articles/5426.html#comments&#34;&gt;简明 VIM 练级攻略 | 酷壳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/editors/&#34;&gt;第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim-adventures.com/&#34;&gt;VIM 大冒险 - Game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tmux-是什么&#34;&gt;Tmux 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Tmux&lt;/code&gt; 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;远程 &lt;code&gt;SSH&lt;/code&gt; 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;tmux--session--window--pane&#34;&gt;Tmux &amp;amp;&amp;amp; Session &amp;amp;&amp;amp; Window &amp;amp;&amp;amp; Pane&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个&lt;code&gt;tmux &lt;/code&gt;可以有好多个&lt;code&gt;session&lt;/code&gt;(会话)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;可以有好多个&lt;code&gt;window&lt;/code&gt;(窗口)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;window&lt;/code&gt;可以有好多个&lt;code&gt;pane&lt;/code&gt;(面板)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;里不超过10个&lt;code&gt;window&lt;/code&gt;是最方便的：可以用0到9迅速切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tmux常用命令&#34;&gt;Tmux常用命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;tmux new -s &amp;lt;session-name&amp;gt;&lt;/code&gt;：新建会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux detach&lt;/code&gt; $or$ &lt;code&gt;Ctrl + a d&lt;/code&gt;：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux attach -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：重新接入某个已存在的会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux kill-session -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：杀死某个会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux switch -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：切换会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux rename-session -t &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt;&lt;/code&gt;：重命名会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux ls&lt;/code&gt; $or$ &lt;code&gt;Ctrl + a s&lt;/code&gt;：查看当前所有的 Tmux 会话&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;tmux&lt;/code&gt;中选中文本时，需要按住 &lt;code&gt;shift&lt;/code&gt; 键&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux&lt;/code&gt;中复制/粘贴文本：
&lt;ol&gt;
&lt;li&gt;按下 &lt;code&gt;Ctrl + a&lt;/code&gt; 后松开手指，然后按 &lt;code&gt;[&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板&lt;/li&gt;
&lt;li&gt;按下 &lt;code&gt;Ctrl + a&lt;/code&gt; 后松开手指，然后按 &lt;code&gt;]&lt;/code&gt; ，会将剪贴板中的内容粘贴到光标处&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vim-是什么&#34;&gt;Vim 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vim常用命令&#34;&gt;Vim常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一般模式切换到编辑模式（常用）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; : 在光标所处位置 &lt;strong&gt;直接&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; : 在光标所处位置的 &lt;strong&gt;下一个字符&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; : 在光标所处位置的 &lt;strong&gt;下一行&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; : 取代当前光标处的字符，然后开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ESC]&lt;/code&gt; : 退出编辑模式，回到一般模式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;光标移动操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;n&amp;lt;Space&amp;gt;&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标 &lt;strong&gt;向右移动&lt;/strong&gt;这一行的n个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&amp;lt;Enter&amp;gt;&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标 &lt;strong&gt;向下移动&lt;/strong&gt;n行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;功能键[Home]&lt;/code&gt;: 光标移动到 &lt;strong&gt;本行开头&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; 或 &lt;code&gt;功能键[End]&lt;/code&gt;: 光标移动到 &lt;strong&gt;本行末尾&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n&lt;/code&gt; 或 &lt;code&gt;nG&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标移动到 &lt;strong&gt;第n行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt;: 光标移动到 &lt;strong&gt;最后一行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg&lt;/code&gt; : 光标移动到 &lt;strong&gt;第一行&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;查找、替换操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/word&lt;/code&gt; : 向 &lt;strong&gt;光标之下&lt;/strong&gt; 寻找 第一个值为 &lt;strong&gt;word&lt;/strong&gt; 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?word&lt;/code&gt; : 向 &lt;strong&gt;光标之上&lt;/strong&gt; 寻找 第一个值为 &lt;strong&gt;word&lt;/strong&gt; 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; : 重复 &lt;strong&gt;前一个&lt;/strong&gt; 查找操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; : 反向 重复 &lt;strong&gt;前一个&lt;/strong&gt; 查找操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n1,n2s/word1/word2/g&lt;/code&gt; : &lt;strong&gt;n1&lt;/strong&gt; 与 &lt;strong&gt;n2&lt;/strong&gt; 为数字，在第 &lt;strong&gt;n1&lt;/strong&gt; 行与 &lt;strong&gt;n2&lt;/strong&gt; 行之间寻找 &lt;strong&gt;word1&lt;/strong&gt; 这个字符串，并将该字符串 替换 为 &lt;strong&gt;word2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,$s/word1/word2/g&lt;/code&gt; : 将全文的 &lt;strong&gt;word1&lt;/strong&gt; 替换为 &lt;strong&gt;word2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,$s/word1/word2/gc&lt;/code&gt; : 将全文的 &lt;strong&gt;word1&lt;/strong&gt; 替换为 &lt;strong&gt;word2&lt;/strong&gt;，且在替换前 &lt;strong&gt;要求用户确认&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文本操作（可搭配 &lt;code&gt;数字+&amp;lt;Enter&amp;gt;/&amp;lt;Space&amp;gt;、0、G、$&lt;/code&gt; 等使用，达到预期组合效果）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; : 选中文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; : 删除选中的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; : 删除当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; : 复制选中的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yy&lt;/code&gt; : 复制当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; : 将复制的数据在光标的下一行/下一个位置 粘贴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; : 撤销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + r&lt;/code&gt; : 取消撤销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; : 将选中的文本整体 &lt;strong&gt;向右缩进一次&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; : 将选中的文本整体 &lt;strong&gt;向左缩进一次&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;命令行操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt; : 保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w!&lt;/code&gt; : 强制保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt; : 退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; : 强制退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; : 保存并退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set paste&lt;/code&gt; : 设置成粘贴模式，取消代码自动缩进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nopaste&lt;/code&gt; : 取消粘贴模式，开启代码自动缩进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nu&lt;/code&gt; : 显示行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nonu&lt;/code&gt; : 隐藏行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:noh&lt;/code&gt;：关闭查找关键词高亮&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + q&lt;/code&gt; : 当&lt;code&gt;vim&lt;/code&gt;卡死时，可以 &lt;strong&gt;取消当前正在执行的命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ssh&#34;&gt;SSH&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898263/&#34;&gt;SSH | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;Adding a new SSH key to your GitHub account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ssh是什么&#34;&gt;SSH是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SSH是一种网络协议，用于计算机之间的加密登录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ssh-免密登录&#34;&gt;SSH 免密登录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh-key-gen&lt;/code&gt; ：在本地服务器生成密钥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd .ssh/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim config&lt;/code&gt; ：定义服务器别名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;ssh-copy-id server&lt;/code&gt;：在本地服务器配置免密登录至云服务器&lt;/li&gt;
&lt;li&gt;免密登录至&lt;code&gt;docker 容器&lt;/code&gt;步骤同上&lt;/li&gt;
&lt;li&gt;配置完成后，就可以直接使用 &lt;code&gt;ssh server&lt;/code&gt; 免密登录啦&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;scp&#34;&gt;SCP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898266/&#34;&gt;SCP | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;scp是什么&#34;&gt;SCP是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;scp-传文件&#34;&gt;SCP 传文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;复制多个文件：&lt;code&gt;scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;复制文件夹 ：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scp -r ~/tmp SERVER:/home/acs/&lt;/code&gt;：将本地家目录中的&lt;code&gt;tmp&lt;/code&gt;文件夹复制到服务器中的&lt;code&gt;/home/acs/&lt;/code&gt;目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scp -r SERVER:homework .&lt;/code&gt;：将服务器中的&lt;code&gt;~/homework/&lt;/code&gt;文件夹复制到本地的当前路径下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2932078/&#34;&gt;git | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/column/6969263852206686221&#34;&gt;Git从放弃到入门&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6973299611536457742&#34;&gt;Git从放弃到入门：状态与阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://juejin.cn/post/6974039503056928776&#34;&gt;Git从放弃到入门：撤销操作&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2018/10/git-internals.html&#34;&gt;Git 原理入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learngitbranching.js.org/?locale=zh_CN&#34;&gt;Learn Git Braching - Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;Pro Git Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;git是什么&#34;&gt;Git是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;git常用命令&#34;&gt;Git常用命令&lt;/h3&gt;
&lt;h4 id=&#34;常用命令&#34;&gt;常用命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git add XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件添加到暂存区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;给自己看的备注信息&amp;quot;&lt;/code&gt;：将暂存区的内容提交到当前分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要 -u 以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库&lt;code&gt;XXX&lt;/code&gt;下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git restore --staged XX&lt;/code&gt;或&lt;code&gt;git reset HEAD XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;从暂存区里移除&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git checkout XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-全局设置&#34;&gt;Git 全局设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name xxx&lt;/code&gt;：设置全局用户名，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email xxx@xxx.com&lt;/code&gt;：设置全局邮箱地址，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;：将当前目录配置成&lt;code&gt;git&lt;/code&gt;仓库，信息记录在隐藏的&lt;code&gt;.git&lt;/code&gt;文件夹中&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-查看命令&#34;&gt;Git 查看命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git diff XX&lt;/code&gt;：查看&lt;code&gt;XX&lt;/code&gt;文件相对于暂存区修改了哪些内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --pretty=oneline&lt;/code&gt;：用一行来显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reflog&lt;/code&gt;：查看&lt;code&gt;HEAD&lt;/code&gt;指针的移动历史（包括被回滚的版本）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-删除命令&#34;&gt;Git 删除命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git rm --cached XX&lt;/code&gt;：将文件从仓库索引目录中删掉，不希望管理这个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --staged xx&lt;/code&gt;：将&lt;code&gt;xx&lt;/code&gt;从暂存区里移除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout — XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-代码回滚&#34;&gt;Git 代码回滚&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;或&lt;code&gt;git reset --hard HEAD~ &lt;/code&gt;：将代码库回滚到上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^^&lt;/code&gt;：往上回滚两次，以此类推&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD~100&lt;/code&gt;：往上回滚100个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard 版本号&lt;/code&gt;：回滚到某一特定版本&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-远程仓库&#34;&gt;Git 远程仓库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add origin git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将本地仓库关联到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要-u以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin branch_name&lt;/code&gt;：将本地的某个分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库XXX下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-分支命令&#34;&gt;Git 分支命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch branch_name&lt;/code&gt;：创建新分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b branch_name&lt;/code&gt;：创建并切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout branch_name&lt;/code&gt;：切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge branch_name&lt;/code&gt;：将分支&lt;code&gt;branch_name&lt;/code&gt;合并到当前分支上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d branch_name&lt;/code&gt;：删除本地仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-stash-暂存&#34;&gt;Git stash 暂存&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt;：将工作区和暂存区中尚未提交的修改存入栈中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash drop&lt;/code&gt;：删除栈顶存储的修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;：查看栈中所有元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;thrift&#34;&gt;&lt;strong&gt;Thrift&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/video/3479/&#34;&gt;AcWing Linux 基础课 | Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md&#34;&gt;Thrift_learning - AcGit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog | Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;thrift 官网&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://thrift.apache.org/tutorial/&#34;&gt;Tutorial&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift&#34;&gt;tutorial.thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;thrift是什么&#34;&gt;Thrift是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;例实现一个游戏的匹配服务&#34;&gt;例：实现一个游戏的匹配服务&lt;/h3&gt;
&lt;h4 id=&#34;基本框架&#34;&gt;基本框架&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;游戏应用端 &lt;code&gt;game&lt;/code&gt;（Python3）
&lt;ol&gt;
&lt;li&gt;客户端：与 匹配系统服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;匹配系统服务器 &lt;code&gt;match_system&lt;/code&gt;（C++）
&lt;ol&gt;
&lt;li&gt;服务端：与 游戏应用端 的客户端交互&lt;/li&gt;
&lt;li&gt;客户端：与 数据存储服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据存储服务器（已经实现）
&lt;ol&gt;
&lt;li&gt;服务端：与 匹配系统服务器 的客户端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;文件结构&#34;&gt;文件结构&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;实现过程&#34;&gt;实现过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;定义接口 (&lt;code&gt;thrift&lt;/code&gt; 文件夹用于存放接口 )&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Server&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;match_system&lt;/code&gt;文件夹下生成 C++版本的服务端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen cpp tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将&lt;code&gt;gen cpp&lt;/code&gt; 文件夹重命名，如：&lt;code&gt;match_server&lt;/code&gt;（区别于之后要在此处生成的&lt;code&gt;client_server&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;Match_server.skeleton.cpp&lt;/code&gt; 移动到当前 &lt;code&gt;src&lt;/code&gt; 目录下并重命名为 &lt;code&gt;main.cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;由于移动了 &lt;code&gt;main.cpp&lt;/code&gt; 故需要修改一下&lt;code&gt; main.cpp&lt;/code&gt; 中头文件里关于 &lt;code&gt;Match.h&lt;/code&gt; 的引用路径：&lt;code&gt;#include &amp;quot;Match.h&amp;quot;&lt;/code&gt; -&amp;gt; &lt;code&gt;#include &amp;quot;match_server/Match.h&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;main.cpp&lt;/code&gt;中实现具体业务逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Client&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;game&lt;/code&gt;文件夹下生成 &lt;code&gt;python3&lt;/code&gt; 版本的服务端，然后通过修改得到客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen py tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;删掉 &lt;code&gt;Match_remote &lt;/code&gt;，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 &lt;strong&gt;客户端&lt;/strong&gt; 功能，因此他没有作用，不妨删掉，让文档简洁一点&lt;/li&gt;
&lt;li&gt;利用官网提供的模板，在&lt;code&gt;src&lt;/code&gt;文件夹下编写 &lt;strong&gt;客户端&lt;/strong&gt; 文件 &lt;code&gt;client.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;持久化到云端
&lt;ul&gt;
&lt;li&gt;将 &lt;strong&gt;非编译文件&lt;/strong&gt; 和 &lt;strong&gt;非可执行文件&lt;/strong&gt; 提交到 &lt;code&gt;git&lt;/code&gt; 中去（好的工程习惯）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;注意：先运行服务器后，客户端才能正常运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;thrift-接口&#34;&gt;Thrift 接口&lt;/h4&gt;
&lt;h5 id=&#34;matchthrift&#34;&gt;Match.thrift&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace cpp match_service
struct User {
    1: i32 id,
    2: string name,
    3: i32 scores
}
service Match {
    i32 add_user(1: User user, 2: string info),
    i32 remove_user(1: User user, 2: string info),
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;savethrift&#34;&gt;Save.thrift&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace cpp save_service
service Save {
    /**
     * username: myserver的名称
     * password: myserver的密码的md5值的前8位，用命令md5sum
     * 用户名密码验证成功会返回0，验证失败会返回1
     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中
     */
    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;各版本预览&#34;&gt;各版本预览&lt;/h4&gt;
&lt;h5 id=&#34;match_server10&#34;&gt;Match_server:1.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_client&lt;/code&gt;：创建固定的&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


def main():
    # Make socket
    transport = TSocket.TSocket(&amp;#39;localhost&amp;#39;, 9090)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = Match.Client(protocol)

    # Connect!
    transport.open()

    user = User(1, &amp;#39;yxc&amp;#39;, 1500)
    client.add_user(user, &amp;#34;&amp;#34;)

    # Close!
    transport.close()


# 调用 main 函数
if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    return 0;
  }
};
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
    
  server.serve();
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server20&#34;&gt;Match_server:2.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_client&lt;/code&gt;：根据标准输入来创建&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# 利用 python 在终端读入信息需要引入 stdin
from sys import stdin

# 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息
# 目的是可以一直不断处理信息
# 然后重写 main 函数，使之能不断从终端读入信息
def operate(op, user_id, user_name, score):
    # Make socket 
	transport = TSocket.TSocket(&amp;#39;localhost&amp;#39;, 9090)
	
	# Buffering is critical. Raw sockets are very slow
	transport = TTransport.TBufferedTransport(transport)
	
	# Wrap in a protocol
	protocol = TBinaryProtocol.TBinaryProtocol(transport)
	
	# Create a client to use the protocol encoder
	client = Match.Client(protocol)
	
	# Connect!
	transport.open()

    # 针对 op 参数，分别进行 &amp;#34;增加&amp;#34; 与 &amp;#34;删出&amp;#34; 操作
    user = User(user_id, user_name, score)

    if op == &amp;#34;add&amp;#34;:
        client.add_user(user, &amp;#34;&amp;#34;)
    else:
        client.remove_user(user, &amp;#34;&amp;#34;)
    
    # Close!
	transport.close()

def main():
    for line in stdin:
        op, user_id, user_name, score = line.split(&amp;#39; &amp;#39;)
        operate(op, int(user_id), user_name, int(score))

# 调用 main 函数
if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：自动将用户池中前两个用户匹配到一起&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &amp;gt; 1) {
            auto a = users[0], b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());
            save_result(a.id, b.id);
        }
    }
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server30&#34;&gt;Match_server:3.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save_client&lt;/code&gt;：因为一个节点只能由一个&lt;code&gt;main&lt;/code&gt;方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个&lt;code&gt;main&lt;/code&gt;方法中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 需要额外引入的头文件
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;

// 需要额外声明的命名空间
using namespace  ::save_service;

//重写 save_result 内的内容，使其能够与 &amp;#34;数据存储服务器&amp;#34; 交互
void save_result(int a, int b) { // 记录成功匹配的信息
    printf(&amp;#34;Match Result: %d %d\n&amp;#34;, a, b);

    // Client端的板子
    std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
    std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
    std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
    SaveClient client(protocol);

    try {
        transport-&amp;gt;open();

        //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
        int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
        //输出匹配结果
        if (!res) puts(&amp;#34;success&amp;#34;);
        else puts(&amp;#34;fail&amp;#34;);

        transport-&amp;gt;close();
    } catch (TException&amp;amp; tx) {
        cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：每次只匹配分差小于 50 的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt; // 用于调用 sleep 函数
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
	//重写 save_result 内的内容，使其能够与 &amp;#34;数据存储服务器&amp;#34; 交互
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
        // Client端的板子
        std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
        std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&amp;gt;open();
            //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
            int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
            //输出匹配结果
            if (!res) puts(&amp;#34;success&amp;#34;);
            else puts(&amp;#34;fail&amp;#34;);
            transport-&amp;gt;close();
        } catch (TException&amp;amp; tx) {
            cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
        }
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &amp;gt; 1) {
            // 按照 rank分 排序
            sort(users.begin(), users.end(), [&amp;amp;](User&amp;amp; a, User&amp;amp; b) {
                return a.scores &amp;lt; b.scores;
            });
            bool flag = true;
            for (uint32_t i = 1; i &amp;lt; users.size(); ++ i) {
                auto a = users[i - 1], b = users[i];
                // 两名玩家分数差小于50时进行匹配
                if (b.scores - a.scores &amp;lt;= 50) {
                    users.erase(users.begin() + i - 1, users.begin() + i + 1);
                    save_result(a.id, b.id);
                    flag = false;
                    break;
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server40&#34;&gt;Match_server:4.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：随时间扩大匹配域，每一单位的 &lt;code&gt;wt&lt;/code&gt; 会扩大 $50$ 分 的匹配域&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt; // 用于调用 sleep 函数
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
        // Client端的板子
        std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
        std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&amp;gt;open();
            //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
            int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
            //输出匹配结果
            if (!res) puts(&amp;#34;success&amp;#34;);
            else puts(&amp;#34;fail&amp;#34;);
            transport-&amp;gt;close();
        } catch (TException&amp;amp; tx) {
            cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
        }
    }
    bool check_match(uint32_t i, uint32_t j) {
        auto a = users[i], b = users[j];
        
        int dt = abs(a.scores - b.scores);
        int a_max_dif = wt[i] * 50;
        int b_max_dif = wt[j] * 50;
        return dt &amp;lt;= a_max_dif &amp;amp;&amp;amp; dt &amp;lt;= b_max_dif;
    }
    void match() {
       for (uint32_t i = 0; i &amp;lt; wt.size(); ++ i)
           wt[i] ++;
        while (users.size() &amp;gt; 1) {
            bool flag = true;
            for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
                for (uint32_t j = i + 1; j &amp;lt; users.size(); ++ j) {
                    if (check_match(i, j)) {
                        auto a = users[i], b = users[j];
                        users.erase(users.begin() + j);
                        users.erase(users.begin() + i);
                        wt.erase(wt.begin() + j);
                        wt.erase(wt.begin() + i);
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    if (!flag) break;       
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
        wt.push_back(0);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                wt.erase(wt.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
    vector&amp;lt;int&amp;gt; wt; // 等待时间，单位：s
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 启动服务端
./match_system/src/main

# 启动客户端
python3 game/src/client.py

# 游戏应用端 （op id name scores）
add 1 yxc 2000
add 2 xan 1500
add 3 zagy 2500
remove 3 zagy 2500

# 匹配系统服务器
add_user
add_user
remove_user 
# 等待了 10 s
Match Result: 1 2
success
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;项目地址&#34;&gt;项目地址&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xancoding/Learning-Thrift&#34;&gt;Learning-Thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="acwing-linux-基础课">AcWing Linux 基础课</h1>
<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/57/">AcWing Linux 基础课</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术 </a></li>
<li><a href="https://missing-semester-cn.github.io/">The Missing Semester of Your CS Education</a></li>
</ul>
<hr>
<h2 id="terminal">Terminal</h2>
<blockquote>
<p><strong>终端，一个程序，是界面上打开的黑框框本身，<code>shell</code> 运行于其中</strong></p>
</blockquote>
<h2 id="shell">Shell</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855530/">常用文件管理命令 | AcWing Linux 基础课</a></li>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855883/">Shell 语法 | AcWing Linux 基础课</a></strong></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030391/">管道、环境变量与常用命令  | AcWing Linux 基础课</a>
<ul>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030414/">常用命令  | AcWing Linux 基础课</a></strong></li>
</ul>
</li>
<li><a href="https://wangdoc.com/bash/">《Bash 脚本教程》</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/course-shell/">第 1 讲 - 课程概览与 Shell | The missing semester of your CS education</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/shell-tools/">第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19556676">终极 Shell——ZSH</a></li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh">快速入门 zsh</a></li>
</ul>
<hr>
<h3 id="shell是什么">Shell是什么？</h3>
<ul>
<li><code>Shell</code> 是我们通过命令行与操作系统沟通的 <code>程序</code>，是个 <code>命令行解释器</code></li>
<li><code>Shell</code> 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用</li>
<li><code>Shell</code> 负责外界与 <code>Linux 内核</code> 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序</li>
<li><code>Shell</code>解释器有 <code>sh</code>、<code>bash</code>、<code>zsh...</code></li>
</ul>
<h3 id="shell常用命令">Shell常用命令</h3>
<ol>
<li><code>ag xxx</code>：搜索当前目录下的所有文件，<strong>检索<code>xxx</code>字符串</strong></li>
<li><code>find /path/to/directory/ -name '*.py'</code>：<strong>搜索</strong>某个文件路径下的所有<code>*.py</code><strong>文件</strong></li>
<li><code>history</code>：展示当前用户的历史操作。内容存放在<code>~/.bash_history</code>中</li>
<li><code>grep xxx</code>：从<code>stdin</code>中读入若干行数据，如果某行中包含<code>xxx</code>，则输出该行；否则忽略该行，<strong>用于查找文件里符合条件的字符串</strong></li>
</ol>
<h2 id="tmux--vim">Tmux &amp;&amp; Vim</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855620/">tmux和vim | AcWing Linux 基础课</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程 | 阮一峰的网络日志</a></li>
<li><a href="http://kuanghy.github.io/2016/09/29/tmux">Tmux 简介与使用 | Huoty&rsquo;s Blog</a></li>
<li><a href="https://coolshell.cn/articles/5426.html#comments">简明 VIM 练级攻略 | 酷壳</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/editors/">第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education</a></li>
<li><a href="https://vim-adventures.com/">VIM 大冒险 - Game</a></li>
</ul>
<hr>
<h3 id="tmux-是什么">Tmux 是什么？</h3>
<blockquote>
<p><strong><code>Tmux</code> 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）</strong></p>
<p><strong>远程 <code>SSH</code> 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。</strong></p>
</blockquote>
<h3 id="tmux--session--window--pane">Tmux &amp;&amp; Session &amp;&amp; Window &amp;&amp; Pane</h3>
<ul>
<li>一个<code>tmux </code>可以有好多个<code>session</code>(会话)</li>
<li>一个<code>session</code>可以有好多个<code>window</code>(窗口)</li>
<li>一个<code>window</code>可以有好多个<code>pane</code>(面板)</li>
<li>一个<code>session</code>里不超过10个<code>window</code>是最方便的：可以用0到9迅速切换</li>
</ul>
<h3 id="tmux常用命令">Tmux常用命令</h3>
<blockquote>
<p><strong>Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b</strong></p>
</blockquote>
<ol>
<li><code>tmux new -s &lt;session-name&gt;</code>：新建会话</li>
<li><code>tmux detach</code> $or$ <code>Ctrl + a d</code>：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行</li>
<li><code>tmux attach -t &lt;session-name&gt;</code>：重新接入某个已存在的会话</li>
<li><code>tmux kill-session -t &lt;session-name&gt;</code>：杀死某个会话</li>
<li><code>tmux switch -t &lt;session-name&gt;</code>：切换会话</li>
<li><code>tmux rename-session -t &lt;old-name&gt; &lt;new-name&gt;</code>：重命名会话</li>
<li><code>tmux ls</code> $or$ <code>Ctrl + a s</code>：查看当前所有的 Tmux 会话</li>
<li>在<code>tmux</code>中选中文本时，需要按住 <code>shift</code> 键</li>
<li><code>tmux</code>中复制/粘贴文本：
<ol>
<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>[</code></li>
<li>用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板</li>
<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>]</code> ，会将剪贴板中的内容粘贴到光标处</li>
</ol>
</li>
</ol>
<h3 id="vim-是什么">Vim 是什么？</h3>
<blockquote>
<p><strong>VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。</strong></p>
</blockquote>
<h3 id="vim常用命令">Vim常用命令</h3>
<ol>
<li>一般模式切换到编辑模式（常用）
<ol>
<li><code>i</code> : 在光标所处位置 <strong>直接</strong> 开始</li>
<li><code>a</code> : 在光标所处位置的 <strong>下一个字符</strong> 开始</li>
<li><code>o</code> : 在光标所处位置的 <strong>下一行</strong> 开始</li>
<li><code>r</code> : 取代当前光标处的字符，然后开始</li>
<li><code>[ESC]</code> : 退出编辑模式，回到一般模式</li>
</ol>
</li>
<li>光标移动操作
<ol>
<li><code>n&lt;Space&gt;</code> : <strong>n</strong> 为数字，光标 <strong>向右移动</strong>这一行的n个字符</li>
<li><code>n&lt;Enter&gt;</code> : <strong>n</strong> 为数字，光标 <strong>向下移动</strong>n行</li>
<li><code>0</code> 或 <code>功能键[Home]</code>: 光标移动到 <strong>本行开头</strong></li>
<li><code>$</code> 或 <code>功能键[End]</code>: 光标移动到 <strong>本行末尾</strong></li>
<li><code>:n</code> 或 <code>nG</code> : <strong>n</strong> 为数字，光标移动到 <strong>第n行</strong></li>
<li><code>G</code>: 光标移动到 <strong>最后一行</strong></li>
<li><code>gg</code> : 光标移动到 <strong>第一行</strong></li>
</ol>
</li>
<li>查找、替换操作
<ol>
<li><code>/word</code> : 向 <strong>光标之下</strong> 寻找 第一个值为 <strong>word</strong> 的字符串</li>
<li><code>?word</code> : 向 <strong>光标之上</strong> 寻找 第一个值为 <strong>word</strong> 的字符串</li>
<li><code>n</code> : 重复 <strong>前一个</strong> 查找操作</li>
<li><code>N</code> : 反向 重复 <strong>前一个</strong> 查找操作</li>
<li><code>:n1,n2s/word1/word2/g</code> : <strong>n1</strong> 与 <strong>n2</strong> 为数字，在第 <strong>n1</strong> 行与 <strong>n2</strong> 行之间寻找 <strong>word1</strong> 这个字符串，并将该字符串 替换 为 <strong>word2</strong></li>
<li><code>:1,$s/word1/word2/g</code> : 将全文的 <strong>word1</strong> 替换为 <strong>word2</strong></li>
<li><code>:1,$s/word1/word2/gc</code> : 将全文的 <strong>word1</strong> 替换为 <strong>word2</strong>，且在替换前 <strong>要求用户确认</strong></li>
</ol>
</li>
<li>文本操作（可搭配 <code>数字+&lt;Enter&gt;/&lt;Space&gt;、0、G、$</code> 等使用，达到预期组合效果）
<ol>
<li><code>v</code> : 选中文本</li>
<li><code>d</code> : 删除选中的文本</li>
<li><code>dd</code> : 删除当前行</li>
<li><code>y</code> : 复制选中的文本</li>
<li><code>yy</code> : 复制当前行</li>
<li><code>p</code> : 将复制的数据在光标的下一行/下一个位置 粘贴</li>
<li><code>u</code> : 撤销</li>
<li><code>Ctrl + r</code> : 取消撤销</li>
<li><code>&gt;</code> : 将选中的文本整体 <strong>向右缩进一次</strong></li>
<li><code>&lt;</code> : 将选中的文本整体 <strong>向左缩进一次</strong></li>
</ol>
</li>
<li>命令行操作
<ol>
<li><code>:w</code> : 保存</li>
<li><code>:w!</code> : 强制保存</li>
<li><code>:q</code> : 退出</li>
<li><code>:q!</code> : 强制退出</li>
<li><code>:wq</code> : 保存并退出</li>
<li><code>:set paste</code> : 设置成粘贴模式，取消代码自动缩进</li>
<li><code>:set nopaste</code> : 取消粘贴模式，开启代码自动缩进</li>
<li><code>:set nu</code> : 显示行号</li>
<li><code>:set nonu</code> : 隐藏行号</li>
<li><code>:noh</code>：关闭查找关键词高亮</li>
</ol>
</li>
<li><code>Ctrl + q</code> : 当<code>vim</code>卡死时，可以 <strong>取消当前正在执行的命令</strong></li>
</ol>
<h2 id="ssh">SSH</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898263/">SSH | AcWing Linux 基础课</a></li>
<li><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Adding a new SSH key to your GitHub account</a></li>
</ul>
<hr>
<h3 id="ssh是什么">SSH是什么？</h3>
<blockquote>
<p><strong>SSH是一种网络协议，用于计算机之间的加密登录</strong></p>
</blockquote>
<h3 id="ssh-免密登录">SSH 免密登录</h3>
<ol>
<li><code>ssh-key-gen</code> ：在本地服务器生成密钥</li>
<li><code>cd .ssh/</code></li>
<li><code>vim config</code> ：定义服务器别名</li>
</ol>
<pre tabindex="0"><code class="language-config" data-lang="config">Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
</code></pre><ol start="4">
<li><code>ssh-copy-id server</code>：在本地服务器配置免密登录至云服务器</li>
<li>免密登录至<code>docker 容器</code>步骤同上</li>
<li>配置完成后，就可以直接使用 <code>ssh server</code> 免密登录啦</li>
</ol>
<h2 id="scp">SCP</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898266/">SCP | AcWing Linux 基础课</a></li>
</ul>
<hr>
<h3 id="scp是什么">SCP是什么？</h3>
<blockquote>
<p><strong>SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录</strong></p>
</blockquote>
<h3 id="scp-传文件">SCP 传文件</h3>
<ul>
<li>复制多个文件：<code>scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH</code></li>
<li>复制文件夹 ：
<ul>
<li><code>scp -r ~/tmp SERVER:/home/acs/</code>：将本地家目录中的<code>tmp</code>文件夹复制到服务器中的<code>/home/acs/</code>目录下</li>
<li><code>scp -r SERVER:homework .</code>：将服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下</li>
</ul>
</li>
</ul>
<h2 id="git">Git</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2932078/">git | AcWing Linux 基础课</a></li>
<li><a href="https://juejin.cn/column/6969263852206686221">Git从放弃到入门</a>
<ul>
<li><a href="https://juejin.cn/post/6973299611536457742">Git从放弃到入门：状态与阶段</a></li>
<li><strong><a href="https://juejin.cn/post/6974039503056928776">Git从放弃到入门：撤销操作</a></strong></li>
</ul>
</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/10/git-internals.html">Git 原理入门</a></li>
<li><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Braching - Game</a></li>
<li><a href="https://git-scm.com/book/zh/v2">Pro Git Online</a></li>
</ul>
<hr>
<h3 id="git是什么">Git是什么？</h3>
<blockquote>
<p><strong>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</strong></p>
</blockquote>
<h3 id="git常用命令">Git常用命令</h3>
<h4 id="常用命令">常用命令</h4>
<ol>
<li><code>git add XX</code>：将<code>XX</code>文件添加到暂存区</li>
<li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支</li>
<li><code>git push -u (第一次需要 -u 以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库<code>XXX</code>下载到当前目录下</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><strong><code>git status</code>：查看仓库状态</strong></li>
<li><strong>有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？</strong>
<ul>
<li><strong><code>git restore --staged XX</code>或<code>git reset HEAD XX</code>：将<code>XX</code>从暂存区里移除</strong></li>
</ul>
</li>
<li><strong>有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？</strong>
<ul>
<li><strong><code>git checkout XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</strong></li>
</ul>
</li>
</ol>
<h4 id="git-全局设置">Git 全局设置</h4>
<ol>
<li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git init</code>：将当前目录配置成<code>git</code>仓库，信息记录在隐藏的<code>.git</code>文件夹中</li>
</ol>
<h4 id="git-查看命令">Git 查看命令</h4>
<ol>
<li><code>git diff XX</code>：查看<code>XX</code>文件相对于暂存区修改了哪些内容</li>
<li><code>git status</code>：查看仓库状态</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><code>git log --pretty=oneline</code>：用一行来显示</li>
<li><code>git reflog</code>：查看<code>HEAD</code>指针的移动历史（包括被回滚的版本）</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
</ol>
<h4 id="git-删除命令">Git 删除命令</h4>
<ol>
<li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉，不希望管理这个文件</li>
<li><code>git restore --staged xx</code>：将<code>xx</code>从暂存区里移除</li>
<li><code>git checkout — XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</li>
</ol>
<h4 id="git-代码回滚">Git 代码回滚</h4>
<ol>
<li><code>git reset --hard HEAD^</code>或<code>git reset --hard HEAD~ </code>：将代码库回滚到上一个版本</li>
<li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li>
<li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li>
<li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li>
</ol>
<h4 id="git-远程仓库">Git 远程仓库</h4>
<ol>
<li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li>
<li><code>git push -u (第一次需要-u以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-分支命令">Git 分支命令</h4>
<ol>
<li><code>git branch branch_name</code>：创建新分支</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li>
<li><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</li>
<li><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</li>
<li><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-stash-暂存">Git stash 暂存</h4>
<ol>
<li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li>
<li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li>
<li><code>git stash drop</code>：删除栈顶存储的修改</li>
<li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li>
<li><code>git stash list</code>：查看栈中所有元素</li>
</ol>
<h2 id="thrift"><strong>Thrift</strong></h2>
<ul>
<li><a href="https://www.acwing.com/video/3479/">AcWing Linux 基础课 | Thrift</a></li>
<li><a href="https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md">Thrift_learning - AcGit</a></li>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog | Thrift</a></li>
<li><a href="https://thrift.apache.org/">thrift 官网</a> -&gt; <a href="https://thrift.apache.org/tutorial/">Tutorial</a> -&gt; <a href="https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift">tutorial.thrift</a></li>
</ul>
<hr>
<h3 id="thrift是什么">Thrift是什么？</h3>
<blockquote>
<p><strong>Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架</strong></p>
<p><strong>RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程</strong></p>
<p><strong>Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务</strong></p>
</blockquote>
<h3 id="例实现一个游戏的匹配服务">例：实现一个游戏的匹配服务</h3>
<h4 id="基本框架">基本框架</h4>
<ol>
<li>游戏应用端 <code>game</code>（Python3）
<ol>
<li>客户端：与 匹配系统服务器 的服务端交互</li>
</ol>
</li>
<li>匹配系统服务器 <code>match_system</code>（C++）
<ol>
<li>服务端：与 游戏应用端 的客户端交互</li>
<li>客户端：与 数据存储服务器 的服务端交互</li>
</ol>
</li>
<li>数据存储服务器（已经实现）
<ol>
<li>服务端：与 匹配系统服务器 的客户端交互</li>
</ol>
</li>
</ol>
<h4 id="文件结构">文件结构</h4>
<pre tabindex="0"><code>|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
</code></pre><h4 id="实现过程">实现过程</h4>
<ol>
<li>定义接口 (<code>thrift</code> 文件夹用于存放接口 )</li>
<li>完成 <code>Server</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>match_system</code>文件夹下生成 C++版本的服务端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen cpp tutorial.thrift
</code></pre><ol start="2">
<li>将<code>gen cpp</code> 文件夹重命名，如：<code>match_server</code>（区别于之后要在此处生成的<code>client_server</code>）</li>
<li>把 <code>Match_server.skeleton.cpp</code> 移动到当前 <code>src</code> 目录下并重命名为 <code>main.cpp</code>
<ul>
<li>由于移动了 <code>main.cpp</code> 故需要修改一下<code> main.cpp</code> 中头文件里关于 <code>Match.h</code> 的引用路径：<code>#include &quot;Match.h&quot;</code> -&gt; <code>#include &quot;match_server/Match.h&quot;</code></li>
</ul>
</li>
<li>在<code>main.cpp</code>中实现具体业务逻辑</li>
</ol>
</li>
<li>完成 <code>Client</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>game</code>文件夹下生成 <code>python3</code> 版本的服务端，然后通过修改得到客户端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen py tutorial.thrift
</code></pre><ol start="2">
<li>删掉 <code>Match_remote </code>，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 <strong>客户端</strong> 功能，因此他没有作用，不妨删掉，让文档简洁一点</li>
<li>利用官网提供的模板，在<code>src</code>文件夹下编写 <strong>客户端</strong> 文件 <code>client.py</code></li>
</ol>
</li>
<li>持久化到云端
<ul>
<li>将 <strong>非编译文件</strong> 和 <strong>非可执行文件</strong> 提交到 <code>git</code> 中去（好的工程习惯）
<ul>
<li><code>Cpp</code>
<ul>
<li><code>git restore --stage *.o</code></li>
<li><code>git restore --stage main</code></li>
</ul>
</li>
<li><code>Python</code>
<ul>
<li><code>git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里</code></li>
<li><code>git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>注意：先运行服务器后，客户端才能正常运行</li>
</ul>
<h4 id="thrift-接口">Thrift 接口</h4>
<h5 id="matchthrift">Match.thrift</h5>
<pre tabindex="0"><code>namespace cpp match_service
struct User {
    1: i32 id,
    2: string name,
    3: i32 scores
}
service Match {
    i32 add_user(1: User user, 2: string info),
    i32 remove_user(1: User user, 2: string info),
}
</code></pre><h5 id="savethrift">Save.thrift</h5>
<pre tabindex="0"><code>namespace cpp save_service
service Save {
    /**
     * username: myserver的名称
     * password: myserver的密码的md5值的前8位，用命令md5sum
     * 用户名密码验证成功会返回0，验证失败会返回1
     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中
     */
    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)
}
</code></pre><h4 id="各版本预览">各版本预览</h4>
<h5 id="match_server10">Match_server:1.0</h5>
<ul>
<li><code>match_client</code>：创建固定的<code>User</code></li>
</ul>
<pre tabindex="0"><code>from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


def main():
    # Make socket
    transport = TSocket.TSocket(&#39;localhost&#39;, 9090)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = Match.Client(protocol)

    # Connect!
    transport.open()

    user = User(1, &#39;yxc&#39;, 1500)
    client.add_user(user, &#34;&#34;)

    # Close!
    transport.close()


# 调用 main 函数
if __name__ == &#34;__main__&#34;:
    main()
</code></pre><ul>
<li><code>match_server</code></li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &#34;match_server/Match.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include&lt;iostream&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    return 0;
  }
};
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
    
  server.serve();
  return 0;
}
</code></pre><h5 id="match_server20">Match_server:2.0</h5>
<ul>
<li><code>match_client</code>：根据标准输入来创建<code>User</code></li>
</ul>
<pre tabindex="0"><code>from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# 利用 python 在终端读入信息需要引入 stdin
from sys import stdin

# 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息
# 目的是可以一直不断处理信息
# 然后重写 main 函数，使之能不断从终端读入信息
def operate(op, user_id, user_name, score):
    # Make socket 
	transport = TSocket.TSocket(&#39;localhost&#39;, 9090)
	
	# Buffering is critical. Raw sockets are very slow
	transport = TTransport.TBufferedTransport(transport)
	
	# Wrap in a protocol
	protocol = TBinaryProtocol.TBinaryProtocol(transport)
	
	# Create a client to use the protocol encoder
	client = Match.Client(protocol)
	
	# Connect!
	transport.open()

    # 针对 op 参数，分别进行 &#34;增加&#34; 与 &#34;删出&#34; 操作
    user = User(user_id, user_name, score)

    if op == &#34;add&#34;:
        client.add_user(user, &#34;&#34;)
    else:
        client.remove_user(user, &#34;&#34;)
    
    # Close!
	transport.close()

def main():
    for line in stdin:
        op, user_id, user_name, score = line.split(&#39; &#39;)
        operate(op, int(user_id), user_name, int(score))

# 调用 main 函数
if __name__ == &#34;__main__&#34;:
    main()
</code></pre><ul>
<li><code>match_server</code>：自动将用户池中前两个用户匹配到一起</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &#34;match_server/Match.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &gt; 1) {
            auto a = users[0], b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());
            save_result(a.id, b.id);
        }
    }
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h5 id="match_server30">Match_server:3.0</h5>
<ul>
<li><code>save_client</code>：因为一个节点只能由一个<code>main</code>方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个<code>main</code>方法中</li>
</ul>
<pre tabindex="0"><code>// 需要额外引入的头文件
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;

// 需要额外声明的命名空间
using namespace  ::save_service;

//重写 save_result 内的内容，使其能够与 &#34;数据存储服务器&#34; 交互
void save_result(int a, int b) { // 记录成功匹配的信息
    printf(&#34;Match Result: %d %d\n&#34;, a, b);

    // Client端的板子
    std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
    std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
    std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
    SaveClient client(protocol);

    try {
        transport-&gt;open();

        //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
        int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
        //输出匹配结果
        if (!res) puts(&#34;success&#34;);
        else puts(&#34;fail&#34;);

        transport-&gt;close();
    } catch (TException&amp; tx) {
        cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
    }
}
</code></pre><ul>
<li><code>match_server</code>：每次只匹配分差小于 50 的用户</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;
#include &#34;match_server/Match.h&#34;
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include &lt;unistd.h&gt; // 用于调用 sleep 函数
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
	//重写 save_result 内的内容，使其能够与 &#34;数据存储服务器&#34; 交互
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
        // Client端的板子
        std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
        std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&gt;open();
            //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
            int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
            //输出匹配结果
            if (!res) puts(&#34;success&#34;);
            else puts(&#34;fail&#34;);
            transport-&gt;close();
        } catch (TException&amp; tx) {
            cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
        }
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &gt; 1) {
            // 按照 rank分 排序
            sort(users.begin(), users.end(), [&amp;](User&amp; a, User&amp; b) {
                return a.scores &lt; b.scores;
            });
            bool flag = true;
            for (uint32_t i = 1; i &lt; users.size(); ++ i) {
                auto a = users[i - 1], b = users[i];
                // 两名玩家分数差小于50时进行匹配
                if (b.scores - a.scores &lt;= 50) {
                    users.erase(users.begin() + i - 1, users.begin() + i + 1);
                    save_result(a.id, b.id);
                    flag = false;
                    break;
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h5 id="match_server40">Match_server:4.0</h5>
<ul>
<li><code>match_server</code>：随时间扩大匹配域，每一单位的 <code>wt</code> 会扩大 $50$ 分 的匹配域</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;
#include &#34;match_server/Match.h&#34;
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include &lt;unistd.h&gt; // 用于调用 sleep 函数
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
        // Client端的板子
        std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
        std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&gt;open();
            //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
            int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
            //输出匹配结果
            if (!res) puts(&#34;success&#34;);
            else puts(&#34;fail&#34;);
            transport-&gt;close();
        } catch (TException&amp; tx) {
            cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
        }
    }
    bool check_match(uint32_t i, uint32_t j) {
        auto a = users[i], b = users[j];
        
        int dt = abs(a.scores - b.scores);
        int a_max_dif = wt[i] * 50;
        int b_max_dif = wt[j] * 50;
        return dt &lt;= a_max_dif &amp;&amp; dt &lt;= b_max_dif;
    }
    void match() {
       for (uint32_t i = 0; i &lt; wt.size(); ++ i)
           wt[i] ++;
        while (users.size() &gt; 1) {
            bool flag = true;
            for (uint32_t i = 0; i &lt; users.size(); ++ i) {
                for (uint32_t j = i + 1; j &lt; users.size(); ++ j) {
                    if (check_match(i, j)) {
                        auto a = users[i], b = users[j];
                        users.erase(users.begin() + j);
                        users.erase(users.begin() + i);
                        wt.erase(wt.begin() + j);
                        wt.erase(wt.begin() + i);
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    if (!flag) break;       
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
        wt.push_back(0);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                wt.erase(wt.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
    vector&lt;int&gt; wt; // 等待时间，单位：s
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h4 id="usage">Usage</h4>
<pre tabindex="0"><code># 启动服务端
./match_system/src/main

# 启动客户端
python3 game/src/client.py

# 游戏应用端 （op id name scores）
add 1 yxc 2000
add 2 xan 1500
add 3 zagy 2500
remove 3 zagy 2500

# 匹配系统服务器
add_user
add_user
remove_user 
# 等待了 10 s
Match Result: 1 2
success
</code></pre><h4 id="项目地址">项目地址</h4>
<ul>
<li><a href="https://github.com/Xancoding/Learning-Thrift">Learning-Thrift</a></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
