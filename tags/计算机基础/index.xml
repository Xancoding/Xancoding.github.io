<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>计算机基础 on Xan&#39;s Blog</title>
    <link>https://xancoding.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in 计算机基础 on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 15 Nov 2022 21:37:17 +0800</lastBuildDate><atom:link href="https://xancoding.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>计算机系统基础</title>
      <link>https://xancoding.github.io/posts/2022-11-15-21-37-17/</link>
      <pubDate>Tue, 15 Nov 2022 21:37:17 +0800</pubDate>
      
      <guid>https://xancoding.github.io/posts/2022-11-15-21-37-17/</guid>
      <description>&lt;h1 id=&#34;计算机系统基础一程序的表示转换与链接&#34;&gt;计算机系统基础(一)——程序的表示、转换与链接&lt;/h1&gt;
&lt;h2 id=&#34;原码移码补码&#34;&gt;原码&amp;amp;移码&amp;amp;补码&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;原码
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;最高位放符号位，1 表示负&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;定点小数，用来表示浮点数的尾数&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移码
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;真值加上一个偏置值 bias&lt;/u&gt;， bias 常为 2&lt;sup&gt;n - 1&lt;/sup&gt; or 2&lt;sup&gt;n - 1&lt;/sup&gt; - 1 (如 IEEE 754)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;定点整数，用来表示浮点数的阶&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移码的本意是为了方便两个数作比较&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;补码
&lt;ul&gt;
&lt;li&gt;假设补码有  n  位，则：&lt;strong&gt;x&lt;sub&gt;补&lt;/sub&gt; = 2&lt;sup&gt;n&lt;/sup&gt; + x&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;数值为正数时，其值大小就是原码；为负时，其值的大小就是各位取反再加 1&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;补码表示带符号整数&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;补码的出现是为了解决计算机的减法运算问题&lt;/li&gt;
&lt;li&gt;求补码的真值——简便求法
&lt;ul&gt;
&lt;li&gt;符号为 0 ，则为正数，数值部分相同&lt;/li&gt;
&lt;li&gt;符号为 1，则为负数，数值各位取反，末位加 1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;各位取反，末位加 1 简便做法：从后往前看，找到第一个 1 ，将它前面的所有位取反&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;浮点数-ieee754-标准&#34;&gt;浮点数—— IEEE754 标准&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;数符 + 阶码 + 尾数&lt;/u&gt;
&lt;ul&gt;
&lt;li&gt;Float  1 + 8 + 23
&lt;ul&gt;
&lt;li&gt;SP ： (-1) &lt;sup&gt;s&lt;/sup&gt;   *   (1 + Significand)   *   2 &lt;sup&gt;(Exponent  - 127)&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Double  1 + 11 + 52
&lt;ul&gt;
&lt;li&gt;DP ： (-1) &lt;sup&gt;s&lt;/sup&gt;   *   (1 + Significand)   *   2 &lt;sup&gt;(Exponent  - 1023)&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;数符  Sign bit
&lt;ul&gt;
&lt;li&gt;1 表示负数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;阶码  Exponent
&lt;ul&gt;
&lt;li&gt;规格化阶码范围为  0000 0001(-126) —— 1111 1110(127)   (single)&lt;/li&gt;
&lt;li&gt;bias  为  127(single)   1023(double)&lt;/li&gt;
&lt;li&gt;规格化阶范围为  1——254  (single)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全  0  和全  1  用来表示特殊值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;为避免混淆，用&lt;u&gt;阶码表示阶的编码&lt;/u&gt;，用&lt;u&gt;阶或指数表示阶码的值&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;尾数  Significand
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;规格化尾数最高位总是  1 ，所以隐含表示，省  1  位，小数点前总是  1&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;特殊数的表示 (single)
&lt;ul&gt;
&lt;li&gt;0
&lt;ul&gt;
&lt;li&gt;阶码：all   zeros&lt;/li&gt;
&lt;li&gt;尾数：all   zeros&lt;/li&gt;
&lt;li&gt;+0：0   00000000   00000000000000000000000&lt;/li&gt;
&lt;li&gt;-0：1   00000000   00000000000000000000000&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;∞
&lt;ul&gt;
&lt;li&gt;阶码：all   ones&lt;/li&gt;
&lt;li&gt;尾数：all   zeros&lt;/li&gt;
&lt;li&gt;+∞：0   11111111   00000000000000000000000&lt;/li&gt;
&lt;li&gt;-∞：1   11111111   00000000000000000000000&lt;/li&gt;
&lt;li&gt;浮点数除以  0  的结果是  ∞ ，而不是溢出异常(整数除以  0  为异常)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NaN   ( Not   a   Number )
&lt;ul&gt;
&lt;li&gt;阶码：all   ones&lt;/li&gt;
&lt;li&gt;尾数：nonzeros&lt;/li&gt;
&lt;li&gt;&lt;u&gt;可帮助调试程序&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;非规格化数  Denorms&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;阶码：all   zeros&lt;/li&gt;
&lt;li&gt;尾数：nonzeros&lt;/li&gt;
&lt;li&gt;用于表示  0  与规格化数间的 Gap&lt;/li&gt;
&lt;li&gt;SP ： (-1) &lt;sup&gt;s&lt;/sup&gt;   *   (0.xxxx&amp;hellip;xxx)   *   2 &lt;sup&gt;-126&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;为了让非规格化单精度浮点数能够平缓过渡到规格化单精度浮点数，所以取  2 &lt;sup&gt;-126&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;u&gt;当输入数据为不可表示数时，机器将其转换为最邻近的可表示数&lt;/u&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;汉字内码ascii码&#34;&gt;汉字内码&amp;amp;ASCII码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;u&gt;ASCII码为 7 位编码&lt;/u&gt;&lt;/li&gt;
&lt;li&gt;Ex：汉字 &amp;quot; 大 &amp;quot; 在码表中位于第  20  行、第  83  列。因此&lt;u&gt;区位码&lt;/u&gt;为  0010100   1010011 ，在区、位码上各加  32  得到两个字节编码（&lt;u&gt;GB2312国标码&lt;/u&gt;），即  00110100   01110011B   =   3473H 。前面的  34 H  和 字符  4  的  ACSII  的最高位相同，后面的  73H  和字符  s  的  ACSII  码相同。但是，将每个字节的最高位各设为  1  后，就得到其&lt;u&gt;内码&lt;/u&gt;：  B4F3H  ( 0110100   11110011B )，因而不会和  ASCII  码混淆&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;逻辑电路&#34;&gt;逻辑电路&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;异或： n  个数做异或运算，若有奇数个  1  ，则输出  1&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/118432554&#34;&gt;# 原码、反码、补码&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1gx411n7aG/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;计算机系统基础(一)——程序的表示、转换与链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1Xx411E7qn/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;计算机系统基础(二)——异常、中断和输入/输出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1jE411874k/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;计算机系统基础(三)——程序的执行和存储访问&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;以 &lt;code&gt;IA-32 + Linux + C + gcc&lt;/code&gt; 为平台&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1iW411d7hd?p=1&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;【精校中英字幕】2015 CMU 15-213 CSAPP 深入理解计算机系统&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://book.douban.com/subject/26912767/&#34;&gt;《深入理解计算机系统（原书第3版）》CSAPP&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="计算机系统基础一程序的表示转换与链接">计算机系统基础(一)——程序的表示、转换与链接</h1>
<h2 id="原码移码补码">原码&amp;移码&amp;补码</h2>
<ol>
<li>原码
<ul>
<li><u>最高位放符号位，1 表示负</u></li>
<li><code>定点小数，用来表示浮点数的尾数</code></li>
</ul>
</li>
<li>移码
<ul>
<li><u>真值加上一个偏置值 bias</u>， bias 常为 2<sup>n - 1</sup> or 2<sup>n - 1</sup> - 1 (如 IEEE 754)</li>
<li><code>定点整数，用来表示浮点数的阶</code></li>
<li>移码的本意是为了方便两个数作比较</li>
</ul>
</li>
<li>补码
<ul>
<li>假设补码有  n  位，则：<strong>x<sub>补</sub> = 2<sup>n</sup> + x</strong></li>
<li><u>数值为正数时，其值大小就是原码；为负时，其值的大小就是各位取反再加 1</u></li>
<li><code>补码表示带符号整数</code></li>
<li>补码的出现是为了解决计算机的减法运算问题</li>
<li>求补码的真值——简便求法
<ul>
<li>符号为 0 ，则为正数，数值部分相同</li>
<li>符号为 1，则为负数，数值各位取反，末位加 1</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><u>各位取反，末位加 1 简便做法：从后往前看，找到第一个 1 ，将它前面的所有位取反</u></li>
</ul>
<h2 id="浮点数-ieee754-标准">浮点数—— IEEE754 标准</h2>
<ul>
<li><u>数符 + 阶码 + 尾数</u>
<ul>
<li>Float  1 + 8 + 23
<ul>
<li>SP ： (-1) <sup>s</sup>   *   (1 + Significand)   *   2 <sup>(Exponent  - 127)</sup></li>
</ul>
</li>
<li>Double  1 + 11 + 52
<ul>
<li>DP ： (-1) <sup>s</sup>   *   (1 + Significand)   *   2 <sup>(Exponent  - 1023)</sup></li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>数符  Sign bit
<ul>
<li>1 表示负数</li>
</ul>
</li>
<li>阶码  Exponent
<ul>
<li>规格化阶码范围为  0000 0001(-126) —— 1111 1110(127)   (single)</li>
<li>bias  为  127(single)   1023(double)</li>
<li>规格化阶范围为  1——254  (single)</li>
<li><strong>全  0  和全  1  用来表示特殊值</strong></li>
<li>为避免混淆，用<u>阶码表示阶的编码</u>，用<u>阶或指数表示阶码的值</u></li>
</ul>
</li>
<li>尾数  Significand
<ul>
<li><strong>规格化尾数最高位总是  1 ，所以隐含表示，省  1  位，小数点前总是  1</strong></li>
</ul>
</li>
</ol>
<ul>
<li>特殊数的表示 (single)
<ul>
<li>0
<ul>
<li>阶码：all   zeros</li>
<li>尾数：all   zeros</li>
<li>+0：0   00000000   00000000000000000000000</li>
<li>-0：1   00000000   00000000000000000000000</li>
</ul>
</li>
<li>∞
<ul>
<li>阶码：all   ones</li>
<li>尾数：all   zeros</li>
<li>+∞：0   11111111   00000000000000000000000</li>
<li>-∞：1   11111111   00000000000000000000000</li>
<li>浮点数除以  0  的结果是  ∞ ，而不是溢出异常(整数除以  0  为异常)</li>
</ul>
</li>
<li>NaN   ( Not   a   Number )
<ul>
<li>阶码：all   ones</li>
<li>尾数：nonzeros</li>
<li><u>可帮助调试程序</u></li>
</ul>
</li>
<li><strong>非规格化数  Denorms</strong>
<ul>
<li>阶码：all   zeros</li>
<li>尾数：nonzeros</li>
<li>用于表示  0  与规格化数间的 Gap</li>
<li>SP ： (-1) <sup>s</sup>   *   (0.xxxx&hellip;xxx)   *   2 <sup>-126</sup></li>
<li>为了让非规格化单精度浮点数能够平缓过渡到规格化单精度浮点数，所以取  2 <sup>-126</sup></li>
<li><u>当输入数据为不可表示数时，机器将其转换为最邻近的可表示数</u></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="汉字内码ascii码">汉字内码&amp;ASCII码</h2>
<ul>
<li><u>ASCII码为 7 位编码</u></li>
<li>Ex：汉字 &quot; 大 &quot; 在码表中位于第  20  行、第  83  列。因此<u>区位码</u>为  0010100   1010011 ，在区、位码上各加  32  得到两个字节编码（<u>GB2312国标码</u>），即  00110100   01110011B   =   3473H 。前面的  34 H  和 字符  4  的  ACSII  的最高位相同，后面的  73H  和字符  s  的  ACSII  码相同。但是，将每个字节的最高位各设为  1  后，就得到其<u>内码</u>：  B4F3H  ( 0110100   11110011B )，因而不会和  ASCII  码混淆</li>
</ul>
<h2 id="逻辑电路">逻辑电路</h2>
<ul>
<li>异或： n  个数做异或运算，若有奇数个  1  ，则输出  1</li>
</ul>
<h1 id="推荐阅读">推荐阅读</h1>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/118432554"># 原码、反码、补码</a></li>
</ol>
<hr>
<ul>
<li><a href="https://www.bilibili.com/video/BV1gx411n7aG/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">计算机系统基础(一)——程序的表示、转换与链接</a></li>
<li><a href="https://www.bilibili.com/video/BV1Xx411E7qn/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">计算机系统基础(二)——异常、中断和输入/输出</a></li>
<li><a href="https://www.bilibili.com/video/BV1jE411874k/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">计算机系统基础(三)——程序的执行和存储访问</a>
<ul>
<li>以 <code>IA-32 + Linux + C + gcc</code> 为平台</li>
</ul>
</li>
<li><a href="https://www.bilibili.com/video/BV1iW411d7hd?p=1&amp;vd_source=ae16ff6478eb15c1b87880540263910b">【精校中英字幕】2015 CMU 15-213 CSAPP 深入理解计算机系统</a></li>
</ul>
<hr>
<ul>
<li><strong><a href="https://book.douban.com/subject/26912767/">《深入理解计算机系统（原书第3版）》CSAPP</a></strong></li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
