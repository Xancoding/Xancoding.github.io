[{"content":" 《网络是怎样连接的》 《图解 HTTP》 《图解TCP/IP（第5版）》 《计算机网络（第8版）》 《计算机网络：自顶向下方法》 《TCP/IP详解 卷1：协议》 《Wireshark网络分析就这么简单》 《Wireshark网络分析的艺术》 【哈工大】计算机网络 李全龙（全59讲） 【中科大】郑烇、杨坚《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》 计算机网络（谢希仁版）第七版答案 实战！我用“大白鲨”让你看见 TCP 计算机网络知识梳理 Stanford CS144 Lab Assignment 学习笔记 | ViXbob的博客 ","permalink":"https://xancoding.cn/posts/computernetwork/","summary":"《网络是怎样连接的》 《图解 HTTP》 《图解TCP/IP（第5版）》 《计算机网络（第8版）》 《计算机网络：自顶向下方法》 《TCP/IP详解 卷1","title":"计算机网络"},{"content":" 数据结构与算法 | 我的笔记 《大话数据结构》 《labuladong的算法小抄》 《算法竞赛进阶指南》 《算法（第4版）》 代码随想录 x 数据结构与算法 AcWing 算法基础课 AcWing 算法提高课 AcWing 算法进阶课 OI Wiki CP Wiki LeetCode AcWing Luogo Codeforces ","permalink":"https://xancoding.cn/posts/datastructuresandalgorithms/","summary":"数据结构与算法 | 我的笔记 《大话数据结构》 《labuladong的算法小抄》 《算法竞赛进阶指南》 《算法（第4版）》 代码随想录 x 数据结构与算法 AcWing","title":"数据结构与算法"},{"content":"正则表达式是什么？ 正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个规则的文本\n正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑\n为什么要学习正则表达式？ 在需要「批量处理文本」的时候，方便「查找」\u0026amp;\u0026amp;「替换」 Linux grep 命令 Python 爬虫 Everthing 搜索文件 推荐阅读 正则表达式30分钟入门教程 JS 正则可视化 - 工具 超越代码 - 工具 多种实际使用场景，正则表达式带来丰富可能性 《正则表达式必知必会》 《精通正则表达式》 ","permalink":"https://xancoding.cn/posts/regularexpression/","summary":"正则表达式是什么？ 正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个规则的文本 正则表达式是对字符串操作的一种逻辑公式，就是用事先定","title":"正则表达式学习记"},{"content":"LaTex是什么？ LaTeX是一种基于ΤΕΧ的排版系统，常被用于排版期刊文章、书籍、学位论文\n推荐阅读 LaTeX 新手上路指南 TeX Live 安装与 LaTeX 基础知识普及 【LaTeX】新手教程：从入门到日常使用 【LaTeX】针对萌新自学者的入门教程 一份不太简短的 LATEX 介绍 《Latex入门》 在线LaTex公式编辑器 Overleaf 在线 LaTeX 编辑器 ","permalink":"https://xancoding.cn/posts/latex/","summary":"LaTex是什么？ LaTeX是一种基于ΤΕΧ的排版系统，常被用于排版期刊文章、书籍、学位论文 推荐阅读 LaTeX 新手上路指南 TeX Live 安装与 LaTeX 基础知识普及 【","title":"LaTex学习记"},{"content":"Markdown是什么？ Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等\nMarkdown常用语法 在markdown中将链接地址或邮箱地址用\u0026lt;\u0026gt;包围，则会被自动转换成可点击的链接。 书写格式如下：\n\u0026lt;https://xancoding.cn\u0026gt; \u0026lt;zag.zj.cn@gmail.com\u0026gt; 解析效果如下：\nhttps://xancoding.cn\nzag.zj.cn@gmail.com\n如果需要避免文本中的符号被当做markdown标识符而发生不必要的格式转化，可以在符号前加\\来避免。 书写格式如下：\n\\*不是斜体\\* 解析效果如下：\n*不是斜体*\n角标 不同于链接，这里的角标内容会被放在文末，点击可以实现跳转。\n书写格式如下：\n请参阅脚注1. [^1] [^1]: 脚注1内容。 请参阅脚注2. [^2] [^2]: 脚注2内容。 解析效果如下：\n请参阅脚注1. 1\n请参阅脚注2. 2\n推荐阅读 Markdown - All You Need to Know Markdown 官方教程 Markdown 指南中文版 《了不起的Markdown》 脚注1内容。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n脚注2内容。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://xancoding.cn/posts/markdown/","summary":"Markdown是什么？ Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写","title":"Markdown学习记"},{"content":"AcWing Linux 基础课 AcWing Linux 基础课 | Colopen\u0026rsquo;s blog AcWing Linux 基础课 命令行的艺术 The Missing Semester of Your CS Education Terminal 终端，一个程序，是界面上打开的黑框框本身，shell 运行于其中\nShell 常用文件管理命令 | AcWing Linux 基础课 Shell 语法 | AcWing Linux 基础课 管道、环境变量与常用命令 | AcWing Linux 基础课 常用命令 | AcWing Linux 基础课 《Bash 脚本教程》 第 1 讲 - 课程概览与 Shell | The missing semester of your CS education 第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education 终极 Shell——ZSH 快速入门 zsh Shell是什么？ Shell 是我们通过命令行与操作系统沟通的 程序，是个 命令行解释器 Shell 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用 Shell 负责外界与 Linux 内核 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序 Shell解释器有 sh、bash、zsh... Shell常用命令 ag xxx：搜索当前目录下的所有文件，检索xxx字符串 find /path/to/directory/ -name '*.py'：搜索某个文件路径下的所有*.py文件 history：展示当前用户的历史操作。内容存放在~/.bash_history中 grep xxx：从stdin中读入若干行数据，如果某行中包含xxx，则输出该行；否则忽略该行，用于查找文件里符合条件的字符串 Tmux \u0026amp;\u0026amp; Vim tmux和vim | AcWing Linux 基础课 Tmux 使用教程 | 阮一峰的网络日志 Tmux 简介与使用 | Huoty\u0026rsquo;s Blog 简明 VIM 练级攻略 | 酷壳 第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education VIM 大冒险 - Game Tmux 是什么？ Tmux 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）\n远程 SSH 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。\nTmux \u0026amp;\u0026amp; Session \u0026amp;\u0026amp; Window \u0026amp;\u0026amp; Pane 一个tmux 可以有好多个session(会话) 一个session可以有好多个window(窗口) 一个window可以有好多个pane(面板) 一个session里不超过10个window是最方便的：可以用0到9迅速切换 Tmux常用命令 Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b\ntmux new -s \u0026lt;session-name\u0026gt;：新建会话 tmux detach $or$ Ctrl + a d：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行 tmux attach -t \u0026lt;session-name\u0026gt;：重新接入某个已存在的会话 tmux kill-session -t \u0026lt;session-name\u0026gt;：杀死某个会话 tmux switch -t \u0026lt;session-name\u0026gt;：切换会话 tmux rename-session -t \u0026lt;old-name\u0026gt; \u0026lt;new-name\u0026gt;：重命名会话 tmux ls $or$ Ctrl + a s：查看当前所有的 Tmux 会话 在tmux中选中文本时，需要按住 shift 键 tmux中复制/粘贴文本： 按下 Ctrl + a 后松开手指，然后按 [ 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板 按下 Ctrl + a 后松开手指，然后按 ] ，会将剪贴板中的内容粘贴到光标处 Vim 是什么？ VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。\nVim常用命令 一般模式切换到编辑模式（常用） i : 在光标所处位置 直接 开始 a : 在光标所处位置的 下一个字符 开始 o : 在光标所处位置的 下一行 开始 r : 取代当前光标处的字符，然后开始 [ESC] : 退出编辑模式，回到一般模式 光标移动操作 n\u0026lt;Space\u0026gt; : n 为数字，光标 向右移动这一行的n个字符 n\u0026lt;Enter\u0026gt; : n 为数字，光标 向下移动n行 0 或 功能键[Home]: 光标移动到 本行开头 $ 或 功能键[End]: 光标移动到 本行末尾 :n 或 nG : n 为数字，光标移动到 第n行 G: 光标移动到 最后一行 gg : 光标移动到 第一行 查找、替换操作 /word : 向 光标之下 寻找 第一个值为 word 的字符串 ?word : 向 光标之上 寻找 第一个值为 word 的字符串 n : 重复 前一个 查找操作 N : 反向 重复 前一个 查找操作 :n1,n2s/word1/word2/g : n1 与 n2 为数字，在第 n1 行与 n2 行之间寻找 word1 这个字符串，并将该字符串 替换 为 word2 :1,$s/word1/word2/g : 将全文的 word1 替换为 word2 :1,$s/word1/word2/gc : 将全文的 word1 替换为 word2，且在替换前 要求用户确认 文本操作（可搭配 数字+\u0026lt;Enter\u0026gt;/\u0026lt;Space\u0026gt;、0、G、$ 等使用，达到预期组合效果） v : 选中文本 d : 删除选中的文本 dd : 删除当前行 y : 复制选中的文本 yy : 复制当前行 p : 将复制的数据在光标的下一行/下一个位置 粘贴 u : 撤销 Ctrl + r : 取消撤销 \u0026gt; : 将选中的文本整体 向右缩进一次 \u0026lt; : 将选中的文本整体 向左缩进一次 命令行操作 :w : 保存 :w! : 强制保存 :q : 退出 :q! : 强制退出 :wq : 保存并退出 :set paste : 设置成粘贴模式，取消代码自动缩进 :set nopaste : 取消粘贴模式，开启代码自动缩进 :set nu : 显示行号 :set nonu : 隐藏行号 :noh：关闭查找关键词高亮 Ctrl + q : 当vim卡死时，可以 取消当前正在执行的命令 SSH SSH | AcWing Linux 基础课 Adding a new SSH key to your GitHub account SSH是什么？ SSH是一种网络协议，用于计算机之间的加密登录\nSSH 免密登录 ssh-key-gen ：在本地服务器生成密钥 cd .ssh/ vim config ：定义服务器别名 Host server HostName 服务器IP地址 User 登录用户名 port 远程主机端口号，默认为 22 ssh-copy-id server：在本地服务器配置免密登录至云服务器 免密登录至docker 容器步骤同上 配置完成后，就可以直接使用 ssh server 免密登录啦 SCP SCP | AcWing Linux 基础课 SCP是什么？ SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录\nSCP 传文件 复制多个文件：scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH 复制文件夹 ： scp -r ~/tmp SERVER:/home/acs/：将本地家目录中的tmp文件夹复制到服务器中的/home/acs/目录下 scp -r SERVER:homework .：将服务器中的~/homework/文件夹复制到本地的当前路径下 Git git | AcWing Linux 基础课 Git从放弃到入门 Git从放弃到入门：状态与阶段 Git从放弃到入门：撤销操作 Git 原理入门 Learn Git Braching - Game Pro Git Online Git是什么？ Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理\nGit常用命令 常用命令 git add XX：将XX文件添加到暂存区 git commit -m \u0026quot;给自己看的备注信息\u0026quot;：将暂存区的内容提交到当前分支 git push -u (第一次需要 -u 以后不需要) ：将当前分支推送到远程仓库 git clone git@git.acwing.com:xxx/XXX.git：将远程仓库XXX下载到当前目录下 git log：查看当前分支的所有版本 git status：查看仓库状态 有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？ git restore --staged XX或git reset HEAD XX：将XX从暂存区里移除 有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？ git checkout XX或git restore XX：将XX文件尚未加入暂存区的修改全部撤销 Git 全局设置 git config --global user.name xxx：设置全局用户名，信息记录在~/.gitconfig文件中 git config --global user.email xxx@xxx.com：设置全局邮箱地址，信息记录在~/.gitconfig文件中 git init：将当前目录配置成git仓库，信息记录在隐藏的.git文件夹中 Git 查看命令 git diff XX：查看XX文件相对于暂存区修改了哪些内容 git status：查看仓库状态 git log：查看当前分支的所有版本 git log --pretty=oneline：用一行来显示 git reflog：查看HEAD指针的移动历史（包括被回滚的版本） git branch：查看所有分支和当前所处分支 git pull ：将远程仓库的当前分支与本地仓库的当前分支合并 Git 删除命令 git rm --cached XX：将文件从仓库索引目录中删掉，不希望管理这个文件 git restore --staged xx：将xx从暂存区里移除 git checkout — XX或git restore XX：将XX文件尚未加入暂存区的修改全部撤销 Git 代码回滚 git reset --hard HEAD^或git reset --hard HEAD~ ：将代码库回滚到上一个版本 git reset --hard HEAD^^：往上回滚两次，以此类推 git reset --hard HEAD~100：往上回滚100个版本 git reset --hard 版本号：回滚到某一特定版本 Git 远程仓库 git remote add origin git@git.acwing.com:xxx/XXX.git：将本地仓库关联到远程仓库 git push -u (第一次需要-u以后不需要) ：将当前分支推送到远程仓库 git push origin branch_name：将本地的某个分支推送到远程仓库 git clone git@git.acwing.com:xxx/XXX.git：将远程仓库XXX下载到当前目录下 git push --set-upstream origin branch_name：设置本地的branch_name分支对应远程仓库的branch_name分支 git push -d origin branch_name：删除远程仓库的branch_name分支 git checkout -t origin/branch_name：将远程的branch_name分支拉取到本地 git pull：将远程仓库的当前分支与本地仓库的当前分支合并 git pull origin branch_name：将远程仓库的branch_name分支与本地仓库的当前分支合并 git branch --set-upstream-to=origin/branch_name1 branch_name2：将远程的 branch_name1分支与本地的branch_name2分支对应 Git 分支命令 git branch branch_name：创建新分支 git branch：查看所有分支和当前所处分支 git checkout -b branch_name：创建并切换到branch_name这个分支 git checkout branch_name：切换到branch_name这个分支 git merge branch_name：将分支branch_name合并到当前分支上 git branch -d branch_name：删除本地仓库的branch_name分支 git push --set-upstream origin branch_name：设置本地的branch_name分支对应远程仓库的branch_name分支 git push -d origin branch_name：删除远程仓库的branch_name分支 git checkout -t origin/branch_name：将远程的branch_name分支拉取到本地 git pull ：将远程仓库的当前分支与本地仓库的当前分支合并 git pull origin branch_name：将远程仓库的branch_name分支与本地仓库的当前分支合并 git branch --set-upstream-to=origin/branch_name1 branch_name2：将远程的 branch_name1分支与本地的branch_name2分支对应 Git stash 暂存 git stash：将工作区和暂存区中尚未提交的修改存入栈中 git stash apply：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素 git stash drop：删除栈顶存储的修改 git stash pop：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素 git stash list：查看栈中所有元素 Thrift AcWing Linux 基础课 | Thrift Thrift_learning - AcGit AcWing Linux 基础课 | Colopen\u0026rsquo;s blog | Thrift thrift 官网 -\u0026gt; Tutorial -\u0026gt; tutorial.thrift Thrift是什么？ Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架\nRPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程\nThrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务\n例：实现一个游戏的匹配服务 基本框架 游戏应用端 game（Python3） 客户端：与 匹配系统服务器 的服务端交互 匹配系统服务器 match_system（C++） 服务端：与 游戏应用端 的客户端交互 客户端：与 数据存储服务器 的服务端交互 数据存储服务器（已经实现） 服务端：与 匹配系统服务器 的客户端交互 文件结构 |-- README.md |-- game | `-- src | |-- client.py | `-- match_client | |-- __init__.py | |-- __pycache__ | | `-- __init__.cpython-38.pyc | `-- match | |-- Match.py | |-- __init__.py | |-- __pycache__ | | |-- Match.cpython-38.pyc | | |-- __init__.cpython-38.pyc | | `-- ttypes.cpython-38.pyc | |-- constants.py | `-- ttypes.py |-- match_system | `-- src | |-- Match.o | |-- Save.o | |-- main | |-- main.cpp | |-- main.o | |-- match_server | | |-- Match.cpp | | |-- Match.h | | |-- match_types.cpp | | `-- match_types.h | |-- match_types.o | `-- save_client | |-- Save.cpp | |-- Save.h | `-- save_types.h `-- thrift |-- match.thrift `-- save.thrift 实现过程 定义接口 (thrift 文件夹用于存放接口 ) 完成 Server 端 通过match.thrift接口在match_system文件夹下生成 C++版本的服务端 thrift -r --gen cpp tutorial.thrift 将gen cpp 文件夹重命名，如：match_server（区别于之后要在此处生成的client_server） 把 Match_server.skeleton.cpp 移动到当前 src 目录下并重命名为 main.cpp 由于移动了 main.cpp 故需要修改一下 main.cpp 中头文件里关于 Match.h 的引用路径：#include \u0026quot;Match.h\u0026quot; -\u0026gt; #include \u0026quot;match_server/Match.h\u0026quot; 在main.cpp中实现具体业务逻辑 完成 Client 端 通过match.thrift接口在game文件夹下生成 python3 版本的服务端，然后通过修改得到客户端 thrift -r --gen py tutorial.thrift 删掉 Match_remote ，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 客户端 功能，因此他没有作用，不妨删掉，让文档简洁一点 利用官网提供的模板，在src文件夹下编写 客户端 文件 client.py 持久化到云端 将 非编译文件 和 非可执行文件 提交到 git 中去（好的工程习惯） Cpp git restore --stage *.o git restore --stage main Python git restore --stage *.pyc # .pyc文件是编译文件，不加入暂存区里 git restore --stage *.swp # .swp文件是缓存文件，不加入暂存区里 注意：先运行服务器后，客户端才能正常运行 Thrift 接口 Match.thrift namespace cpp match_service struct User { 1: i32 id, 2: string name, 3: i32 scores } service Match { i32 add_user(1: User user, 2: string info), i32 remove_user(1: User user, 2: string info), } Save.thrift namespace cpp save_service service Save { /** * username: myserver的名称 * password: myserver的密码的md5值的前8位，用命令md5sum * 用户名密码验证成功会返回0，验证失败会返回1 * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中 */ i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id) } 各版本预览 Match_server:1.0 match_client：创建固定的User from match_client.match import Match from match_client.match.ttypes import User from thrift import Thrift from thrift.transport import TSocket from thrift.transport import TTransport from thrift.protocol import TBinaryProtocol def main(): # Make socket transport = TSocket.TSocket(\u0026#39;localhost\u0026#39;, 9090) # Buffering is critical. Raw sockets are very slow transport = TTransport.TBufferedTransport(transport) # Wrap in a protocol protocol = TBinaryProtocol.TBinaryProtocol(transport) # Create a client to use the protocol encoder client = Match.Client(protocol) # Connect! transport.open() user = User(1, \u0026#39;yxc\u0026#39;, 1500) client.add_user(user, \u0026#34;\u0026#34;) # Close! transport.close() # 调用 main 函数 if __name__ == \u0026#34;__main__\u0026#34;: main() match_server // This autogenerated skeleton file illustrates how to build a server. // You should copy it to another filename to avoid overwriting it. #include \u0026#34;match_server/Match.h\u0026#34; #include \u0026lt;thrift/protocol/TBinaryProtocol.h\u0026gt; #include \u0026lt;thrift/server/TSimpleServer.h\u0026gt; #include \u0026lt;thrift/transport/TServerSocket.h\u0026gt; #include \u0026lt;thrift/transport/TBufferTransports.h\u0026gt; #include\u0026lt;iostream\u0026gt; using namespace ::apache::thrift; using namespace ::apache::thrift::protocol; using namespace ::apache::thrift::transport; using namespace ::apache::thrift::server; using namespace ::match_service; using namespace std; class MatchHandler : virtual public MatchIf { public: MatchHandler() { // Your initialization goes here } int32_t add_user(const User\u0026amp; user, const std::string\u0026amp; info) { // Your implementation goes here printf(\u0026#34;add_user\\n\u0026#34;); return 0; } int32_t remove_user(const User\u0026amp; user, const std::string\u0026amp; info) { // Your implementation goes here printf(\u0026#34;remove_user\\n\u0026#34;); return 0; } }; int main(int argc, char **argv) { int port = 9090; ::std::shared_ptr\u0026lt;MatchHandler\u0026gt; handler(new MatchHandler()); ::std::shared_ptr\u0026lt;TProcessor\u0026gt; processor(new MatchProcessor(handler)); ::std::shared_ptr\u0026lt;TServerTransport\u0026gt; serverTransport(new TServerSocket(port)); ::std::shared_ptr\u0026lt;TTransportFactory\u0026gt; transportFactory(new TBufferedTransportFactory()); ::std::shared_ptr\u0026lt;TProtocolFactory\u0026gt; protocolFactory(new TBinaryProtocolFactory()); TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory); cout \u0026lt;\u0026lt; \u0026#34;Start Match Server\u0026#34; \u0026lt;\u0026lt; endl; server.serve(); return 0; } Match_server:2.0 match_client：根据标准输入来创建User from match_client.match import Match from match_client.match.ttypes import User from thrift import Thrift from thrift.transport import TSocket from thrift.transport import TTransport from thrift.protocol import TBinaryProtocol # 利用 python 在终端读入信息需要引入 stdin from sys import stdin # 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息 # 目的是可以一直不断处理信息 # 然后重写 main 函数，使之能不断从终端读入信息 def operate(op, user_id, user_name, score): # Make socket transport = TSocket.TSocket(\u0026#39;localhost\u0026#39;, 9090) # Buffering is critical. Raw sockets are very slow transport = TTransport.TBufferedTransport(transport) # Wrap in a protocol protocol = TBinaryProtocol.TBinaryProtocol(transport) # Create a client to use the protocol encoder client = Match.Client(protocol) # Connect! transport.open() # 针对 op 参数，分别进行 \u0026#34;增加\u0026#34; 与 \u0026#34;删出\u0026#34; 操作 user = User(user_id, user_name, score) if op == \u0026#34;add\u0026#34;: client.add_user(user, \u0026#34;\u0026#34;) else: client.remove_user(user, \u0026#34;\u0026#34;) # Close! transport.close() def main(): for line in stdin: op, user_id, user_name, score = line.split(\u0026#39; \u0026#39;) operate(op, int(user_id), user_name, int(score)) # 调用 main 函数 if __name__ == \u0026#34;__main__\u0026#34;: main() match_server：自动将用户池中前两个用户匹配到一起 // This autogenerated skeleton file illustrates how to build a server. // You should copy it to another filename to avoid overwriting it. #include \u0026#34;match_server/Match.h\u0026#34; #include \u0026lt;thrift/protocol/TBinaryProtocol.h\u0026gt; #include \u0026lt;thrift/server/TSimpleServer.h\u0026gt; #include \u0026lt;thrift/transport/TServerSocket.h\u0026gt; #include \u0026lt;thrift/transport/TBufferTransports.h\u0026gt; #include\u0026lt;iostream\u0026gt; #include \u0026lt;thread\u0026gt; // 需要线程，引入头文件 #include \u0026lt;mutex\u0026gt; // 互斥信号量 #include \u0026lt;condition_variable\u0026gt; // 条件变量，用于 阻塞和唤醒 线程 #include \u0026lt;queue\u0026gt; // 用于模拟消息队列 #include \u0026lt;vector\u0026gt; using namespace ::apache::thrift; using namespace ::apache::thrift::protocol; using namespace ::apache::thrift::transport; using namespace ::apache::thrift::server; using namespace ::match_service; using namespace std; struct Task { // 消息队列中的元素 User user; string type; }; struct MessageQueue { // 消息队列 queue\u0026lt;Task\u0026gt; q; // 消息队列本体 mutex m; // 互斥信号量 condition_variable cv; // 条件变量，用于阻塞唤醒线程 }message_queue; class Pool { // 模拟匹配池 public: void save_result(int a, int b) { // 记录成功匹配的信息 printf(\u0026#34;Match Result: %d %d \\n\u0026#34;, a, b); } void match() { // 将匹配池中的第一、第二个用户匹配 while (users.size() \u0026gt; 1) { auto a = users[0], b = users[1]; users.erase(users.begin()); users.erase(users.begin()); save_result(a.id, b.id); } } void add(User user) { // 向匹配池中加入用户 users.push_back(user); } void remove(User user) { // 向匹配池中删除用户 for (uint32_t i = 0; i \u0026lt; users.size(); ++ i) { if (users[i].id == user.id) { users.erase(users.begin() + i); break; } } } private: vector\u0026lt;User\u0026gt; users; // 匹配池中的用户，用 vector 记录 }pool; class MatchHandler : virtual public MatchIf { public: MatchHandler() { // Your initialization goes here } int32_t add_user(const User\u0026amp; user, const std::string\u0026amp; info) { // Your implementation goes here printf(\u0026#34;add_user\\n\u0026#34;); unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 message_queue.q.push({user, \u0026#34;add\u0026#34;}); // 把新消息加入消息队列 message_queue.cv.notify_all(); // 唤醒阻塞的线程 return 0; } int32_t remove_user(const User\u0026amp; user, const std::string\u0026amp; info) { // Your implementation goes here printf(\u0026#34;remove_user\\n\u0026#34;); unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 message_queue.q.push({user, \u0026#34;remove\u0026#34;}); // 把新消息加入消息队列 message_queue.cv.notify_all(); // 唤醒阻塞的线程 return 0; } }; // 基于“生产者-消费者模型”的线程 void consume_task() { while(true) { unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 if (message_queue.q.empty()) { message_queue.cv.wait(lck); // 这里要阻塞进程 // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息 } else { auto task = message_queue.q.front(); // 取出消息队列队头元素 message_queue.q.pop(); lck.unlock(); // 临界区访问结束，直接解锁 // 避免后续没用到临界区信息，而长时间占用临界区的情况发生 if (task.type == \u0026#34;add\u0026#34;) pool.add(task.user); else if (task.type == \u0026#34;remove\u0026#34;) pool.remove(task.user); pool.match(); } } } int main(int argc, char **argv) { int port = 9090; ::std::shared_ptr\u0026lt;MatchHandler\u0026gt; handler(new MatchHandler()); ::std::shared_ptr\u0026lt;TProcessor\u0026gt; processor(new MatchProcessor(handler)); ::std::shared_ptr\u0026lt;TServerTransport\u0026gt; serverTransport(new TServerSocket(port)); ::std::shared_ptr\u0026lt;TTransportFactory\u0026gt; transportFactory(new TBufferedTransportFactory()); ::std::shared_ptr\u0026lt;TProtocolFactory\u0026gt; protocolFactory(new TBinaryProtocolFactory()); TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory); cout \u0026lt;\u0026lt; \u0026#34;Start Match Server\u0026#34; \u0026lt;\u0026lt; endl; thread matching_thread(consume_task); // 调用一个线程运行 consume_task server.serve(); return 0; } Match_server:3.0 save_client：因为一个节点只能由一个main方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个main方法中 // 需要额外引入的头文件 #include \u0026#34;save_client/Save.h\u0026#34; #include \u0026lt;thrift/transport/TSocket.h\u0026gt; #include \u0026lt;thrift/transport/TTransportUtils.h\u0026gt; // 需要额外声明的命名空间 using namespace ::save_service; //重写 save_result 内的内容，使其能够与 \u0026#34;数据存储服务器\u0026#34; 交互 void save_result(int a, int b) { // 记录成功匹配的信息 printf(\u0026#34;Match Result: %d %d\\n\u0026#34;, a, b); // Client端的板子 std::shared_ptr\u0026lt;TTransport\u0026gt; socket(new TSocket(\u0026#34;123.57.47.211\u0026#34;, 9090)); std::shared_ptr\u0026lt;TTransport\u0026gt; transport(new TBufferedTransport(socket)); std::shared_ptr\u0026lt;TProtocol\u0026gt; protocol(new TBinaryProtocol(transport)); SaveClient client(protocol); try { transport-\u0026gt;open(); //调用接口，把信息存储 \u0026#34;数据存储服务器\u0026#34; 中 int res = client.save_data(\u0026#34;acs_4888\u0026#34;, \u0026#34;07637c4c\u0026#34;, a, b); //输出匹配结果 if (!res) puts(\u0026#34;success\u0026#34;); else puts(\u0026#34;fail\u0026#34;); transport-\u0026gt;close(); } catch (TException\u0026amp; tx) { cout \u0026lt;\u0026lt; \u0026#34;ERROR: \u0026#34; \u0026lt;\u0026lt; tx.what() \u0026lt;\u0026lt; endl; } } match_server：每次只匹配分差小于 50 的用户 // This autogenerated skeleton file illustrates how to build a server. // You should copy it to another filename to avoid overwriting it. #include \u0026lt;thrift/transport/TSocket.h\u0026gt; #include \u0026lt;thrift/transport/TTransportUtils.h\u0026gt; #include \u0026#34;match_server/Match.h\u0026#34; #include \u0026#34;save_client/Save.h\u0026#34; #include \u0026lt;thrift/protocol/TBinaryProtocol.h\u0026gt; #include \u0026lt;thrift/server/TSimpleServer.h\u0026gt; #include \u0026lt;thrift/transport/TServerSocket.h\u0026gt; #include \u0026lt;thrift/transport/TBufferTransports.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; // 用于调用 sleep 函数 #include\u0026lt;iostream\u0026gt; #include \u0026lt;thread\u0026gt; // 需要线程，引入头文件 #include \u0026lt;mutex\u0026gt; // 互斥信号量 #include \u0026lt;condition_variable\u0026gt; // 条件变量，用于 阻塞和唤醒 线程 #include \u0026lt;queue\u0026gt; // 用于模拟消息队列 #include \u0026lt;vector\u0026gt; using namespace ::apache::thrift; using namespace ::apache::thrift::protocol; using namespace ::apache::thrift::transport; using namespace ::apache::thrift::server; using namespace ::save_service; using namespace ::match_service; using namespace std; struct Task { // 消息队列中的元素 User user; string type; }; struct MessageQueue { // 消息队列 queue\u0026lt;Task\u0026gt; q; // 消息队列本体 mutex m; // 互斥信号量 condition_variable cv; // 条件变量，用于阻塞唤醒线程 }message_queue; class Pool { // 模拟匹配池 public: //重写 save_result 内的内容，使其能够与 \u0026#34;数据存储服务器\u0026#34; 交互 void save_result(int a, int b) { // 记录成功匹配的信息 printf(\u0026#34;Match Result: %d %d \\n\u0026#34;, a, b); // Client端的板子 std::shared_ptr\u0026lt;TTransport\u0026gt; socket(new TSocket(\u0026#34;123.57.47.211\u0026#34;, 9090)); std::shared_ptr\u0026lt;TTransport\u0026gt; transport(new TBufferedTransport(socket)); std::shared_ptr\u0026lt;TProtocol\u0026gt; protocol(new TBinaryProtocol(transport)); SaveClient client(protocol); try { transport-\u0026gt;open(); //调用接口，把信息存储 \u0026#34;数据存储服务器\u0026#34; 中 int res = client.save_data(\u0026#34;acs_4888\u0026#34;, \u0026#34;07637c4c\u0026#34;, a, b); //输出匹配结果 if (!res) puts(\u0026#34;success\u0026#34;); else puts(\u0026#34;fail\u0026#34;); transport-\u0026gt;close(); } catch (TException\u0026amp; tx) { cout \u0026lt;\u0026lt; \u0026#34;ERROR: \u0026#34; \u0026lt;\u0026lt; tx.what() \u0026lt;\u0026lt; endl; } } void match() { // 将匹配池中的第一、第二个用户匹配 while (users.size() \u0026gt; 1) { // 按照 rank分 排序 sort(users.begin(), users.end(), [\u0026amp;](User\u0026amp; a, User\u0026amp; b) { return a.scores \u0026lt; b.scores; }); bool flag = true; for (uint32_t i = 1; i \u0026lt; users.size(); ++ i) { auto a = users[i - 1], b = users[i]; // 两名玩家分数差小于50时进行匹配 if (b.scores - a.scores \u0026lt;= 50) { users.erase(users.begin() + i - 1, users.begin() + i + 1); save_result(a.id, b.id); flag = false; break; } } if (flag) break; // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用 } } void add(User user) { // 向匹配池中加入用户 users.push_back(user); } void remove(User user) { // 向匹配池中删除用户 for (uint32_t i = 0; i \u0026lt; users.size(); ++ i) { if (users[i].id == user.id) { users.erase(users.begin() + i); break; } } } private: vector\u0026lt;User\u0026gt; users; // 匹配池中的用户，用 vector 记录 }pool; class MatchHandler : virtual public MatchIf { public: MatchHandler() { // Your initialization goes here } int32_t add_user(const User\u0026amp; user, const std::string\u0026amp; info) { // Your implementation goes here printf(\u0026#34;add_user\\n\u0026#34;); unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 message_queue.q.push({user, \u0026#34;add\u0026#34;}); // 把新消息加入消息队列 message_queue.cv.notify_all(); // 唤醒阻塞的线程 return 0; } int32_t remove_user(const User\u0026amp; user, const std::string\u0026amp; info) { // Your implementation goes here printf(\u0026#34;remove_user\\n\u0026#34;); unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 message_queue.q.push({user, \u0026#34;remove\u0026#34;}); // 把新消息加入消息队列 message_queue.cv.notify_all(); // 唤醒阻塞的线程 return 0; } }; // 基于“生产者-消费者模型”的线程 void consume_task() { while(true) { unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 if (message_queue.q.empty()) { // message_queue.cv.wait(lck); // 这里要阻塞进程 // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息 // 修改为每 1 秒进行一次匹配 lck.unlock(); // 直接解锁临界区资源 pool.match(); //调用 match() sleep(1); } else { auto task = message_queue.q.front(); // 取出消息队列队头元素 message_queue.q.pop(); lck.unlock(); // 临界区访问结束，直接解锁 // 避免后续没用到临界区信息，而长时间占用临界区的情况发生 if (task.type == \u0026#34;add\u0026#34;) pool.add(task.user); else if (task.type == \u0026#34;remove\u0026#34;) pool.remove(task.user); pool.match(); } } } int main(int argc, char **argv) { int port = 9090; ::std::shared_ptr\u0026lt;MatchHandler\u0026gt; handler(new MatchHandler()); ::std::shared_ptr\u0026lt;TProcessor\u0026gt; processor(new MatchProcessor(handler)); ::std::shared_ptr\u0026lt;TServerTransport\u0026gt; serverTransport(new TServerSocket(port)); ::std::shared_ptr\u0026lt;TTransportFactory\u0026gt; transportFactory(new TBufferedTransportFactory()); ::std::shared_ptr\u0026lt;TProtocolFactory\u0026gt; protocolFactory(new TBinaryProtocolFactory()); TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory); cout \u0026lt;\u0026lt; \u0026#34;Start Match Server\u0026#34; \u0026lt;\u0026lt; endl; thread matching_thread(consume_task); // 调用一个线程运行 consume_task server.serve(); return 0; } Match_server:4.0 match_server：随时间扩大匹配域，每一单位的 wt 会扩大 $50$ 分 的匹配域 // This autogenerated skeleton file illustrates how to build a server. // You should copy it to another filename to avoid overwriting it. #include \u0026lt;thrift/transport/TSocket.h\u0026gt; #include \u0026lt;thrift/transport/TTransportUtils.h\u0026gt; #include \u0026#34;match_server/Match.h\u0026#34; #include \u0026#34;save_client/Save.h\u0026#34; #include \u0026lt;thrift/protocol/TBinaryProtocol.h\u0026gt; #include \u0026lt;thrift/server/TSimpleServer.h\u0026gt; #include \u0026lt;thrift/transport/TServerSocket.h\u0026gt; #include \u0026lt;thrift/transport/TBufferTransports.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; // 用于调用 sleep 函数 #include\u0026lt;iostream\u0026gt; #include \u0026lt;thread\u0026gt; // 需要线程，引入头文件 #include \u0026lt;mutex\u0026gt; // 互斥信号量 #include \u0026lt;condition_variable\u0026gt; // 条件变量，用于 阻塞和唤醒 线程 #include \u0026lt;queue\u0026gt; // 用于模拟消息队列 #include \u0026lt;vector\u0026gt; using namespace ::apache::thrift; using namespace ::apache::thrift::protocol; using namespace ::apache::thrift::transport; using namespace ::apache::thrift::server; using namespace ::save_service; using namespace ::match_service; using namespace std; struct Task { // 消息队列中的元素 User user; string type; }; struct MessageQueue { // 消息队列 queue\u0026lt;Task\u0026gt; q; // 消息队列本体 mutex m; // 互斥信号量 condition_variable cv; // 条件变量，用于阻塞唤醒线程 }message_queue; class Pool { // 模拟匹配池 public: void save_result(int a, int b) { // 记录成功匹配的信息 printf(\u0026#34;Match Result: %d %d \\n\u0026#34;, a, b); // Client端的板子 std::shared_ptr\u0026lt;TTransport\u0026gt; socket(new TSocket(\u0026#34;123.57.47.211\u0026#34;, 9090)); std::shared_ptr\u0026lt;TTransport\u0026gt; transport(new TBufferedTransport(socket)); std::shared_ptr\u0026lt;TProtocol\u0026gt; protocol(new TBinaryProtocol(transport)); SaveClient client(protocol); try { transport-\u0026gt;open(); //调用接口，把信息存储 \u0026#34;数据存储服务器\u0026#34; 中 int res = client.save_data(\u0026#34;acs_4888\u0026#34;, \u0026#34;07637c4c\u0026#34;, a, b); //输出匹配结果 if (!res) puts(\u0026#34;success\u0026#34;); else puts(\u0026#34;fail\u0026#34;); transport-\u0026gt;close(); } catch (TException\u0026amp; tx) { cout \u0026lt;\u0026lt; \u0026#34;ERROR: \u0026#34; \u0026lt;\u0026lt; tx.what() \u0026lt;\u0026lt; endl; } } bool check_match(uint32_t i, uint32_t j) { auto a = users[i], b = users[j]; int dt = abs(a.scores - b.scores); int a_max_dif = wt[i] * 50; int b_max_dif = wt[j] * 50; return dt \u0026lt;= a_max_dif \u0026amp;\u0026amp; dt \u0026lt;= b_max_dif; } void match() { for (uint32_t i = 0; i \u0026lt; wt.size(); ++ i) wt[i] ++; while (users.size() \u0026gt; 1) { bool flag = true; for (uint32_t i = 0; i \u0026lt; users.size(); ++ i) { for (uint32_t j = i + 1; j \u0026lt; users.size(); ++ j) { if (check_match(i, j)) { auto a = users[i], b = users[j]; users.erase(users.begin() + j); users.erase(users.begin() + i); wt.erase(wt.begin() + j); wt.erase(wt.begin() + i); save_result(a.id, b.id); flag = false; break; } if (!flag) break; } } if (flag) break; // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用 } } void add(User user) { // 向匹配池中加入用户 users.push_back(user); wt.push_back(0); } void remove(User user) { // 向匹配池中删除用户 for (uint32_t i = 0; i \u0026lt; users.size(); ++ i) { if (users[i].id == user.id) { users.erase(users.begin() + i); wt.erase(wt.begin() + i); break; } } } private: vector\u0026lt;User\u0026gt; users; // 匹配池中的用户，用 vector 记录 vector\u0026lt;int\u0026gt; wt; // 等待时间，单位：s }pool; class MatchHandler : virtual public MatchIf { public: MatchHandler() { // Your initialization goes here } int32_t add_user(const User\u0026amp; user, const std::string\u0026amp; info) { // Your implementation goes here printf(\u0026#34;add_user\\n\u0026#34;); unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 message_queue.q.push({user, \u0026#34;add\u0026#34;}); // 把新消息加入消息队列 message_queue.cv.notify_all(); // 唤醒阻塞的线程 return 0; } int32_t remove_user(const User\u0026amp; user, const std::string\u0026amp; info) { // Your implementation goes here printf(\u0026#34;remove_user\\n\u0026#34;); unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 message_queue.q.push({user, \u0026#34;remove\u0026#34;}); // 把新消息加入消息队列 message_queue.cv.notify_all(); // 唤醒阻塞的线程 return 0; } }; // 基于“生产者-消费者模型”的线程 void consume_task() { while(true) { unique_lock\u0026lt;mutex\u0026gt; lck(message_queue.m); // 访问临界区（消息队列），先上锁 if (message_queue.q.empty()) { // message_queue.cv.wait(lck); // 这里要阻塞进程 // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息 // 修改为每 1 秒进行一次匹配 lck.unlock(); // 直接解锁临界区资源 pool.match(); //调用 match() sleep(1); } else { auto task = message_queue.q.front(); // 取出消息队列队头元素 message_queue.q.pop(); lck.unlock(); // 临界区访问结束，直接解锁 // 避免后续没用到临界区信息，而长时间占用临界区的情况发生 if (task.type == \u0026#34;add\u0026#34;) pool.add(task.user); else if (task.type == \u0026#34;remove\u0026#34;) pool.remove(task.user); } } } int main(int argc, char **argv) { int port = 9090; ::std::shared_ptr\u0026lt;MatchHandler\u0026gt; handler(new MatchHandler()); ::std::shared_ptr\u0026lt;TProcessor\u0026gt; processor(new MatchProcessor(handler)); ::std::shared_ptr\u0026lt;TServerTransport\u0026gt; serverTransport(new TServerSocket(port)); ::std::shared_ptr\u0026lt;TTransportFactory\u0026gt; transportFactory(new TBufferedTransportFactory()); ::std::shared_ptr\u0026lt;TProtocolFactory\u0026gt; protocolFactory(new TBinaryProtocolFactory()); TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory); cout \u0026lt;\u0026lt; \u0026#34;Start Match Server\u0026#34; \u0026lt;\u0026lt; endl; thread matching_thread(consume_task); // 调用一个线程运行 consume_task server.serve(); return 0; } Usage # 启动服务端 ./match_system/src/main # 启动客户端 python3 game/src/client.py # 游戏应用端 （op id name scores） add 1 yxc 2000 add 2 xan 1500 add 3 zagy 2500 remove 3 zagy 2500 # 匹配系统服务器 add_user add_user remove_user # 等待了 10 s Match Result: 1 2 success 项目地址 Learning-Thrift ","permalink":"https://xancoding.cn/posts/acwlinux/","summary":"AcWing Linux 基础课 AcWing Linux 基础课 | Colopen\u0026rsquo;s blog AcWing Linux 基础课 命令行的艺术 The Missing Semester of Your CS Education Terminal 终端，一个程序，是界面上打开的黑框框本身，shell 运行于其中 Shell 常用文件管理","title":"AcWing Linux 基础课"},{"content":"双拼学习记 前段时间了解了双拼输入法，只是一直没有时间去学。这段时间事情慢慢少点了，准备着手开始学习。双拼只需要按键两次便可以输入一个汉字，我感觉这样的设计更为合理，要是熟练掌握，会很有节奏感，打字速度也可以得到提升。\n更换一个新的输入法，刚开始时肯定会很别扭。使用双拼进行输入，需要对要打的字的音形熟悉，不然是打不出来的。刚好重新学习一下拼音，纠正纠正我自己一些错误的发音认知。\n我准备学习小鹤双拼，找了张小鹤双拼的键位图，用作电脑桌面，打字想不起来的时候瞄一眼。\n推荐阅读 双拼学习记 双拼这点东西，up居然讲了十分钟——十分钟了解双拼到底是啥 小鹤双拼 小鹤入门 ","permalink":"https://xancoding.cn/posts/doublespell/","summary":"双拼学习记 前段时间了解了双拼输入法，只是一直没有时间去学。这段时间事情慢慢少点了，准备着手开始学习。双拼只需要按键两次便可以输入一个汉字，我","title":"双拼学习记"},{"content":"安排好你的待办清单 思考以下几点：\n1. 有哪些工作需要完成？\n2.我有多少时间可以用来完成这些工作？\n3.工作事项是否有逻辑顺序以及优先级\n每一天你都会受到很多的干扰，看到APP上的一个个红点，消息通知从屏幕上弹出。注意力在一次次的查看信息中被逐渐消磨，时间也变得碎片化，难以静下心来专注于某件事。有些干扰无可避免，但只要愿意付出努力，大部分的干扰可以得到排除。\n白天我会尽量避免受到干扰，所有的社交软件，它们是工作效率的最大杀手。我控制自己在上午以及下午的大块时间中忽略来自社交网络的信息，将消息的查看集中在中午以及晚上的特定时间，做一个统一的查看。\n每天的晚上，我会花些的时间，把第二天的工作做个大致的安排，写到待办事项中，第二天再用番茄工作法进行专注执行。记得让自己的计划保持比较高的自由度，要留有足够的时间余量。\n番茄工作法 番茄工作法这个名词我之前便有听说过，但一直未尝试着去做过，直到最近从《软技能》一书中再次看到，感觉不错，便开始了尝试。在经过一个星期的体验后，它确实提高了我的效率，让我能够更好的对自己的时间做出规划。\n它的基本思路是：\n你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。\n在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。\n值得注意的是，使用番茄工作法所要做的并不只是集中注意力25分钟这么简单。通过使用番茄工作法，你可以高效跟踪自己一天完成的番茄钟的数量，并为此设定目标。开始的几天，你可能无法对自己能完成的工作做一个很好的估计。但相信在使用番茄工作法一段时间后，你可以做到较为准确的估计，并能完成通过番茄钟的数量，评估自己完成的工作。\n通过使用番茄钟，你可以定量的描述自己的工作状态，而不再像过去那样只是凭借感觉。你可以把每周看作是由有限个番茄钟组成的，知道了自己一周大概能完成的番茄钟的数量后，你也会认识到应该如何通过设置任务的优先级，来合理分配自己的时间。你不会再过高的幻想自己会在一周的时间里完成超出自己实际许多的任务，并在每周结束时，因未能完成而感到沮丧。\n当你在一天中为自己设置了x个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。它不仅能帮你完成更多的工作，还能让你尽情享受业余时间——因为你已经通过番茄钟完成了一天的任务，在剩下的时间里，你完全可以自由安排消磨时间，而不会再有任何的心理负担。\n最后的最后，一定记得要对自己的能力做一个合理的预期，你每周工作40小时并不意味着你能完成80个番茄钟。找到适合你的番茄钟数量，过度的加量会适得其反。\n推荐阅读 如何用Todo清单度过余生的每一天？ 告别社交网络有多难 社交网络名存实亡 Sunset of the social network 《软技能》 生产力篇 ","permalink":"https://xancoding.cn/posts/timemanagement/","summary":"安排好你的待办清单 思考以下几点： 1. 有哪些工作需要完成？ 2.我有多少时间可以用来完成这些工作？ 3.工作事项是否有逻辑顺序以及优先级 每一天你都会","title":"我管理时间的方法"},{"content":" 这个时代不缺信息，因为信息太多了，缺的是时间\n整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子\n获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息\nRSS Inoreader \u0026amp; RSSHub Radar 什么是RSS? RSS 英文全称为 Really Simple Syndication，即简易资讯聚合。其实叫什么并不重要，我们只用知道它是一个能让你在一个地方订阅各种感兴趣网站的工具。\nRSS的核心是资讯聚合，由用户自己决定信息源。我们可以通过订阅网站的RSS源，主动获得想要的资讯，去挖掘一些自己真正感兴趣的东西。\n如何使用RSS? 利用RSS获取信息，只需要在目标网站上找到RSS链接，并把它添加到RSS阅读器中。\n我使用的工具是Inoreader RSS 阅读器 + RSSHub Radar 浏览器插件。\nInoreader 吸引我的点是它支持PC端和手机端的同步，并且PC端可以直接通过浏览器插件使用，使我在手机和电脑上都可以查看消息。\nRSSHub Radar 的出现，完美解决了不是所有的网页都提供RSS源这一痛点，它可以自动生成网站的RSS源以供订阅，非常方便。\n我使用RSS主要用来订阅我感兴趣的个人博客，我订阅的博客网站在 Links 页面下的 博客 那一栏。\n搜索引擎 Google \u0026amp; AdblockPlus \u0026amp; uBlacklist Chrome 浏览器提供的Google 搜索是我目前体验感最好的搜索引擎，Microsoft Edge 浏览器提供的 Bing 搜索 体验感也还不错。\nAdblockPlus 浏览器插件 由用户主动设置拦截网页上不想看到的内容，下图是我对知乎页面的屏蔽后的结果，我使用这个插件把知乎和B站的推荐内容屏蔽，以获得更为简洁的体验\nuBlacklist 浏览器插件 在搜索时屏蔽特定网站，做到对低质内容的过滤，我屏蔽了CSDN和百度知道\n*://www.csdn.net/* *://bbs.csdn.net/* *://blog.csdn.net/* *://zhidao.baidu.com/* Chrome 浏览器还可以通过在地址栏中输入快捷字词，快速搜索特定网站，或使用其他搜索引擎，我通过设置它将知乎和B站作为搜索引擎使用。在我想寻找某条信息时，只需在地址栏输入关键字 zh or bi 即可搜索。\n经过如下配置\n就可以通过在地址栏中输入快捷字词实现简便搜索啦\n在手机端，我是使用桌面小工具来达到只使用APP搜索功能目的。\n书籍 Neat Reader \u0026amp; Sumatra PDF \u0026amp; Z-Library \u0026amp; LoreFree \u0026amp; 学校图书馆 读书，是治愈迷茫最好的良药。\nNeat Reader 是一款EPUB阅读器，用以阅读EPUB格式的电子书，体验感不错。我会在 Z-Library or LoreFree 上搜索得到我想要看的书的EPUB格式的电子书后，存在本地文件上，通过 Neat Reader 阅读。\n如果找不到EPUB格式的书籍，我会存 PDF 格式的，然后在 Sumatra PDF 上阅读\n不过，相比于电子书，我其实还是更喜欢纸质书的阅读体验。所以，我也会隔段时间便去拿着自己的书单，去学校的图书馆找书看。\n推荐阅读 优化自己的信息源\n中文互联网的产出在渐渐枯萎\n知道RSS的人越少，我就越希望它能被人知道！\nRSS 二十年\n互联网之子\nRSS Source | RSS订阅源推荐\nPractical Google Search Tips\n","permalink":"https://xancoding.cn/posts/getinfo/","summary":"这个时代不缺信息，因为信息太多了，缺的是时间 整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子 获取信息的方式最好是主动的，摆脱算","title":"我获取信息的方式"},{"content":"int main() { printf(\u0026#34;Hello, World\u0026#34;); return(0); } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World\u0026#34;; return 0; } public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } echo \u0026#34;Hello, World\u0026#34; Hello, World document.write(\u0026#39;Hello, World\u0026#39;); print (\u0026#34;Hello, World\u0026#34;) ","permalink":"https://xancoding.cn/posts/helloworld/","summary":"int main() { printf(\u0026#34;Hello, World\u0026#34;); return(0); } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World\u0026#34;; return 0; } public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } echo \u0026#34;Hello, World\u0026#34; Hello, World document.write(\u0026#39;Hello, World\u0026#39;); print (\u0026#34;Hello, World\u0026#34;)","title":"Hello World"},{"content":"作者 英文名: Xan 职业: 学生 爱好: 跑步、徒步 项目 Blog 搭建工具 Hugo \u0026amp; GitHub Pages \u0026amp; Twikoo Theme：PaperMod 各页面简介 Home：联系方式 \u0026amp; 文章 Tags：文章标签 Archives：文章归档 About：作者简介 \u0026amp; 博客简介 Search：搜索文章 参考资料 Sulv\u0026rsquo;s Blog 3rd\u0026rsquo;s Blog 田少晗的个人博客 WarOfWarlock 搭建工具 HTML \u0026amp; CSS \u0026amp; JavaScript \u0026amp; Django 参考资料 AcWing Django 框架课 | Colopen\u0026rsquo;s blog AcWing Django框架课 ","permalink":"https://xancoding.cn/about/","summary":"作者 英文名: Xan 职业: 学生 爱好: 跑步、徒步 项目 Blog 搭建工具 Hugo \u0026amp; GitHub Pages \u0026amp; Twikoo Theme：PaperMod 各页面简介 Home：联系方式 \u0026amp; 文章 Tags：文章标签 Archives：文章归档 About：作者简介 \u0026amp; 博客简介 Search：搜索文章 参考资料 Sulv\u0026rsquo;s Blog 3rd\u0026rsquo;s Blog 田少晗的个人博客 WarOfWarlock 搭建工具 HTML \u0026amp; CSS \u0026amp; JavaScript \u0026amp; Django 参考资料 AcWing Django 框架课 | Colopen\u0026rsquo;s blog AcWing Django框架课 ","title":""},{"content":"博客 Owen 的博客 收集发人深省的话 探索互联网上高质量的内容 程序员的喵 阮一峰的网络日志 编程随想的博客 博弈论入门教程——从基本概念到具体案例 为什么独立思考这么难？ 学习与人生——700篇博文之感悟 如何完善自己的知识结构 如何【系统性学习】——从“媒介形态”聊到“DIKW 模型” 如何挖掘网络资源 《如何阅读一本书》——书评及内容纲要 社区 小众软件论坛 V2EX 面向程序员、极客人群的分享交流社区 Medium 网络文章发布平台 文章质量高 Buzzing 国外社交媒体聚合热榜 中文标题 HackerNews 工具 Todo清单 一款跨平台待办事项与时间管理应用 Obsidian 知识管理工具 划词翻译 浏览器翻译插件 Spotify 流媒体音乐服务平台 软件推荐 | 茂茂物语 (fe-mm.com) 学习 CS自学指南 小林 x 图解计算机基础 文章 Software Engineering - The Soft Parts 软件开发中的软技能 Side Project 指南 资源 Source Edit Exercism 在线练习编程语言 Art Excalidraw 在线白板画图工具 Gallerix 绘画和画家 Unsplash 无版权图片 Color Hunt 设计师和艺术家的调色板 Game-icons 游戏图标在线存储库 Outdoor 入门指南 登山者Black\n户外运动安全手册（上） 户外运动安全手册（下） 洋葱式穿着/户外运动穿什么 户外必备10要素\u0026ndash;可能拯救你生命的十件户外必需品 户外装备选购终极指南 烛逢\n户外运动三层穿衣法 | 烛逢 在野外找路-六只脚｜烛逢 六只脚进阶篇 | 烛逢 两步路使用教学｜烛逢 两步路路网 下载豌豆荚 在豌豆荚中搜索两步路，下载 v6.7.2版本 在应用商店中关闭自动更新 沉浸式登山 Mew_喵喵 秘密仙人掌 登山装备清单 Run 衣物穿脱 图片来自于知乎博主@阿甘跑步，版权归原作者所有 配速表 ","permalink":"https://xancoding.cn/links/","summary":"博客 Owen 的博客 收集发人深省的话 探索互联网上高质量的内容 程序员的喵 阮一峰的网络日志 编程随想的博客 博弈论入门教程——从基本概念到具体案例 为什么独立思考这么难？ 学习与人生——700篇博文之感悟 如何完善自己的知识结构 如何【系统性学习】——从“媒介形态”聊到“DIKW 模型” 如何挖掘网络资源 《如何阅读一本书》——书评及内容纲要 社区 小众软件论坛 V2EX 面向程序员、极客人群的分享交流社区 Medium 网络文章发布平台 文章质量高 Buzzing 国外社交媒体聚合热榜 中文标题 HackerNews 工具 Todo清单 一款跨平台待办事项与时间管理应用 Obsidian 知识管理工具 划词翻译 浏览器翻译插件 Spotify 流媒体音乐服务平台 软件推荐 | 茂茂物语 (fe-mm.com) 学习 CS自学指南 小林 x 图解计算机基础 文章 Software Engineering - The Soft Parts 软件开发中的软技能 Side Project 指南 资源 Source Edit Exercism 在线练习编程语言 Art Excalidraw 在线白板画图工具 Gallerix 绘画和画家 Unsplash 无版权图片 Color Hunt 设计师和艺术家的调色板 Game-icons 游戏图标在线存储库 Outdoor 入门指南 登山者Black","title":""}]