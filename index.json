[{"content":"Zotero plugins Zotero Style 2.6.6 zotero-style-zh zotero-style Zotero Style 使用手册 # Zotero style使用手册第二期-详操篇 # Zotero Style 使用手册 Zotero Style 2.6.6 版本适配 Zotero 6\nZotero Tags Emoji 大全 标注每篇论文的状态\n🗸 打勾标志：已读摘要 ☁️ 云 (表情样式)：正在读的文献 💡 灯泡：产生新的idea 的论文 🎈 气球：已读 📃 带卷边的页面：有重要内容，需要参考的 ❤️ 红心 (表情样式)：重要的在读的 ✏️ 铅笔 (表情样式)：动手写写对应的代码\n作者：Luminary-S 出处：bilibili\nResult Zotero #Tags 标注每篇论文的重点\nResult Publication Tags 自动更新每篇期刊的标签，需要加载 easyScholar 的 密钥\nView Group 为不同的视图分组，如 基本视图、标签视图、进度视图\nZotero PDF Translate Zotero PDF Translate PDF translation for Zotero\nZotero Rerference # Zotero Reference 侧边栏展示阅读文献的所有参考文献\nZotero Citation Counts Manager 获取引用当前文献的文献数量\n阅读小技巧 shift + +：展开文献，方便查看有无笔记\nwin + -：折叠展开的文献\n在遇到想同时阅读 图表与对应的结论 的情况下，我们可以采取 Split Vertically 垂直分割 的方法\nObsidian plugins Appearance 【Obsidian搭建系列教程】 主题配置 | 美化篇——Part 1 主题：AnuPpuccin 字体：霞鹜文楷 ，安装地址：https://github.com/lxgw/LxgwWenKai 大纲：Quiet Outline 样式设置：Style Setting 代码高亮：Editor Syntax Highlight 链接图标：Link Favicons 文件图标：Icon Floder Light/Dark自动切换：System Dark Mode Quiet Outline 一个让大纲更好用的插件\n打开命令面板输入Quiet Outline，然后回车，就可以打开大纲面板。\n其他详细功能在设置中查看\nStyle Setting 这个插件允许代码片段、主题和插件CSS文件定义一组配置选项\nEditor Syntax Highlight 将最流行的编程语言的语法高亮显示到Obsidian代码块中\nLink Favicons 自动拉取链接网站的图标\nIcon Floder 自定义文件的图标\nSystem Dark Mode 将自动根据操作系统将主题设置为亮或暗模式\nToolbar 工具栏：Editing Toolbar Emoji：Emoji Toolbar Editing Toolbar 提供类似于 MS-Word 的工具栏，，以获得更顺畅的写作/编辑体验。\nEmoji Toolbar 让你可以快速搜索和添加表情符号到你的编辑器。\nOthers ePUb Reader 在 Obsidian 中可以阅读 Epub 电子书\nImage auto upload Plugin 通过 PicGo 自动上传图像，只需要将图片粘贴即可自动上传\nObsidian Git \u0026amp; QuickAdd 搭建 Obsidian 博客自动发布系统\nVarious Complements 单词提示，自动补全\nVimrc Support 从 VAULT_ROOT/.obsidian.vimrc 加载 Vim 命令文件，实现加载持久配置的功能并添加一些额外功能\nWakaTime 统计你在不同语言、项目上写代码的时长\nCommander \u0026amp; Hover Editor Commder 可以利用 macros 自定义命令\n我们自定义命令后，绑定快捷键 Ctrl+Shift+X，使 Style Settings 面板悬浮，方便配置美观的编辑界面\nHypothes.is # Hypothesis 使用小记 网页批注工具，配合 Chrome Browser 使用\n笔记模板配置 Chrome plugins Adblock Plus - free ad blocker AdblockPlus 由用户手动设置拦截网页上不想看到的内容，我使用这个插件把一些网站我不想要看到的内容进行屏蔽，以获得更为简洁的体验\n小声BB：启动这个插件，在使用过程中，可能会碰到部分网页显示异常的情况，这个时候需要把该网页加入白名单来保证网页正常显示 ChatGPT for Google 使用 Google 搜索时，右侧便会自动出现chatGPT的回答，如搜索C++虚函数是什么？，就会出现如下所示的结果： Global Speed 使用键盘调节视频的播放速度，脱离鼠标的使用\nIDM Integration Module 使用 IDM 下载文件\nLanguage Reactor 学习外语\nVimium C - All by Keyboard \u0026amp; PDF Viewer for Vimium C 它提供了类Vim操作来控制浏览器网页。熟练掌握后，可以脱离鼠标，只使用键盘浏览页面\n这个插件我已经有一篇文章进行更为详细的讲解了，这里就不再展开来说了\nPersonal Blocklist 在搜索时屏蔽特定网站，做到对低质内容的过滤\nRSS Reader Extension (by Inoreader) Build your own newsfeed\nZotero Connector Save references to Zotero from your web browser\n划词翻译 一站式划词 / 截图 / 网页全文 / 音视频翻译扩展\neasyScholar 显示期刊等级\nErin Erin 以插件的形式重新定义自己的新标签页\nChatHub - All-in-one chatbot client 聚合ChatGPT、New Bing、Claude等大语言模型\nNew Bing Anywhere (Bing Chat GPT-4) 在 Chrome 中使用 NewBing\nHypothesis - Web \u0026amp; PDF Annotation 网页批注工具，可配合 Obsidian 使用\nMaple Bookmarks 枫叶书签 彻底隐藏掉书签栏，使用 Crtl+B 快速访问书签，甚至可以输入即搜索\n与 Github 相关的浏览器插件 octotree 可以树形结构查看Github仓库中的文件，减少了多级目录的查看，提高效率\nenchanced github 可查看单个文件的大小，下载单个文件\ngitzip for github 可直接下载单个文件夹，下载单个文件夹（在指定文件夹后的空白区域双击即可下载）\nWindows Research Zotero 一款自由及开放源代码的文献管理软件，用以管理书目信息（如作者、标题、出版社、摘要、阅读笔记等）及相关材料（如PDF文件）\nTeXstudio 一款开源的跨平台LaTeX编辑软件\nDesktop Wallpaper Engine 这是STEAM平台上的一款动态壁纸软件，可以在创意工坊中找到自己感兴趣的壁纸\napp icon 目前正在使用的壁纸 Auto Dark Mode 一款可以为Windows 提供自动深色模式的系统主题软件，可以根据不同规则（时间、电量、应用）自动切换深色模式或浅色模式。 在调整模式的同时甚至还可以自动切换桌面壁纸\nTranslucentTb 一款有趣的小工具，它可以让Windows 任务栏透明显示，只留下按钮及系统托盘，让壁纸全屏显示，让桌面显得更加完整\nProductivity uTools 通过 alt + 空格键 调出搜索栏，通过Esc 退出。\n调出输入框后，可以通过在地址栏中输入快捷字词，实现网页快开\n安装 Everything 插件后，还可以直接搜索电脑中的文件以及文件夹\nSnipaste 一个简单但强大的截图工具\napp icon 7-Zip 一款高压缩比的压缩解压缩软件\napp icon PicGo \u0026amp; Obsidian Image auto upload Plugin 我使用的图床是去不图床，借助 PicGo，方便将图片上传到图床，并生成访问链接用于访问图片（我的主要使用场景是博客中的图片），最后再借助 Obsidian 中的 Image auto upload Plugin 插件，简化我原先写博客时需要一张一张上传图片，复制链接的繁琐过程。\n如今，只用把图片拖拽到 Obsidian 编辑器中，即可自动将图片通过 PicGo 上传到 去不图床，并生成链接，显示在 Obsidian 中。\nAlist \u0026amp; RaiDrive 网盘聚合，虚拟本地磁盘挂载\nIDM 超级强大下载工具，能和浏览器无缝配合，自动抓取网页视频\nCloudMusic 网易云音乐\nVieas 一款轻量级的快速看图工具\n云同步 OneDrive 在计算机与云之间同步文件，以便能够从任何位置访问你的文件\n坚果云 我用来云同步 Zotero 中的文献\nComputer trash removal Geek Uninstalled 卸载软件，可以卸载的比较干净\nSpaceSniffer 一款非常优秀的硬盘扫描和管理软件，能够通过颜色、图表的方式为用户直观地呈现硬盘中的文件表达情况\nCCleaner 定时清理垃圾\nProgram \u0026amp; Writing Jupyter Notebook 基于网页的用于交互计算的应用程序，可被应用于 文档编写、代码运行和效果展示\nTypora 简易的 Markdown 编辑器\n主题：Happysimple 字体：霞鹜文楷 JetBrains 学生可以申请免费使用，通过学生认证即可\nCLion C/C++\nPycharm Python\nVSCode 代码编辑器，可以通过下载合适的插件支持各种编程语言\nVirtualBox 虚拟机\nGit for Windows Git的官方Windows版本，可以在 git bash 下运行大多数标准 Unix 命令\ndevdocs https://devdocs.io/ 各种文档\nOutside Clash 代理软件\nTor Browser 一个免费的网络浏览器，提供对匿名和加密的 Tor 网络的访问\nTelegram 隐私聊天，设备间传输文件\nGames Xianniu 游戏加速器\nSteam 游戏平台\n完美世界竞技平台 一个专注于竞技游戏的平台\nOthers Avira 杀毒软件\nAndroid Reading Z-Lib 免费下载书籍📕\n微信读书 阅读书籍\n人民日报 \u0026amp; 学习强国 了解时事，积累写作素材\n即刻 \u0026amp; Bilibili \u0026amp; 小红书 \u0026amp; 知乎 \u0026amp; 百度贴吧 了解感兴趣的东西\nListening 小宇宙 播客\n网易云音乐 听音乐\n可可英语 英语学习\nSports COROS COROS 手表自带app，运动记录\n华为运动健康 配合华为手环使用\n两步路 \u0026amp; 六只脚 户外登山，路网轨迹\nWorking 粉笔 \u0026amp; 腰果公考 \u0026amp; 公考雷达 备战公考\n牛客 \u0026amp; LeetCode 互联网秋招刷题\nPlanning Todo 清单 每日计划 \u0026amp; 番茄钟\nflomo 浮墨笔记 记录闪念\nOutside Clash for Android VPN\nChrome Google search\nTelegram 私密聊天\n多设备文件互传\nDupay \u0026amp; 欧易 # 开通 OpenAI-ChatGPT Plus 会员绑卡付费教程 # 学术科研专用ChatGPT来了！ 虚拟银行卡 \u0026amp; 数字货币\nOthers 钱迹 记账\nWakeUp 课程表 大学生课表\nMicrosoft Office pdf、word 等文件的查看器\nOneDrive 云空间\nWebsite https://devdocs.io/ 它把所有开发相关的文档以web的形式做了一个综合的网站，并提供搜索，离线访问，移动版本支持，暗黑主题，快捷键操作等功能 Slidev 为开发者打造的演示文稿工具 Gitstars 一个在线工具，用来管理你打过星的 GitHub 项目 useAnimations 带动画效果的 icon 汇集网站 ","permalink":"https://xancoding.cn/posts/2023-09-07-17-57-14/","summary":"Zotero plugins Zotero Style 2.6.6 zotero-style-zh zotero-style Zotero Style 使用手册 # Zotero style使用手册第二期-详操篇 # Zotero Style 使用手册 Zotero Style 2.6.6 版本适配 Zotero 6 Zotero Tags Emoji 大全 标注每篇论文的状态 🗸 打勾标志：已读摘","title":"我的全平台软件清单"},{"content":"Total（31本） 此书单记录本人上大学以来（多是大二上开始）翻阅的书籍\nReading 反乌托邦三部曲（《1984》+《我们》+《美丽新世界》） 《动手学深度学习（Pytorch版）》计算机视觉章节不看，其他章节都看一遍 Will read Have readed 非专业书单（21本） 《人性的弱点》大一读的，忘得差不多了。2021-10-04 《暗时间》：作者是将自己博客的内容整理出书的。内容也比较不错 《非暴力沟通》 《你的灯会亮吗？》大一心理课老师的推荐读物。当时读完就没再去翻阅过了，对书中内容的印象不深了。2021-10-11 《思考，快与慢》心理课老师推荐的读物。2021-10-25 《情绪急救》当时在京东上买书时为了凑单买的 《被讨厌的勇气》适合二次阅读。2022-06-01 《房思琪的初恋乐园》经一个女性朋友推荐阅读的.2022-10-06 《苦难辉煌》大二毛概课老师的推荐读物。深入了解中国工厂党人走过的历程。2022-10-06 《日暮乾清门：近代的世运与人物》：近代史老师的推荐读物。讲的是近现代的一些事件，扩充了我的知识，不错 《软技能》作者现身说法，写的是作为一个开发者，所需具备的一些除了专业知识之外的 ”软技能“。分为很多篇，可以按需阅读。2022-10-18 《亲密关系》没阅读完，只是草草阅读几个章节（好像是比较枯燥，没看下去。2022-10-18 《影响力》2022-10-18 《黑客与画家》 《码农翻身》以讲故事的方式，讲述了一些计算机的专业知识 《小狗钱钱》：好书。大二寒假翻阅 《富爸爸穷爸爸》大二寒假翻阅 《蛤蟆先生去看心理医生》以讲故事的方式，讲述一些心理学相关的专业知识，感觉收获满满。大二寒假翻阅 《解读基金——我的投资观与实践》 草草阅读，观其大略。一些专业性的名词都不是很懂。大二寒假翻阅 《平凡的世界》早就听说了，在大二下在朋友的推荐下去第一次阅读。好书 《人类简史》朋友推荐，没读完。没全部读完，比较难啃，之后有空了再尝试继续啃一啃 《性学入门》这本书从 个人层面、社会层面、政治层面、哲学层面 四个层面讲述 性。只看了感兴趣的内容，大部分内容都是草草翻阅。个人感觉有点不太容易阅读。2023-08-13 Have readed 专业书单（10本） 《Wireshark网络分析的艺术》2022-11-19 《WireShark网络分析就这么简单》2022-11-19 《图解HTTP》2022-11-19 《图解TCPIP》 《网络是怎样连接的》帮助你理解从浏览器输入网站开始，到显示出网页内容的全过程。推荐阅读。2022-10-26 《现代操作系统》 《操作系统导论》2023-04-11 《操作系统：精髓与设计原理》2023-05-30 《程序员的自我修养：链接、装载与库》阅读不超过一半，暂时还啃不动。2023-05-20 《Linux C 一站式学习》按需翻阅，并没有从头到尾全部看完 《神经网络与深度学习》 阅读前五章内容，其中的公式推导没看懂，跳过。2023-07-16 ","permalink":"https://xancoding.cn/posts/2023-08-09-09-25-09/","summary":"Total（31本） 此书单记录本人上大学以来（多是大二上开始）翻阅的书籍 Reading 反乌托邦三部曲（《1984》+《我们》+《美丽新世界》） 《动手学深","title":"我的书单"},{"content":"Ride 喜德盛XDS RC500 变色龙紫/白 700c * 480mm —— 闲鱼 1900元 骑行水壶山地自行车水壶架户外骑行塑料水杯便携挤压式运动水杯架 字母水壶黑色+任性水壶架黑色 —— 拼多多 18.8元 公路自行车手机支架山地车共享单车硅胶支架电动车导航骑行专用 黑色Pro-【通用30kg承受力】—— 拼多多 21.1元 美利达通用自行车脚撑26/27.5寸山地公路车支撑停车架车踢零配件 （铝合金黑色脚撑）D款-送工具 —— 拼多多 12.99元 【新客立减】秋冬加绒加厚骑行裤专业级黑色男女双箭头坐垫迪卡侬 秋冬季加绒无背带长裤 M码 —— 拼多多 126.6元 Run 手表 COROS高驰 PACE2 竞技运动手表 —— 闲鱼 1200元 COROS高驰 PACE3 竞技运动手表 —— 京东 1699元 跑鞋 飞影PB 国庆配色 260mm —— 闲鱼 450元 Nike React Infinity Run 白蓝 260mm —— 闲鱼 271元 锐步 Energy3 260mm —— 闲鱼 450元 361飞燃PB 李子橙 260mm 42码 —— 淘宝 299元 冬季装备 QINKUNG长袖 M码 —— 闲鱼 78元 必迈 V4热能紧身压缩衣 L码 —— 闲鱼 329元 必迈 防风保暖夹克 恒星蓝 L码 —— 闲鱼 259元 夏季装备 特步国人竞速 短裤、背心 —— 闲鱼 259元 QINKUNG短袖 M码 —— 官网 169元 BMAI 必迈跑步竞速压缩短裤 3.5寸 黑练黑 —— 淘宝 173元 帽子🧢 Nike运动帽 679421 —— 闲鱼 110元 QINKUNG轻功 秋冬跑步高弹针织帽 —— 淘宝 99元 Electronic product 三星SAMSUNG 64G U盘 —— 京东 88元 联想拯救者 R7000 —— 京东 6199元 微星 MSI 23.8英寸显示器 —— 京东 833 元 微软便携触摸显示器 —— 淘宝 499 元 漫步者 W820NB 头戴式蓝牙耳机 —— 京东 299 元 小米显示器挂灯 —— 京东 199元 RK100 有线/蓝牙/无线2.4G三模机械键盘 —— 京东 229元 SAMSUNG 64GB U盘 —— 京东 87 元 小米充电宝 20000mAh 22.5W —— 京东 149元 小米 原装二合一数据线 1m —— 京东 27元 华为手环 7 NFC版 —— 京东 245元 Outdoor 我的装备 三峰出雨衣 15D —— 闲鱼 112元 BLACK ICE 黑冰 户外运动P棉服 F8001 S码 —— 淘宝 543元 闲鱼 499元 日系 男士 GTX Pro 三层压胶 山系 复古 冲锋衣 杏黄色 M码 —— 淘宝 545元 THERMOS 膳魔师 JNL-502-PRW 珠光白 500mL —— 京东 80元 Snow monster 雪地野人户外手套 —— 闲鱼 120元 Hoka羚羊4 260mm —— 京东 599元 强氧登山包羚羊36L （2 - 3日短线徒步 ） —— 闲鱼 220元 奈特科尔NITECORE头灯 NU25 —— 闲鱼 133元 outdoor research OR 手套 L码—— 淘宝 58元 Outdoor research VERGLAS 雪套 L码 —— 闲鱼 89元 ROCLKSOLID 美利奴羊毛保暖内衣套装 M码 —— 淘宝 198元 Keith凯斯纯钛饭盒 Ti5328 1000mL —— 闲鱼 179元 Keith凯斯钛杯 Ti3240 350mL —— 闲鱼 75元 钛途TiTo纯钛叉勺 —— 淘宝 19元 凯乐石9A攀岩裤KG520220 金鱼黄 170/74A —— 闲鱼 199元 凯乐石远征者pro 三合一冲锋衣 M码 —— 闲鱼 460元 Osprey小鹰水袋 3L —— 闲鱼 230元 急救包 外伤 塑料镊子 1把：伤口的精细化处理 安全别针 10枚：固定三角巾纱布止血带等 剪刀 1把：剪开绷带线条等各种用途 创口贴 10片：小创口的止血处理 酒精棉片 10片：对伤口用品的擦拭消毒 碘伏棉片 4片：伤口的消毒、消炎 医用棉签 20根：日常护理使用 三角绷带 1包：胳膊骨折的固定，头部出血的处理 止血带 1卷：压迫伤口止血，固定骨折部位 PBT绷带 1卷：伤口的包扎止血 无纺布胶带 1卷：固定绷带纱布等敷料 纱布片 2片：可与伤口直接接触 药物 麝香壮骨膏 4贴：扭伤 挫伤 急救毯 1张：失温 云南白药 2罐：跌打损伤，淤血肿痛，肌肉酸痛及风湿疼痛 板蓝根颗粒 2包：肺胃热盛所致的咽喉肿痛、口咽干燥 ","permalink":"https://xancoding.cn/posts/2023-09-09-09-46-04/","summary":"Ride 喜德盛XDS RC500 变色龙紫/白 700c * 480mm —— 闲鱼 1900元 骑行水壶山地自行车水壶架户外骑行塑料水杯便携挤压式运动水杯架 字母水壶黑色+任性水壶架黑色","title":"我的装备清单"},{"content":"如何带一次活动? 如果是想去没有去过的线路，可以参考一下这些公众号的行程👇\n草履虫户外 阅徒 北京高知户外 北京徒步者 烛逢 8264户外 地大大地社 清华山野 北大山鹰社MAPKU 出活动要注意 交通、人数、天气 等情况\n下面👇是一个供参考的前期策划。也可以参考 北京徒步者 公众号做更详细的前期策划\n2022.1.5 长峪城策划\n活动报名：长峪城一日徒步环线 活动时间：2022.11.5星期六 强度和里程：简单，14km，爬升600m 出行方式：待定 预算：待定 参考路线： 天气：晴朗，2-14℃，西风2级 个人物品准备： 登山鞋，3L水，路餐午饭，防寒衣物，手部，头部保暖，充电宝，充电线，纸巾，垃圾袋 活动领队：亮仔，收队：待定 注意事项： １、参加活动按要求的时间地点集合，未按时间达到视为自愿放弃活动。 ２、徒步活动具有一定危险性，行动不便及健康状况不佳请勿报名。 ３、活动中自觉服从领队指挥，禁止脱队单独活动。 ４、领队有根据天气状况决定是否取消活动的权利。 ５、徒步路线非景区常规游览路线，活动中会有走错路，探路等情况发生。 出发前做风险预案，回去后写总结报告记录\n上面说的不是很详细，可以看看其他兄弟社团一些活动记录的文章，然后想了解的更专业就看8264的文章，大概就明白出发前要准备什么了\n还可以在 两步路 上看看 亮哥 的行程记录，作为日后出行的参考\n出户外当领队肯定要练抗压能力的，常见的例如防火护林员阻拦，铁丝网挡路，同学出意外状况，村民拦路收费等等\n租车你看多少个司机，，一个会开车的同学带三四个不会开的，我跟多伦一般是去华联附近的那家租，他一般就用神州租车，油车淡季一天100左右，国庆那种就一天三百，打车也是一样，一辆车四五个人，要有一个老社员负责打车\n中巴一般就是12个人到20个人坐了，大巴就20到30个，价位疫情后变化也很大，现在的我也不太确定\n下面👇是一个后记的示例 凌云社 2022.09.24 鹿皮关领队后记\n这是我第一次严格意义上全程领队。还好小腿全程没抽筋，速度也没有太慢。登山长城城楼或山顶看到的风景也很nic。白河大峡谷和密云水库。 但还是出了很多问题。首先是饮用水没估计好也没有跟大家强调，最后包括我在内大家都带少水了，后半程都是无水情况下走。以及关于路上断崖攀岩路程没有足够认识，未提醒大家做好准备。 然后是我下山路线选择失误。当时为了图降蓬山登顶的景色，执意带队冲顶并选择了降蓬山前面的路口作为下山路口。但该段路很不成熟，导致大家体验到的难度更多是环境恶劣而非强度拉练。短短的下山路程，都是在带刺灌木，矮树和杂草间穿冲锋衣硬冲一条路，而我们又没有开山砍刀以及登山杖。 但我那时已经不敢回头了，回头找其他下山路口要重新再翻一次降蓬山而就绝无法在天黑之前把大家安全带下山。我只能相信那不知道是那个年代的寻迹，紧紧地盯着若隐若现的小路，艰难地剥开带刺树枝往前走。中间有一次我在分叉路口找不到路，当时心态差点崩了，以为要叫蓝天救援队了，最后陈队稳住了我心态，又帮助我重新寻回了道路。在我当时口渴难耐，心态崩溃，害怕自己无法为此事负责时(大家都没买保险)，我听见同伴在唱歌，大家在互相鼓励前面就快到了。我真的非常感动，也就鼓起勇气继续寻迹。最后终于在天黑之前把大家安全带下了山。 最后，我再也不会选择路网上只有少数寻迹的羊肠小道了。 我想对队友说一句对不起，还有谢谢。 附录1：陈队的话： 我认为最重要的是责任感和牺牲精神吧 或者把牺牲精神换一种说法 叫 带给他人快乐从而使自己快乐。这也是我觉得的能否当一个领队的门槛吧 有这两点不一定能当领队 但是没这两点一定当不了领队，其他诸如体能，技术，应变能力都是能通过后期不断练习、积累相关经验，在当领队的过程中无论何时都会遇到磨练，因此可以不断提高自己的抗逆能力，也就是逆商，当在活动组织中，登山中遇到的种种困难都被自己给抗住了、克服了，那回到生活中后，就几乎没什么能把你压倒了，因为这样那样的事你都已经把它做下来了，还有什么做不了呢？ 而促使自己不断进步的动力，就跟户外登山一个道理，一是离开自己的舒适圈，二是身为一个领队，为了能够把自己的队员带到更加壮丽的风景前，让他们感受到最震撼的场景，就需要自己不断地强化自身，而这也是一个“内圣外王”的过程，当你成为一个闪闪发光的人，你身边有人愿意追随你，这种力量和感觉是最强大和奇妙的，这也是伟大的。在当领队的过程中，磨练自己的逆商，不断强大自身，感悟自然和人生，这就是咱们社团最核心的竞争力，也是户外能带给我们的最宝贵的财富。 附录2： 昨天凌晨三点，趁着整理素材的机会跟老玉珠峰登山队长刘擎聊了很多登山队和登山队长的事情。 我们聊了很多年的登山，总结了种种问题，也有种种登山队长的问题。最后感觉都不满意，每一届都各有问题。包括我自己。 然后说完一堆之后我简单总结了一下当一个登山队长需要什么： 1.首先你需要过人的体能：万米，拉二十多个引体、一天走十万步什么的都不在话下。还得在高海拔能背很多东西，当老牦牛，克服高原反应。 2.你需要对登山技术有一定的追求：不仅要完成队内所传承的技术，还要去自学，各种绳索技术、冰雪技术、攀登技术以及户外理念求生技能。 3.你需要有极强的心理素质：登山活动说到底都是高危活动。一个登山队长所要承担这个职位的时候就肩负着一个队伍的生命。所以登山队长不仅不会有什么正面的利益，反而时时刻刻都在承担着风险。 4.你需要有极强的应急反应能力：登山的状况千变万化，遇到风险在最短的时间内做出损失最少的决定。大到雪崩滑坠，小到登山注册不下来，下一步该怎么走。 5.你需要有很高的情商：雪山是自然的，但去登山绝对是要与人打交道的。为了完成这样一件事情、需要与各种支持的不支持的人打交道。他们各怀心思，各怀各自的利益。从队员内部，到向导，当地村民登协政府，以及远在北京的团委体育部，亦或是各个队员的家长，还是赞助商。每一环出了问题都有可能导致活动失败。 6.你需要很强的组织管理策划能力：登山与其他运动不一样，活动可能会持续两周，而前期的准备周期可能长达半年甚至一年。在这个期间需要很宏观的策划，也要安排好合适的人去干合适的事情。且奖惩分明，纪律规范，能在极端情况下迅速做出反应应对。不仅要组织体能训练、技术培训。还要协调各种宣传、外联、资料收集等等。 7.你还要有过人的胆识：本身选择去登山就是一个勇敢的抉择，而登山队长所要做出的表率则是更重要的。有些事情是看似安全实则危险，有些事情是看似危险实则安全。合理的辨认情况并迈出一步，是需要很大的勇气的。 8.你需要极大的无私奉献精神：在登山队的付出，不会在学校层面有任何实质性的回报。每天起早贪黑，付出极大的精力去参加或组织社团活动。登山队长没有学生干部的职位，而组织登山队的活动也不会受到任何奖励。甚至承担着很大的风险与责任。是一个投入时间长，投入成本高，且不计回报的一个活。 9.最后你需要一定的人格魅力：无论是有什么其他的爱好特长，或是幽默或是鸡汤热血。总之你还不能是一个无趣的人 最后我感慨道，这他妈是一个小小的地大登山队队长所需要达到的要求？ 2022 国庆迎新活动总结\n凌云社2022年国庆迎新活动——阳台山露营两日活动总结 活动时间：10.1，10.2 活动人员：领队：竹白，收队：世鑫，车队：第一天安旭，多伦，第二天亮仔，多轮，队员：苦功，繁星，牧云，红，大户爱，01，小K，和其正 路线：第一日大觉寺上，走鹫峰线，过萝巴地北尖到茶棚，然后沿着茶棚公路到妙峰山玫瑰谷处露营，第二日由玫瑰谷回到茶棚，从茶棚走景区路从阳台山景区售票处出。 组织活动总结： 第一个大问题，忘记带登山仗 第二个问题，尽管多次叮嘱，但有同学衣服仍然没有带够 第三个问题，当日天气情况异常恶劣，海拔800米以上能见度极差，在20米到50米之间，偶尔能有100米，队伍后队看不见领队，但大家都跟的很紧，而且路线成熟，所以没有散开。 第四个问题，妙峰山玫瑰谷一侧现在处于封山状态已有3月。山上有人巡逻，不准使用明火，玫瑰谷一侧管束较为放松，因此选择在此露营而非茶棚，也更方便地生活煮饭。 总结分两种，一种是写出来开会给大家看的，一种是给自己看的，我这都是给自己看的，我跟安旭这一届懒，也没找过你们开总结会，主要是养成这个习惯就是了，包括两步路上传你的轨迹时，路上分叉路口要拍照记录，走完后要写上交通和路程大概状况的信息在上传。不然你这次线路走了过一年自己细节都不记得了。\n最后，领队和老社员的职责还有出行之前带大家破冰，登山路上控制速度，估算时间，如果没有夜爬的准备就一定要在日落前下山!!!山里日落前后差异很大，秋冬时也包括失温的风险。手机那点光在野路没用，要夜爬一定带社团灯或头灯。结束爬山之后在车上少讲两句，总结下活动，鼓励大家。如此这般。\n入门指南 登山者Black\n户外运动安全手册（上） 户外运动安全手册（下） 洋葱式穿着/户外运动穿什么 户外必备10要素\u0026ndash;可能拯救你生命的十件户外必需品 户外装备选购终极指南 户外急救/户外医疗包 烛逢\n户外运动三层穿衣法 | 烛逢 在野外找路-六只脚｜烛逢 六只脚进阶篇 | 烛逢 两步路使用教学｜烛逢 两步路路网\n访问🔗https://www.wandoujia.com/apps/514093/history 下载 6.6.1 版本 在应用商店中关闭自动更新 GOOGLE地球简易操作制作轨迹，配合六只脚户外导航\n登山装备清单 海外代购 在淘宝上搜亚马逊代购，然后把衣服链接发给他，他会计算价格 ","permalink":"https://xancoding.cn/posts/2023-04-30-09-20-36/","summary":"如何带一次活动? 如果是想去没有去过的线路，可以参考一下这些公众号的行程👇 草履虫户外 阅徒 北京高知户外 北京徒步者 烛逢 8264户外 地大大地社 清华山","title":"Outdoor"},{"content":"新手入门 # 刚刚入门公路车｜公路车把位如何使用？【闪电骑行课堂】 # 《公路车入门指南》10分钟教你如何变速！牙盘和飞轮该如何搭配？ # 公路车头盔怎么选？当然是要看颜值啊！ ","permalink":"https://xancoding.cn/posts/2023-11-18-20-43-43/","summary":"新手入门 # 刚刚入门公路车｜公路车把位如何使用？【闪电骑行课堂】 # 《公路车入门指南》10分钟教你如何变速！牙盘和飞轮该如何搭配？ # 公路车头盔怎","title":"Riding"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-10-22-20-20-31/","summary":"\u003c!DOCTYPE html\u003e","title":"2023 三峰小环线"},{"content":"联想r7000 自带 HDMI 接口一个 和 Type-c 接口一个\nHDMI 接口直连 24 寸 显示器\nType-c 接口 直连 10.5 寸 便携触摸屏\nUSB 接口 接USB转HDMI转换器 接HDMI转VGA转换器 外接VGA线连接 实验室 显示器\n算上联想笔记本自带的显示器，现在可以有四个电脑💻屏幕 ","permalink":"https://xancoding.cn/posts/2023-09-16-15-08-58/","summary":"联想r7000 自带 HDMI 接口一个 和 Type-c 接口一个 HDMI 接口直连 24 寸 显示器 Type-c 接口 直连 10.5 寸 便携触摸屏 USB 接口 接USB转HDMI转换器 接HDMI转VGA转换器 外","title":"联想R7000外接3个显示器"},{"content":" 即刻：杨昌 心智模式1 动态的心智模式 好的归因方式2 失败时，归因于能力，且认为能力是不稳定的，可控的\n成功时，归因于努力，且认为努力是不稳定的，可控的\n归因会对个体以后的成就和行为产生影响。不同的归因倾向会导致不同的情感体验和情感反应，并由此影响个体对未来结果的预期和努力。所以，咱们要有意识地调整自己看待成败的观点，以利于个人（在心智层面）更好地成长。\n如何面对逆境3 斯托克代尔悖论：你不能把信念和原则搞混。\n信念是：你一定能获得成功——这个信念千万不可失去。\n原则是：你一定要面对最残忍的现实——无论它们是什么。\n“斯托克代尔悖论”是一种面对困境和逆境时，很有效的心智模式。具有这种心智模式的人，更加有可能（或者说，有更大的概率）战胜困境并坚持到最后。\n战略上乐观，战术上悲观。也就是说，你既【不能】是纯粹的乐观主义者，也【不能】是纯粹的悲观主义者。\n打一个不太恰当的比方：战略好比掌舵，战术犹如划桨。战略上乐观意味着掌舵者不迷失方向；战术上悲观意味着划桨者不松懈\n“心智模式”系列：认识你自己——心智模式扫盲介绍\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n“心智模式”系列：你是如何看待【成败】的？——兼谈【有效归因】\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n“心智模式”系列：如何面对【逆境】？——兼谈“斯托克代尔悖论”\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://xancoding.cn/posts/2023-07-29-13-31-24/","summary":"即刻：杨昌 心智模式1 动态的心智模式 好的归因方式2 失败时，归因于能力，且认为能力是不稳定的，可控的 成功时，归因于努力，且认为努力是不稳定的，可","title":"认识自我"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-07-19-14-15-53/","summary":"\u003c!DOCTYPE html\u003e","title":"北京环球影城"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-07-17-15-49-41/","summary":"\u003c!DOCTYPE html\u003e","title":"圆明园"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-07-16-19-11-01/","summary":"\u003c!DOCTYPE html\u003e","title":"故宫"},{"content":"\u003c!DOCTYPE html\u003e \u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-07-16-14-53-00/","summary":"\u003c!DOCTYPE html\u003e \u003c!DOCTYPE html\u003e","title":"颐和园 北京奥林匹克塔"},{"content":" # C/C++项目实战（前置知识） 单例模式 工厂模式 # C/C++刷题常用技巧 # C/C++项目实战（数据库） # 数据库原理 大纲 1. 开发环境 - Git # 版本管理工具 - Cmake # 代码构建工具，管理源文件和依赖 - Gcc # 编译器 - Clion # 编辑器 - Postman # 模拟客户端 - MySQL(navicat) # 在 docker Container 中起一个 mySQL 数据库，并可以在 navicat 中进行可视化操作 - Docker # 部署 1. 目录结构 - build # 项目编译目录 - debug - release - include # .h 头文件目录 - src # .cpp 源文件目录 - docs # 需求设计文档 - others 2. 设计模式 - 单例模式 - 构造函数私有 - 实例只有一份 - 工厂模式 - 一个类别对应一个工厂 - 不需要亲自创建对象，只需要从工厂中去取 3. 数据库 - MySQL - 关系型 - 支持事务 - 行锁 - 支持种存储引擎InnoDB，MyISAM，Memory - B+树索引 init-project build 添加 Release 模块，并将 Debug 和 Release 模块移至 build 目录下 include User.h\n// // Created by 24398 on 2023/5/29. // #ifndef NEW_PROJECT_USER_H #define NEW_PROJECT_USER_H # include \u0026lt;string\u0026gt; class User { private: int age{}; std::string name{}; public: std::string get_name(); User(std::string name_); }; #endif //NEW_PROJECT_USER_H src main.cpp\n#include \u0026lt;iostream\u0026gt; #include \u0026#34;User.h\u0026#34; int main() { auto *user = new User(\u0026#34;John\u0026#34;); std::cout \u0026lt;\u0026lt; user-\u0026gt;get_name() \u0026lt;\u0026lt; std::endl; return 0; } User.cpp\n// // Created by 24398 on 2023/5/29. // #include \u0026#34;User.h\u0026#34; User::User(std::string name_): name(name_){}; std::string User::get_name() { return this-\u0026gt;name; } CMakelists.txt cmake_minimum_required(VERSION 3.25) project(new_project) # C++ 17 set(CMAKE_CXX_STANDARD 17) # 添加头文件 include_directories(include) # 添加源文件 aux_source_directory(./src DIR_SRCS) # 所有需要编译的可执行文件 add_executable(new_project ${DIR_SRCS}) include_directories([AFTER|BEFORE] [SYSTEM] directory1 [directory2 ...])\n在这个例子中，命令include_directories(include)表示你想将include目录添加到包含路径中。这意味着编译器在编译源文件时会在include目录中搜索头文件。\naux_source_directory(\u0026lt;dir\u0026gt; \u0026lt;variable\u0026gt;)\n在这个例子中，命令aux_source_directory(src DIR_SRCS)表示你想从./src目录收集所有的源文件，并将它们赋值给变量DIR_SRCS。\n","permalink":"https://xancoding.cn/posts/2023-05-29-17-24-38/","summary":"# C/C++项目实战（前置知识） 单例模式 工厂模式 # C/C++刷题常用技巧 # C/C++项目实战（数据库） # 数据库原理 大纲 1. 开发环境 - Git # 版本管","title":"C++ Project"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-05-28-18-28-55/","summary":"\u003c!DOCTYPE html\u003e","title":"2023 黄草梁🏕️"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-05-28-18-20-45/","summary":"\u003c!DOCTYPE html\u003e","title":"2023 第五十三届公园半程马拉松北京公开赛“北京·亦庄”南海子公园站"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-05-28-18-16-39/","summary":"\u003c!DOCTYPE html\u003e","title":"2023 首都高校第九届徒步大会"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-05-28-17-57-01/","summary":"\u003c!DOCTYPE html\u003e","title":"2023 “拉卡拉杯”北京大学第十五届 5+2 半程马拉松接力赛"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-05-28-17-50-50/","summary":"\u003c!DOCTYPE html\u003e","title":"2022贝壳北京马拉松志愿者"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-05-28-17-13-05/","summary":"\u003c!DOCTYPE html\u003e","title":"2022 adidas ADIZERO SUMMIT 北马训练营"},{"content":"开始的 10 km状态还行（毕竟跑的也不快😜），在 11 km左右的时候，旧伤复发，脚踝开始隐隐作痛，速度往下掉，在 6分配左右徘徊。目标是安全完赛，脚痛速度也加不起来，完赛预计时间也从开跑前的 4h 一路降到 4h20min。心率一直是保持在一个比较低的水平，配速还有到过 7 分配。不过整体还是满意的啦，可以顺利完赛已经很棒了🥰。（PS:刚跑完就走路的时候就已经是一瘸一拐的，接下来几天就慢慢修养生息好了😴） \u003c!DOCTYPE HTML\u003e \u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-05-21-07-27-22/","summary":"开始的 10 km状态还行（毕竟跑的也不快😜），在 11 km左右的时候，旧伤复发，脚踝开始隐隐作痛，速度往下掉，在 6分配左右徘徊。目标是安全完赛，脚痛","title":"2023 唐山马拉松"},{"content":"PA0 - 世界诞生的前夜: 开发环境配置 在执行下述命令：\napt-get install libsdl2-dev # a library used later apt-get install llvm llvm-dev # llvm project, which contains libraries used later 发现缺少依赖\n执行下述命令，仍然没有效果\napt-get update 在 RTFM 后，发现是镜像源的问题，更改镜像源后，再次进行操作，发现可以成功安装\nPA1 - 开天辟地的篇章：最简单的计算机 在开始愉快的PA之旅之前 开头简简单单的运行一个已经完成的 红白机模拟器项目FCEUX ，前前后后就搞了一个多小时，出师未捷身先死了属于是。果然还是没有 RTFM 的锅。问题是这样的：我在 PA0 里配置的环境变量是 bash 的，而之后我又将我的 Shell 从 bash 更换到了 zsh，却没有重新配置环境变量。而 Makefile 中的 AM_HOME 实际上使用了 系统环境变量，所以我无法将程序跑起来。\n解决方法：在 .zshrc 下手动加入环境变量的配置\nexport NEMU_HOME=/home/xan/Desktop/ics2022/nemu export AM_HOME=/home/xan/Desktop/ics2022/abstract-machine 然后，在命令行界面运行命令 source ./.zshrc 即可\n最后再放一下成功运行马里奥的界面😁 在配置 ccache 的时候又粗心了，.zshrc 中的 export PATH=\u0026quot;/usr/lib/ccache:$PATH\u0026quot;，楞是写成了 export PATH=\u0026quot;/usr/lib/cache:$PATH，怪不得总是不行。好在折腾了一个来小时后，终于成功发现，修改后果然成功 RTFSC 在解决上述问题的时候，偷了下懒，直接去网上🔍思路，看别人找问题看源码的过程，感觉还是挺妙的。下次还得是自己去解决，这样才会有更多的收获，相信自己能做到的💪。下文是出问题的地方的修改\u0026amp;\u0026amp;解决完后的界面。 基础设施 前面几个还是认真自己完成的，后面碰到困难又忍不住去参考别人的代码了🤡\n记于 2023-06-26-00-15，发现正确的食用方式是先看习题课视频，再同时完成 ICS-PA，先把视频补上，过两天再来继续做🥰 记于 2023-06-29，再次看了看学术诚信，一定要记得遵守，每一次的偷懒都会在之后还回来的，只有坚持着自己去 debug，才能得到锻炼，不要忘记自己为什么要去选择做 ICS-PA🦾 表达式求值 2023-07-09-22-42，前面几天零零总总的去把视频课补了补，阅读了些许工具的手册，配置了我的 vim，学习掌握了一些好用的命令行工具。写代码也是今天昨天两天，是比较高效的，感觉自己又可以了💪明天继续完善表达式生成器，生成测试用例自动测试，再根据测试改一改我的代码 关于如何测试你的代码这一部分，有一些细节的问题：\n如何保证表达式进行无符号运算? 如何随机插入空格? 如何生成长表达式, 同时不会使buf溢出? 如何过滤求值过程中有除0行为的表达式? 其中，保证表达式进行无符号运算这一部分，即保证运算时不出现整形溢出挺难实现的。将表达式计算结果出现的整形溢出情况，以及子表达式计算过程中产生的溢出情况筛选掉\n我先把这部分放一放，之后再来处理处理\n2023-07-10 大体上已经是完成了，感觉还是比较满意的，看来我还是可以坚持着写下去的么hh🥰 不过先去学一学 pyG，ICS-PA 过段时间再做。之前一直是在 vim 里写的，今天下午把 VSCode 的配置总算是搞完了，在 VSCode 里下载了 Vim 插件，下次做起来也会轻松许多了，就是有点奇怪， engine_start() 里面的程序不知道如通过GDB调试，目前还是得用 make gdb 来调试。感觉最近写的比较吃力，还是先放放，等之后有空了再继续写写。下面是 VSCode 的部分命令： F9 断点，F5 调试 Ctrl+Shift+B，运行 nemu ","permalink":"https://xancoding.cn/posts/2023-05-08-17-40-45/","summary":"PA0 - 世界诞生的前夜: 开发环境配置 在执行下述命令： apt-get install libsdl2-dev # a library used later apt-get install llvm llvm-dev # llvm project, which contains libraries used later 发现缺少依赖 执行下述命令，仍然没有效果 apt-get update 在 RTFM 后，发","title":"ICS-PA"},{"content":"运动损伤 创口贴 9片：小创口的止血处理 云南白药 2罐：跌打损伤，淤血肿痛，肌肉酸痛及风湿疼痛 麝香壮骨膏 5贴：扭伤 挫伤 双氯芬酸二乙胺乳胶剂：缓解肌肉、软组织和关节的轻至中度疼痛。如：缓解肌肉、软组织的扭伤、拉伤、挫伤、劳损、腰背部损伤引起的疼痛以及关节疼痛等，也可用于骨关节炎的对症治疗\n外用。按照痛处面积大小，使用本品适量，轻轻揉搓，使本品渗透皮肤，一日3-4 次 胃痛 乳酶生片 100片：促进消化和止泻\n一次2-3片，一日3次，饭前服 健脾颗粒 12袋：健脾开胃 一次1袋，一日2次 三九胃泰颗粒 1袋：上腹隐痛，饱胀，反酸，恶心，呕吐，纳减，心口嘈杂\n开水冲服。一次1袋，一日2次 午时茶颗粒 3袋：恶寒发热、头痛身楚、胸脘满闷、恶心呕吐、腹痛腹泻\n开水冲服。一次1袋，一日1~2次 上火 桂林西瓜霜：急、慢性咽炎，扁桃体炎，口腔炎，口腔溃疡，牙龈炎 外用。敷于患处，每次适量，一日数次 金喉健喷雾剂：风热所致咽痛、咽干、咽喉红肿、牙龈肿痛、口腔溃疡 喷患处。每次适量，一日数次 维生素B2片：口腔溃疡 口服。一次1-2片，一日3次 口炎清颗粒 4袋：阴虚火旺所致的口腔炎症 口服。一次2袋，一日1～2次 皮肤感染 丁酸氢化可的松软膏 2管：过敏性皮炎、脂溢性皮炎、湿疹、瘙痒症和神经性皮炎\n局部外用。取适量本品涂于患处，每日2次。 莫匹罗星软膏 2管：局部外用抗生素，适用于革兰阳性球菌引起的皮肤感染，例如：脓疱病、疖肿、毛囊炎等原发性皮肤感染及湿疹合并感染、溃疡合并感染、创伤合并感染等继发性皮肤感染 外用。局部涂于患处，必要时，患处可用敷料包扎或敷盖，每日3次，5天一疗程。必要时可重复一疗程 感冒 阿奇霉素片 6片：支气管炎、肺炎等下呼吸道感染，鼻窦炎、咽炎、扁桃体炎等上呼吸道感染 每日口服给药一次，整片吞服 三九感冒灵胶囊 10粒：感冒引起的头痛，发热，鼻塞，流涕，咽痛等 口服。一次2粒，一日3次 酚麻美敏片 20片：普通感冒或流行性感冒引起的发热、头痛、四肢酸痛、喷嚏、流鼻涕、鼻塞、咳嗽、咽痛等症状 口服。一次1~2片，每6小时服1次。 24小时内不超过4次 对乙酰氨基酚释缓片：普通感冒或流行感冒引起的发热，轻中度疼痛如头痛、关节痛、偏头痛、牙痛、肌肉痛、神经痛、痛经 口服。成人一次1～2片，若持续发热或疼痛，每8小时一次，24小时不超过3次 盐酸阿比多尔颗粒 12袋：A、B型流感病毒等引起的上呼吸道感染 口服。一次2袋，一日3次，服用5日 ","permalink":"https://xancoding.cn/posts/2023-04-30-09-48-57/","summary":"运动损伤 创口贴 9片：小创口的止血处理 云南白药 2罐：跌打损伤，淤血肿痛，肌肉酸痛及风湿疼痛 麝香壮骨膏 5贴：扭伤 挫伤 双氯芬酸二乙胺乳胶剂：缓解肌","title":"宿舍备药"},{"content":"Blog 搭建工具 Hugo \u0026amp; GitHub Pages \u0026amp; GitHub Action \u0026amp; Twikoo Theme：PaperMod Tool：Obsidian \u0026amp; Git Bash 各页面简介 Home：联系方式 \u0026amp; 文章 Tags：文章标签 Archives：文章归档 About：作者简介 \u0026amp; 博客简介 Search：搜索文章 自动化构建 Hugo 博客写作最佳实践 Hugo + GitHub Action，搭建你的博客自动发布系统 自定义 自定义 shortcodes # Hugo博客添加相册功能 # Hugo博客自定义shortcodes bilibili 视频 \u003c!DOCTYPE HTML\u003e 相册 \u003c!DOCTYPE html\u003e 香克斯 Hugo 侧边目录 # Hugo侧边目录 # Hugo博客目录放在侧边 | PaperMod主题 更改字体 方法1 # Hugo博客自定义字体\n在网上找到字体资源，即ttf结尾的文件，放到static/fonts/文件夹下 在assets\\css\\extended\\fonts.css 中引用字体 在 assets\\css\\extended\\blank.css 中 用font-family属性指定使用什么字体 方法2 # Hugo使用自定义字体\n将HTML插入到 layouts/partials/extend_head.html 在 assets\\css\\extended\\blank.css 中 用font-family属性指定使用什么字体 Twikoo 评论区 # Hugo博客添加Twikoo评论 LaTex 语法支持 # Hugo博客添加LaTeX语法支持 ","permalink":"https://xancoding.cn/posts/2023-04-30-09-43-31/","summary":"Blog 搭建工具 Hugo \u0026amp; GitHub Pages \u0026amp; GitHub Action \u0026amp; Twikoo Theme：PaperMod Tool：Obsidian \u0026amp; Git Bash 各页面简介 Home：联系方式 \u0026amp; 文章 Tags：文章标签","title":"Blog"},{"content":" 采取三分化训练模式，意思是三天以内训练全身，中间也可以比较自由的加入休息日\nDay 1：Chest \u0026amp; Triceps 热身：着重注意胸部肩部颈部以及下背部，热身时间不要超过5分钟。 钻石俯卧撑：每组数量20，做不到20的就做到极限。一共3组。组间休息90秒。 作为最经典的徒手练胸动作，钻石俯卧撑可以在一开始给予胸肌很好的充血感。 动作要点： 注意双脚并拢，脚尖稳定怼地面。 注意髋关节的稳定，尽量保证腿部以及身体呈一条直线。 腹部核心肌群需要全程用力，尽量保证脊柱的中立。 整体动作需要尽量放慢，下降时要抵抗万有引力，上升时要抵抗身体的惯性。重点是胸部肌肉的感受度。 下降到极限时下巴离地面距离要尽可能小。但是千万不要勉强，要保证肩部以及手肘动作不要变形。 火箭俯卧撑：每组数量15，做不到15的就做到极限。一共3组。组间休息90秒。 这是普通俯卧撑的升级强化版，额外强化了对于上胸部的刺激。 动作要点： 注意双脚并拢，双腿伸直，前脚掌稳定怼地面。 髋关节的角度需要固定在120度左右，需要借助下背及核心力量保证腰部和臀部全程稳定避免受伤。（可以参考罗马尼亚硬拉时腰部以及脊椎的位置） 整体动作需要尽量放慢，仔细感受上胸的收缩。（如果动作过快可能会磕歪门牙） 下降到极限时下巴离地面距离也要尽可能小，但同样不可勉强。 推荐在双拳下垫上两块绞干的小毛巾，增加水平方向上的摩擦力，可以更好的发力。 臂屈伸：每组数量12，做不到12的就做到极限。一共4组。组间休息90秒。 动作要点： 这个动作需要保证肩关节的稳定，不可耸肩。 挺胸抬头。 下降时一定要放慢动作，且不可过分下降，不然会给肩关节过大的压力。 Day 2：Back \u0026amp; Biceps 热身：着重注意背部，肩部以及颈部。热身时间不超过5分钟。 仰卧夹背：每组数量12，做不到12的就做到极限。一共3组。组间休息90秒。 这个动作主要训练上背部。 动作要点： 想要充分发挥训练效果的话，推荐在肌肉收缩到顶峰的时候停留2秒。 双腿弯曲，双脚稳定踩在地面。 仅仅利用上背部肌肉发力使身体抬起，腹部核心肌群需要出力保持脊柱不弯曲。 直臂下拉徒手版：每组数量12，做不到12的就做到极限。一共3组。组间休息90秒。 这个动作可以训练到中背部以及背阔肌。 动作要点： 做这个动作有一个前提是地板必须光滑。个人经验是双脚各踩半张A4纸，可以大大减少摩擦力。同时双手洗一下并擦干，再做这个动作可以大大增加手掌和地面的摩擦力。 双臂需要伸直以避免二头肌借力。 肩关节需要稳定住，不然在收缩至顶峰的时候肩膀容易拉伤。 Superman：每组数量12，做不到12的就做到极限。一共3组。组间休息90秒。 这个动作对于下背部的刺激十分到位，而且避免了卷腹。 和仰卧夹背一样，推荐在肌肉收缩到顶峰的时候停留2秒。让超人多飞一会。 Day 3：Hips \u0026amp; Legs \u0026amp; Shoulders 热身：着重注意大腿，腰部，肩膀，斜方肌以及颈部。 无负重深蹲：主要看臀腿肌群的感受度，不超过20次下蹲。一共3组，组间休息90秒。 动作要点： 两脚距离稍比臀宽，脚尖稍稍朝外，身体重量平均分配在两脚掌，保持后背挺直 身体下降时，膝盖不超过脚尖的垂直高度，臀部的往下就像是往板凳上坐一样 与此同时将双手打直往前，维持在胸部的高度 往下时尽全力，注意保持挺胸，后背挺直，逐渐检查自己的膝盖不超过脚尖 臀桥：每组15下，一共3组，组间休息90秒。 动作要点： 注意双臂贴合地面，脚后跟怼地。 同样注意下背部及脊椎的位置，尽量保持中立位（不要驼背）。 肩膀保持稳定不参与发力。 最高点躯干与大腿在同一直线。 顶峰停留2秒。 箭蹲跳：每组90秒，一共三组，休息30秒。 动作要点： 注意膝盖不要触及地面。 动作不宜过快，标准至上。 注意“跳”和“蹲”是两个分开但是连贯的动作。不要混淆了。 单臂侧平举：每侧 RM 8-12，一共4组（两侧算一组） 这个动作可以用到哑铃或者弹力带，也可以请出我们的书包，或者一大包垃圾。 动作要点： 手臂不需要完全伸直，运动过程中手肘朝向后上方，这样可以增加运动路径。 由于是单侧动作，核心肌群需要发力以稳定身体平衡。 动作不宜过快，特别当你拿的重物是书包，过快容易晃来晃去。 Diet BreakFast 6：30 三个鸡蛋 + 馒头 + 豆浆 Extra meal 9：00 牛奶 + 咖啡 + 坚果 Lunch 11：00 三两米饭 + 蔬菜（西兰花）+ 鱼肉 or 鸡胸肉 or 牛肉 Extra meal 2：30 燕麦 + 玉米 or 红薯 + 香蕉 Dinner 5：00 三两米饭 + 蔬菜（西兰花）+ 鱼肉 or 鸡胸肉 or 牛肉 Extra meal 9：00 燕麦 + 全麦面包 + 香蕉 Vedio 【街健之路1】街头健身全攻略！新手怎么开始街健？如何变成街健大神？！ ","permalink":"https://xancoding.cn/posts/2023-04-30-09-33-09/","summary":"采取三分化训练模式，意思是三天以内训练全身，中间也可以比较自由的加入休息日 Day 1：Chest \u0026amp; Triceps 热身：着重注意胸部肩部颈部以及下背部，热身时间","title":"Fitness program"},{"content":"当使用 sort函数 和 Priority_queue优先队列 时， Container 中的元素会被自动排序\n当待排列的元素为一个对象时，我们既可以通过自定义比较函数，也可以通过重载运算符来达到目的。\n下面我们对 Object 的讨论都基于下述 Person 类\nclass Person { public: string name; int age; Person(string name, int age) { this-\u0026gt;name = name; this-\u0026gt;age = age; } }; Sort函数 重载运算符 当 Container 中的元素是基本数据类型时，使用 less 是升序排序，使用 greater 是降序排序\n下面👇对元素为 Object 的情况作详细说明\nless sort函数在默认情况下使用std::less作为比较函数类\nsort(people.begin(), people.end()); 而std::less需要重载小于号\u0026lt;运算符：\nclass Person { ... bool operator\u0026lt;(const Person \u0026amp;p) const { return this-\u0026gt;age \u0026lt; p.age; } ... } 经过上述的重载后，sort 会将元素按 age 升序排序\n括号内的 const 表示其修饰的参数为常量，在函数内不能修改该参数\n括号外的 const 表示该函数为常成员函数，在函数内不能需修改成员变量\n如果我们把函数体内的 \u0026lt; 替换为 \u0026gt;，元素将会按 age 降序排序\ngreater 还可以使用std::greater作为比较函数类\nsort(people.begin(), people.end(), greater\u0026lt;\u0026gt;()); 那么就需要重载大于号\u0026gt;运算符：\nclass Person { ... bool operator\u0026gt;(const Person \u0026amp;p) const { return this-\u0026gt;age \u0026gt; p.age; } ... } 经过上述的重载后，sort 会将元素按 age 降序排序\n自定义比较函数 bool cmp(const Person \u0026amp;p1, const Person \u0026amp;p2) { return p1.age \u0026lt; p2.age; } sort(people.begin(), people.end(), cmp); 经过上述操作后，元素将会按 age 升序排序\nPriority_queue堆优先队列 堆是一种数据结构，可以用数组或树实现，常用于实现优先队列、排序算法等。\n优先队列（priority queue）就是堆（heap）的一种应用。\nC++中的优先队列实现就是堆优先队列，底层使用堆来实现。\nstd::priority_queue是一个模板类，它的模板参数有三个，分别是：\nT：指定队列中存储的元素类型。 Container：指定用于存储元素的容器类型，默认是std::vector\u0026lt;T\u0026gt;。 Compare：指定用于比较元素优先级的比较函数类型，默认是std::less\u0026lt;T\u0026gt;。 在C++中，优先队列可以通过指定比较函数来控制是使用大根堆还是小根堆。\n默认情况下，使用 std::less\u0026lt;\u0026gt; 作为比较函数，则意味着使用大根堆，最大值会优先出队，大根堆(Max Heap)是一种完全二叉树,它满足两个特性:\n任意一个节点的值都大于等于其左右子节点的值 根节点的值最大 如果使用 std::greater\u0026lt;\u0026gt; 作为比较函数，则意味着使用小根堆，最小值会优先出队\n常用操作 pq.push(elem)：入队 pq.pop()：出队 pq.top()：返回堆顶元素 重载运算符 less priority_queue\u0026lt;T\u0026gt; pq：默认构造大根堆，需要重载 \u0026lt; class Person { ... bool operator\u0026lt;(const Person \u0026amp;p) const { return this-\u0026gt;age \u0026lt; p.age; } ... } 大根堆，最大值会先出队\ngreater priority_queue\u0026lt;T, vector\u0026lt;T\u0026gt;, greater\u0026lt;\u0026gt;\u0026gt; pq：构造最小堆，需要重载 \u0026gt; class Person { ... bool operator\u0026gt;(const Person \u0026amp;p) const { return this-\u0026gt;age \u0026gt; p.age; } ... } 小根堆，最小值会先出队\n","permalink":"https://xancoding.cn/posts/2023-04-24-14-17-47/","summary":"当使用 sort函数 和 Priority_queue优先队列 时， Container 中的元素会被自动排序 当待排列的元素为一个对象时，我们既可以通过自定义比较函数，","title":"C++ Sort Function \u0026 Priority Queue"},{"content":"配速 330\u0026ndash;4m58s\n400\u0026ndash;5m41s\n赛前 赛前48小时：充分补充碳水化合物和水分。将饮食中的碳水比例升高，多吃如：面包、面食、米饭和土豆等，还可以食用果汁、蜂蜜和能量棒等，来获取更多的碳水化合物。\n赛前12小时：比赛前一晚的晚餐，不要晚于7点进食，尽量选择以前常吃的食物，原则是低脂肪、高碳水，避免辛辣刺激的食物，以及高纤维食物。\n赛前2、3小时：比赛当天，早餐很重要！早餐尽量选择容易消化的食物，少吃产气食物（豆类等）；选择体积小的食物，否则滞留肠胃会带来负担；油脂和纤维素含量要少，否则会加速代谢引发便意，所以油条、油饼、炒饭、薯条之类的不适宜。\n赛前30分钟：如果有条件，补充水分300-500毫升。由于盐丸消化需要时间，因此可以提前15~30分钟服用1粒盐丸\n赛中 赛中补给频率：跑步时补给的目标是维持血糖水平，减轻疲劳，避免撞墙的发生，跑者之间存在个体差距，相对来说每30-45分钟补给一次，比较适合大多数跑者。\n比赛开始后的30-45分钟吃下第一个能量胶或能量棒，之后每30-45分钟再吃。\n对于没有尝试过的跑者，可以将一次一包改为半包。\n此外，建议在服用能量胶的同时搭配水，以此避免可能出现脱水的风险。\n盐丸的补给同样要看气温以及跑者自己的身体状况，平均10km吃一颗，天气炎热可以缩短吃盐丸的间隔，反之就延长。\n赛后 完赛后的补给：\n比赛结束后，立即食用高碳水化合物的零食和适量的蛋白质，可以迅速进行糖原的补充，可选择运动饮料、水果或跑者爱吃的易消化吸收的零食。\n完赛2小时内，吃一顿富含碳水和蛋白质的食物，以充分补充糖原并重建肌肉。赛后大餐不宜吃辛辣、刺激性的食物，并且也不适宜饮酒，酒精会减少肌肉糖原合成和蛋白质的合成，对于身体的恢复产生负面影响。\n马拉松补给TIPS:\n任何比赛中的补给都应该是熟悉的 无论是赛前、赛中还是赛后，都不要去尝试自己不熟悉的食物。也就是，尽量保证所有的饮食都是经过自己身体曾经验证过的；\n早餐控制6-7成饱 早餐吃得过饱会增加身体负担，比赛当天吃6到7成饱就足够了。通常比赛日选手可能会有额外的能量食品，因而在能量摄入上，不用过于担心会不够，质＞量；\n减少脂肪和纤维 在比赛当日，尽量减少高纤维和脂肪含量多的食物，容易引起胃部不适，并可能增加上厕所的机会；\n不要等到口渴才喝水 感到口渴的时候，身体就已经脱水了，比赛中即便不感到口渴，在水站也可以稍微喝一点水。从5公里开始，每个水站都可以小抿一口；\n进入水站的正确姿势 进入和离开水站的时候可以做个简单的手势，警示后面选手你会减速、进入水站，同时要向后观察，在没有和别人有冲突的前提下离开主赛道进入水站；\n减少每次补给摄入的量 比赛中，一来身体会加大对食物的渴求，二来消化吸收能力较差，这样很容易吃太多，又增加胀痛、恶心、呕腹泻等肠胃问题；\n能量胶需伴水服用 多数能量胶都要求，在食用时需要150-250ml的水，才能让它更好的发挥效用，也避免对肠胃过度刺激。最佳饮用方法便是，在每次看到水站前完成能量胶摄入，而后进站喝水；\n比赛中少吃这些食物 生活中常吃的饼干、坚果、面包等碳水补充的食物，吃完后需要较长时间消化，因此在比赛的补给中要少吃这类食物，补给效率低且负担大；\n赛后补充越及时，恢复越快 比赛结束后身体的恢复才刚刚开始，这时候补糖、补水、补盐越及时，体能恢复越快。赛后半个小时内尽快补充，恢复效果要远好过数小时后再大吃大喝。\n","permalink":"https://xancoding.cn/posts/2023-04-02-18-00-40/","summary":"配速 330\u0026ndash;4m58s 400\u0026ndash;5m41s 赛前 赛前48小时：充分补充碳水化合物和水分。将饮食中的碳水比例升高，多吃如：面包、面食、米饭和土豆等，还可以食用果汁、蜂蜜和能量棒等","title":"全马准备工作"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-01-26-11-14-43/","summary":"\u003c!DOCTYPE html\u003e","title":"烤红薯 \u0026 烤芋头"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-01-23-22-40-50/","summary":"\u003c!DOCTYPE html\u003e","title":"烧烤"},{"content":"\u003c!DOCTYPE html\u003e ","permalink":"https://xancoding.cn/posts/2023-01-18-12-29-48/","summary":"\u003c!DOCTYPE html\u003e","title":"永嘉电视塔"},{"content":"计算机系统基础(一)——程序的表示、转换与链接 原码\u0026amp;移码\u0026amp;补码 原码 最高位放符号位，1 表示负 定点小数，用来表示浮点数的尾数 移码 真值加上一个偏置值 bias， bias 常为 2n - 1 or 2n - 1 - 1 (如 IEEE 754) 定点整数，用来表示浮点数的阶 移码的本意是为了方便两个数作比较 补码 假设补码有 n 位，则：x补 = 2n + x 数值为正数时，其值大小就是原码；为负时，其值的大小就是各位取反再加 1 补码表示带符号整数 补码的出现是为了解决计算机的减法运算问题 求补码的真值——简便求法 符号为 0 ，则为正数，数值部分相同 符号为 1，则为负数，数值各位取反，末位加 1 各位取反，末位加 1 简便做法：从后往前看，找到第一个 1 ，将它前面的所有位取反 浮点数—— IEEE754 标准 数符 + 阶码 + 尾数 Float 1 + 8 + 23 SP ： (-1) s * (1 + Significand) * 2 (Exponent - 127) Double 1 + 11 + 52 DP ： (-1) s * (1 + Significand) * 2 (Exponent - 1023) 数符 Sign bit 1 表示负数 阶码 Exponent 规格化阶码范围为 0000 0001(-126) —— 1111 1110(127) (single) bias 为 127(single) 1023(double) 规格化阶范围为 1——254 (single) 全 0 和全 1 用来表示特殊值 为避免混淆，用阶码表示阶的编码，用阶或指数表示阶码的值 尾数 Significand 规格化尾数最高位总是 1 ，所以隐含表示，省 1 位，小数点前总是 1 特殊数的表示 (single) 0 阶码：all zeros 尾数：all zeros +0：0 00000000 00000000000000000000000 -0：1 00000000 00000000000000000000000 ∞ 阶码：all ones 尾数：all zeros +∞：0 11111111 00000000000000000000000 -∞：1 11111111 00000000000000000000000 浮点数除以 0 的结果是 ∞ ，而不是溢出异常(整数除以 0 为异常) NaN ( Not a Number ) 阶码：all ones 尾数：nonzeros 可帮助调试程序 非规格化数 Denorms 阶码：all zeros 尾数：nonzeros 用于表示 0 与规格化数间的 Gap SP ： (-1) s * (0.xxxx\u0026hellip;xxx) * 2 -126 为了让非规格化单精度浮点数能够平缓过渡到规格化单精度浮点数，所以取 2 -126 当输入数据为不可表示数时，机器将其转换为最邻近的可表示数 汉字内码\u0026amp;ASCII码 ASCII码为 7 位编码 Ex：汉字 \u0026quot; 大 \u0026quot; 在码表中位于第 20 行、第 83 列。因此区位码为 0010100 1010011 ，在区、位码上各加 32 得到两个字节编码（GB2312国标码），即 00110100 01110011B = 3473H 。前面的 34 H 和 字符 4 的 ACSII 的最高位相同，后面的 73H 和字符 s 的 ACSII 码相同。但是，将每个字节的最高位各设为 1 后，就得到其内码： B4F3H ( 0110100 11110011B )，因而不会和 ASCII 码混淆 逻辑电路 异或： n 个数做异或运算，若有奇数个 1 ，则输出 1 推荐阅读 # 原码、反码、补码 计算机系统基础(一)——程序的表示、转换与链接 计算机系统基础(二)——异常、中断和输入/输出 计算机系统基础(三)——程序的执行和存储访问 以 IA-32 + Linux + C + gcc 为平台 【精校中英字幕】2015 CMU 15-213 CSAPP 深入理解计算机系统 《深入理解计算机系统（原书第3版）》CSAPP ","permalink":"https://xancoding.cn/posts/2022-11-15-21-37-17/","summary":"计算机系统基础(一)——程序的表示、转换与链接 原码\u0026amp;移码\u0026amp;补码 原码 最高位放符号位，1 表示负 定点小数，用来表示浮点数的尾数 移码","title":"计算机系统基础"},{"content":"Positive Attitude 排除不必要的干扰 摆正心态：从来都没有什么捷径，要打好基础。 多肯定自己 How to start? 带目的、带问题 的学习：在开始一个新东西的学习时，先问问自己几个问题：我为什么要学它？我需要学到什么程度？ 在学习一个新东西时，要先对其知识体系有个大致的了解，先有了全面的认识之后，再对细枝末节做深入的了解。当然，对细枝末节的了解，也是要有优先级之分的 在开始之前，准备工作是必不可少的。你需要尽可能的找到你所需要的所有资源，可以从问答论坛、搜索引擎、好友推荐等等途径，主要是筛选学习过程中所要读的书籍，包括入门以及深入学习的书籍 阅读书籍也不能采取从头看到尾的做法，而是根据自己的情况，做一些取舍。同时看多本书籍也是不错的选择，它们往往会给你带来不一样的启发 还要学会边学边做，通过一些具体的项目带动学习。这在学习技术方面的知识时，尤其重要。毕竟，你学习它，为的是最后的应用 学习应该是阶梯式的，要懂得循序渐进，不能一开始就是困难模式。这不仅会打击自己的自信心，也不利于后续的学习 以文字媒介代替视频媒介，即使是视屏媒介，也尝试去搜索文字稿 How to check the mastery? 你要先能在脑子里有个清楚的脉络，多多问自己问题，从 WHY 到 HOW，再到 WHY。发现自己卡壳的地方，要借助搜索引擎、书籍或是别的途径及时解决 写下来：知识点可能会很杂很乱，有时候做一个知识导图可以很好的帮助理解。过一段时间，当因为不怎么用到某一个知识点而忘得差不多时，你自己写的文字或者做的图，可以很好的帮助你回忆起来——前提是这是你经过思考的出的，而不只是复制粘贴——那将毫无用处 讲出来：你可以跟别人（也可以自己跟自己讲）将你最近学到的东西。通过语言的形式，用嘴讲出来（一定是用嘴讲，而不只是停留在脑子里想）。每当这个时候，你都会意识到自己以为掌握的东西，实际上并没有。多数时候，你会讲述的很混乱。但不必灰心，多尝试尝试，自然会理顺的。当你可以流利的讲出来时，自然就说明它已经成为了你自己的东西 Key 多实践\n多交流\n多动笔（言简意赅）\n推荐阅读 为啥俺很少看视频？——兼谈“视频”与“文本”在认知心理学方面的差异 为啥俺不常用微博？——兼谈时间管理心得 为啥俺要写这个博客——动机的自我分析 ","permalink":"https://xancoding.cn/posts/2022-11-14-15-56-45/","summary":"Positive Attitude 排除不必要的干扰 摆正心态：从来都没有什么捷径，要打好基础。 多肯定自己 How to start? 带目的、带问题 的学习：在开始一个新东西的学习时，先问问自己几个","title":"Self-study"},{"content":" AcWing Web 应用课 | Colopen\u0026rsquo;s blog AcWing Web 应用课 HTML 基础标签 CSS JavaScript React Vue3 MDN官方文档 Web 入门 HTML —— 构建 Web CSS —— 设计Web JavaScript —— 用户端动态脚本 React 入门 Vue 入门 Canvas 教程 怪异英文生成器 生成比较好看的英文字体，支持复制粘贴 Color Hunt 设计师和艺术家的调色板 Game-icons 游戏图标在线存储库 VSCode 自动生成缺省的 HTML 代码框架 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 输入！，接着输入 tab 键，自动生成缺省的 HTML 代码框架 再按三下 tab 键，光标会移动到 \u0026lt;body\u0026gt; 与 \u0026lt;/body\u0026gt; 之间的空行 KOF KOF AcWing Web 应用课 | 中期项目——拳皇（上） | Vedio AcWing Web 应用课 | 中期项目——拳皇（下） | Vedio 基础操作 操作如下： 角色一: w 跳 a 左移 d 右移 j 拳击 角色二: ↑ 跳 ← 左移 → 右移 1 拳击 文件结构 |-- README.md |-- static | |-- css | | `-- base.css | |-- images | | |-- background | | | `-- 0.gif | | `-- player | | `-- kyo | | |-- 0.gif | | |-- 1.gif | | |-- 2.gif | | |-- 3.gif | | |-- 4.gif | | |-- 5.gif | | `-- 6.gif | `-- js | |-- ac_game_object | | `-- base.js | |-- base.js | |-- controller | | `-- base.js | |-- game_map | | `-- base.js | |-- player | | |-- base.js | | `-- kyo.js | `-- utils | `-- gif.js `-- templates `-- index.html 整体架构 逻辑结构 Retrieved from：https://www.acwing.com/solution/content/139831/ HTML templates/index.html\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta http-equiv=\u0026#34;X-UA-Compatible\u0026#34; content=\u0026#34;IE=edge\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;KOF\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;../static/css/base.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;kof\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import {KOF} from \u0026#39;../static/js/base.js\u0026#39;; let kof = new KOF(\u0026#39;kof\u0026#39;); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; CSS css/base.css\n#kof { width: 1280px; height: 720px; background-image: url(\u0026#39;../images/background/0.gif\u0026#39;); background-size: 200% 100%; background-position: top; position: absolute; } #kof\u0026gt;.kof-head { width: 100%; height: 80px; position: absolute; top: 0; display: flex; align-items: center; } #kof\u0026gt;.kof-head\u0026gt;.kof-head-hp-0 { height: 40px; width: calc(50% - 60px); margin-left: 20px; border: white 5px solid; box-sizing: border-box; border-right: none; } #kof\u0026gt;.kof-head\u0026gt;.kof-head-timer { height: 60px; width: 80px; background-color: orange; border: white 5px solid; box-sizing: border-box; color: white; font-size: 30px; font-weight: 800; text-align: center; line-height: 50px; user-select: none; } #kof\u0026gt;.kof-head\u0026gt;.kof-head-hp-1 { height: 40px; width: calc(50% - 60px); border: white 5px solid; box-sizing: border-box; border-left: none; } #kof\u0026gt;.kof-head\u0026gt;.kof-head-hp-0\u0026gt;div { background-color: red; height: 100%; width: 100%; float: right; } #kof\u0026gt;.kof-head\u0026gt;.kof-head-hp-1\u0026gt;div { background-color: red; height: 100%; width: 100%; } #kof\u0026gt;.kof-head\u0026gt;.kof-head-hp-0\u0026gt;div\u0026gt;div { background-color: lightgreen; height: 100%; width: 100%; float: right; } #kof\u0026gt;.kof-head\u0026gt;.kof-head-hp-1\u0026gt;div\u0026gt;div { background-color: lightgreen; height: 100%; width: 100%; } JavaScript 逻辑结构 KOF js/base.js\nimport { GameMap } from \u0026#39;../js/game_map/base.js\u0026#39; import { Kyo } from \u0026#39;../js/player/kyo.js\u0026#39;; export class KOF { constructor(id) { this.$kof = $(\u0026#39;#\u0026#39; + id); this.game_map = new GameMap(this); this.players = [ new Kyo(this, { id: 0, x: 200, y: 0, width: 120, height: 200, color: \u0026#39;blue\u0026#39; }), new Kyo(this, { id: 1, x: 900, y: 0, width: 120, height: 200, color: \u0026#39;red\u0026#39; }) ] } } AcGameObject js/ac_game_object/base.js\nlet AC_GAME_OBJECTS = []; export class AcGameObject { constructor() { AC_GAME_OBJECTS.push(this); this.timedelta = 0; this.has_call_start = false; } start() { // 初始化 } update() { // 每一帧执行一次 } destory() { // 删除当前对象 for (let i in AC_GAME_OBJECTS) { if (AC_GAME_OBJECTS[i] === this) { AC_GAME_OBJECTS.splice(i, 1); break; } } } } let last_timestamp; // 上一次执行函数时的时刻 /** * @description 该函数每一帧执行一次 * @param {number} timestamp 当前执行函数时的时刻 */ let AC_GAME_OBJECTS_FRAME = (timestamp) =\u0026gt; { for (let obj of AC_GAME_OBJECTS) { if (!obj.has_call_start) { obj.start(); obj.has_call_start = true; } else { obj.timedelta = timestamp - last_timestamp; obj.update(); } } last_timestamp = timestamp; requestAnimationFrame(AC_GAME_OBJECTS_FRAME); } requestAnimationFrame(AC_GAME_OBJECTS_FRAME); Controller controller 控制器，读取玩家的输入 js/constroller/base.js export class Controller { // 手动实现键盘触发事件——当前按住的按键（效果不同于keydown） constructor($canvas) { this.$canvas = $canvas; this.pressed_keys = new Set(); // Set 对象允许你存储任何类型的唯一值 this.start(); } start() { let outer = this; this.$canvas.keydown(function(e){ // keydown：某个键是否被按住，事件会连续触发 outer.pressed_keys.add(e.key); }); this.$canvas.keyup(function(e){ // keyup：某个按键是否被释放 outer.pressed_keys.delete(e.key); }); } } GameMap js/game_map/base.js\nimport {AcGameObject} from \u0026#39;../ac_game_object/base.js\u0026#39; import { Controller } from \u0026#39;../controller/base.js\u0026#39;; export class GameMap extends AcGameObject { constructor(root) { super(); this.root = root; this.$canvas = $(\u0026#39;\u0026lt;canvas width=\u0026#34;1280\u0026#34; height=\u0026#34;720\u0026#34; tabindex=0\u0026gt;\u0026lt;/canvas\u0026gt;\u0026#39;); // 构造一个jQuery对象 其中，tabindex=\u0026#34;0\u0026#34;使\u0026lt;canvas\u0026gt;元素可以聚焦 this.ctx = this.$canvas[0].getContext(\u0026#39;2d\u0026#39;); // this.$canvas[0]是\u0026lt;canvas\u0026gt;元素的DOM对象 this.ctx用于画布的渲染 this.root.$kof.append(this.$canvas); this.$canvas.focus(); // 聚焦，使之可以获取输入 this.controller = new Controller(this.$canvas); // 加入血条 this.root.$kof.append($(` \u0026lt;div class=\u0026#34;kof-head\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;kof-head-hp-0\u0026#34;\u0026gt;\u0026lt;div\u0026gt;\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;kof-head-timer\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;kof-head-hp-1\u0026#34;\u0026gt;\u0026lt;div\u0026gt;\u0026lt;div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; `)); // 加入计时表 this.time_left = 60000; //单位：毫秒（因为定义的timedelta单位是ms） this.$timer = this.root.$kof.find(\u0026#39;.kof-head-timer\u0026#39;); } start() { } update() { this.update_time(); this.render(); } update_time() { this.time_left -= this.timedelta; if (this.time_left \u0026lt; 0) { // 时间到，游戏结束 this.time_left = 0; let [a, b] = this.root.players; if (a.status !== 6 \u0026amp;\u0026amp; b.status !== 6) { a.statu = b.status = 6; a.frame_current_cnt = b.frame_current_cnt = 0; a.vx = b.vx = 0; } } this.$timer.text(parseInt(this.time_left / 1000)); } render() { this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height); } } Player js/player/base.js\nimport { AcGameObject } from \u0026#39;../ac_game_object/base.js\u0026#39;; export class Player extends AcGameObject { constructor(root, info) { super(); this.root = root; this.id = info.id; this.x = info.x; this.y = info.y; this.width = info.width; this.height = info.height; this.color = info.color; this.direction = 1; this.vx = 0; this.vy = 0; this.speedx = 400; // 水平速度 this.speedy = -1000; // 跳跃初始速度 this.gravity = 50; this.ctx = this.root.game_map.ctx; this.pressed_keys = this.root.game_map.controller.pressed_keys; this.status = 3; // 0：静止， 1：向前，2：向后，3：跳跃，4：攻击，5：被攻击，6：死亡 随着项目的完善，动作会变的很多，这时用数组存储字符串代替this.status会更方便 this.animations = new Map(); // 存储GIF动画的每一帧 this.frame_current_cnt = 0; // 记录当前的帧数 this.hp = 100; this.$hp = this.root.$kof.find(`.kof-head-hp-${this.id}\u0026gt;div`); this.$hp_div = this.$hp.find(\u0026#39;div\u0026#39;); } start() { } update_control() { let w, a, d, j; if (this.id === 0) { w = this.pressed_keys.has(\u0026#39;w\u0026#39;); a = this.pressed_keys.has(\u0026#39;a\u0026#39;); d = this.pressed_keys.has(\u0026#39;d\u0026#39;); j = this.pressed_keys.has(\u0026#39;j\u0026#39;); } else { w = this.pressed_keys.has(\u0026#39;ArrowUp\u0026#39;); a = this.pressed_keys.has(\u0026#39;ArrowLeft\u0026#39;); d = this.pressed_keys.has(\u0026#39;ArrowRight\u0026#39;); j = this.pressed_keys.has(\u0026#39;1\u0026#39;); } if (this.status === 0 || this.status === 1) { // 静止状态 || 移动状态 if (j) { // 攻击 this.status = 4; this.vx = 0; this.frame_current_cnt = 0; } else if (w) { // 跳跃 if (d) { // 向右跳 this.vx = this.speedx; } else if (a) { // 向左跳 this.vx = -this.speedx; } else { // 垂直跳 this.vx = 0; } this.vy = this.speedy; this.status = 3; this.frame_current_cnt = 0; // 每次跳跃重新记录帧数，确保跳跃动画正常 } else if (d) { // 向右移动 this.vx = this.speedx; this.status = 1; } else if (a) { // 向左移动 this.vx = - this.speedx; this.status = 1; } else { // 静止 this.vx = 0; } } } update_move() { this.vy += this.gravity; this.x += this.vx * this.timedelta / 1000; this.y += this.vy * this.timedelta / 1000; // 确保两个角色不会重叠 a 是自己、b 是对手 // let [a, b] = this.root.players; // if (a !== this) [a,b] = [b, a]; // let r1 = { // x1: a.x, // y1: a.y, // x2: a.x + a.width, // y2: a.x + a.height, // }; // let r2 = { // x1: b.x, // y1: b.y, // x2: b.x + b.width, // y2: b.x + b.height, // }; // if (this.is_collusion(r1, r2)) { // b.x += this.vx * this.timedelta / 1000 / 2; // b.y += this.vy * this.timedelta / 1000 / 2; // a.x -= this.vx * this.timedelta / 1000 / 2; // a.y -= this.vy * this.timedelta / 1000 / 2; // if (this.status === 3) this.status = 0; // } // 落到平地上后静止 if (this.y \u0026gt; 450) { this.y = 450; this.vy = 0; if (this.status === 3) this.status = 0; // 因为任何时刻都有重力施加，不加这一句会导致状态只有静止状态 } // 不能超出左右边界 if (this.x \u0026lt; 0) { this.x = 0; } else if (this.x + this.width \u0026gt; this.root.game_map.$canvas.width()) { this.x = this.root.game_map.$canvas.width() - this.width; } } update_direction() { // 确保两个角色始终相对 if (this.status === 6) return; let players = this.root.players; if (players[0] \u0026amp;\u0026amp; players[1]) { let me = this, you = players[1 - this.id]; if (me.x \u0026lt; you.x) me.direction = 1; else me.direction = -1; } } is_collusion(r1, r2) { // 判断两个矩阵是否有交集 if (Math.max(r1.x1, r2.x1) \u0026gt; Math.min(r1.x2, r2.x2)) return false; if (Math.max(r1.y1, r2.y1) \u0026gt; Math.min(r1.y2,r2.y2)) return false; return true; } is_attack() { if (this.status === 6) return; // 已经倒地，无法再被攻击 this.status = 5; this.frame_current_cnt = 0; this.hp = Math.max(this.hp - 10, 0); this.$hp_div.animate({ // 血条减少，渐变 width: this.$hp.parent().width() * this.hp / 100, }, 350); this.$hp.animate({ // 血条减少，渐变 width: this.$hp.parent().width() * this.hp / 100, }, 600); if (this.hp \u0026lt;= 0) { this.status = 6; this.frame_current_cnt = 0; this.vx = 0; } } update_attack() { // 判定是否被攻击到 if (this.status === 4 \u0026amp;\u0026amp; this.frame_current_cnt === 18) { // 第18帧时动画挥出拳，判断此时是否拳头与对方有碰撞 let me = this, you = this.root.players[1 - this.id]; let r1; // 攻击判定矩形 let r2; // 敌方人物矩形 if (this.direction \u0026gt; 0) { r1 = { x1: me.x + 120, y1: me.y + 40, x2: me.x + 120 + 100, y2: me.y + 40 + 20, } } else { r1 = { x1: me.x + me.width - 120 - 100, y1: me.y + 40, x2: me.x + me.width - 120 - 100 + 100, y2: me.y + 40 + 20, } } r2 = { x1: you.x, y2: you.y, x2: you.x + you.width, y2: you.y + you.height }; if (this.is_collusion(r1, r2)) { you.is_attack(); } } } update() { this.update_attack(); this.update_direction(); this.update_control(); this.update_move(); this.render(); } render() { let status = this.status; if (this.status === 1 \u0026amp;\u0026amp; this.direction * this.vx \u0026lt; 0) status = 2; // 后退状态 let obj = this.animations.get(status); if (obj \u0026amp;\u0026amp; obj.loaded) { // GIF 已经加载完成 if (this.direction \u0026gt; 0) { // 正方向 let k = parseInt(this.frame_current_cnt / obj.frame_rate) % obj.frame_cnt; // 通过obj.frame_rate控制渲染动画的速率，方便控制动画，而不只是单纯的每一帧都渲染一次 let image = obj.gif.frames[k].image; this.ctx.drawImage(image, this.x, this.y + obj.offset_y, image.width * obj.scale, image.height * obj.scale); } else { // 反方向 通过调整坐标系来翻转方向 this.ctx.save(); this.ctx.scale(-1, 1); this.ctx.translate(-this.root.game_map.$canvas.width(), 0); let k = parseInt(this.frame_current_cnt / obj.frame_rate) % obj.frame_cnt; let image = obj.gif.frames[k].image; this.ctx.drawImage(image, this.root.game_map.$canvas.width() - this.width - this.x, this.y + obj.offset_y, image.width * obj.scale, image.height * obj.scale); // 不同于正方向时的渲染，因为此时坐标系改变，需要在对称的位置渲染 this.ctx.restore(); } } if (status === 4 || status === 5 || status === 6) { // 确保不会一直循环GIF if (this.frame_current_cnt === obj.frame_rate * (obj.frame_cnt - 1)) { // 确保此时已经播放完一次GIF动画 if (status === 6) { // 死亡倒地不起，这里的 -- 和 下面的 ++ 相抵消，使之在最后一帧不再变化 this.frame_current_cnt--; } else { this.status = 0; } } } this.frame_current_cnt++; } } js/player/kyo.js\nimport { Player } from \u0026#34;../player/base.js\u0026#34;; import {GIF} from \u0026#39;../utils/gif.js\u0026#39; export class Kyo extends Player { constructor(root, info) { super(root, info); this.init_animations(); // 初始化动画 } init_animations() { let outer = this; let offsets = [0, -22, -22, -150, 0, 0, 0]; // 偏移量 不同的动画高度不同，因此需要借助竖直方向上的偏移量将他们调整至同一水平面 for (let i = 0; i \u0026lt; 7; ++ i) { // 7个动作 let gif = GIF(); gif.load(`/static/images/player/kyo/${i}.gif`); this.animations.set(i, { // 动画 gif: gif, frame_cnt: 0, // GIF帧数 frame_rate: 5, // 每5帧过渡一次 offset_y: offsets[i], // y方向偏移量 loaded: false, // 是否加载完成 scale: 2, // 放大2倍 }); gif.onload = function() { // 加载完成 let obj = outer.animations.get(i); obj.frame_cnt = gif.frames.length; obj.loaded = true; if (i === 3) { // 调整跳跃时GIF播放速率 obj.frame_rate = 4; } } } } } GIF Loading and playing GIF image to canvas 把玩家的GIF动画渲染在canvas上 js/utils/gif.js\nconst GIF = function () { // **NOT** for commercial use. var timerID; // timer handle for set time out usage var st; // holds the stream object when loading. var interlaceOffsets = [0, 4, 2, 1]; // used in de-interlacing. var interlaceSteps = [8, 8, 4, 2]; var interlacedBufSize; // this holds a buffer to de interlace. Created on the first frame and when size changed var deinterlaceBuf; var pixelBufSize; // this holds a buffer for pixels. Created on the first frame and when size changed var pixelBuf; const GIF_FILE = { // gif file data headers GCExt: 0xF9, COMMENT: 0xFE, APPExt: 0xFF, UNKNOWN: 0x01, // not sure what this is but need to skip it in parser IMAGE: 0x2C, EOF: 59, // This is entered as decimal EXT: 0x21, }; // simple buffered stream used to read from the file var Stream = function (data) { this.data = new Uint8ClampedArray(data); this.pos = 0; var len = this.data.length; this.getString = function (count) { // returns a string from current pos of len count var s = \u0026#34;\u0026#34;; while (count--) { s += String.fromCharCode(this.data[this.pos++]) } return s; }; this.readSubBlocks = function () { // reads a set of blocks as a string var size, count, data = \u0026#34;\u0026#34;; do { count = size = this.data[this.pos++]; while (count--) { data += String.fromCharCode(this.data[this.pos++]) } } while (size !== 0 \u0026amp;\u0026amp; this.pos \u0026lt; len); return data; } this.readSubBlocksB = function () { // reads a set of blocks as binary var size, count, data = []; do { count = size = this.data[this.pos++]; while (count--) { data.push(this.data[this.pos++]); } } while (size !== 0 \u0026amp;\u0026amp; this.pos \u0026lt; len); return data; } }; // LZW decoder uncompressed each frames pixels // this needs to be optimised. // minSize is the min dictionary as powers of two // size and data is the compressed pixels function lzwDecode(minSize, data) { var i, pixelPos, pos, clear, eod, size, done, dic, code, last, d, len; pos = pixelPos = 0; dic = []; clear = 1 \u0026lt;\u0026lt; minSize; eod = clear + 1; size = minSize + 1; done = false; while (!done) { // JavaScript optimisers like a clear exit though I never use \u0026#39;done\u0026#39; apart from fooling the optimiser last = code; code = 0; for (i = 0; i \u0026lt; size; i++) { if (data[pos \u0026gt;\u0026gt; 3] \u0026amp; (1 \u0026lt;\u0026lt; (pos \u0026amp; 7))) { code |= 1 \u0026lt;\u0026lt; i } pos++; } if (code === clear) { // clear and reset the dictionary dic = []; size = minSize + 1; for (i = 0; i \u0026lt; clear; i++) { dic[i] = [i] } dic[clear] = []; dic[eod] = null; } else { if (code === eod) { done = true; return } if (code \u0026gt;= dic.length) { dic.push(dic[last].concat(dic[last][0])) } else if (last !== clear) { dic.push(dic[last].concat(dic[code][0])) } d = dic[code]; len = d.length; for (i = 0; i \u0026lt; len; i++) { pixelBuf[pixelPos++] = d[i] } if (dic.length === (1 \u0026lt;\u0026lt; size) \u0026amp;\u0026amp; size \u0026lt; 12) { size++ } } } }; function parseColourTable(count) { // get a colour table of length count Each entry is 3 bytes, for RGB. var colours = []; for (var i = 0; i \u0026lt; count; i++) { colours.push([st.data[st.pos++], st.data[st.pos++], st.data[st.pos++]]) } return colours; } function parse() { // read the header. This is the starting point of the decode and async calls parseBlock var bitField; st.pos += 6; gif.width = (st.data[st.pos++]) + ((st.data[st.pos++]) \u0026lt;\u0026lt; 8); gif.height = (st.data[st.pos++]) + ((st.data[st.pos++]) \u0026lt;\u0026lt; 8); bitField = st.data[st.pos++]; gif.colorRes = (bitField \u0026amp; 0b1110000) \u0026gt;\u0026gt; 4; gif.globalColourCount = 1 \u0026lt;\u0026lt; ((bitField \u0026amp; 0b111) + 1); gif.bgColourIndex = st.data[st.pos++]; st.pos++; // ignoring pixel aspect ratio. if not 0, aspectRatio = (pixelAspectRatio + 15) / 64 if (bitField \u0026amp; 0b10000000) { gif.globalColourTable = parseColourTable(gif.globalColourCount) } // global colour flag setTimeout(parseBlock, 0); } function parseAppExt() { // get application specific data. Netscape added iterations and terminator. Ignoring that st.pos += 1; if (\u0026#39;NETSCAPE\u0026#39; === st.getString(8)) { st.pos += 8 } // ignoring this data. iterations (word) and terminator (byte) else { st.pos += 3; // 3 bytes of string usually \u0026#34;2.0\u0026#34; when identifier is NETSCAPE st.readSubBlocks(); // unknown app extension } }; function parseGCExt() { // get GC data var bitField; st.pos++; bitField = st.data[st.pos++]; gif.disposalMethod = (bitField \u0026amp; 0b11100) \u0026gt;\u0026gt; 2; gif.transparencyGiven = bitField \u0026amp; 0b1 ? true : false; // ignoring bit two that is marked as userInput??? gif.delayTime = (st.data[st.pos++]) + ((st.data[st.pos++]) \u0026lt;\u0026lt; 8); gif.transparencyIndex = st.data[st.pos++]; st.pos++; }; function parseImg() { // decodes image data to create the indexed pixel image var deinterlace, frame, bitField; deinterlace = function (width) { // de interlace pixel data if needed var lines, fromLine, pass, toline; lines = pixelBufSize / width; fromLine = 0; if (interlacedBufSize !== pixelBufSize) { // create the buffer if size changed or undefined. deinterlaceBuf = new Uint8Array(pixelBufSize); interlacedBufSize = pixelBufSize; } for (pass = 0; pass \u0026lt; 4; pass++) { for (toLine = interlaceOffsets[pass]; toLine \u0026lt; lines; toLine += interlaceSteps[pass]) { deinterlaceBuf.set(pixelBuf.subarray(fromLine, fromLine + width), toLine * width); fromLine += width; } } }; frame = {} gif.frames.push(frame); frame.disposalMethod = gif.disposalMethod; frame.time = gif.length; frame.delay = gif.delayTime * 10; gif.length += frame.delay; if (gif.transparencyGiven) { frame.transparencyIndex = gif.transparencyIndex } else { frame.transparencyIndex = undefined } frame.leftPos = (st.data[st.pos++]) + ((st.data[st.pos++]) \u0026lt;\u0026lt; 8); frame.topPos = (st.data[st.pos++]) + ((st.data[st.pos++]) \u0026lt;\u0026lt; 8); frame.width = (st.data[st.pos++]) + ((st.data[st.pos++]) \u0026lt;\u0026lt; 8); frame.height = (st.data[st.pos++]) + ((st.data[st.pos++]) \u0026lt;\u0026lt; 8); bitField = st.data[st.pos++]; frame.localColourTableFlag = bitField \u0026amp; 0b10000000 ? true : false; if (frame.localColourTableFlag) { frame.localColourTable = parseColourTable(1 \u0026lt;\u0026lt; ((bitField \u0026amp; 0b111) + 1)) } if (pixelBufSize !== frame.width * frame.height) { // create a pixel buffer if not yet created or if current frame size is different from previous pixelBuf = new Uint8Array(frame.width * frame.height); pixelBufSize = frame.width * frame.height; } lzwDecode(st.data[st.pos++], st.readSubBlocksB()); // decode the pixels if (bitField \u0026amp; 0b1000000) { // de interlace if needed frame.interlaced = true; deinterlace(frame.width); } else { frame.interlaced = false } processFrame(frame); // convert to canvas image }; function processFrame(frame) { // creates a RGBA canvas image from the indexed pixel data. var ct, cData, dat, pixCount, ind, useT, i, pixel, pDat, col, frame, ti; frame.image = document.createElement(\u0026#39;canvas\u0026#39;); frame.image.width = gif.width; frame.image.height = gif.height; frame.image.ctx = frame.image.getContext(\u0026#34;2d\u0026#34;); ct = frame.localColourTableFlag ? frame.localColourTable : gif.globalColourTable; if (gif.lastFrame === null) { gif.lastFrame = frame } useT = (gif.lastFrame.disposalMethod === 2 || gif.lastFrame.disposalMethod === 3) ? true : false; if (!useT) { frame.image.ctx.drawImage(gif.lastFrame.image, 0, 0, gif.width, gif.height) } cData = frame.image.ctx.getImageData(frame.leftPos, frame.topPos, frame.width, frame.height); ti = frame.transparencyIndex; dat = cData.data; if (frame.interlaced) { pDat = deinterlaceBuf } else { pDat = pixelBuf } pixCount = pDat.length; ind = 0; for (i = 0; i \u0026lt; pixCount; i++) { pixel = pDat[i]; col = ct[pixel]; if (ti !== pixel) { dat[ind++] = col[0]; dat[ind++] = col[1]; dat[ind++] = col[2]; dat[ind++] = 255; // Opaque. } else if (useT) { dat[ind + 3] = 0; // Transparent. ind += 4; } else { ind += 4 } } frame.image.ctx.putImageData(cData, frame.leftPos, frame.topPos); gif.lastFrame = frame; if (!gif.waitTillDone \u0026amp;\u0026amp; typeof gif.onload === \u0026#34;function\u0026#34;) { doOnloadEvent() }// if !waitTillDone the call onload now after first frame is loaded }; // **NOT** for commercial use. function finnished() { // called when the load has completed gif.loading = false; gif.frameCount = gif.frames.length; gif.lastFrame = null; st = undefined; gif.complete = true; gif.disposalMethod = undefined; gif.transparencyGiven = undefined; gif.delayTime = undefined; gif.transparencyIndex = undefined; gif.waitTillDone = undefined; pixelBuf = undefined; // dereference pixel buffer deinterlaceBuf = undefined; // dereference interlace buff (may or may not be used); pixelBufSize = undefined; deinterlaceBuf = undefined; gif.currentFrame = 0; if (gif.frames.length \u0026gt; 0) { gif.image = gif.frames[0].image } doOnloadEvent(); if (typeof gif.onloadall === \u0026#34;function\u0026#34;) { (gif.onloadall.bind(gif))({ type: \u0026#39;loadall\u0026#39;, path: [gif] }); } if (gif.playOnLoad) { gif.play() } } function canceled() { // called if the load has been cancelled finnished(); if (typeof gif.cancelCallback === \u0026#34;function\u0026#34;) { (gif.cancelCallback.bind(gif))({ type: \u0026#39;canceled\u0026#39;, path: [gif] }) } } function parseExt() { // parse extended blocks const blockID = st.data[st.pos++]; if (blockID === GIF_FILE.GCExt) { parseGCExt() } else if (blockID === GIF_FILE.COMMENT) { gif.comment += st.readSubBlocks() } else if (blockID === GIF_FILE.APPExt) { parseAppExt() } else { if (blockID === GIF_FILE.UNKNOWN) { st.pos += 13; } // skip unknow block st.readSubBlocks(); } } function parseBlock() { // parsing the blocks if (gif.cancel !== undefined \u0026amp;\u0026amp; gif.cancel === true) { canceled(); return } const blockId = st.data[st.pos++]; if (blockId === GIF_FILE.IMAGE) { // image block parseImg(); if (gif.firstFrameOnly) { finnished(); return } } else if (blockId === GIF_FILE.EOF) { finnished(); return } else { parseExt() } if (typeof gif.onprogress === \u0026#34;function\u0026#34;) { gif.onprogress({ bytesRead: st.pos, totalBytes: st.data.length, frame: gif.frames.length }); } setTimeout(parseBlock, 0); // parsing frame async so processes can get some time in. }; function cancelLoad(callback) { // cancels the loading. This will cancel the load before the next frame is decoded if (gif.complete) { return false } gif.cancelCallback = callback; gif.cancel = true; return true; } function error(type) { if (typeof gif.onerror === \u0026#34;function\u0026#34;) { (gif.onerror.bind(this))({ type: type, path: [this] }) } gif.onload = gif.onerror = undefined; gif.loading = false; } function doOnloadEvent() { // fire onload event if set gif.currentFrame = 0; gif.nextFrameAt = gif.lastFrameAt = new Date().valueOf(); // just sets the time now if (typeof gif.onload === \u0026#34;function\u0026#34;) { (gif.onload.bind(gif))({ type: \u0026#39;load\u0026#39;, path: [gif] }) } gif.onerror = gif.onload = undefined; } function dataLoaded(data) { // Data loaded create stream and parse st = new Stream(data); parse(); } function loadGif(filename) { // starts the load var ajax = new XMLHttpRequest(); ajax.responseType = \u0026#34;arraybuffer\u0026#34;; ajax.onload = function (e) { if (e.target.status === 404) { error(\u0026#34;File not found\u0026#34;) } else if (e.target.status \u0026gt;= 200 \u0026amp;\u0026amp; e.target.status \u0026lt; 300) { dataLoaded(ajax.response) } else { error(\u0026#34;Loading error : \u0026#34; + e.target.status) } }; ajax.open(\u0026#39;GET\u0026#39;, filename, true); ajax.send(); ajax.onerror = function (e) { error(\u0026#34;File error\u0026#34;) }; this.src = filename; this.loading = true; } function play() { // starts play if paused if (!gif.playing) { gif.paused = false; gif.playing = true; playing(); } } function pause() { // stops play gif.paused = true; gif.playing = false; clearTimeout(timerID); } function togglePlay() { if (gif.paused || !gif.playing) { gif.play() } else { gif.pause() } } function seekFrame(frame) { // seeks to frame number. clearTimeout(timerID); gif.currentFrame = frame % gif.frames.length; if (gif.playing) { playing() } else { gif.image = gif.frames[gif.currentFrame].image } } function seek(time) { // time in Seconds // seek to frame that would be displayed at time clearTimeout(timerID); if (time \u0026lt; 0) { time = 0 } time *= 1000; // in ms time %= gif.length; var frame = 0; while (time \u0026gt; gif.frames[frame].time + gif.frames[frame].delay \u0026amp;\u0026amp; frame \u0026lt; gif.frames.length) { frame += 1 } gif.currentFrame = frame; if (gif.playing) { playing() } else { gif.image = gif.frames[gif.currentFrame].image } } function playing() { var delay; var frame; if (gif.playSpeed === 0) { gif.pause(); return; } else { if (gif.playSpeed \u0026lt; 0) { gif.currentFrame -= 1; if (gif.currentFrame \u0026lt; 0) { gif.currentFrame = gif.frames.length - 1 } frame = gif.currentFrame; frame -= 1; if (frame \u0026lt; 0) { frame = gif.frames.length - 1 } delay = -gif.frames[frame].delay * 1 / gif.playSpeed; } else { gif.currentFrame += 1; gif.currentFrame %= gif.frames.length; delay = gif.frames[gif.currentFrame].delay * 1 / gif.playSpeed; } gif.image = gif.frames[gif.currentFrame].image; timerID = setTimeout(playing, delay); } } var gif = { // the gif image object onload: null, // fire on load. Use waitTillDone = true to have load fire at end or false to fire on first frame onerror: null, // fires on error onprogress: null, // fires a load progress event onloadall: null, // event fires when all frames have loaded and gif is ready paused: false, // true if paused playing: false, // true if playing waitTillDone: true, // If true onload will fire when all frames loaded, if false, onload will fire when first frame has loaded loading: false, // true if still loading firstFrameOnly: false, // if true only load the first frame width: null, // width in pixels height: null, // height in pixels frames: [], // array of frames comment: \u0026#34;\u0026#34;, // comments if found in file. Note I remember that some gifs have comments per frame if so this will be all comment concatenated length: 0, // gif length in ms (1/1000 second) currentFrame: 0, // current frame. frameCount: 0, // number of frames playSpeed: 1, // play speed 1 normal, 2 twice 0.5 half, -1 reverse etc... lastFrame: null, // temp hold last frame loaded so you can display the gif as it loads image: null, // the current image at the currentFrame playOnLoad: true, // if true starts playback when loaded // functions load: loadGif, // call this to load a file cancel: cancelLoad, // call to stop loading play: play, // call to start play pause: pause, // call to pause seek: seek, // call to seek to time seekFrame: seekFrame, // call to seek to frame togglePlay: togglePlay, // call to toggle play and pause state }; return gif; } export { GIF } 状态机 0：静止 1：移动 3：跳跃 4：攻击 MySpace MySpace AcWing Web 应用课 | Vue3——网站整体布局、用户动态页面 | Vedio AcWing Web 应用课 | Vue3——用户列表、登录、注册页面 | Vedio ","permalink":"https://xancoding.cn/posts/2022-11-02-15-49-03/","summary":"AcWing Web 应用课 | Colopen\u0026rsquo;s blog AcWing Web 应用课 HTML 基础标签 CSS JavaScript React Vue3 MDN官方文档 Web 入门 HTML —— 构建 Web CSS —— 设计Web JavaScript —— 用户端动态脚本 React 入门 Vue 入门 Canvas 教程 怪异英文生","title":"AcWing Web 应用课"},{"content":"Blog Blog 前前后后花了大概是有一个月的时间，把这个博客从零到有，再到功能的补充完善，到目前已经是一个很满意的状态，自我感觉投入的时间确实也是很值得的。建立这个博客，作为我对外输出的一个途径，也可以算是我的学习笔记的存放处，再加上我一些有感悟的点，想要记录下来的内容，都是写在这上面。 Obsidian 我的笔记记录工作，都是在 obsidian 上完成的，现在也是建立起了一个很方便的工作流，是我可以只用思考要写什么内容，其余的步骤已经可以完全交给自动化来完成了，诸如同步到github、编译博客的源文件再发表等等\nObsidian 快捷键 打开 Obsidian 编辑器，通过 ctrl + s 快捷键创建新博客 ctrl + d：删除当前文件 ctrl + t：打开新标签页 ctrl + w：关闭当前标签页 ctrl + o：切换或创建文件 ctrl + e：切换预览与编辑模式 flomo 浮墨笔记 在日常生活中，有碰到想法和灵感需要记录的时候，我会使用它进行一个快速的记录\n在想回顾时，可以方便知晓过去的想法 推荐阅读 什么是 Zettelkasten 卡片盒笔记法？ 卢曼：与卡片盒交流 我的知识管理工具和经验 我的 Obsidian 使用经验 不要再碎片化笔记了 - 关于笔记的思考 程序员的喵喵 | Obsidian 使用 【中文字幕】Zettelkasten笔记系统的搭建 | 手把手教学 | Zettelkasten in Obsidian ","permalink":"https://xancoding.cn/posts/2022-10-30-15-28-22/","summary":"Blog Blog 前前后后花了大概是有一个月的时间，把这个博客从零到有，再到功能的补充完善，到目前已经是一个很满意的状态，自我感觉投入的时间确实也是很值得","title":"Output message"},{"content":" AcWing Django 框架课 | Colopen\u0026rsquo;s blog AcWing Django 框架课 WarOfWarlock 搭建工具 HTML \u0026amp; CSS \u0026amp; JavaScript \u0026amp; Django 参考资料 AcWing Django 框架课 | Colopen\u0026rsquo;s blog AcWing Django框架课 Django 项目创建 2.1上课笔记 | 栎 2.1上课笔记 | Andrew1729 启动初始项目 django-admin startproject acapp：在当前目录下创建名为acapp的django项目 python3 manage.py runserver 0.0.0.0:8000：启动项目 打开settings.py，找到ALLOWED_HOSTS=[]，修改成ALLOWED_HOSTS=[\u0026quot;自己的服务器的公网IP\u0026quot;] 通过自己的服务器公网IP:8000 打开Django页面 创建管理员登录页面 在一级acapp文件夹下，python3 manage.py startapp XXX，XXX是可以自定义的app名，这里用game示例，这时候会多一个文件夹game，树形结构如图： |-- game | |-- __init__.py | |-- admin.py # 管理员页面 | |-- apps.py # 用的不多 | |-- migrations # 存储数据库 | | `-- __init__.py | |-- models.py # 定义网站里的数据库表 | |-- tests.py | `-- views.py # 视图，即函数 python3 manage.py migrate：将所有修改更新进数据库 创建一个 管理员用户： $ python3 manage.py createsuperuser \u0026gt; Username (leave blank to use \u0026#39;acs\u0026#39;): admin \u0026gt; Email address: \u0026gt; Password: 123456 \u0026gt; Password (again): 123456 \u0026gt; Superuser created successfully. 然后利用该 管理员用户 登录 admin 页面，即可成功登陆\n创建用户登录页面 game 下的各个文件作用 templates目录：管理 html 文件 urls目录：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数) views目录：管理 http 函数（接收浏览器请求，返回字符串至浏览器） models目录：管理数据库数据 static目录：管理静态文件 consumers目录：管理websocket函数 实现一个路由重定向 url 输入网址 -\u0026gt; acapp.urls -\u0026gt; game.urls -\u0026gt; game.views.index -\u0026gt; 展示页面 game.views\n这其中，HttpResponse()内部使用html的语法，返回的响应就直接用这个字符串作为页面，转换成html\nfrom django.http import HttpResponse def index(request): line1 = \u0026#39;\u0026lt;h1 style=\u0026#34;text-align: center\u0026#34;\u0026gt; 第一个网页 \u0026lt;/h1\u0026gt;\u0026#39; return HttpResponse(line1) game.urls\n这其中，path('PATH', function, name)的含义是，在用户访问网站的时候，如果是网站/game/PATH，就会调用function，名字为name，这是在/game/目录下的调用，所以这个PATH是在/game/的基础上的相对路径，所以他的绝对路径是网站/game/PATH\nfrom django.urls import path from game.views import index urlpatterns = [ path(\u0026#34;\u0026#34;, index, name=\u0026#34;index\u0026#34;), ] acapp.urls\n这其中，path('PATH', include('game.urls'))的含义是：在用户访问网站的时候，如果是网站/PATH，就会走到/game/urls，并根据/game/urls.py来跑路由，就是说，用户在访问网站/的时候，由于此时调用的函数是include('game.urls')，所以访问网站/相当于根据game/urls访问\nfrom django.contrib import admin from django.urls import path, include urlpatterns = [ path(\u0026#39;\u0026#39;, include(\u0026#39;game.urls\u0026#39;)), path(\u0026#39;admin/\u0026#39;, admin.site.urls), ] 然后直接打开 ip:socket 可以直接显示 index 返回的网页\n创建菜单界面 3. 创建菜单界面 | 讲义 3.1 上课笔记 | 大家好今天是 3.1 上课笔记 | 栎 构建项目框架 项目系统设计 menu：菜单页面 playground：游戏界面 settings：设置界面 项目文件结构 . |-- README.md |-- acapp | |-- __init__.py # 文件夹在加上 __init__.py 文件后，python 便可以通过 import 来引用该文件夹 | |-- asgi.py | |-- settings.py | |-- urls.py | `-- wsgi.py |-- db.sqlite3 |-- game | |-- __init__.py | |-- admin.py | |-- apps.py | |-- migrations | | `-- __init__.py | |-- models | | `-- __init__.py | |-- static | | |-- css | | | `-- game.css # 一般一个工程，只有一个 css 文件就足够了 | | |-- image | | | `-- menu | | | `-- background.gif | | `-- js | | |-- dist | | | `-- game.js | | `-- src | | `-- zbase.js # 总的 js 文件，命名以 z 开头会自动在字典序最后 | |-- templates | | `-- multiends | | `-- web.html | |-- tests.py | |-- urls | | |-- __init__.py | | |-- index.py | | |-- menu | | | |-- __init__.py | | | `-- index.py | | |-- playground | | | |-- __init__.py | | | `-- index.py | | `-- settings | | |-- __init__.py | | `-- index.py | `-- views | |-- __init__.py | |-- index.py | |-- menu | | `-- __init__.py | |-- playground | | `-- __init__.py | `-- settings | `-- __init__.py |-- manage.py `-- scripts `-- compress_game_js.sh js 文件管理 一般一个工程会有很多个 .js 源文件，为了加快网络的传输，也为了每次写新的 .js 文件不用每个 html 都额外引入一次\n考虑用一个 src 源文件夹来存储所有的 .js 源文件\n然后用 dist 文件夹来存放由 src 下所有源文件整合生成的一个目标 .js 文件\n这样既实现了快速传输的好处，也方便了后续编写 html 文件时，引入 .js 的便利\n创建一个脚本实现上述 整合 的功能 ~/acapp/scripts/compress_game_js.sh\n#! /bin/bash JS_PATH=/home/acs/acapp/game/static/js/ JS_PATH_DIST=${JS_PATH}dist/ JS_PATH_SRC=${JS_PATH}src/ find $JS_PATH_SRC -type f -name \u0026#39;*.js\u0026#39; | sort | xargs cat \u0026gt; ${JS_PATH_DIST}game.js html 文件管理 在 templates 文件夹下创建 menu、playground、settings、multiends 四个文件夹，用于存储三个模块和终端的 html 文件\n在 multiends 下创建 web.html 文件\n{% load static %} \u0026lt;!-- Django 中引入全局setting里的变量 static 的语法--\u0026gt; \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.acwing.com/static/jquery-ui-dist/jquery-ui.min.css\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 上述两句引入 jQuery 库 --\u0026gt; \u0026lt;!-- 使用引入的变量 static 的语法如下 --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{% static \u0026#39;css/game.css\u0026#39; %}\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;{% static \u0026#39;js/dist/game.js\u0026#39; %}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- 分别引入 css 文件和总的 js 文件 --\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body style=\u0026#34;margin: 0\u0026#34;\u0026gt; \u0026lt;div id=\u0026#34;ac_game_12345678\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function(){ let ac_game = new AcGame(\u0026#34;ac_game_12345678\u0026#34;) }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; views 视图管理 在 views 文件夹下新建三个模块的视图文件夹\n写一个 index.py 文件，目的是在 web 端被访问时，返回上面写的 web.html 文件\nfrom django.shortcuts import render def index(request): return render(request, \u0026#34;multiends/web.html\u0026#34;) urls 路由管理 /-- \u0026#34;\u0026#34; -- index / -- \u0026#34;menu/\u0026#34; -- menu.index / \u0026#34;\u0026#34; --\u0026gt; \u0026#34;game.url\u0026#34; --\u0026gt; / \\ -- \u0026#34;playground/\u0026#34; -- playground.index id:scoket -\u0026gt; \\-- \u0026#34;settings/\u0026#34; -- settings.index \\ \\ \u0026#34;/admin\u0026#34; -- 到达管理员页面 ~/acapp/acapp/urls.py\nfrom django.contrib import admin from django.urls import path, include urlpatterns = [ path(\u0026#39;\u0026#39;, include(\u0026#39;game.urls.index\u0026#39;)), path(\u0026#39;admin/\u0026#39;, admin.site.urls), ] ~/acapp/game/urls/index.py\nfrom django.urls import path, include from game.views.index import index urlpatterns = [ path(\u0026#34;\u0026#34;, index, name=\u0026#34;index\u0026#34;), path(\u0026#34;menu/\u0026#34;, include(\u0026#34;game.urls.menu.index\u0026#34;)), path(\u0026#34;playground/\u0026#34;, include(\u0026#34;game.urls.playground.index\u0026#34;)), path(\u0026#34;settings/\u0026#34;, include(\u0026#34;game.urls.settings.index\u0026#34;)) ] 网页渲染流程 根据用户的链接，首先进入acapp/urls.py，根据path再进入game/urls/index.py，再根据path进入下一层url或调用相对应的views中的index.py函数，函数接收参数，在网页端渲染templates/multiends下的web.html，html中有JS执行\n注意：本项目为前后端分离，即通过JS在client中渲染项目(动态生成页面)，而不是在server渲染项目\n修改全局配置 设置时区 修改项目的 UTC 时间为 CN 时间\n$ vim /acapp/settings.py ****** TIME_ZONE = \u0026#39;Asia/Shanghai\u0026#39; # 原来默认是 UTC ****** 添加配置文件 将新创建的 game 下的 apps.py 中的 GameConfig 加到 settings.py 下\n$ vim /acapp/settings.py ****** INSTALLED_APPS = [ \u0026#39;game.apps.GameConfig\u0026#39;, ...... ] ****** 声明将静态文件路径 STATIC_ROOT 和 MEDIA_ROOT\n$ vim /acapp/settings.py ****** import os ...... STATIC_ROOT = os.path.join(BASE_DIR, \u0026#39;static\u0026#39;) STATIC_URL = \u0026#39;/static/\u0026#39; MEDIA_ROOT = os.path.join(BASE_DIR, \u0026#39;media\u0026#39;) MEDIA_URL = \u0026#39;/media/\u0026#39; ****** 创建菜单 menu 界面 搭建菜单 menu 界面的框架 我们采用的 前后端分离式 开发，所有的 html 渲染都要求在前端完成\n开发流程就是，先在 html 里创建好一个有 id 的 div\n然后利用 js 文件，捕获到该 div，并进行 渲染\n/templates/multiends/web.html\n... \u0026lt;div id=\u0026#34;ac_game_12345678\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function(){ let ac_game = new AcGame(\u0026#34;ac_game_12345678\u0026#34;) }) \u0026lt;/script\u0026gt; ... js/src/zbase.js\nclass AcGame { constructor(id) { this.id = id; this.$ac_game = $(\u0026#39;#\u0026#39; + id); this.menu = new AcGameMenu(this); } } js/src/menu/zbase.js\nclass AcGameMenu { constructor(root) { this.root = root; this.$menu = $(` \u0026lt;div class=\u0026#34;ac-game-menu\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; `); this.root.$ac_game.append(this.$menu); } css/game.css\n.ac-game-menu { width: 100%; height: 100%; background-image: url(\u0026#39;/static/image/menu/background.gif\u0026#39;); background-size: 100% 100%; user-select: none; } 这里的 代码逻辑 如下：\nhtml 页面执行到 js 代码，利用 AcGame类 创建对象 ac_game 同时传递参数 div 的 id AcGame 开始执行构造函数，在构造函数中，捕获 html 标签，并利用 AcGameMenu类 创建对象 menu，并将整个对象作为参数下传 AcGameMenu 开始执行构造函数，然后创建 html 代码，加到捕获到的 html 代码下 最终成功渲染出背景图片 设置菜单 menu 页面的内容 主要内容就是在主页面中，显示：单人模式、多人模式、设置，三个按钮的选项 js/src/menu/zbase.js\nclass AcGameMenu { constructor(root) { this.root = root; this.$menu = $(` \u0026lt;div class=\u0026#34;ac-game-menu\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-menu-field\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode\u0026#34;\u0026gt; 单人模式 \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode\u0026#34;\u0026gt; 多人模式 \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode\u0026#34;\u0026gt; 设置 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; `); this.root.$ac_game.append(this.$menu); this.$single_mode = this.$menu.find(\u0026#39;.ac-game-menu-field-item-single-mode\u0026#39;); this.$multi_mode = this.$menu.find(\u0026#39;.ac-game-menu-field-item-multi-mode\u0026#39;); this.$settings_mode = this.$menu.find(\u0026#39;.ac-game-menu-field-item-settings-mode\u0026#39;); } } css/game.css\n.ac-game-menu { width: 100%; height: 100%; background-image: url(\u0026#39;/static/image/menu/background.gif\u0026#39;); background-size: 100% 100%; user-select: none; } .ac-game-menu-field { width: 20vw; position: relative; top: 40vh; left: 19vh; } .ac-game-menu-field-item { height: 7vh; width: 18vw; color: white; font-size: 6vh; font-style: italic; padding: 2vh; margin: 1vh 0; cursor: pointer; text-align: center; background-color: rgba(39, 21, 28, 0.6); border-radius: 10px; letter-spacing: 0.5vw; } .ac-game-menu-field-item:hover { transform: scale(1.2); transition: 100ms; } 添加 \u0026lsquo;单人模式\u0026rsquo; 监听函数 —— 打开游戏界面 功能 这里要实现的 逻辑：\n点击 \u0026lsquo;单人模式\u0026rsquo; 按钮触发 click 事件，随即触发监听函数，开始执行 关闭 menu 页面 打开 playground 页面 因此，我们先简易的实现一个 playground 页面，方便调试该功能 js/src/playground/zbase.js\nclass AcGamePlayground { constructor(root) { this.root = root; this.$playground = $(`\u0026lt;div\u0026gt;游戏界面\u0026lt;/div\u0026gt;`); this.hide(); this.root.$ac_game.append(this.$playground); this.start(); } start() { } show() { //打开 playground 界面 this.$playground.show(); } hide() { //关闭 playground 界面 this.$playground.hide(); } } 在实现监听函数功能之前，先在 /src/zbase.js 即主 js 文件下，利用 AcGamePlayground 类创建好 playground 对象\n这样我们就能在前端，渲染出两个界面了，分别是：menu 和 playground\njs/src/zbase.js\nclass AcGame { constructor(id) { this.id = id; this.$ac_game = $(\u0026#39;#\u0026#39; + id); this.menu = new AcGameMenu(this); // 把 playground 对象也建好，这样我们就同时有两个界面了 this.playground = new AcGamePlayground(this); this.start(); } start() { } } 然后，我们开始实现 ac-game-menu-field-item-single-mode 标签的 click 事件的监听函数\n其功能之前讲过了，就是关闭 menu 页面，打开 playground 页面\njs/src/menu/zbase.js\nclass AcGameMenu { constructor(root) { this.root = root; this.$menu = $(` \u0026lt;div class=\u0026#34;ac-game-menu\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-menu-field\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode\u0026#34;\u0026gt; 单人模式 \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode\u0026#34;\u0026gt; 多人模式 \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode\u0026#34;\u0026gt; 设置 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; `); this.root.$ac_game.append(this.$menu); this.$single_mode = this.$menu.find(\u0026#39;.ac-game-menu-field-item-single-mode\u0026#39;); this.$multi_mode = this.$menu.find(\u0026#39;.ac-game-menu-field-item-multi-mode\u0026#39;); this.$settings_mode = this.$menu.find(\u0026#39;.ac-game-menu-field-item-settings-mode\u0026#39;); this.start(); } start() { this.add_listening_events(); } add_listening_events() { let outer = this; this.$single_mode.click(function(){ outer.hide(); // 关闭主页面 outer.root.playground.show(); // 打开游戏界面 }); } show() { //显示menu界面 this.$menu.show(); } hide() { //隐藏menu界面 this.$menu.hide(); } } 创建游戏界面 4.1 上课笔记 | Andrew1729 若修改static文件夹下的相关文件，需在~/acapp下执行./scripts/compress_game_js.sh来打包文件\n前端的模块化引入 由于在 html 代码部分，是将整个 game.js 文件引入\n这样会导致在 game.js 中定义的变量，会变成整个网页的 全局变量（之后可能会引起变量重名的诸多问题）\n因此，我们考虑使用 模块化引入 的功能，让网页只引入在 html 中需要的部分\n修改 web.html\n\u0026lt;!-- 首先，先删掉上面整个引入 game.js 的部分 --\u0026gt; \u0026lt;!-- 然后，下方创建对象的部分，先使用模块化引入 --\u0026gt; ...... \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import {AcGame} from \u0026#34;{% static \u0026#39;js/dist/game.js\u0026#39; %}\u0026#34; $(document).ready(function(){ let ac_game = new AcGame(\u0026#34;ac_game_12345678\u0026#34;) }) \u0026lt;/script\u0026gt; ...... 此外，还有修改引入的类，在前面加上 export，如下修改 js/src/zbase.js\nexport class AcGame { ...... } 这样，在全局中，只会出现引入的模块，其他的 .js 代码不会出现在全局中\n构建游戏界面框架 static/js/src/playground/zbase.js\n...... this.$playground = $(`\u0026lt;div class=\u0026#34;ac-game-playground\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;`); ...... game.css\n...... .ac-game-playground { height: 100%; width: 100%; user-select: none; // 禁用右键弹菜单 } 实现游戏引擎框架 游戏中，物体在移动，其实现原理是：每一个动作都会渲染多张图片出来，然后图片快速的切换，从而实现动的过程\n因此，需要先实现一个游戏引擎的基类 AcGameObject ，使得每帧能渲染一张图片出来\n该基类需要具备的功能有：\nstart() 在游戏开始的第一帧时需要执行的任务（一般是创建对象） update() 在游戏开始后的每一帧均会执行的任务（一般是渲染当前对象的各种状态） on_destroy() 删掉该物体前需要执行的任务（一般是删掉动画，或者给对手加分） destroy() 删掉该物体 根据上述逻辑，我们就可以基本搭建出来一个游戏引擎的基类了，具体如下： /static/js/playground/ac_game_object/zbase.js\nlet AC_GAME_OBJECTS = []; // 用于记录当前画布中，需要渲染的对象有哪些 class AcGameObject { constructor() { AC_GAME_OBJECTS.push(this); // 将当前新建的对象，加入到全局的画布中去，参与渲染 this.has_called_start = false; // 是否执行过 start 函数 this.timedelta = 0; // 当前帧距离上一帧的时间间隔 // 该数据记录是为了后续计算速度等参数的 } start() { // 只会在第一帧执行一次 } update() { // 每一帧均会执行一次 } on_destroy() { // 在被销毁前执行一次 } destroy() { // 删掉该物体 this.on_destroy(); //删掉该物体前，执行删前的操作 // 在全局渲染物体中，找到该物体，并将其删掉 for (let i = 0; i \u0026lt; AC_GAME_OBJECTS.length; i ++ ) { if (AC_GAME_OBJECTS[i] === this) { // 三等号，在js里额外加了一层类型相等约束 AC_GAME_OBJECTS.splice(i, 1); break; } } } } let last_timestamp; let AC_GAME_ANIMATION = function(timestamp) { // 回调函数，实现：每一帧重绘时，都会执行一遍 for (let i = 0; i \u0026lt; AC_GAME_OBJECTS.length; i ++ ) { let obj = AC_GAME_OBJECTS[i]; if (!obj.has_called_start) { // 如果还未执行初始帧动作，就先执行 obj.start(); obj.has_called_start = true; } else { // 执行过初始帧，就执行每一帧的任务 obj.timedelta = timestamp - last_timestamp; obj.update(); } } last_timestamp = timestamp; // 更新最后一次时间戳 requestAnimationFrame(AC_GAME_ANIMATION); } requestAnimationFrame(AC_GAME_ANIMATION); // JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等) 接下来所有的一切游戏，都是基于这个引擎的基类完成的\n实现游戏地图功能 目标：实现一个每一秒都在渲染的纯黑背景\n虽然现阶段要实现的地图较为简单，但为了后期的拓展性，故还是考虑新建一个文件夹来完成\n然后在 js 中，已经封装好了一个 canvas 的 api 来帮助实现背景画布，直接调用即可\n先铺开画布，然后设置为黑色\nstatic/js/playground/zbase.js\nclass AcGamePlayground { constructor(root) { ...... // $(\u0026#39;.playground\u0026#39;)对象已经在 css 文件里渲染出高宽了 // 现在把他的高宽存下来，往下传递 this.width = this.$playground.width(); this.height = this.$playground.height(); this.game_map = new GameMap(this); ...... } ..... } static/js/playground/game-map/zbase.js\nclass GameMap extends AcGameObject { // 继承自游戏引擎基类 constructor(playground) { super(); // 自函数功能：调用基类的构造函数 this.playground = playground; this.$canvas = $(`\u0026lt;canvas\u0026gt;\u0026lt;/canvas\u0026gt;`); // 创建一个canvas的jQuery对象，就是我们要实现的画布 this.ctx = this.$canvas[0].getContext(\u0026#39;2d\u0026#39;); // jQuery对象是一个数组，第一个索引是html对象 // 设置画布的宽高 this.ctx.canvas.width = this.playground.width; this.ctx.canvas.height = this.playground.height; this.playground.$playground.append(this.$canvas); } start() { } update() { // 游戏地图每帧都要渲染 this.render(); } render() { this.ctx.fillStyle = \u0026#34;rgba(0, 0, 0, 0.2)\u0026#34;; this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height); } } 实现玩家显示功能 毛坯版玩家显示，每个玩家定义成一个圆，然后渲染在前端\n需要对于玩家类定义多个参数，以方便日后拓展：\nx 当前位置的横坐标 y 当前位置的纵坐标 radius 当前的半径 speed 当前的速度 is_me 该对象是否是当前玩家操控的对象（一是区别于 bot，二是区别于 日后联机的其他玩家） static/js/playground/zbase.js\nclass AcGamePlayground { constructor(root) { ...... this.players = []; // 存放当前游戏中的所有玩家 // 将玩家加入游戏中 this.players.push(new Player(this, this.width / 2, this.height / 2, this.height * 0.05, \u0026#34;white\u0026#34;, this.height * 0.15, true)); ...... } ..... } static/js/playground/player/zbase.js\nclass Player extends AcGameObject { constructor(playground, x, y, radius, color, speed, is_me) { super(); // 把信息都存下来 this.playground = playground; this.ctx = this.playground.game_map.ctx; this.x = x; this.y = y; this.color = color; this.speed = speed; this.radius = radius; this.is_me = is_me; // 用于浮点数运算 this.eps = 0.1; } start() { } update() { this.render(); } render() { // 渲染一个圆 this.ctx.beginPath(); this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false); this.ctx.fillStyle = this.color; this.ctx.fill(); } on_destroy() { } } 实现玩家移动功能 移动的实现逻辑很简单，就是让每帧渲染的圆的位置发生移动即可\n上述简单逻辑的实现如下：\nclass Player extends AcGameObject { constructor(....) { ... this.vx = 1; this.vy = 1; ... } ... update() { this.x += x; this.y += y; this.render(); } } 然后我们来实现一个向鼠标点击位置移动的功能\n这就需要设置一个 click 事件的监听函数，分别传递：\n鼠标点击事件 鼠标点击位置的横坐标 鼠标点击位置的纵坐标 然后开始让圆的位置逐步向鼠标点击位置进行移动\nstart() { if (this.is_me) { // 对于用户玩家，加上监听函数 this.add_listening_events(); } } add_listening_events() { let outer = this; // 把鼠标右键调出菜单栏的功能关掉 this.playground.game_map.$canvas.on(\u0026#34;contextmenu\u0026#34;, function() { return false; }); // 把右键控制移动功能加上 this.playground.game_map.$canvas.mousedown(function(e) { // 左键:1 中键:2 右键:3 if (e.which === 3) { outer.move_to(e.clientX, e.clientY); } }); } 然后，我们来实现移动功能的函数 move_to(tx, ty)\nconstructor(...){ ... this.vx = 0; // x方向上的移动速度 this.vy = 0; // y方向上的移动速度 this.move_length = 0; // 剩余移动距离 ... } ... get_dist (x1, y1, x2, y2) { // 求两点的欧几里得距离 let dx = x2 - x1; let dy = y2 - y1; return Math.sqrt(dx * dx + dy * dy); } move_to(tx, ty) { // 计算移动距离 this.move_length = this.get_dist(this.x, this.y, tx, ty); // 计算移动角度，api接口：atan2(dy, dx) let angle = Math.atan2(ty - this.y, tx - this.x); // 位移 1 个单位长度（向着矢量方向移动到单位圆上） this.vx = Math.cos(angle); // 极直互化 this.vy = Math.sin(angle); } update() { // 浮点数精度运算 if (this.move_length \u0026lt; this.eps) { this.move_length = 0; this.vx = this.vy = 0; } else { // 计算单位帧里的移动距离 let moved = Math.min(this.move_length, this.speed * this.timedelta / 1000); this.x += this.vx * moved; this.y += this.vy * moved; // 还要减掉移动的距离 this.move_length -= moved; } this.render(); } ... 这样就实现了玩家的移动功能了，可以登录 id:socket 调试该功能\n实现火球技能的功能 火球对象的建立与玩家基本一致，直接照搬，在从细节上改改即可\njs/src/playground/skill/fireball/zbase.js\nclass FireBall extends AcGameObject { constructor(playground, player, x, y, radius, vx, vy, color, speed, move_length, damage) { super(); this.playground = playground; this.ctx = this.playground.game_map.ctx; this.player = player; this.x = x; this.y = y; this.vx = vx; this.vy = vy; this.radius = radius; this.color = color; this.speed = speed; this.move_length = move.length; this.damage = damage; this.eps = 0.1; } start() { } update() { if (this.move_length \u0026lt; this.eps) { this.destroy(); return false; } else { let moved = Math.min(this.move_length, this.speed * this.timedelta / 1000); this.x += this.vx * moved; this.y += this.vy * moved; this.move_length -= moved; } this.render(); } render() { this.ctx.beginPath(); this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math * Pi, false); this.ctx.fillStyle = this.color; this.ctx.fill(); } } 然后在玩家身上实现发火球的功能\n基本实现逻辑：当前选中了火球技能，鼠标左键点击一处，向该处发射一个火球\n因此，为了知道用户是否选择了技能，需要加一个键盘触发事件监听函数，然后加一个鼠标左键触发事件监听函数\n然后发射一个火球即可\njs/src/playground/player/zbase.js\nconstructor(...) { ... this.cur_skill = null; // 记录当前选择的技能 ... } add_listening_events() { ... this.playground.game_map.$canvas.mousedown(function(e) { // 左键:1 中键:2 右键:3 if (e.which === 3) { outer.move_to(e.clientX, e.clientY); } else if (e.which === 1) { // 鼠标左键事件 if (outer.cur_skill === \u0026#34;fireball\u0026#34;) { // 当前已经选中火球技能 outer.shoot_fireball(e.clientX, e.clientY); } } outer.cur_skill = null; // 清空当前技能 }); $(window).keydown(function(e) { if (e.which === 81) { // 键盘按下事件 outer.cur_skill = \u0026#34;fireball\u0026#34;; return false; } }); } shoot_fireball(tx, ty) { // 确定火球的参数 let x = this.x, y = this.y; // 火球发射点就是当前玩家的位置 let radius = this.playground.height * 0.01; let angle = Math.atan2(ty - this.y, tx - this.x); let vx = Math.cos(angle), vy = Math.sin(angle); let color = \u0026#34;orange\u0026#34;; let speed = this.playground.height * 0.5; let move_length = this.playground.height * 1.0; let damage = this.playground.height * 0.01; new FireBall(this.playground, this, x, y, radius, vx, vy, color, speed, move_length, damage); } 这样就成功实现了玩家发射火球的功能了\n实现单人模式下的人机功能 先创建好 5 个人机 playground/zbase.js\n... //创建好 5 个人机 for (len i = 0; i \u0026lt; 5; i ++ ) { this.players.push(new Player(this, this.width / 2, this.height / 2, this.height * 0.05, \u0026#34;blue\u0026#34;, this.height * 0.15, false)); } ... 这样创建出来的 5 个人机是不会行动的\n我们写一个简易的 AI 程序，让他们也会移动\n这里实现的逻辑是：每次随机一个目的地，向目的地移动，然后再随机一个目的地，循环下去\n根据该逻辑，修改两个函数即可\nplayground/player/zbase.js\n... start() { if (this.is_me) { // 对于用户玩家，加上监听函数 this.add_listening_events(); } else { let tx = Math.random() * this.playground.width; let ty = Math.random() * this.playground.height; this.move_to(tx, ty); } } ... update() { if (this.move_length \u0026lt; this.eps) { this.move_length = 0; this.vx = this.vy = 0; if (!this.is_me) { // 如果是人机，停下来时再随机一个方向前进 let tx = Math.random() * this.playground.width; let ty = Math.random() * this.playground.height; this.move_to(tx, ty); } } ... } on_destroy() { for (let i = 0; i \u0026lt; this.playground.players.length; i ++ ) { if (this.playground.players[i] === this) { this.playground.players.splice(i, 1); } } } 实现技能命中效果（碰撞检测功能） 实现逻辑：检测两个圆的中心距离是否小于两个圆的半径之和\n小于等于时，代表发生碰撞，开始执行命中效果：\n被击中用户掉血 被击中用户收到向后击退效果 碰撞检测写在火球类里，击退效果写在玩家类里\nfireball/zbase.js\nupdate() { if (...) { ... } else { ... // 碰撞检测 for (let i = 0; i \u0026lt; this.playground.players.length; i ++ ) { let player = this.playground.players[i]; if (this.player !== player \u0026amp;\u0026amp; this.is_collision(player)) { // 碰撞发生一定是在非施法者身上 this.attack(player); // 火球命中，目标玩家执行击退效果 } } } this.render(); } get_dist(x1, y1, x2, y2) { // 获得两点的欧几里得距离 let dx = x2 - x1; let dy = y2 - y1; return Math.sqrt(dx * dx + dy * dy); } is_collision(player) { // 检测两个圆的中心距离是否小于两个圆的半径之和 let distance = this.get_dist(this.x, this.y, player.x, player.y); if (distance \u0026lt; (this.radius + player.radius)) return true; return false; } attack(player) { // 火球命中，目标玩家执行击退效果 let angle = Math.atan2(player.y - this.y, player.x - this.x); // 计算角度 player.is_attacked(angle, this.damage); // 火球命中，目标玩家执行击退效果 this.destroy(); // 火球命中后，自然消失 } 被击退的时候，原来的移动速度应该置为 0，当前的移动应该转为向被击中方向上的移动 player/zbase.js\nis_attacked(angle, damage) { this.radius -= damage; // 受伤，半径减少 if (this.radius \u0026lt; 10) { // 当半径小于10像素时，代表死亡 this.destroy(); return false; } // 开始执行击退效果 this.damage_vx = Math.cos(angle); this.damage_vy = Math.sin(angle); this.damage_speed = damage * 100; this.speed *= 0.5; // 被击中以后移动速度减半 } update() { if (this.damage_speed \u0026gt; this.eps) { // 当前仍处于击退效果中 this.vx = this.vy = 0; this.move_length = 0; this.x += this.damage_vx * this.damage_speed * this.timedelta / 1000; this.y += this.damage_vy * this.damage_speed * this.timedelta / 1000; this.damage_speed *= this.friction; // 击退速度乘以摩擦系数，已达到削减的目的 } else { ... } ... } 被击中以后的粒子效果特效 实现逻辑：被击中以后，在玩家附近随机生成一些粒子小球\n因此我们要先实现 粒子小球 对象\nstatic/js/src/playground/particle/zbase.js\nclass Particle extends AcGameObject { constructor(playground, x, y, radius, vx, vy, color, speed) { super(); this.playground = playground; this.ctx = this.playground.game_map.ctx; this.x = x; this.y = y; this.radius = radius; this.vx = vx; this.vy = vy; this.color = color; this.speed = speed; this.friction = 0.9; } start() { } update() { if (this.speed \u0026lt; this.eps) { this.destroy; return false; } this.x += this.vx * this.speed * this.timedelta / 1000; this.y += this.vy * this.speed * this.timedelta / 1000; this.speed *= this.friction; this.render(); } render() { this.ctx.beginPath(); this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false); this.ctx.fillStyle = this.color; this.ctx.fill(); } } 然后我们在被击退功能模块，实现生成粒子小球的效果\n粒子小球释放弧度为 $[0,2π)$ 的随机数 粒子小球的 x, y 分量比率根据弧度来设定 粒子小球的起始坐标应与玩家的坐标相同 粒子小球的颜色与玩家颜色相同 粒子小球的速度为玩家移动速度的 $10$ 倍 js/src/playground/player/zbase.js\nis_attacked(angle, damage) { // 粒子小球效果 for (let i = 0; i \u0026lt; 10 + Math.random() * 5; i ++ ) { let x = this.x, y = this.y; let radius = this.radius * Math.random() * 0.1; let angle = 2 * Math.PI * Math.random(); let vx = Math.cos(angle), vy = Math.sin(angle); let color = this.color; let speed = this.speed * 10; new Particle(this.playground, x, y, radius, vx, vy, color, speed); } ... } 一些小优化 人机随机颜色 js/src/playground/zbase.js\nconstructor(root) { ...... // 创建好 5 个人机 for (let i = 0; i \u0026lt; 5; i ++ ) { this.players.push(new Player(this, this.width / 2, this.height / 2, this.height * 0.05, this.get_random_color(), this.height * 0.15, false)); } ...... } get_random_color() { let colors = [\u0026#34;blue\u0026#34;, \u0026#34;red\u0026#34;, \u0026#34;pink\u0026#34;, \u0026#34;grey\u0026#34;, \u0026#34;green\u0026#34;]; return colors[Math.floor(Math.random() * 5)]; } 人机AI随机攻击操作 js/src/playground/player/zbase.js\nconstructor (...) { ... this.spent_time = 0; // 初始人机冷却攻击时间 } ... update() { this.spent_time += this.timedelta / 1000; if (!this.is_me \u0026amp;\u0026amp; this.spent_time \u0026gt; 4 \u0026amp;\u0026amp; Math.random() * 180 \u0026lt; 1) { let player = this.playground.players[Math.floor(Math.random() * this.playground.players.length)]; this.shoot_fireball(player.x, player.y); } 部署nginx与对接acappஐ 5. 部署nginx与对接acapp | 讲义 5.1 上课笔记 | Andrew1729 5.1. 上课笔记 | 菊花 Ngnix 介绍 nginx 和uwsgi的区别与作用 Nginx是什么？ Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器\nNginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现\nNginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换\nuWSGI是什么？ uWSGI是一个全功能的HTTP服务器，实现了WSGI、uwsgi、http等协议\n它要做的就是把HTTP协议转化成语言支持的网络协议。比如把HTTP协议转化成WSGI协议，让Python可以直接使用\nWSGI协议是Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口\n简单来说uWSGI就是用来沟通nginx和django的一座桥梁\nNginx+uWSGI+Diango 工作流程 nginx 是对外的服务接口，外部浏览器通过url访问nginx\nnginx 接收到浏览器发送过来的http请求，将包进行解析\n分析url，如果是静态文件请求就直接访问用户给nginx配置的静态文件目录，直接返回用户请求的静态文件\n如果不是静态文件，而是一个动态的请求，那么nginx就将请求转发给uwsgi，uwsgi 接收到请求之后将包进行处理，处理成wsgi可以接受的格式，并发给wsgi，wsgi 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给wsgi，wsgi将返回值进行打包，打包成uwsgi能够接收的格式，uwsgi接收wsgi 发送的请求，并转发给nginx, nginx最终将返回值返回给浏览器\nuwsgi服务的开启\u0026amp;\u0026amp;关闭 在~/acapp启动uwsgi服务：uwsgi --ini scripts/uwsgi.ini 关闭uwsgi服务：sudo pkill -f uwsgi -9 针对 acapp 的优化 打包脚本优化 由于现在 发布版本的脚本文件 用的是打包在根目录里的 static 文件夹\n每次修改好 static 文件夹后，不仅需要对 js 文件打包，还需要对 static 文件夹打包\n不放把 \u0026ldquo;将static文件夹打包\u0026rdquo; 的 shell 代码一起加入 js 打包脚本中，从而实现一键打包\nscripts/compress_game_js.sh\n#! /bin/bash JS_PATH=/home/acs/acapp/game/static/js/ JS_PATH_DIST=${JS_PATH}dist/ JS_PATH_SRC=${JS_PATH}src/ find $JS_PATH_SRC -type f -name \u0026#39;*.js\u0026#39; | sort | xargs cat \u0026gt; ${JS_PATH_DIST}game.js echo \u0026#34;yes\u0026#34; | python3 manage.py collectstatic 鼠标点击事件的相对偏移 由于写游戏界面的时候，玩家移动是按照鼠标相对于当前整个浏览器取的位置参数 e.clientX\n而 acapp 里，每个应用是一个小窗口，鼠标点击位置的参数应当是 相对于整个游戏窗口的位置参数\n所有会导致出现，点击的位置与移动的位置不同，这里需要做出小优化\n优化的逻辑 :\n$clientX−窗口左侧到浏览器左侧的距离=玩家的目标X$ $clientY−窗口上侧到浏览器上侧的距离=玩家的目标Y$ 这就要用到一个 js 的 API 了 : getBoundingClientRect() rectObject = object.getBoundingClientRect(); rectObject.top : 元素上边到视窗上边的距离; rectObject.right : 元素右边到视窗左边的距离; rectObject.bottom : 元素下边到视窗上边的距离; rectObject.left : 元素左边到视窗左边的距离; rectObject.width : 是元素自身的宽 rectObject.height : 是元素自身的高 player/zbase.js\n... add_listening_events() { ... this.playground.game_map.$canvas.mousedown(function(e) { // 创建 rect 对象 const rect = outer.ctx.canvas.getBoundingClientRect(); if (e.which === 3) { // 调整偏移量 outer.move_to(e.clientX - rect.left, e.clientY - rect.top); } else if (e.which === 1) { if (outer.cur_skill === \u0026#34;fireball\u0026#34;) { // 调整偏移量 outer.shoot_fireball(e.clientX - rect.left, e.clientY - rect.top); } } ... }); ... } ... 将菜单界面重新设为主界面 js/zbase.js 的注释取消，使之创建出 menu 对象\njs/playground/zbase.js 的注释取消，并设置逻辑，让 playground 打开后，才进行游戏界面初始化\nclass AcGamePlayground { constructor(root) { this.root = root; this.$playground = $(`\u0026lt;div class=\u0026#34;ac-game-playground\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;`); this.hide(); // 初始时隐藏 // 游戏界面生成代码在下面展示 playground 时执行 this.start(); } ... show() { // 打开 playground 界面 this.$playground.show(); // 开始生成游戏界面 this.root.$ac_game.append(this.$playground); this.width = this.$playground.width(); this.height = this.$playground.height(); this.game_map = new GameMap(this); this.players = []; // 存放当前游戏中的所有玩家 // 将玩家加入游戏中 this.players.push(new Player(this, this.width / 2, this.height / 2, this.height * 0.05, \u0026#34;white\u0026#34;, this.height * 0.15, true)); // 创建好 5 个人机 for (let i = 0; i \u0026lt; 5; i ++ ) { this.players.push(new Player(this, this.width / 2, this.height / 2, this.height * 0.05, this.get_random_color(), this.height * 0.15, false)); } } ... } 调整 css 文件，适应窗口 在设置 web 网页的时候，有些设置了绝对值，可能对于窗口化的 acapp 显示效果差\n将他们修改成相对数值\ngame.css\n... .ac-game-menu-field { ... top: 40%; left: 20%; } .ac-game-menu-field-item { height: 6vh; ... font-size: 4vh; ... } ... 创建账号系统 6. 创建账号系统 | 讲义\n用户名密码登录 6.1 用户名密码登录 | 讲义 6.1 上课笔记 | Andrew1729 6.1 上课笔记 | 吃饱喝足不学习 客户端请求与Django响应流程 用户在客户端通过$.ajax发送请求，根据urls路由到对应的views中的函数，处理request后返回JsonResponse 至客户端\n前期准备工作 做开发，先开启调试模式，如果不开启，服务器一旦运行错误，就只返回 Error 报错 settings.py\n... DEBUG = True ... 不过 django 自带的 User 表并不能满足我们的需求，因此我们需要自己额外建表\n创建用户表 所有的数据表都存在 models 里\n我们在 models 里创建一个 player 文件夹，用于存储所有的 player 相关的表\n然后对文件夹初始化 __init__.py，接着扩充成一个我们需要的数据表\ngame/models/player/player.py\nfrom django.db import models from django.contrib.auth.models import User class Player(models.Model): # Player 类继承自 Model 类 user = models.OneToOneField(User, on_delete=models.CASCADE) # 说明Player是从User表扩充过来的，每一个player都与一个user是一一对应关联关系 # 后一个参数是指，当user被删除后，对应的player也要被删除 # （感觉就是外键的意思） photo = models.URLField(max_length=256, blank=True) # 用于存储用户的头像的url # 指定每个player数据展示在前台的数据 def __str__(self): return str(self.user) # 展示用户的用户名 将定义的表，注册到后台 admin 页面中\ngame/admin.py\n... from game.models.player.player import Player admin.site.register(Player) 然后将创建的数据表更新到 django 的数据库中去\n$ python3 manage.py makemigrations \u0026gt; Migrations for \u0026#39;game\u0026#39;: \u0026gt; game/migrations/0001_initial.py \u0026gt; - Create model Player $ $ python3 manage.py migrate \u0026gt; Operations to perform: \u0026gt; Apply all migrations: admin, auth, contenttypes, game, sessions \u0026gt; Running migrations: \u0026gt; Applying game.0001_initial... OK 然后重启一下服务，就可以在管理员页面看到新建的数据库了\n实现客户端的类型判别（ACAPP or WEB） 由于我们实现的项目是前后端分离类型，因此对于不同的客户端，前端要控制生成不同的页面\n为了增强扩展性，故这里要实现客户端类型的判别\ny总 已经提前写好了 ACAPP 的接口，如果用户用的是 ACAPP 访问，则在新建对象 ac_game 时，会额外传递一个参数\n我们只需按照这个接口去完成扩充即可\n之后写小程序之类的同理，额外传一个接口\njs/zbase.js\nexport class AcGame { constructor(id, AcWingOS) { this.id = id; this.$ac_game = $(\u0026#39;#\u0026#39; + id); this.AcWingOS = AcWingOS; //如果是acapp端，该变量就会带着一系列y总提供的接口 this.menu = new AcGameMenu(this); this.playground = new AcGamePlayground(this); this.start(); } start() { } } 构建登录功能框架 基本逻辑 : 用户访问页面 -\u0026gt; 进入登录页面 -\u0026gt; 提交登录信息 -\u0026gt; 核对登录信息 -\u0026gt; 返回登陆结果和其他信息\n每实现一个函数，就需要实现三个部分：\nviews : 实现具体的调用数据库的逻辑 urls : 实现一个路由 js : 前端实现GET上述接口的过程 欲实现流程 :\n用户访问网站，通过先前完成的路由，访问到 web.html web.html 中的 js 部分创建了一个 AcGame 对象 AcGame 对象创建的过程中，生成了 Settings 对象 Settings 对象创建完成后，调用 Settings.start() 函数 Settings.start() 函数调用了 Settings.getinfo() 函数 Settings.getinfo() 函数中执行了 ajax 向 getinfo 接口发起一个含参数 platform 的 GET 请求 通过 urls 路由的实现，最终定位到 views/settings/getinfo.py 文件的 getinfo(request) 函数 根据传递过来的 platform 函数，实现不同的 JsonResponse 返回 Settings.getinfo() 接受到了 response 完成上述基本逻辑 views views/settings/getinfo.py\nfrom django.http import JsonResponse from game.models.player.player import Player def getinfo_acapp(request): player = Player.objects.all()[0] # 取出数据库中第一个用户(调试该功能) return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;success\u0026#34;, \u0026#39;username\u0026#39;: player.user.username, \u0026#39;photo\u0026#39;: player.photo, }) def getinfo_web(request): player = Player.objects.all()[0] # 取出数据库中第一个用户(调试该功能) return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;success\u0026#34;, \u0026#39;username\u0026#39;: player.user.username, \u0026#39;photo\u0026#39;: player.photo, }) def getinfo(request): # 处理请求 platform = request.GET.get(\u0026#39;platform\u0026#39;) # 根据请求的平台不同，进行不同返回处理 if platform == \u0026#34;ACAPP\u0026#34;: return getinfo_acapp(request) elif platform == \u0026#34;WEB\u0026#34;: return getinfo_web(request) urls urls/settings/index.py\nfrom django.urls import path from game.views.settings.getinfo import getinfo urlpatterns = [ path(\u0026#34;getinfo/\u0026#34;, getinfo, name=\u0026#34;settings_getinfo\u0026#34;), ] 路由建立好以后，访问 xxxx/settings/getinfo，可以看到 getinfo.py 返回的 JSON 类型的 JSONResponse\njs 网页刚访问时，应先将 menu 关闭，然后打开登录界面，随意先修改一个让 menu 初始关闭\nstatic/js/src/menu/zbase.js\nclass AcGameMenu { constructor(root) { ... this.$menu.hide(); ... } ... static/js/src/settings/zbase.js\nclass Settings { constructor(root) { this.root = root; this.platform = \u0026#34;WEB\u0026#34;; if (this.root.AcWingOS) this.platform = \u0026#34;ACAPP\u0026#34;; this.start(); } start() { this.getinfo(); } register() { // 打开注册界面 } login() { // 打开登录界面 } getinfo() { let outer = this; $.ajax({ url: \u0026#34;https://app1117.acapp.acwing.com.cn/settings/getinfo/\u0026#34;, type: \u0026#34;GET\u0026#34;, data: { platform: outer.platform, }, success: function(resp) { console.log(resp); if (resp.result === \u0026#34;success\u0026#34;) { // 登录成功，关闭登录界面，打开主菜单 outer.hide(); outer.root.menu.show(); } else { outer.login(); } } }); } hide() { } show() { } } 然后不要忘记在 根js 下创建对象\nexport class AcGame { constructor(id, AcWingOS) { ... this.settings = new Settings(this); ... } ... } 这样基本框架就完成了\n完善 HTTP 请求的函数 如果用户未登录，返回信息 \u0026ldquo;not login\u0026rdquo;\n如果用户登录，返回信息 \u0026ldquo;success\u0026rdquo; 以及用户名和头像\nviews/setting/getinfo.py\ndef getinfo_web(request): user = request.user if not user.is_authenticated: # 未登录 return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;not login\u0026#34; }) else: # 已登录 player = Player.objects.get(user=user) return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;success\u0026#34;, \u0026#39;username\u0026#39;: player.user.username, \u0026#39;photo\u0026#39;: player.photo, }) 注意前后台是一个登录系统，因此要先退掉后台，再测试\n将用户头像渲染到玩家上 将返回的 JsonResponse 存到 Settings 类的变量中 settings/zbase.js\nclass Settings { constructor(root) { ... this.username = \u0026#34;\u0026#34;; this.photo = \u0026#34;\u0026#34;; ... } ... getinfo() { let outer = this; $.ajax({ ... success: function(resp) { ... if (resp.result === \u0026#34;success\u0026#34;) { outer.username = resp.username; outer.photo = resp.photo; ... } .. } }); } } 然后在 Player 里把用户的头像渲染到对应的玩家上\nplayground/player/zbase.js\nclass Player { constructor(...) { ... this.img = new Image(); this.img.src = this.playground.root.settings.photo; } ... render() { if (this.is_me) { this.ctx.save(); this.ctx.beginPath(); this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false); this.ctx.stroke(); this.ctx.clip(); this.ctx.drawImage(this.img, this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2); this.ctx.restore(); } else { this.ctx.beginPath(); this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI, false); this.ctx.fillStyle = this.color; this.ctx.fill(); } } ... } 实现登录界面的前端 先完成登录界面显示的逻辑\nsettings/zbase.js\nclass Settings { ... register() { // 打开注册界面 this.$login.hide(); this.$register.show(); } login() { // 打开登录界面 this.$register.hide(); this.$login.show(); } ... hide() { this.$settings.hide(); } show() { this.$settings.show(); } } 实现前端的基础框架 settings/zbase.js\nclass Settings { constructor(root) { ... this.$settings = $(` \u0026lt;div class=\u0026#34;ac-game-settings\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-login\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-title\u0026#34;\u0026gt; 登录 \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-username\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-item\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;用户名\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-password\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-item\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; placeholder=\u0026#34;密码\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-submit\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-item\u0026#34;\u0026gt; \u0026lt;button\u0026gt;登录\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-error-message\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-option\u0026#34;\u0026gt; 注册 \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-acwing\u0026#34;\u0026gt; \u0026lt;img width=\u0026#34;30\u0026#34; src=\u0026#34;https://app165.acapp.acwing.com.cn/static/image/settings/acwing_logo.png\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div\u0026gt; AcWing一键登录 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-register\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-title\u0026#34;\u0026gt; 注册 \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-username\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-item\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; placeholder=\u0026#34;用户名\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-password ac-game-settings-password-first\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-item\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; placeholder=\u0026#34;密码\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-password ac-game-settings-password-second\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-item\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; placeholder=\u0026#34;确认密码\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-submit\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-item\u0026#34;\u0026gt; \u0026lt;button\u0026gt;注册\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-error-message\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-option\u0026#34;\u0026gt; 登录 \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div class=\u0026#34;ac-game-settings-acwing\u0026#34;\u0026gt; \u0026lt;img width=\u0026#34;30\u0026#34; src=\u0026#34;https://app165.acapp.acwing.com.cn/static/image/settings/acwing_logo.png\u0026#34;\u0026gt; \u0026lt;br\u0026gt; \u0026lt;div\u0026gt; AcWing一键登录 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; `); this.$login = this.$settings.find(\u0026#34;.ac-game-settings-login\u0026#34;); this.$login_username = this.$login.find(\u0026#34;.ac-game-settings-username input\u0026#34;); this.$login_password = this.$login.find(\u0026#34;.ac-game-settings-password input\u0026#34;); this.$login_submit = this.$login.find(\u0026#34;.ac-game-settings-submit button\u0026#34;); this.$login_error_message = this.$login.find(\u0026#34;.ac-game-settings-error-message\u0026#34;); this.$login_register = this.$login.find(\u0026#34;.ac-game-settings-option\u0026#34;); this.$login.hide(); this.$register = this.$settings.find(\u0026#34;.ac-game-settings-register\u0026#34;); this.$register_username = this.$register.find(\u0026#34;.ac-game-settings-username input\u0026#34;); this.$register_password = this.$register.find(\u0026#34;.ac-game-settings-password-first input\u0026#34;); this.$register_password_confirm = this.$register.find(\u0026#34;.ac-game-settings-password-second input\u0026#34;); this.$register_submit = this.$register.find(\u0026#34;.ac-game-settings-submit button\u0026#34;); this.$register_error_message = this.$register.find(\u0026#34;.ac-game-settings-error-message\u0026#34;); this.$register_login = this.$register.find(\u0026#34;.ac-game-settings-option\u0026#34;); this.$register.hide(); this.root.$ac_game.append(this.$settings); ... } ... } 对应的 css 文件部分：\ncss/game.css\n.ac-game-settings { width: 100%; height: 100%; background-image: url(\u0026#34;/static/image/menu/background.gif\u0026#34;); background-size: 100% 100%; user-select: none; } .ac-game-settings-login { height: 41vh; width: 20vw; position: relative; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(0, 0, 0, 0.7); border-radius: 5px; } .ac-game-settings-title { color: white; font-size: 3vh; text-align: center; padding-top: 2vh; margin-bottom: 2vh; } .ac-game-settings-username { display: block; height: 7vh; } .ac-game-settings-password { display: block; height: 7vh; } .ac-game-settings-submit { display: block; height: 7vh; } .ac-game-settings-acwing { display: block; height: 7vh; } .ac-game-settings-item { width: 100%; height: 100%; } .ac-game-settings-item \u0026gt; input { width: 90%; line-height: 3vh; position: relative; top: 50%; left: 50%; transform: translate(-50%, -50%); } .ac-game-settings-item \u0026gt; button { color: white; width: 90%; line-height: 3vh; position: relative; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #4CAF50; border-radius: 5px; } .ac-game-settings-error-message { color: red; font-size: 0.8vh; display: inline; float: left; padding-left: 1vw; } .ac-game-settings-option { color: white; font-size: 2vh; display: inline; float: right; padding-right: 1vw; cursor: pointer; } .ac-game-settings-acwing \u0026gt; img { position: relative; top: 50%; left: 50%; transform: translate(-50%, -50%); cursor: pointer; display: block; } .ac-game-settings-acwing \u0026gt; div { color: white; font-size: 1.5vh; text-align: center; display: block; } .ac-game-settings-register { height: 49vh; width: 20vw; position: relative; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: rgba(0, 0, 0, 0.7); border-radius: 5px; } 实现登录/注册的相互切换 class Settings { constructor(root) { ... } start() { this.getinfo(); this.add_listening_events(); } add_listening_events() { this.add_listening_events_login(); this.add_listening_events_register(); } add_listening_events_login() { let outer = this; this.$login_register.click(function() { outer.register(); // 跳到注册界面 }); } add_listening_events_register() { let outer = this; this.$register_login.click(function() { outer.login(); // 跳到登录界面 }) } ... } 实现登录功能 views/settings/login.py\nfrom django.http import JsonResponse from django.contrib.auth import authenticate, login def signin(request): data = request.GET username = data.get(\u0026#39;username\u0026#39;) password = data.get(\u0026#39;password\u0026#39;) user = authenticate(username=username, password=password) if not user: return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;用户名或密码不正确\u0026#34; }) login(request, user) return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;success\u0026#34; }) urls/settings/index.py\nfrom django.urls import path from game.views.settings.getinfo import getinfo from game.views.settings.login import signin urlpatterns = [ path(\u0026#34;getinfo/\u0026#34;, getinfo, name=\u0026#34;settings_getinfo\u0026#34;), path(\u0026#34;login/\u0026#34;, signin, name=\u0026#34;settings_login\u0026#34;), ] settings/zbase.js\nclass Settings{ ... add_listening_events_login() { ... this.$login_submit.click(function() { outer.login_on_remote(); }); } ... login_on_remote() { // 在远程服务器上登录 let outer = this; let username = this.$login_username.val(); let password = this.$login_password.val(); this.$login_error_message.empty(); $.ajax({ url: \u0026#34;https://app1117.acapp.acwing.com.cn/settings/login/\u0026#34;, type: \u0026#34;GET\u0026#34;, data: { username: username, password: password, }, success: function(resp) { console.log(resp); if (resp.result === \u0026#34;success\u0026#34;) { location.reload(); } else { outer.$login_error_message.html(resp.result); } } }); } } 实现登出功能 views/settings/logout.py\nfrom django.http import JsonResponse from django.contrib.auth import logout def signout(request): user = request.user if not user.is_authenticated: return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;success\u0026#34;, }) logout(request) return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;success\u0026#34;, }) urls/settings/index.py\n... from game.views.settings.logout import signout urlpatterns = [ ... path(\u0026#34;logout/\u0026#34;, signout, name=\u0026#34;settings_logout\u0026#34;), ] settings/zbase.js\n... login_on_remote() { // 在远程服务器上登录 let outer = this; let username = this.$login_username.val(); let password = this.$login_password.val(); this.$login_error_message.empty(); $.ajax({ url: \u0026#34;https://app1117.acapp.acwing.com.cn/settings/login/\u0026#34;, type: \u0026#34;GET\u0026#34;, data: { username: username, password: password, }, success: function(resp) { console.log(resp); if (resp.result === \u0026#34;success\u0026#34;) { location.reload(); } else { outer.$login_error_message.html(resp.result); } } }); } ... 再顺便将 menu 菜单页面里的 设置 按钮也绑定上登出功能\nmenu/zbase.js\nadd_listening_events() { let outer = this; ... this.$settings_mode.click(function() { ... outer.root.settings.logout_on_remote(); }); } 实现注册功能 views/settings/register.py\nfrom django.http import JsonResponse from django.contrib.auth import login from django.contrib.auth.models import User from game.models.player.player import Player def register(request): data = request.GET username = data.get(\u0026#34;username\u0026#34;, \u0026#34;\u0026#34;).strip() password = data.get(\u0026#34;password\u0026#34;, \u0026#34;\u0026#34;).strip() password_confirm = data.get(\u0026#34;password_confirm\u0026#34;, \u0026#34;\u0026#34;).strip() if not username or not password: return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;用户名或密码不能为空\u0026#34;, }) if password != password_confirm: return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;两个密码不一致\u0026#34;, }) if User.objects.filter(username=username).exists(): return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;用户名已存在\u0026#34;, }) user = User(username=username) user.set_password(password) user.save() Player.objects.create(user=user, photo=\u0026#34;https://cdn.acwing.com/media/user/profile/photo/42832_lg_f999efc3c8.png\u0026#34;) login(request, user) return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;success\u0026#34;, }) urls/settings/index.py\n... from game.views.settings.register import register ... urlpatterns = [ ... path(\u0026#34;register/\u0026#34;, register, name=\u0026#34;settings_register\u0026#34;), ] settings/zbase.js\n... add_listening_events_register() { ... this.$register_submit.click(function() { outer.register_on_remote(); }); } ... register_on_remote() { // 在远程服务器上注册 let outer = this; let username = this.$register_username.val(); let password = this.$register_password.val(); let password_confirm = this.$register_password_confirm.val(); this.$register_error_message.empty(); $.ajax({ url: \u0026#34;https://app1117.acapp.acwing.com.cn/settings/register/\u0026#34;, type: \u0026#34;GET\u0026#34;, data: { username: username, password: password, password_confirm: password_confirm, }, success: function(resp) { console.log(resp); if (resp.result === \u0026#34;success\u0026#34;) { location.reload(); } else { outer.$register_error_message.html(resp.result); } } }) } ... Redisஐ Redis是什么？ Redis 是一款内存高速缓存数据库\n为什么要使用Redis? 我们目前用的是Django自带的数据库Sqlite。Django是很容易将数据库迁移到mySQL的。但是存储效率不如redis，因为redis是内存数据库，所以调用东西都非常快，存的是一个一个的\u0026lt;key, value\u0026gt;，而且是单线程的\n在Django中集成Redis 安装 django_redis pip install django_redis 配置 settings.py CACHES = { \u0026#39;default\u0026#39;: { \u0026#39;BACKEND\u0026#39;: \u0026#39;django_redis.cache.RedisCache\u0026#39;, \u0026#39;LOCATION\u0026#39;: \u0026#39;redis://127.0.0.1:6379/1\u0026#39;, \u0026#34;OPTIONS\u0026#34;: { \u0026#34;CLIENT_CLASS\u0026#34;: \u0026#34;django_redis.client.DefaultClient\u0026#34;, }, }, } USER_AGENTS_CACHE = \u0026#39;default\u0026#39; 启动 redis-server sudo redis-server /etc/redis/redis.conf 在 Django 后台里操纵 Redis $ python3 manage.py shell\u0026#39; In [1]: from django.core.cache import cache # 引入redis In [2]: cache.keys(\u0026#39;*\u0026#39;) # 查询redis里所有的关键字 Out[2]: [] In [3]: cache.set(\u0026#39;yxc\u0026#39;, 1, 5) # 插入一个key-val，存在 5 s Out[3]: True In [4]: cache.keys(\u0026#39;*\u0026#39;) # 查询redis里所有的关键字 Out[4]: [\u0026#39;yxc\u0026#39;] In [5]: cache.set(\u0026#39;yxc\u0026#39;, 2, None) # 插入一个key-val，不会过期 Out[5]: True In [6]: cache.set(\u0026#39;abc\u0026#39;, 3, None) Out[6]: True In [7]: cache.keys(\u0026#39;y*\u0026#39;) Out[7]: [\u0026#39;yxc\u0026#39;] In [8]: cache.has_key(\u0026#39;abc\u0026#39;) Out[8]: True In [9]: cache.has_key(\u0026#39;abcd\u0026#39;) Out[9]: False In [10]: cache.get(\u0026#39;yxc\u0026#39;) Out[10]: 2 In [11]: cache.delete(\u0026#39;yxc\u0026#39;) Out[11]: True In [12]: cache.keys(\u0026#39;*\u0026#39;) Out[12]: [\u0026#39;abc\u0026#39;] In [13]: Web端AcWing一键登录ஐ 6.2 Web端AcWing一键登录 | 讲义 6.2 上课笔记 | Andrew1729 6.2 Web端AcWing一键登录 | Vedio Oauth2一键授权登录的基本原理：$17m30s——29m15s——32m51s$ 数据表添加openid信息：$33m20s——34m47s$ Oauth2一键授权登录的代码实现：$35m20s——1h25s——1h27m20s$ 用户点击AcWing一键登录，通过urls \u0026amp; views调用apply_code函数，将state放到redis中，将appid \u0026amp; redirect_uri \u0026amp; scope \u0026amp; state 传入apply_code_url链接，返回并重定向至apply_code_url向用户询问是否授权\n用户点击同意后，重定向至redirect_uri链接，返回参数为code和state，通过urls \u0026amp; views调用receive_code函数\n若验证state失败，直接重定向至初始界面\n若验证state成功，将appid \u0026amp; code \u0026amp; secret发送至AcWing服务器，申请授权令牌access_token和用户的openid\n若申请令牌成功，将access_token \u0026amp; openid发送至AcWing服务器，得到用户信息，创建并登录用户，最后重定向至初始界面\nAcApp端AcWing一键登录ஐ 6.3 AcApp端AcWing一键登录 | 讲义 6.3 上课笔记 | Andrew1729 6.3 Acapp端AcWing一键登录 | Vedio Oauth2一键授权登录的基本原理：$10m——12m20s——16m35s——18m$ Oauth2一键授权登录的代码实现：$19m25s——21m——23m25s——34m29s——42m10s$ 实现联机对战ஐ 7. 实现联机对战 | 讲义 7.1 上课笔记 | 大菜狗 7.2 上课笔记 | 菊花 统一长度单位 由于联机对战的时候，每个用户的客户端长宽不一样\n在之前完成的游戏界面里，我们会根据当前客户端的大小，进行渲染\n但是在联机对战的时候，应当让所有玩家的游戏界面保持同步才可以\n所有，就引入了 统一长度单位 的目标\n地图渲染 地图 16:9 等比例缩放 实现逻辑：根据当前用户的客户端大小，统一渲染成 16:9 的游戏界面，且随着用户调整窗口大小，也动态调整\njs/src/playground/zbase.js\nclass AcGamePlayground { constructor(root) { ... this.root.$ac_game.append(this.$playground);// 未来可能会多次 show 因此把创建场景挪到这里 ... } ... start() { let outer = this; $(window).resize(function() { outer.resize(); }); } resize() { this.width = this.$playground.width(); this.height = this.$playground.height(); let unit = Math.min(this.width / 16, this.height / 9); // 以最小的作为基准，渲染 this.width = unit * 16; this.height = unit * 9; this.resize(); this.scale = this.height; // resize时，其他元素的渲染大小都以当前渲染的高度为基准，存为 scale 变量 if (this.game_map) this.game_map.resize(); //如果此时地图已创建，则resize一下 } show() { // 打开 playground 界面 this.$playground.show(); this.resize(); ... } ... } js/src/playground/game_map/zbase.js\nclass GameMap extends AcGameObject { ... resize() { this.ctx.canvas.width = this.playground.width; this.ctx.canvas.height = this.playground.height; } ... } 地图居中 直接把 canvas 元素，用相对位置居中即可\ncss/game.css\n... .ac-game-playground { ... background-color: grey; } .ac-game-playground \u0026gt; canvas { position: relative; top: 50%; left: 50%; transform: translate(-50%, -50%); } 解决地图 resize 时，会出现渐变成黑色的情况 原由是因为我们的实现逻辑是：每帧会渲染一层半透明的黑色背景\n也就造就了一开始会出现灰屏的情况，解决方法很简单，直接 resize 完，强制涂一层不透明的黑色即可\njs/src/playground/game_map/zbase.js\nclass GameMap extends AcGameObject { ... resize() { this.ctx.canvas.width = this.playground.width; this.ctx.canvas.height = this.playground.height; this.ctx.fillStyle = \u0026#34;rgba(0, 0, 0, 1)\u0026#34;; // resize 完，涂一层不透明的即可 this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height); } ... } 元素渲染 地图随着尺寸等比例放大缩小的同时，地图内的其他元素也应与背景一同等比例放大缩小\n因此，我们只需把元素全部设为相对大小即可，用我们先前设置的 playground.scale 值即可\n玩家 Player 初始化的时候，转为传递 scale 的比例值\njs/src/playground/zbase.js\nclass AcGamePlayground { ... show() { // 打开 playground 界面 ... this.players.push(new Player(this, this.width / 2 / this.scale, 0.5, 0.05, \u0026#34;white\u0026#34;, 0.15, true)); for (let i = 0; i \u0026lt; 5; i ++ ) { this.players.push(new Player(this, this.width / 2 / this.scale, 0.5, 0.05, this.get_random_color(), 0.15, false)); } } } js/src/playground/player/zbase.js\nclass Player { ... start() { if (this.is_me) { ... } else { let tx = Math.random() * this.playground.width / this.playground.scale; let ty = Math.random() * this.playground.height / this.playground.scale; ... } } add_listening_events() { ... this.playground.game_map.$canvas.mousedown(function(e) { ... if (e.which === 3) { outer.move_to((e.clientX - rect.left) / outer.playground.scale, (e.clientY - rect.top) / outer.playground.scale); } else if (e.which === 1) { if (outer.cur_skill === \u0026#34;fireball\u0026#34;) { outer.shoot_fireball((e.clientX - rect.left) / outer.playground.scale, (e.clientY - rect.top) / outer.playground.scale); } } ... }); ... } shoot_fireball(tx, ty) { let x = this.x, y = this.y; let radius = 0.01; let angle = Math.atan2(ty - this.y, tx - this.x); let vx = Math.cos(angle), vy = Math.sin(angle); let color = \u0026#34;orange\u0026#34;; let speed = 0.5; let move_length = 1.0; let damage = 0.01; new FireBall(this.playground, this, x, y, radius, vx, vy, color, speed, move_length, damage); } ... update() { this.update_move(); this.render(); } update_move() { // 更新玩家移动 ... if (!this.is_me \u0026amp;\u0026amp; this.spent_time \u0026gt; 4 \u0026amp;\u0026amp; Math.random() * 180 \u0026lt; 1) { ... } if (this.damage_speed \u0026gt; this.eps) { ... } else { if (this.move_length \u0026lt; this.eps) { ... if (!this.is_me) { let tx = Math.random() * this.playground.width / this.playground.scale; let ty = Math.random() * this.playground.height / this.playground.scale; ... } } else { ... } } } render() { let scale = this.playground.scale; if (this.is_me) { ... this.ctx.arc(this.x * scale, this.y * scale, this.radius * scale, 0, Math.PI * 2, false); ... this.ctx.drawImage(this.img, (this.x - this.radius) * scale, (this.y - this.radius) * scale, this.radius * 2 * scale, this.radius * 2 * scale); ... } else { ... this.ctx.arc(this.x * scale, this.y * scale, this.radius * scale, 0, 2 * Math.PI, false); ... } } } 火球 Fireball js/src/playground/skill/fireball/zbase.js\nclass Fireball { ... render() { let scale = this.playground.scale; this.ctx.beginPath(); this.ctx.arc(this.x * scale, this.y * scale, this.radius * scale, 0, 2 * Math.PI, false); this.ctx.fillStyle = this.color; this.ctx.fill(); } } 粒子 Particle js/src/playground/particle/zbase.js\nclass Particle { ... render() { let scale = this.playground.scale; this.ctx.beginPath(); this.ctx.arc(this.x * scale, this.y * scale, this.radius * scale, 0, 2 * Math.PI, false); this.ctx.fillStyle = this.color; this.ctx.fill(); } } 增加“联机对战”模式 为了区分：用户自己，机器人，联机玩家\n需要把 is_me 改成字符串，用以表示不同 Player\nmenu/zbase.js\nclass AcGameMenu{ ... add_listening_events() { ... this.$single_mode.click(function(){ outer.hide(); outer.root.playground.show(\u0026#34;single mode\u0026#34;); }); this.$multi_mode.click(function() { outer.hide(); outer.root.playground.show(\u0026#34;multi mode\u0026#34;); }); ... } ... } playground/zbase.js\nclass Playground { ... show(mode) { // 打开 playground 界面 ... this.players.push(new Player(this, this.width / 2 / this.scale, 0.5, 0.05, \u0026#34;white\u0026#34;, 0.15, \u0026#34;me\u0026#34;, this.root.settings.username, this.root.settings.photo))); if (mode === \u0026#34;single mode\u0026#34;) { for (let i = 0; i \u0026lt; 5; i ++ ) { this.players.push(new Player(this, this.width / 2 / this.scale, 0.5, 0.05, this.get_random_color(), 0.15, \u0026#34;robot\u0026#34;)); } } else if (mode === \u0026#34;multi mode\u0026#34;) { } } ... } playground/player/zbase.js\nclass Player extends AcGameObject { constructor(playground, x, y, radius, color, speed, character, username, photo) { ... this.character = character; this.username = username; this.photo = photo; ... if (this.character !== \u0026#34;robot\u0026#34;) { this.img = new Image(); this.img.src = this.photo; } } ... // 同理，根据对应的逻辑，修改后面所有的 is_me 为 character } Django_channels 谈谈Websocket HTTP/TCP Django_channels是什么？ Django_Channels 是一个为Django 提供异步扩展的库，通常主要用来提供WebSocket 支持和后台任务\nWSS 是 Web Socket 协议的安全模式，支持 C/S 下的双向通信（HTTP协议只支持单向通信）\n配置Django_channels 安装 channels_redis pip install channels_redis 配置 acapp/asgi.py import os from channels.auth import AuthMiddlewareStack from channels.routing import ProtocolTypeRouter, URLRouter from django.core.asgi import get_asgi_application from game.routing import websocket_urlpatterns os.environ.setdefault(\u0026#39;DJANGO_SETTINGS_MODULE\u0026#39;, \u0026#39;acapp.settings\u0026#39;) application = ProtocolTypeRouter({ \u0026#34;http\u0026#34;: get_asgi_application(), \u0026#34;websocket\u0026#34;: AuthMiddlewareStack(URLRouter(websocket_urlpatterns)) }) 配置 acapp/settings.py 在 INSTALLED_APPS 中添加 channels ，添加后如下所示：\nINSTALLED_APPS = [ \u0026#39;channels\u0026#39;, \u0026#39;game.apps.GameConfig\u0026#39;, \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, ] 然后在文件末尾添加：\nASGI_APPLICATION = \u0026#39;acapp.asgi.application\u0026#39; CHANNEL_LAYERS = { \u0026#34;default\u0026#34;: { \u0026#34;BACKEND\u0026#34;: \u0026#34;channels_redis.core.RedisChannelLayer\u0026#34;, \u0026#34;CONFIG\u0026#34;: { \u0026#34;hosts\u0026#34;: [(\u0026#34;127.0.0.1\u0026#34;, 6379)], }, }, } 配置 game/routing.py 这一部分的作用相当于 http 的 urls 内容如下：\nfrom django.urls import path websocket_urlpatterns = [ ] 编写 game/consumers 这一部分的作用相当于 http 的 views 参考示例：\nconsumers/multiplayer/index.py\nfrom channels.generic.websocket import AsyncWebsocketConsumer import json class MultiPlayer(AsyncWebsocketConsumer): async def connect(self): await self.accept() print(\u0026#39;accept\u0026#39;) self.room_name = \u0026#34;room\u0026#34; await self.channel_layer.group_add(self.room_name, self.channel_name) async def disconnect(self, close_code): print(\u0026#39;disconnect\u0026#39;) await self.channel_layer.group_discard(self.room_name, self.channel_name); async def receive(self, text_data): data = json.loads(text_data) print(data) 启动 django_channels 在 ~/acapp 目录下执行：\ndaphne -b 0.0.0.0 -p 5015 acapp.asgi:application 建立 WSS 连接 game/routing.py\nfrom django.urls import path from game.consumers.multiplayer.index import MultiPlayer websocket_urlpatterns = [ path(\u0026#34;wss/multiplayer/\u0026#34;, MultiPlayer.as_asgi(), name=\u0026#34;wss_multiplayer\u0026#34;), ] playground/zbase.js\nclass AcGamePlayground { ... show(mode) { // 打开 playground 界面 ... if (mode === \u0026#34;single mode\u0026#34;) { ... } else if (mode === \u0026#34;multi mode\u0026#34;) { this.mps = new MultiPlayerSocket(this); this.mps.ws.onopen = function() { outer.mps.send_create_player(); }; } } } playground/socket/multiplayer/zbase.js\nclass MultiPlayerSocket { constructor(playground) { this.playground = playground; this.ws = new WebSocket(\u0026#34;wss://app1117.acapp.acwing.com.cn/wss/multiplayer/\u0026#34;); this.start(); } start() { } send_create_player() { this.ws.send(JSON.stringify({ \u0026#39;message\u0026#39;: \u0026#39;hello acapp server\u0026#39;, })); } receive_create_player() { } } 编写同步函数 一共需要完成四个通信：\n（通信的逻辑基本都是先在本地完成，然后将结果返回给服务器，服务器再分发给其他客户端，达成同步）\ncreate-player : 在所有玩家的游戏界面，创建一个新加入的玩家 move-to : 在所有玩家的游戏界面，将一个角色移动到一个位置 shoot-fireball : 在所有玩家的游戏界面，让一个角色发射一个火球 attack : 在所有玩家的游戏界面，让一个角色被攻击 一场游戏里，所有的元素（玩家，火球等）都需要唯一的标识，来方便同步\n为此，我们可以直接修改一下游戏引擎，对于每个元素都创建我们需要的唯一标识\nplayground/ac-game-object/zbase.js\nclass AcGameObject { constructor() { ... this.uuid = this.create_uuid(); } create_uuid() { let res = \u0026#34;\u0026#34;; for (let i = 0; i \u0026lt; 8; i ++ ) { let x = parseInt(Math.floor(Math.random() * 10)); // [0, 10) res += x; } return res; ... } playground/zbase.js\nclass AcGamePlayground { ... show(mode) { ... if (mode === \u0026#34;single mode\u0026#34;) { ... } else if (mode === \u0026#34;multi mode\u0026#34;) { this.mps = new MultiPlayerSocket(this); this.mps.uuid = this.players[0].uuid; this.mps.ws.onopen = function() { outer.mps.send_create_player(); }; } } ... } playground/socket/multiplayer/zbase.js\nclass MultiPlayerSocket { ... send_create_player() { let outer = this; this.ws.send(JSON.stringify({ \u0026#39;event\u0026#39;: \u0026#39;create_player\u0026#39;, \u0026#39;uuid\u0026#39;: outer.uuid, })); } } 接着，利用通信的方式，使得每个窗口内，逻辑上相同的元素，其 uid 也相同即可\n原则是：哪个窗口创建的元素，就用他创建时的 uid 作为整个项目运行时的 uid\n然后，我们打算用 redis 来实现存储每个游戏房间，以及元素，并初始默认设定每个房间上限 3 人\ncreate-player 前端 game/static/js/src/playground/socket/multiplayer/zbase.js\nclass MultiPlayerSocket { constructor(playground) { this.playground = playground; this.ws = new WebSocket(\u0026#34;wss://app1117.acapp.acwing.com.cn/wss/multiplayer/\u0026#34;); this.start(); } start() { this.receive(); } receive() { let outer = this; this.ws.onmessage = function(e) { let data = JSON.parse(e.data); let uuid = data.uuid; if (uuid === outer.uuid) return false; let event = data.event; if (event === \u0026#34;create_player\u0026#34;) { outer.receive_create_player(uuid, data.username, data.photo); } }; } send_create_player(username, photo) { let outer = this; this.ws.send(JSON.stringify({ \u0026#39;event\u0026#39;: \u0026#39;create_player\u0026#39;, \u0026#39;uuid\u0026#39;: outer.uuid, \u0026#39;username\u0026#39;: username, \u0026#39;photo\u0026#39;: photo, })); } receive_create_player(uuid, username, photo) { let player = new Player( this.playground, this.playground.width / 2 / this.playground.scale, 0.5, 0.05, \u0026#34;white\u0026#34;, 0.15, \u0026#34;enemy\u0026#34;, username, photo, ); player.uuid = uuid; this.playground.players.push(player); } } 后端 settings.py\n... ROOM_CAPACITY = 3 consumers/multiplayer/index.py\nfrom channels.generic.websocket import AsyncWebsocketConsumer import json from django.conf import settings from django.core.cache import cache class MultiPlayer(AsyncWebsocketConsumer): async def connect(self): self.room_name = None for i in range(1000): # 上限 1k 个房间 name = \u0026#34;room-%d\u0026#34; % (i) # 当前房间为空，或房间内玩家人数不到 ROOM_CAPACITY if not cache.has_key(name) or len(cache.get(name)) \u0026lt; settings.ROOM_CAPACITY: self.room_name = name break if not self.room_name: return await self.accept() if not cache.has_key(self.room_name): # 如果房间不存在，则新建房间 cache.set(self.room_name, [], 3600) # 有效期 1 小时 for player in cache.get(self.room_name): # 对该房间已存在的用户，创建到新加入的用户的游戏界面中 await self.send(text_data=json.dumps({ \u0026#39;event\u0026#39;: \u0026#34;create_player\u0026#34;, \u0026#39;uuid\u0026#39;: player[\u0026#39;uuid\u0026#39;], \u0026#39;username\u0026#39;: player[\u0026#39;username\u0026#39;], \u0026#39;photo\u0026#39;: player[\u0026#39;photo\u0026#39;], })) await self.channel_layer.group_add(self.room_name, self.channel_name) async def disconnect(self, close_code): print(\u0026#39;disconnect\u0026#39;) await self.channel_layer.group_discard(self.room_name, self.channel_name); async def create_player(self, data): players = cache.get(self.room_name) players.append({ \u0026#39;uuid\u0026#39;: data[\u0026#39;uuid\u0026#39;], \u0026#39;username\u0026#39;: data[\u0026#39;username\u0026#39;], \u0026#39;photo\u0026#39;: data[\u0026#39;photo\u0026#39;], }) cache.set(self.room_name, players, 3600) # 更新房间存在时间为 1 小时（最后一次加入一名玩家时） # 群发消息更新 await self.channel_layer.group_send( self.room_name, { \u0026#39;type\u0026#39;: \u0026#34;group_create_player\u0026#34;, # 群发该消息后，作为客户端接受者，所接受用的函数名 \u0026#39;event\u0026#39;: \u0026#34;create_player\u0026#34;, \u0026#39;uuid\u0026#39;: data[\u0026#39;uuid\u0026#39;], \u0026#39;username\u0026#39;: data[\u0026#39;username\u0026#39;], \u0026#39;photo\u0026#39;: data[\u0026#39;photo\u0026#39;], } ) async def group_create_player(self, data): await self.send(text_data=json.dumps(data)) async def receive(self, text_data): data = json.loads(text_data) event = data[\u0026#39;event\u0026#39;] if event == \u0026#34;create_player\u0026#34;: await self.create_player(data) redis 调试语句 打开 shell 交互\npython3 manage.py shell 然后用 py3 交互进行 cache 调试\nfrom django.core.cache import cache def clear(): for key in cache.keys(\u0026#39;*\u0026#39;): cache.delete(key) cache.keys(\u0026#39;*\u0026#39;) # 查询当前 redis 中所有 key cache.get(\u0026#39;room-1\u0026#39;) # 查询当前 redis 中 key 为 room-1 的值 到目前为止，便可以在不同的窗口渲染同一批玩家了\nmove-to 前端 客户端的通信的发出和接受函数\ngame/static/js/src/playground/socket/multiplayer/zbase.js\nclass MultiPlayerSocket { ... receive() { let outer = this; this.ws.onmessage = function(e) { ... else if (event === \u0026#34;move_to\u0026#34;) { outer.receive_move_to(uuid, data.tx, data.ty); } }; } send_move_to(tx, ty) { let outer = this; this.ws.send(JSON.stringify({ \u0026#39;event\u0026#39;: \u0026#39;move_to\u0026#39;, \u0026#39;uuid\u0026#39;: outer.uuid, \u0026#39;tx\u0026#39;: tx, \u0026#39;ty\u0026#39;: ty, })); } get_player(uuid) { let players = this.playground.players; for (let i = 0; i \u0026lt; players.length; i ++ ) { let player = players[i]; if (player.uuid === uuid) { return player; } } return null; } receive_move_to(uuid, tx, ty) { let player = this.get_player(uuid); if (player) { player.move_to(tx, ty); } } } 为了让游戏界面中对于要移动的元素做出移动动作，需要对 move_to 函数做出一些修改\n首先要标识出当前为多人模式，然后模式为多人模式时，每次移动都会触发一次通信\nplayground/zbase.js\nclass AcGamePlayground { ... show(mode) { ... this.mode = mode; } } playground/player/zbase.js\nclass Player extends AcGameObject { ... add_listening_events() { ... this.playground.game_map.$canvas.mousedown(function(e) { ... if (e.which === 3) { let tx = (e.clientX - rect.left) / outer.playground.scale; let ty = (e.clientY - rect.top) / outer.playground.scale; outer.move_to(tx, ty); if (outer.playground.mode === \u0026#34;multi mode\u0026#34;) { outer.playground.mps.send_move_to(tx, ty); } } ... } ... } 后端 consumers/multiplayer/index.py\nasync def move_to(self, data): await self.channel_layer.group_send( self.room_name, { \u0026#39;type\u0026#39;: \u0026#34;group_send_event\u0026#34;, \u0026#39;event\u0026#39;: \u0026#34;move_to\u0026#34;, \u0026#39;uuid\u0026#39;: data[\u0026#39;uuid\u0026#39;], \u0026#39;tx\u0026#39;: data[\u0026#39;tx\u0026#39;], \u0026#39;ty\u0026#39;: data[\u0026#39;ty\u0026#39;], } ) async def group_send_event(self, data): await self.send(text_data=json.dumps(data)) async def receive(self, text_data): data = json.loads(text_data) event = data[\u0026#39;event\u0026#39;] if event == \u0026#34;create_player\u0026#34;: await self.create_player(data) elif event == \u0026#34;move_to\u0026#34;: await self.move_to(data) shoot-fireball 前端 用一个数组来存一个玩家发射的所有火球，以便于子弹消失时，将他们找出并对应删掉\nplayground/player/zbase.js\nclass Player extends AcGameObject { constructor(playground, x, y, radius, color, speed, character, username, photo) { ... this.fireballs = []; // 存该用户发射的所有火球 } add_listening_events() { ... this.playground.game_map.$canvas.mousedown(function(e) { ... else if (e.which === 1) { let tx = (e.clientX - rect.left) / outer.playground.scale; let ty = (e.clientY - rect.top) / outer.playground.scale; if (outer.cur_skill === \u0026#34;fireball\u0026#34;) { let fireball = outer.shoot_fireball(tx, ty); if (outer.playground.mode === \u0026#34;multi mode\u0026#34;) { outer.playground.mps.send_shoot_fireball(tx, ty, fireball.uuid); } } } ... }); $(window).keydown(function(e) { if (e.which === 81) { // 键盘按下q事件 outer.cur_skill = \u0026#34;fireball\u0026#34;; return false; } }); } ... shoot_fireball(tx, ty) { ... let fireball = new FireBall(this.playground, this, x, y, radius, vx, vy, color, speed, move_length, damage); this.fireballs.push(fireball); return fireball; } destroy_fireball(uuid) { for (let i = 0; i \u0026lt; this.fireballs.length; i ++ ) { let fireball = this.fireballs[i]; if (fireball.uuid == uuid) { fireball.destroy(); break; } } } ... playground/skill/fireball/zbase.js\nclass FireBall extends AcGameObject { ... on_destory() { let fireballs = this.player.fireballs; for (let i = 0; i \u0026lt; fireballs.length; i ++ ) { if (fireballs[i] === this) { fireballs.splice(i, 1); break; } } } } game/static/js/src/playground/socket/multiplayer/zbase.js\nclass MultiPlayerSocket { ... send_shoot_fireball(tx, ty, ball_uuid) { let outer = this; this.ws.send(JSON.stringify({ \u0026#39;event\u0026#39;: \u0026#39;move_to\u0026#39;, \u0026#39;uuid\u0026#39;: outer.uuid, \u0026#39;tx\u0026#39;: tx, \u0026#39;ty\u0026#39;: ty, \u0026#39;ball_uuid\u0026#39;: ball_uuid; })); } receive_shoot_fireball(uuid, tx, ty, ball_uuid) { let player = this.get_player(uuid); if (player) { let fireball = player.shoot_fireball(tx, ty); fireball.uuid = ball_uuid; } } } 后端 consumers/multiplayer/index.py\n... class MultiPlayer(AsyncWebsocketConsumer): ... async def shoot_fireball(self, data): await self.channel_layer.group_send( self.room_name, { \u0026#39;type\u0026#39;: \u0026#34;group_send_event\u0026#34;, \u0026#39;event\u0026#39;: \u0026#34;shoot_fireball\u0026#34;, \u0026#39;uuid\u0026#39;: data[\u0026#39;uuid\u0026#39;], \u0026#39;tx\u0026#39;: data[\u0026#39;tx\u0026#39;], \u0026#39;ty\u0026#39;: data[\u0026#39;ty\u0026#39;], \u0026#39;ball_uuid\u0026#39;: data[\u0026#39;ball_uuid\u0026#39;], } ) async def receive(self, text_data): ... elif event == \u0026#34;shoot_fireball\u0026#34;: await self.shoot_fireball(data) attack 为了只让一个客户端进行攻击命中的判断，因此只有发出方的火球才做碰撞检测\n其他客户端对于该火球只有动画效果\n又由于碰撞检测是在一台客户端上进行的，因此多端之间可能会存在同步上的延迟\n为此的解决方法是：碰撞检测成功时，强制把被击中玩家移动到发起方客户端中的位置，以避免击中延迟上发生的事情\n前端 playground/skill/fireball/zbase.js\nclass FireBall extends AcGameObject { update() { if (this.move_length \u0026lt; this.eps) { this.destroy(); return false; } this.update_move(); if (this.player.character !== \u0026#34;enemy\u0026#34;) { this.update_attack(); } this.render(); } attack(player) { ... if (this.playground.mode === \u0026#34;multi mode\u0026#34;) { this.playground.mps.send_attack(player.uuid, player.x, player.y, angle, this.damage, this.uuid); } ... } ... } playground/player/zbase.js\nclass Player extends AcGameObject { ... receive_attack(x, y, angle, damage, ball_uuid, attacker) { attacker.destroy_fireball(ball_uuid); this.x = x; this.y = y; this.is_attacked(angle, damage); } ... } game/static/js/src/playground/socket/multiplayer/zbase.js\nclass MultiPlayerSocket { ... send_attack(attackee_uuid, x, y, angle, damage, ball_uuid) { let outer = this; this.ws.send(JSON.stringify({ \u0026#39;event\u0026#39;: \u0026#34;attack\u0026#34;, \u0026#39;uuid\u0026#39;: outer.uuid, \u0026#39;attackee_uuid\u0026#39;: attackee_uuid, \u0026#39;x\u0026#39;: x, \u0026#39;y\u0026#39;: y, \u0026#39;angle\u0026#39;: angle, \u0026#39;damage\u0026#39;: damage, \u0026#39;ball_uuid\u0026#39;: ball_uuid, })); } receive_attack(uuid, attackee_uuid, x, y, angle, damage, ball_uuid) { let attacker = this.get_player(uuid); let attackee = this.get_player(attackee_uuid); if (attacker \u0026amp;\u0026amp; attackee) { attackee.receive_attack(x, y, angle, damage, ball_uuid, attacker); } } } 后端 consumers/multiplayer/index.py\n... class MultiPlayer(AsyncWebsocketConsumer): ... async def attack(self, data): await self.channel_layer.group_send( self.room_name, { \u0026#39;type\u0026#39;: \u0026#34;group_send_event\u0026#34;, \u0026#39;event\u0026#39;: \u0026#34;attack\u0026#34;, \u0026#39;uuid\u0026#39;: data[\u0026#39;uuid\u0026#39;], \u0026#39;x\u0026#39;: data[\u0026#39;x\u0026#39;], \u0026#39;y\u0026#39;: data[\u0026#39;y\u0026#39;], \u0026#39;angle\u0026#39;: data[\u0026#39;angle\u0026#39;], \u0026#39;damage\u0026#39;: data[\u0026#39;damage\u0026#39;], \u0026#39;ball_uuid\u0026#39;: data[\u0026#39;ball_uuid\u0026#39;], } ) ... 游戏的小优化 多人模式下游戏没有开始前，玩家不可以移动 为此我们先引入一个状态机：'waiting' -\u0026gt; 'fighting' -\u0026gt; 'over' 来标识当前游戏进行的状态\n然后用一个 notice_board 计分板在前端显示出来\n实现的逻辑就是：游戏初始时为 waiting 状态，房间内人数满 3 人时，才会进入 fighting，角色死亡时为 over\n且发射火球，移动等行为，当且仅当玩家状态为 fighting 时，才可以做\n然后设定火球技能的 cd 为 3 秒，且在游戏进入 fighting 时，先自动进入 cd 状态\n这样就实现了初始 3 秒内，任何玩家不可攻击\njs/src/playground/notice_board/zbase.js\nclass NoticeBoard extends AcGameObject { constructor(playground) { super(); this.playground = playground; this.ctx = this.playground.game_map.ctx; this.text = \u0026#34;已就绪：0人\u0026#34;; } start() { } write(text) { this.text = text; } update() { this.render(); } render() { this.ctx.font = \u0026#34;20px serif\u0026#34;; this.ctx.fillStyle = \u0026#34;white\u0026#34;; this.ctx.textAlign = \u0026#34;center\u0026#34;; this.ctx.fillText(this.text, this.playground.width / 2, 20); } } js/src/playground/zbase.js\nclass AcGamePlayground { ... show(mode) { ... this.state = \u0026#34;waiting\u0026#34;; // waiting -\u0026gt; fighting -\u0026gt; over this.notice_board = new NoticeBoard(this); this.player_count = 0; ... } } js/src/playground/player/zbase.js\nclass Player extends AcGameObject { ... add_listening_events() { ... this.playground.game_map.$canvas.mousedown(function(e) { if (outer.playground.state !== \u0026#34;fighting\u0026#34;) return false; ... } $(window).keydown(function(e) { if (outer.playground.state !== \u0026#34;fighting\u0026#34;) return false; ... }); } start() { this.playground.player_count ++ ; this.playground.notice_board.write(\u0026#34;已就绪：\u0026#34; + this.playground.player_count + \u0026#34;人\u0026#34;); if (this.playground.player_count \u0026gt;= 3) { this.playground.state = \u0026#34;fighting\u0026#34;; this.playground.notice_board.write(\u0026#34;Fighting\u0026#34;); } ... } ... } 技能CD 给火球技能设置 3s 的 cd，实现逻辑很简单，设定一个 cool_time 变量，每次渲染的时候减去上次渲染的时间间隔\n然后 cool_time 为 0 时，技能才可以成功释放\n另外修改冷却时间，只用修改自己的即可\njs/src/playground/player/zbase.js\nclass Player extends AcGameObject { constructor(...) { ... if (this.character === \u0026#34;me\u0026#34;) { this.fireball_coldtime = 3; // 单位：s } } ... add_listening_events() { ... this.playground.game_map.$canvas.mousedown(function(e) { ... else if (e.which === 1) { ... if (outer.cur_skill === \u0026#34;fireball\u0026#34;) { ... if (outer.playground.mode === \u0026#34;multi mode\u0026#34;) { outer.playground.mps.send_shoot_fireball(tx, ty, fireball.uuid); } outer.fireball_coldtime = 3; } } ... }); $(window).keydown(function(e) { ... if (outer.fireball_coldtime \u0026gt;= outer.eps) return false; ... }); } update() { ... if (this.character === \u0026#34;me\u0026#34; \u0026amp;\u0026amp; this.playground.state === \u0026#34;fighting\u0026#34;) { this.update_coldtime(); } ... } update_coldtime() { this.fireball_coldtime -= this.timedelta / 1000; this.fireball_coldtime = Math.max(0, this.fireball_coldtime); } ... } 用图片来渲染技能CD js/src/playground/player/zbase.js\nclass Player extends AcGameObject { constructor(...) { ... if (this.character === \u0026#34;me\u0026#34;) { this.fireball_coldtime = 3; // 单位：s this.fireball_img = new Image(); this.fireball_img.src = \u0026#34;https://cdn.acwing.com/media/article/image/2021/12/02/1_9340c86053-fireball.png\u0026#34;; } } ... render() { ... if (this.character === \u0026#34;me\u0026#34; \u0026amp;\u0026amp; this.playground.state === \u0026#34;fighting\u0026#34;) { this.render_skill_coldtime(); } } render_skill_coldtime() { let scale = this.playground.scale; let x = 1.5, y = 0.9, r = 0.04; // 渲染技能图标 this.ctx.save(); this.ctx.beginPath(); this.ctx.arc(x * scale, y * scale, r * scale, 0, Math.PI * 2, false); this.ctx.stroke(); this.ctx.clip(); this.ctx.drawImage(this.fireball_img, (x - r) * scale, (y - r) * scale, r * 2 * scale, r * 2 * scale); this.ctx.restore(); // 渲染冷却指示 if (this.fireball_coldtime \u0026gt;= this.eps){ this.ctx.beginPath(); this.ctx.moveTo(x * scale, y * scale); this.ctx.arc(x * scale, y * scale, r * scale, 0 - Math.PI / 2, Math.PI * 2 * (1 - this.fireball_coldtime / 3) - Math.PI / 2, true); this.ctx.lineTo(x * scale, y * scale); this.ctx.fillStyle = \u0026#34;rgba(0, 0, 255, 0.6)\u0026#34;; this.ctx.fill(); } } ... 添加一个闪现技能 单机部分 js/src/playground/player/zbase.js\nclass Player extends AcGameObject { constructor(...) { ... if (this.character === \u0026#34;me\u0026#34;) { ... this.blink_coldtime = 5; this.blink_img = new Image(); this.blink_img.src = \u0026#34;https://cdn.acwing.com/media/article/image/2021/12/02/1_daccabdc53-blink.png\u0026#34;; } } add_listening_events() { ... this.playground.game_map.$canvas.mousedown(function(e) { ... else if (e.which === 1) { ... else if (outer.cur_skill === \u0026#34;blink\u0026#34;) { outer.blink(tx, ty); // 同步函数 if (outer.playground.mode === \u0026#34;multi mode\u0026#34;) { outer.playground.mps.send_blink(tx, ty); } outer.blink_coldtime = 5; } } outer.cur_skill = null; // 清空当前技能 }); $(window).keydown(function(e) { ... else if (e.which === 70) { // f键 if (outer.blink_coldtime \u0026gt;= outer.eps) return true; outer.cur_skill = \u0026#34;blink\u0026#34;; return false; } }); } ... blink(tx, ty) { let d = this.get_dist(this.x, this.y, tx, ty); d = Math.min(d, 0.5); let angle = Math.atan2(ty - this.y, tx - this.x); this.x += d * Math.cos(angle); this.y += d * Math.sin(angle); this.move_length = 0; // 闪现完停下来 } ... render_skill_coldtime() { ... x = 1.62, y = 0.9, r = 0.04; // 闪现技能 // 渲染技能图标 this.ctx.save(); this.ctx.beginPath(); this.ctx.arc(x * scale, y * scale, r * scale, 0, Math.PI * 2, false); this.ctx.stroke(); this.ctx.clip(); this.ctx.drawImage(this.blink_img, (x - r) * scale, (y - r) * scale, r * 2 * scale, r * 2 * scale); this.ctx.restore(); // 渲染冷却指示 if (this.blink_coldtime \u0026gt;= this.eps){ this.ctx.beginPath(); this.ctx.moveTo(x * scale, y * scale); this.ctx.arc(x * scale, y * scale, r * scale, 0 - Math.PI / 2, Math.PI * 2 * (1 - this.blink_coldtime / 5) - Math.PI / 2, true); this.ctx.lineTo(x * scale, y * scale); this.ctx.fillStyle = \u0026#34;rgba(0, 0, 255, 0.6)\u0026#34;; this.ctx.fill(); } } } 联机部分 game/static/js/src/playground/socket/multiplayer/zbase.js\nclass MultiPlayerSocket { ... send_blink(tx, ty) { let outer = this; this.ws.send(JSON.stringify({ \u0026#39;event\u0026#39;: \u0026#34;blink\u0026#34;, \u0026#39;uuid\u0026#39;: outer.uuid, \u0026#39;tx\u0026#39;: tx, \u0026#39;ty\u0026#39;: ty, })); } receive_blink(uuid, tx, ty) { let player = this.get_player(uuid); if (player) { player.blink(tx, ty); } } } consumers/multiplayer/index.py\n... class MultiPlayer(AsyncWebsocketConsumer): ... async def blink(self, data): await self.channel_layer.group_send( self.room_name, { \u0026#39;type\u0026#39;: \u0026#34;group_send_event\u0026#34;, \u0026#39;event\u0026#39;: \u0026#34;blink\u0026#34;, \u0026#39;uuid\u0026#39;: data[\u0026#39;uuid\u0026#39;], \u0026#39;tx\u0026#39;: data[\u0026#39;tx\u0026#39;], \u0026#39;ty\u0026#39;: data[\u0026#39;ty\u0026#39;], } ) 实现聊天系统ஐ 8.1 上课笔记 | 大菜狗 优化键盘绑定事件 这部分算是之前的遗留问题，先前的 keydown 监听事件绑定在了 window 上会出现一个问题\n如果在一个浏览器内打开多个 ACAPP，此时按下键位触发 keydown 事件，会被浏览器内所有的 ACAPP 都捕获到\n之前影响不大，但对此次要实现的聊天系统就有着致命的影响，即打开一个 ACAPP 的聊天栏，其他都会被打开\n所有我们要将 keydown 监听事件绑定到 canvas 上\nplayground/player/zbase.js\nclass Player extends AcGameObject { ... add_listening_events() { ... this.playground.game_map.$canvas.keydown(function(e) { if (outer.playground.state !== \u0026#34;fighting\u0026#34;) return true; if (e.which === 81) { // 键盘按下q事件 if (outer.fireball_coldtime \u0026gt;= outer.eps) return true; outer.cur_skill = \u0026#34;fireball\u0026#34;; return false; } else if (e.which === 70) { // f键 if (outer.blink_coldtime \u0026gt;= outer.eps) return true; outer.cur_skill = \u0026#34;blink\u0026#34;; return false; } }); } } playground/game-map/zbase.js\nclass GameMap extends AcGameObject { constructor(playground) { ... this.$canvas = $(`\u0026lt;canvas tabindex=0\u0026gt;\u0026lt;/canvas\u0026gt;`); ... } start() { this.$canvas.focus(); } } 本地前端 要实现两个部分： 1. 文本输入框（让用户输入要发送的信息） 2. 历史记录显示框（之前用户发送的信息的显示框）\n欲实现逻辑：用户按下 \u0026lt;Enter\u0026gt; 后，游戏界面弹出文本输入框，然后聚焦于文本输入框，且同时弹出历史记录显示框 3 秒\n然后用户输入信息后，按下 \u0026lt;Enter\u0026gt; 后发出信息，接着信息会显示在历史记录显示框最下方，并弹出历史记录显示框 3 秒\nplayground/chat_field/zbase.js\nchat field 负责管理 文本输入框 和 历史记录显示框\nclass ChatField { constructor(playground) { this.playground = playground; this.$history = $(`\u0026lt;div class=\u0026#34;ac-game-chat-field-history\u0026#34;\u0026gt;\u0026lt;/div\u0026gt;`); this.$input = $(`\u0026lt;input type=\u0026#34;text\u0026#34; class=\u0026#34;ac-game-chat-field-input\u0026#34;\u0026gt;`); this.$history.hide(); this.$input.hide(); this.func_id = null; this.playground.$playground.append(this.$history); this.playground.$playground.append(this.$input); this.start(); } start() { this.add_listening_events(); } add_listening_events() { let outer = this; this.$input.keydown(function(e) { if (e.which === 27) { //ESC outer.hide_input(); return false; } else if (e.which === 13) { let username = outer.playground.root.settings.username; let text = outer.$input.val(); if (text) { outer.$input.val(\u0026#34;\u0026#34;); outer.add_message(username, text); } return false; } }); } show_history() { let outer = this; this.$history.fadeIn(); if (this.func_id) clearTimeout(this.func_id); this.func_id = setTimeout(function() { outer.$history.fadeOut(); outer.func_id = null; }, 3000); } render_message(message) { return $(`\u0026lt;div\u0026gt;${message}\u0026lt;/div\u0026gt;`); } add_message(username, text) { this.show_history(); let message = `[${username}] ${text}`; this.$history.append(this.render_message(message)); this.$history.scrollTop(this.$history[0].scrollHeight); } show_input() { this.show_history(); this.$input.show(); this.$input.focus(); // 输入时，聚焦于输入框 } hide_input() { this.$input.hide(); this.playground.game_map.$canvas.focus(); // 退出时，聚焦回游戏界面 } } playground/zbase.js\n把它创建出来\nclass AcGamePlayground { ... show(mode) { //打开 playground 界面 ... else if (mode === \u0026#34;multi mode\u0026#34;) { this.chat_field = new ChatField(this); ... } } } playground/player/zbase.js\n添加监听事件\nclass Player extends AcGameObject { ... add_listening_events() { ... this.playground.game_map.$canvas.keydown(function(e) { if (e.which === 13) { // enter (显示对话框) if (outer.playground.mode === \u0026#34;multi mode\u0026#34;) { outer.playground.chat_field.show_input(); return false; } } else if (e.which === 27) { // esc（关闭对话框） if (outer.playground.mode === \u0026#34;multi mode\u0026#34;) { outer.playground.char_field.hide_input(); return false; } } ... } } } game.css\n... .ac-game-chat-field-history { position: absolute; top: 66%; left: 20%; transform: translate(-50%, -50%); width: 20%; height: 32%; color: white; font-size: 2vh; padding: 5px; overflow: auto; } .ac-game-chat-field-history::-webkit-scrollbar { width: 0; } .ac-game-chat-field-input { position: absolute; top: 86%; left: 20%; transform: translate(-50%, -50%); width: 20%; height: 3vh; color: white; font-size: 2vh; background-color: rgba(222,225,230, 0.2); } 联机聊天窗 前端 playground/chat_field/zbase.js\nclass ChatField { ... add_listening_events() { ... this.$input.keydown(function(e) { ... else if (e.which === 13) { ... if (text) { ... outer.playground.mps.send_message(text); } ... } }); } ... } js/src/playground/socket/multiplayer/zbase.js\nclass MultiPlayerSocket { ... send_message(text) { let outer = this; this.ws.send(JSON.stringify({ \u0026#39;event\u0026#39;: \u0026#34;message\u0026#34;, \u0026#39;uuid\u0026#39;: outer.uuid, \u0026#39;username\u0026#39;: outer.playground.root.settings.username, \u0026#39;text\u0026#39;: text, })); } receive_message(username, text) { this.playground.chat_field.add_message(username, text); } } 后端 consumers/multiplayer/index.py\n... class MultiPlayer(AsyncWebsocketConsumer): ... async def message(self, data): await self.channel_layer.group_send( self.room_name, { \u0026#39;type\u0026#39;: \u0026#34;group_send_event\u0026#34;, \u0026#39;event\u0026#39;: \u0026#34;message\u0026#34;, \u0026#39;uuid\u0026#39;: data[\u0026#39;uuid\u0026#39;], \u0026#39;username\u0026#39;: data[\u0026#39;username\u0026#39;], \u0026#39;text\u0026#39;: data[\u0026#39;text\u0026#39;], } ) 实现匹配系统ஐ 9. 实现匹配系统 | 讲义 9.1 上课笔记 | 一只野生彩色铅笔 本章节内容是利用 thrift 创建客户端-服务端交互的接口\n然后利用该接口完成一个匹配系统\n匹配系统由一个消息队列 + 生产者-消费者模型 + 匹配池 完成\n基本与 Linux基础课 里的部分完全一致\n当时我们是拿 cpp 来写的，写了差不多 200 行\n本节会拿 py 来实现，差不多 140 行即可\nthrift 接口文件\nnamespace py match_service service Match { i32 add_player(1: i32 score, 2: string uuid, 3: string username, 4: string photo, 5: string channel_name), } 然后用该源文件生成接口文件\n服务端 配置 asgi.py 让服务端进程可以调用客户端进程里的函数\nacapp/acapp/asgi.py\nimport os import django os.environ.setdefault(\u0026#39;DJANGO_SETTINGS_MODULE\u0026#39;, \u0026#39;acapp.settings\u0026#39;) django.setup() ... from channels.layers import get_channel_layer channel_layer = get_channel_layer() ... acapp/match_system/src/main.py\n#! /usr/bin/env python3 import glob import sys sys.path.insert(0, glob.glob(\u0026#39;../../\u0026#39;)[0]) from match_server.match_service import Match from thrift.transport import TSocket from thrift.transport import TTransport from thrift.protocol import TBinaryProtocol from thrift.server import TServer from queue import Queue from time import sleep from threading import Thread from acapp.asgi import channel_layer from asgiref.sync import async_to_sync from django.core.cache import cache queue = Queue() # 消息队列 class Player: def __init__(self, score, uuid, username, photo, channel_name): self.score = score self.uuid = uuid self.username = username self.photo = photo self.channel_name = channel_name self.waiting_time = 0 # 等待时间 class Pool: def __init__(self): self.players = [] def add_player(self, player): self.players.append(player) def check_match(self, a, b): dt = abs(a.score - b.score) a_max_dif = a.waiting_time * 50 b_max_dif = b.waiting_time * 50 return dt \u0026lt;= a_max_dif and dt \u0026lt;= b_max_dif def match_success(self, ps): print(\u0026#34;Match Success: %s %s %s\u0026#34; % (ps[0].username, ps[1].username, ps[2].username)) room_name = \u0026#34;room-%s-%s-%s\u0026#34; % (ps[0].uuid, ps[1].uuid, ps[2].uuid) players = [] for p in ps: async_to_sync(channel_layer.group_add)(room_name, p.channel_name) players.append({ \u0026#39;uuid\u0026#39;: p.uuid, \u0026#39;username\u0026#39;: p.username, \u0026#39;photo\u0026#39;: p.photo, \u0026#39;hp\u0026#39;: 100, }) cache.set(room_name, players, 3600) # 有效时间：1小时 for p in ps: async_to_sync(channel_layer.group_send)( room_name, { \u0026#39;type\u0026#39;: \u0026#34;group_send_event\u0026#34;, \u0026#39;event\u0026#39;: \u0026#34;create_player\u0026#34;, \u0026#39;uuid\u0026#39;: p.uuid, \u0026#39;username\u0026#39;: p.username, \u0026#39;photo\u0026#39;: p.photo, } ) def increase_waiting_time(self): for player in self.players: player.waiting_time += 1 def match(self): while len(self.players) \u0026gt;= 3: self.players = sorted(self.players, key=lambda p: p.score) flag = False for i in range(len(self.players) - 2): a, b, c = self.players[i], self.players[i + 1], self.players[i + 2] if self.check_match(a, b) and self.check_match(a, c) and self.check_match(b, c): self.match_success([a, b, c]) self.players = self.players[:i] + self.players[i + 3:] flag = True break if not flag: break self.increase_waiting_time() class MatchHandler: def add_player(self, score, uuid, username, photo, channel_name): print(\u0026#34;Add Player: %s %d\u0026#34; % (username, score)) player = Player(score, uuid, username, photo, channel_name) queue.put(player) return 0 def get_player_from_queue(): try: return queue.get_nowait() except: return None def worker(): pool = Pool() while True: player = get_player_from_queue() if player: pool.add_player(player) else: pool.match() sleep(1) if __name__ == \u0026#39;__main__\u0026#39;: handler = MatchHandler() processor = Match.Processor(handler) transport = TSocket.TServerSocket(host=\u0026#39;127.0.0.1\u0026#39;, port=9090) tfactory = TTransport.TBufferedTransportFactory() pfactory = TBinaryProtocol.TBinaryProtocolFactory() server = TServer.TThreadedServer( processor, transport, tfactory, pfactory) Thread(target=worker, daemon=True).start() print(\u0026#39;Starting the server...\u0026#39;) server.serve() print(\u0026#39;done.\u0026#39;) 客户端 扩展数据库表，让其可以存放 rank分 的信息\ngame/models/player/player.py\n... class Player(models.Model): ... score = models.IntegerField(default=1500) ... consumers/multiplayer/index.py\nfrom channels.generic.websocket import AsyncWebsocketConsumer import json from django.conf import settings from django.core.cache import cache from thrift import Thrift from thrift.transport import TSocket from thrift.transport import TTransport from thrift.protocol import TBinaryProtocol from match_system.src.match_server.match_service import Match from game.models.player.player import Player from channels.db import database_sync_to_async class MultiPlayer(AsyncWebsocketConsumer): async def connect(self): await self.accept() async def disconnect(self, close_code): if self.room_name: await self.channel_layer.group_discard(self.room_name, self.channel_name) async def create_player(self, data): self.room_name = None self.uuid = data[\u0026#39;uuid\u0026#39;] # Make socket transport = TSocket.TSocket(\u0026#39;127.0.0.1\u0026#39;, 9090) # Buffering is critical. Raw sockets are very slow transport = TTransport.TBufferedTransport(transport) # Wrap in a protocol protocol = TBinaryProtocol.TBinaryProtocol(transport) # Create a client to use the protocol encoder client = Match.Client(protocol) def db_get_player(): return Player.objects.get(user__username=data[\u0026#39;username\u0026#39;]) player = await database_sync_to_async(db_get_player)() # Connect! transport.open() client.add_player(player.score, data[\u0026#39;uuid\u0026#39;], data[\u0026#39;username\u0026#39;], data[\u0026#39;photo\u0026#39;], self.channel_name) # Close! transport.close() async def group_send_event(self, data): if not self.room_name: keys = cache.keys(\u0026#39;*%s*\u0026#39; % (self.uuid)) if keys: self.room_name = keys[0] await self.send(text_data=json.dumps(data)) ... 项目收尾ஐ 加密、压缩js代码 安装 terser :\nsudo apt-get update sudo apt-get install npm sudo npm install terser -g terser 不仅支持文件输入，也支持标准输入。结果会输出到标准输出中。\n使用方式：\nterser xxx.js -c -m 我们将整合 js 文件的脚本修改一下即可：\nscripts/compress_game_js.sh\n#! /bin/bash JS_PATH=/home/acs/acapp/game/static/js/ JS_PATH_DIST=${JS_PATH}dist/ JS_PATH_SRC=${JS_PATH}src/ find $JS_PATH_SRC -type f -name \u0026#39;*.js\u0026#39; | sort | xargs cat | terser -c -m \u0026gt; ${JS_PATH_DIST}game.js echo \u0026#34;yes\u0026#34; | python3 manage.py collectstatic 清理监听函数 在AcAPP关闭之前触发的事件可以通过如下api添加：\nAcWingOS.api.window.on_close(func); 注意：\n同一个页面中，多个 acapp 引入的 js 代码只会加载一次，因此 AC_GAME_OBJECTS 等全局变量是同一个页面、同一个 acapp 的所有窗口共用的 各自创建的局部变量是独立的，比如 new AcGame() 创建出的对象各个窗口是独立的 我们给每一个窗口创建一个 uid 然后根据不同的 uid 进行事件解绑\nplayground/zbase.js\nclass AcGamePlayground { ... create_uuid() { let res = \u0026#34;\u0026#34;; for (let i = 0; i \u0026lt; 8; i ++ ) { let x = parseInt(Math.floor(Math.random() * 10)); //[0, 10) res += x; } return res; } start() { let outer = this; let uuid = this.create_uuid(); $(window).on(`resize.${uuid}`, function() { outer.resize(); }); if (this.root.AcWingOS) { outer.root.AcWingOS.api.window.on_close(function() { $(window).off(`resize.${uuid}`); }); } } ... } 编写每局游戏的结束界面 单独创建一个结束界面，然后游戏结束的时候渲染出该结束界面即可\n因为结束界面要覆盖在游戏界面之上，因此我们需要先修改一下游戏引擎，添加一个 late_update\n在每一帧渲染的内容最后再渲染，从而实现结束界面叠加在游戏界面之上的效果\nac_game_object/zbase.js\n... class AcGameObject { ... late_update() { // 每一帧均会执行一次，且在所有 update 执行完后才执行 } ... } ... let AC_GAME_ANIMATION = function(timestamp) { ... for (let i = 0; i \u0026lt; AC_GAME_OBJECTS.length; i ++ ) { let obj = AC_GAME_OBJECTS[i]; obj.late_update(); } ... } ... 然后我们做一个渲染出结束界面的类\nplayground/score_board/zbase.js\nclass ScoreBoard extends AcGameObject { constructor(playground) { super(); this.playground = playground; this.ctx = this.playground.game_map.ctx; this.state = null; // win-胜利；lose-失败 this.win_img = new Image(); this.win_img.src = \u0026#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_8f58341a5e-win.png\u0026#34;; this.lose_img = new Image(); this.lose_img.src = \u0026#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_9254b5f95e-lose.png\u0026#34;; } start() { } add_listening_events() { // 点击后，返回主页面 let outer = this; let $canvas = this.playground.game_map.$canvas; $canvas.on(\u0026#39;click\u0026#39;, function() { outer.playground.hide(); outer.playground.root.menu.show(); }); } win() { this.state = \u0026#34;win\u0026#34;; let outer = this; setTimeout(function() { outer.add_listening_events(); }, 1000); // 1秒后监听点击事件 } lose() { this.state = \u0026#34;lose\u0026#34;; let outer = this; setTimeout(function() { outer.add_listening_events(); }, 1000); // 1秒后监听点击事件 } late_update() { this.render(); // 渲染在图层最上方 } render() { let len = this.playground.height / 2; if (this.state === \u0026#34;win\u0026#34;) { this.ctx.drawImage(this.win_img, this.playground.width / 2 - len / 2, this.playground.height / 2 - len / 2, len, len); } else if (this.state === \u0026#34;lose\u0026#34;) { this.ctx.drawImage(this.lose_img, this.playground.width / 2 - len / 2, this.playground.height / 2 - len / 2, len, len); } } } 通过游戏结束的逻辑判断，渲染结束界面，同时在结束并返回主菜单的时候，重置游戏元素\n游戏元素重置\nplayground/zbase.js\nclass AcGamePlayground { ... show(mode) { // 打开 playground 界面 ... this.score_board = new ScoreBoard(this); ... } ... hide() { // 清空所有游戏元素 while (this.players \u0026amp;\u0026amp; this.players.length \u0026gt; 0) { this.players[0].destroy(); } if (this.game_map) { this.game_map.destroy(); this.game_map = null; } if (this.notice_board) { this.notice_board.destroy(); this.notice_board = null; } if (this.score_board) { this.score_board.destroy(); this.score_board = null; } this.$playground.empty(); // 清空所有html标签 this.$playground.hide(); } } 游戏结束的逻辑判断\nplayground/player/zbase.js\nclass Player extends AcGameObject { ... update() { ... this.update_win(); ... } update_win() { // 竞赛状态，且只有一名玩家，且改名玩家就是我，则胜利 if (this.playground.state === \u0026#34;fighting\u0026#34; \u0026amp;\u0026amp; this.character === \u0026#34;me\u0026#34; \u0026amp;\u0026amp; this.playground.players.length === 1) { this.playground.state = \u0026#34;over\u0026#34;; this.playground.score_board.win(); } } ... on_destroy() { // 我死亡，且游戏处于竞赛状态，则失败 if (this.character === \u0026#34;me\u0026#34; \u0026amp;\u0026amp; this.playground.state === \u0026#34;fighting\u0026#34;) { this.playground.state = \u0026#34;over\u0026#34; this.playground.score_board.lose(); } ... } } 更新战绩 这里我们完全交给后端来判断\n在处理广播的 attack 信息的时候，先前我们额外留了一个参数 hp\n围绕该 hp 进行续写，若当前房间内 hp 大于 0 的玩家少于等于 1 个\n则对于所有 hp 为 0 的玩家减 rank 分，大于 0 的玩家加 rank 分\nconsumers/multiplayer/index.py\n... class MultiPlayer(AsyncWebsocketConsumer): ... async def attack(self, data): if not self.room_name: return players = cache.get(self.room_name) if not players: return for player in players: if player[\u0026#39;uuid\u0026#39;] == data[\u0026#39;attackee_uuid\u0026#39;]: player[\u0026#39;hp\u0026#39;] -= 25 remain_cnt = 0 for player in players: if player[\u0026#39;hp\u0026#39;] \u0026gt; 0: remain_cnt += 1 if remain_cnt \u0026gt; 1: # 继续进行游戏 if self.room_name: cache.set(self.room_name, players, 3600) else: # 结算 def db_update_player_score(username, score): player = Player.objects.get(user__username=username) player.score += score player.save() for player in players: if player[\u0026#39;hp\u0026#39;] \u0026lt;= 0: await database_sync_to_async(db_update_player_score)(player[\u0026#39;username\u0026#39;], -5) else: await database_sync_to_async(db_update_player_score)(player[\u0026#39;username\u0026#39;], 10) ... ... 添加favicon.ico 这是修正一个小 BUG，之前 web 端一直没有网页显示图标，这里给他加上去\ngame/templates/multiends/web.html\n... \u0026lt;head\u0026gt; ... \u0026lt;link rel=\u0026#34;icon\u0026#34; href=\u0026#34;https://cdn.acwing.com/media/article/image/2021/12/17/1_be4c11ce5f-acapp.png\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; ... 各种环境命令 启动django项目，在~/acapp目录下执行： python3 manage.py runserver 0.0.0.0:8000 每次修改好 game/static 下的文件后，需要在~/acapp目录下运行打包文件： ./scripts/compress_game_js.sh 在定义完一个数据表之后，需要将创建的数据表更新到 django 的数据库中去： $ python3 manage.py makemigrations \u0026gt; Migrations for \u0026#39;game\u0026#39;: \u0026gt; game/migrations/0001_initial.py \u0026gt; - Create model Player $ $ python3 manage.py migrate \u0026gt; Operations to perform: \u0026gt; Apply all migrations: admin, auth, contenttypes, game, sessions \u0026gt; Running migrations: \u0026gt; Applying game.0001_initial... OK 启动nginx服务，用于域名访问： sudo /etc/init.d/nginx start 启动uwsgi服务，用于域名访问： uwsgi --ini scripts/uwsgi.ini 关闭uwsgi服务： sudo pkill -f uwsgi -9 启动 redis-server，用于一键登录： sudo redis-server /etc/redis/redis.conf 启动 Django_channels，用于联机对战，在~/acapp目录下执行： daphne -b 0.0.0.0 -p 5015 acapp.asgi:application 启动thrift服务，用于匹配系统，在~/acapp/match_system/src/目录下执行： ./main.py 版本更新，在术士之战中将 js地址 一栏更新为： // 本地文件夹中对应的文件也需要更改名字 https://app2433.acapp.acwing.com.cn/static/js/dist/game-版本号.js ","permalink":"https://xancoding.cn/posts/2022-10-29-18-23-59/","summary":"AcWing Django 框架课 | Colopen\u0026rsquo;s blog AcWing Django 框架课 WarOfWarlock 搭建工具 HTML \u0026amp; CSS \u0026amp; JavaScript \u0026amp; Django 参考资料 AcWing Django 框架课 | Colopen\u0026rsquo;s blog AcWing Django框架课 Django 项目创建 2.1上课笔记 | 栎 2.1上课笔记 | Andrew1729","title":"WarOfWarlock--AcWing Django 框架课"},{"content":"Todo清单 我目前在用的时间管理软件是Todo清单，优势在于多设备云端同步（需要付费使用）、具备番茄钟功能、可以用来安排每日的待办清单\n安排好你的待办清单 思考以下几点：\n1. 有哪些工作需要完成？\n2.我有多少时间可以用来完成这些工作？\n3.工作事项是否有逻辑顺序以及优先级\n每一天你都会受到很多的干扰，看到APP上的一个个红点，消息通知从屏幕上弹出。注意力在一次次的查看信息中被逐渐消磨，时间也变得碎片化，难以静下心来专注于某件事。有些干扰无可避免，但只要愿意付出努力，大部分的干扰可以得到排除。\n白天我会尽量避免受到干扰，所有的社交软件，它们是工作效率的最大杀手。我控制自己在上午以及下午的大块时间中忽略来自社交网络的信息，将消息的查看集中在中午以及晚上的特定时间，做一个统一的查看。\n每天的晚上，我会花些的时间，把第二天的工作做个大致的安排，写到待办事项中，第二天再用番茄工作法进行专注执行。记得让自己的计划保持比较高的自由度，要留有足够的时间余量。\n番茄工作法 番茄工作法这个名词我之前便有听说过，但一直未尝试着去做过，直到最近从《软技能》一书中再次看到，感觉不错，便开始了尝试。在经过一个星期的体验后，它确实提高了我的效率，让我能够更好的对自己的时间做出规划。\n它的基本思路是：\n你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。\n在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。\n值得注意的是，使用番茄工作法所要做的并不只是集中注意力25分钟这么简单。通过使用番茄工作法，你可以高效跟踪自己一天完成的番茄钟的数量，并为此设定目标。开始的几天，你可能无法对自己能完成的工作做一个很好的估计。但相信在使用番茄工作法一段时间后，你可以做到较为准确的估计，并能完成通过番茄钟的数量，评估自己完成的工作。\n通过使用番茄钟，你可以定量的描述自己的工作状态，而不再像过去那样只是凭借感觉。你可以把每周看作是由有限个番茄钟组成的，知道了自己一周大概能完成的番茄钟的数量后，你也会认识到应该如何通过设置任务的优先级，来合理分配自己的时间。你不会再过高的幻想自己会在一周的时间里完成超出自己实际许多的任务，并在每周结束时，因未能完成而感到沮丧。\n当你在一天中为自己设置了x个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。它不仅能帮你完成更多的工作，还能让你尽情享受业余时间——因为你已经通过番茄钟完成了一天的任务，在剩下的时间里，你完全可以自由安排消磨时间，而不会再有任何的心理负担。\n最后的最后，一定记得要对自己的能力做一个合理的预期，你每周工作40小时并不意味着你能完成80个番茄钟。找到适合你的番茄钟数量，过度的加量会适得其反。\n推荐阅读 Todo清单 一款跨平台待办事项与时间管理应用 如何用Todo清单度过余生的每一天？ 告别社交网络有多难 社交网络名存实亡 Sunset of the social network 《软技能》 生产力篇 ","permalink":"https://xancoding.cn/posts/2022-10-14-16-07-09/","summary":"Todo清单 我目前在用的时间管理软件是Todo清单，优势在于多设备云端同步（需要付费使用）、具备番茄钟功能、可以用来安排每日的待办清单 安排好","title":"Manage-time"},{"content":" 这个时代不缺信息，因为信息太多了，缺的是时间\n整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子\n获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息\nRSS 知道RSS的人越少，我就越希望它能被人知道！ RSS 二十年 RSS Source | RSS订阅源推荐 什么是RSS? RSS 英文全称为 Really Simple Syndication，即简易资讯聚合。其实叫什么并不重要，我们只用知道它是一个能让你在一个地方订阅各种感兴趣网站的工具。\nRSS的核心是资讯聚合，由用户自己决定信息源。我们可以通过订阅网站的RSS源，主动获得想要的资讯，去挖掘一些自己真正感兴趣的东西。\n如何使用RSS? 利用RSS获取信息，只需要在目标网站上找到RSS链接，并把它添加到RSS阅读器中。\n我使用的工具是Inoreader RSS 阅读器 （需翻墙） + RSSHub Radar 浏览器插件。\nInoreader 吸引我的点是它支持PC端和手机端的同步，并且PC端可以直接通过浏览器插件使用，使我在手机和电脑上都可以查看消息。\nRSSHub Radar 的出现，完美解决了不是所有的网页都提供RSS源这一痛点，它可以自动生成网站的RSS源以供订阅，非常方便。\n我通过使用RSS来订阅我感兴趣的个人博客\n我订阅的内容 中国数字时代 在这里，了解祖国\n人生随笔 平行主义\n程序员的喵 个人博客\n省流 每日资讯\n潮流周刊 潮流周刊\n阮一峰的网络日志 科技周刊\nPodcast 播客也是一个很好的信息源，可以在做一些不用🧠的事时听，适合用来拓宽自己的知识面，对一些自己之前完全没有接触过的领域做一个初步的了解，抑或是单纯用以放松也不错。我的使用场景通常是在吃饭或是上下课的路上。\n我目前在使用的播客软件是小宇宙，体验不错。\n我订阅的内容 声动早咖啡 每日资讯\n史蒂夫说 心理学，认识自我\nRead-books PC Neat Reader 是一款EPUB阅读器，用以阅读EPUB格式的电子书，体验感不错。我会在 Z-Library or LoreFree or Jiumo Search 鸠摩搜索 上搜索得到我想要看的书的EPUB格式的电子书后，存在本地文件上，通过 Neat Reader 阅读\n插一句， Z-lib 还有 Android app，可以直接传输到邮箱📫中\n如果找不到EPUB格式的书籍，我会存 PDF 格式的，然后在 Sumatra PDF 上阅读\nAndroid https://weread.qq.com/ 手机上的话，我会使用微信读书，把找到的电子书上传到书架后进行阅读\n纸质书 不过，相比于电子书，我其实还是更喜欢纸质书的阅读体验。所以，我也会隔段时间便去拿着自己的书单，去学校的图书馆找书看（当然，并不是每次图书馆都有我想要的书😭）\nChatGPT \u0026amp; Chrome 在搜索引擎体验上， Google （强推，体验极佳） \u0026gt; Bing （偶尔用用） \u0026raquo; Baidu （完全不考虑） ChatGPT 使用指南 # How to Properly Use a Search Engine Practical Google Search Tips 如何挖掘网络资源[0]：为啥要写这个话题？ 如何挖掘网络资源[1]：网站的类型和使用场景 如何挖掘网络资源[2]：Google 搜索的基本语法 如何挖掘网络资源[3]：解答 Google 搜索的常见问题（FAQs） 推荐阅读 优化自己的信息源 见室优质信息源导航 ","permalink":"https://xancoding.cn/posts/2022-10-12-22-42-04/","summary":"这个时代不缺信息，因为信息太多了，缺的是时间 整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子 获取信息的方式最好是主动的，摆脱算","title":"Get Info"},{"content":"int main() { printf(\u0026#34;Hello, World\u0026#34;); return(0); } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World\u0026#34;; return 0; } public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } echo \u0026#34;Hello, World\u0026#34; Hello, World document.write(\u0026#39;Hello, World\u0026#39;); print (\u0026#34;Hello, World\u0026#34;) ","permalink":"https://xancoding.cn/posts/2022-10-12-07-27-58/","summary":"int main() { printf(\u0026#34;Hello, World\u0026#34;); return(0); } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World\u0026#34;; return 0; } public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } echo \u0026#34;Hello, World\u0026#34; Hello, World document.write(\u0026#39;Hello, World\u0026#39;); print (\u0026#34;Hello, World\u0026#34;)","title":"Hello World"},{"content":"About me 𝑯𝒊, 𝑰\u0026rsquo;𝒎 ✨ 𝐗𝐚𝐧 ✨,𝐚 𝐂𝐒 𝐬𝐭𝐮𝐝𝐞𝐧𝐭 𝐟𝐫𝐨𝐦 𝐍𝐂𝐄𝐏𝐔.\n𝐌𝐲 ❤ 𝐡𝐨𝐛𝐛𝐢𝐞𝐬 ❤ 𝐚𝐫𝐞 𝐑𝐮𝐧𝐧𝐢𝐧𝐠, 𝐇𝐢𝐤𝐢𝐧𝐠, 𝐓𝐞𝐜𝐡𝐧𝐨𝐥𝐨𝐠𝐲, 𝐇𝐢𝐬𝐭𝐨𝐫𝐲 𝐚𝐧𝐝 𝐏𝐬𝐲𝐜𝐡𝐨𝐥𝐨𝐠𝐲.\nMotto The value of a college education is not the learning of many facts but the training of the mind to think.1 Do not try to change yourself.Work to improve the way you perform.2 All problems in computer science can be solved by another level of indirection.3 DRY\u0026ndash;Don’t Repeat Yourself.4 Avoid premature optimization.5 高等教育的价值在于【训练思维】，而不在于传授事实。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n不要试图改变自我，因为这样你不大可能成功。但是，你应该努力改进你的工作方式。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n计算机科学中的所有问题都可以通过增加一个间接层来解决。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n不要重复自己。（以最小化冗余的方式编写代码）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n不要进行不成熟的优化\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://xancoding.cn/about/","summary":"About me 𝑯𝒊, 𝑰\u0026rsquo;𝒎 ✨ 𝐗𝐚𝐧 ✨,𝐚 𝐂𝐒 𝐬𝐭𝐮𝐝𝐞𝐧𝐭 𝐟𝐫𝐨𝐦 𝐍𝐂𝐄𝐏𝐔. 𝐌𝐲 ❤ 𝐡𝐨𝐛𝐛𝐢𝐞𝐬 ❤ 𝐚𝐫𝐞 𝐑𝐮𝐧𝐧𝐢𝐧𝐠, 𝐇𝐢𝐤𝐢𝐧𝐠, 𝐓","title":""},{"content":"Blogs 编程随想的博客 Personal growth 如何成为优秀开发人员[0]：怎样算是优秀的？ How to Study 学习技术的三部曲：WHAT、HOW、WHY 用提问来促进思维——兼谈【非】技术领域的 WHAT HOW WHY 三部曲 如何完善自己的知识结构 如何【系统性学习】——从“媒介形态”聊到“DIKW 模型” 为什么独立思考这么难？ 什么是【真正的】兴趣爱好？以及它有啥好处？ New fields 扫盲“货币经济学”基本概念——从“利率”到“央行货币政策” 博弈论入门教程——从基本概念到具体案例 Reading books 如何选择 IT 技术书籍 《如何阅读一本书》——书评及内容纲要 书评：《学会提问——批判性思维指南》 书评：《人月神话》——不朽的软件工程名著 书评：《你的灯亮着吗？——找到问题的真正所在》 书评：《少有人走的路——心智成熟的旅程》 ","permalink":"https://xancoding.cn/links/","summary":"Blogs 编程随想的博客 Personal growth 如何成为优秀开发人员[0]：怎样算是优秀的？ How to Study 学习技术的三部曲：WHAT、HOW、WHY 用提问来促进思维——兼谈【非","title":""}]