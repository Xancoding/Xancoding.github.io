[{"content":"[[Redis]]\nDjango 用户名密码登录 6.1用户名密码登录-Vedio 数据表定义：11m02s~21m02s views \u0026amp; urls \u0026amp; js：25m01s~32m50s~33m37s~47m30s 将头像渲染到角色上：48m~50m20s 登陆界面 HTML+CSS：57m10s~1h42m30s~1h49m56s 登陆界面 逻辑实现：1h50m~1h53m47s~1h58m41s~2h20s~2h32m40s 6.1 上课笔记 6.1 上课笔记——客户端请求与Django响应流程\n我们在定义完一个数据表之后，需要将其更新到数据库，这时候我们需要执行两句话： python3 manage.py makemigrations python3 manage.py migrate 客户端请求与Django响应流程 用户在客户端通过$.ajax发送请求，根据urls路由到对应的views中的函数，处理request后返回JsonResponse 至客户端\nviews\nfrom django.http import JsonResponse from django.contrib.auth import authenticate, login def signin(request): data = request.GET # 获取请求的信息 username = data.get(\u0026#39;username\u0026#39;) # 用户名 password = data.get(\u0026#39;password\u0026#39;) # 密码 user = authenticate(username = username, password = password) # 从数据库中查找这个用户 if not user: # 如果没有就直接返回不成功 return JsonResponse({ \u0026#39;result\u0026#39;: \u0026#34;用户名或密码不正确\u0026#34; }) login(request, user) # 找到了就登录 urls\nfrom game.views.settings.login import signin # 引入自己写的逻辑 urlpatterns = [ path(\u0026#34;login/\u0026#34;, signin, name = \u0026#34;settings_login\u0026#34;), # \u0026#34;settings/login/\u0026#34; ] js\nlogin_on_remote() // 在远程服务器上登录 { let outer = this; let username = this.$login_username.val(); // 获取输入框中的用户名 let password = this.$login_password.val(); // 获取输入框中的密码 this.$login_error_message.empty(); // 清楚错误信息 $.ajax({ url: \u0026#34;登录URL\u0026#34;, // 访问url type: \u0026#34;GET\u0026#34;, data: { username: username, // 传输数据 password: password, }, success: function(resp){ console.log(resp); // 测试输出 if (resp.result === \u0026#34;success\u0026#34;) { location.reload(); // 如果成功就刷新 } else { outer.$login_error_message.html(resp.result); // 如果失败就显示错误信息 } } }); } 第三方登录 6.2 web端AcWing一键登录-Vedio 在django中集成数据库redis：7m10s~13m20s redis命令：13m40s~16m34s Oauth2一键授权登录的基本原理：17m30s~29m15s~32m51s 数据表添加openid信息：33m20s~34m47s Oauth2一键授权登录的代码实现：35m20s~1h25s~1h27m20s 用户点击AcWing一键登录，通过urls \u0026amp; views调用apply_code函数，将state放到redis中，将appid \u0026amp; redirect_uri \u0026amp; scope \u0026amp; state 传入apply_code_url链接，返回并重定向至apply_code_url向用户询问是否授权 用户点击同意后，重定向至redirect_uri链接，返回参数为code和state，通过urls \u0026amp; views调用receive_code函数。若验证state失败，直接重定向至初始界面 若验证state成功，将appid \u0026amp; code \u0026amp; secret发送至AcWing服务器，申请授权令牌access_token和用户的openid 若申请令牌成功，将access_token \u0026amp; openid发送至AcWing服务器，得到用户信息，创建并登录用户，最后重定向至初始界面 6.2 Web端AcWing一键登录-讲义 6.2 上课笔记 redirect_uri = quote(\u0026quot;https://app23.acapp.acwing.com.cn/settings/acwing/web/receive_code\u0026quot;)\n6.3 acapp端AcWing一键登录-Vedio Oauth2一键授权登录的基本原理：10m~12m20s~16m35s~18m Oauth2一键授权登录的代码实现：19m25s~21m~23m25s~34m29s~42m10s 6.3 acapp端AcWing一键登录-讲义 6.3 上课笔记\n","permalink":"https://xancoding.github.io/posts/account/","summary":"[[Redis]] Django 用户名密码登录 6.1用户名密码登录-Vedio 数据表定义：11m02s~21m02s views \u0026amp; urls \u0026amp; js：25m01s~32m50s~33m37","title":"Account"},{"content":"Django框架课\n[[SSH]] [[Docker]] [[SHELL]] [[Ngnix\u0026amp;uwsgi]] [[Redis]] [[WSS]] [[Django_channels]] [[账号系统]] [[JS简易游戏引擎实现]] [[JS模块引用]] acapp 项目自动化运行\n项目创建\u0026amp;运行 2.1. 创建 django 项目\nssh django django-admin startproject acapp：在当前目录下创建名为acapp的django项目 将项目用git维护起来 ssh-key-gen：在服务器中生成密钥（git通过ssh传文件） 在AcGit中SSH密钥中添加SSH公钥 git init：创建git仓库 在AcGit上新建空白项目 git config --global user.name xxx git config --global user.email xxx@xxx.com git add . git commit -m \u0026#34;xxx\u0026#34; git remote add origin git@git.acwing.com:xxx/XXX.git #建立连接 git push --set-upstream origin master 在本地运行项目： python3 manage.py runserver 0.0.0.0:8000 重点：每个 app 里面有这四个东西 Models：管理数据库数据 Views：管理 http 函数（接收浏览器请求，返回字符串至浏览器） Urls：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数) Templates：存储网页模板管理 html 文件 2.1上课笔记 菜单界面\u0026amp;项目架构设计 创建菜单界面-Vedio 创建菜单界面-讲义 3.1 上课笔记 将 src文件夹下的 JS源文件打包至 dist 文件夹\n#! /bin/bash JS_PATH=/home/acs/acapp/game/static/js/ JS_PATH_DIST=${JS_PATH}dist/ JS_PATH_SRC=${JS_PATH}src/ find $JS_PATH_SRC -type f -name \u0026#39;*.js\u0026#39; | sort | xargs cat \u0026gt; ${JS_PATH_DIST}game.js 网页渲染流程：根据用户的链接，首先进入acapp/urls.py，根据path再进入game/urls/index.py，再根据path进入下一层url或调用相对应的views中的index.py函数，函数接收参数，在网页端渲染templates/multiends下的web.html，html中有JS执行 注意：本项目为前后端分离，即通过JS在client中渲染项目(动态生成页面)，而不是在server渲染项目\n游戏界面 单人游戏 4.1 创建游戏界面-Vedio 4.1 上课笔记\n若修改static文件夹下的相关文件，需在~/acapp下执行./scripts/compress_game_js.sh来打包文件 联机对战 实现联机对战——讲义 7.1 实现联机对战（上）-Vedio 配置channels-redis 统一长度单位：7m20s~38m 创建的时候相对于窗口大小创建不同元素适应窗口，画的时候要在这个窗口绝对位置去画 增加“联机对战”模式：40m10s~49m 联机原理：50m~1h2m40s 配置channels-redis：1h2m40s~1h09m11s 7.1 上课笔记 7.2 实现联机对战（下）-Vedio 7.2 上课笔记\n调试 ~/acapp 文件夹下执行 python3 manage.py shell Def clear (): For key in cache. Keys (\u0026#39;*\u0026#39;): Cache. Delete(key) from django.core.cache import cache 聊天系统 8.1 聊天功能的实现-Vedio 8.1 上课笔记\n匹配系统 [[Thrift]] 9.1 实现匹配系统——thrift服务-Vedio 9.1 上课笔记\n项目收尾 讲义 9.2 实现匹配系统——项目收尾-Vedio 9.2 上课笔记\n版本更新 在术士之战中将js地址一栏更新为https://app2433.acapp.acwing.com.cn/static/js/dist/game-版本号.js 注：文件夹中对应的文件也需要更改名字 ","permalink":"https://xancoding.github.io/posts/django/","summary":"Django框架课 [[SSH]] [[Docker]] [[SHELL]] [[Ngnix\u0026amp;uwsgi]] [[Redis]] [[WSS]] [[Django_channels]] [[账号系统]] [[JS简易游戏引擎实现]] [[JS模块引用]] acapp 项目自动化运行 项目创建\u0026amp;运行 2.1. 创建","title":"Django"},{"content":"简易游戏引擎实现（AcGameObject） let last_timestp; // 上一帧的时间 let AC_GAME_ANIMATION = function(timestp) // timestp 是传入的一个参数，就是当前调用的时间 { for (let i = 0; i \u0026lt; AC_GAME_OBJECTS.length; ++ i) // 所有动的元素都进行更新。 { let obj = AC_GAME_OBJECTS[i]; if (!obj.has_called_start) { obj.start(); // 调用start() obj.has_called_start = true; // 表示已经调用过start()了 } else { obj.timedelta = timestp - last_timestp; // 时间微分 obj.update(); // 不断调用 } } last_timestp = timestp; // 进入下一帧时当前时间戳就是这一帧的时间戳 requestAnimationFrame(AC_GAME_ANIMATION); // 不断递归调用 } requestAnimationFrame(AC_GAME_ANIMATION); // JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等) ","permalink":"https://xancoding.github.io/posts/acgameproject/","summary":"简易游戏引擎实现（AcGameObject） let last_timestp; // 上一帧的时间 let AC_GAME_ANIMATION = function(timestp) // timestp 是传入的一个参数，就是当前调用的时间 { for (let i = 0; i \u0026lt; AC_GAME_OBJECTS.length; ++ i) // 所有动","title":"JS简易游戏引擎实现"},{"content":"int main() { printf(\u0026#34;Hello, World\u0026#34;); return(0); } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World\u0026#34;; return 0; } public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } echo \u0026#34;Hello, World\u0026#34; Hello, World document.write(\u0026#39;Hello, World\u0026#39;); print (\u0026#34;Hello, World\u0026#34;) ","permalink":"https://xancoding.github.io/posts/helloworld/","summary":"int main() { printf(\u0026#34;Hello, World\u0026#34;); return(0); } int main() { std::cout \u0026lt;\u0026lt; \u0026#34;Hello World\u0026#34;; return 0; } public class Main { public static void main(String[] args) { System.out.println(\u0026#34;Hello, World!\u0026#34;); } } echo \u0026#34;Hello, World\u0026#34; Hello, World document.write(\u0026#39;Hello, World\u0026#39;); print (\u0026#34;Hello, World\u0026#34;)","title":"Hello World"},{"content":"作者 英文名: Xan 职业: 学生 爱好: 跑步、徒步 博客 搭建工具 Hugo \u0026amp; GitHub Pages \u0026amp; Twikoo Theme：PaperMod 各页面简介 Home：联系方式 \u0026amp; 文章 Tags：文章标签 Archives：文章归档 About：作者简介 \u0026amp; 博客简介 Search：搜索文章 参考资料 Sulv\u0026rsquo;s Blog ","permalink":"https://xancoding.github.io/about/","summary":"作者 英文名: Xan 职业: 学生 爱好: 跑步、徒步 博客 搭建工具 Hugo \u0026amp; GitHub Pages \u0026amp; Twikoo Theme：PaperMod 各页面简介 Home：联系方式 \u0026amp; 文章 Tags：文章标签 Archives：文章归档 About：作者简介 \u0026amp; 博客简介 Search：搜索文章 参考资料 Sulv\u0026rsquo;s Blog ","title":""},{"content":"博客 Owen 的博客 程序员的喵 阮一峰的网络日志 工具 Obsidian 知识管理工具 划词翻译 浏览器翻译插件 敬业签 支持多平台同步的备忘录 番茄钟 一款结合番茄工作法和任务清单的手机端app 学习 CS自学指南 小林 x 图解计算机基础 代码随想录 x 数据结构与算法 社区 小众软件论坛 Guide Software Engineering - The Soft Parts 软件开发中的软技能 Side Project 指南 ","permalink":"https://xancoding.github.io/links/","summary":"博客 Owen 的博客 程序员的喵 阮一峰的网络日志 工具 Obsidian 知识管理工具 划词翻译 浏览器翻译插件 敬业签 支持多平台同步的备忘录 番茄钟 一款结合番茄工作法和任务清单的手机端app 学习 CS自学指南 小林 x 图解计算机基础 代码随想录 x 数据结构与算法 社区 小众软件论坛 Guide Software Engineering - The Soft Parts 软件开发中的软技能 Side Project 指南 ","title":""}]