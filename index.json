[{"content":"排序\n插入排序 直接插入排序 稳定 将 a[i]插入前面已经排好序的 a[1]~a[i - 1]中 在 a[0] 处设置岗哨，使 a[0] == a[i] 避免查找插入位置时对下标越界的检查 将 a[i]依次与 a[i - 1]，a[i - 2]，\u0026hellip; ，a[1]比较，直到 a[j] \u0026lt;= a[i]，再将 a[i]插到 a[j]之后 希尔排序 不稳定 基本思想：先取一个正整数 d1 \u0026lt; n，把所有相隔 d1 的记录放一组，组内进行直接插入排序；然后取 d2 \u0026lt; d1，重复上述分组和排序操作；直至 di = 1，即所有记录放进一个组中进行一趟直接插入排序为止 具体做法： 取 d1 = ⌊n / 2⌋ 每一趟 d i = ⌊d i - 1 / 2⌋ 直至 d k = 1结束 void shell_pass(int a[], int step) { for (int i = step + 1; i \u0026lt;= n; i++) { int tmp = a[i]; int j = i - step; while(j \u0026gt;= 1 \u0026amp;\u0026amp; tmp \u0026lt; a[j]) { a[j + step] = a[j]; j = j - step; } a[j + step] = tmp; } } void shell_sort(int a[], int d[]) {\t//需t趟完成排序 for (int k = 0; k \u0026lt; t; k++) shell_pass (a, d[k]); } 交换排序 冒泡排序 稳定 沉底法 快速排序 不稳定\n时间性能\n最坏（基本有序时）：O ( n 2 ) 最好（每次划分恰好两个子序列长度相等）：O (nlogn) 空间性能\n递归调用，存储开销 最好：O (logn) 最坏：O ( n ) 将 a[0] 设为哨兵，存储每次选中的关键字\n基本思想：在待排序列中选一个关键字，按某一规律进行多次比较交换后，它移到某一位置，此元素将记录分割成独立的两部分，它左边的关键字都小于或等于它，右边的关键字都大于或等于它。之后对这两部分分别进行快速排序\nint partition(SqList L, int low, int high) { L.r[0] = L.r[low]; while (low \u0026lt; high) { while (low \u0026lt; high \u0026amp;\u0026amp; L.r[0] \u0026lt;= L.r[high]) high--; L.r[low] = L.r[high]; while (low \u0026lt; high \u0026amp;\u0026amp; L.r[0] \u0026gt;= L.r[low]) low++; L.r[high] = L.r[low]; } L.r[low] = L.r[0]; return low; } void quick_sort (SqList L, int low, int high) { if (low \u0026lt; high) { int pos = partition(L, low, high); quick_sort(L, low, pos - 1); quick_sort(L, pos + 1, high); } } 选择排序 简单选择排序 不稳定 第 i 趟排序从待排序记录里选出最小关键字值的记录与第 i 个记录交换（1 \u0026lt;= i \u0026lt;= n - 1） 堆排序 不稳定 初始建堆：将 n 个元素的序列看成是一个完全二叉树，则最后一个非叶子结点是第 ⌊n / 2⌋ 个元素. 从第 ⌊n / 2⌋ 个元素开始 down，一直 down 到第 1 个元素，就建立了堆 二路归并排序 稳定 时间性能：O (nlogn) 空间性能：O (n) 基本思想：设初始序列含有 n 个记录，归并排序把此序列看成是由 n 个只包含一个记录的有序表组成，然后进行两两归并，最后形成包含 n 个记录的有序表 开始时取 L = 1，第一趟归并排序后，L = L * 2，以此类推，直到排序结束 ","permalink":"https://zagxuy.github.io/posts/sort/","summary":"排序\n插入排序 直接插入排序 稳定 将 a[i]插入前面已经排好序的 a[1]~a[i - 1]中 在 a[0] 处设置岗哨，使 a[0] == a[i] 避免查找插入位置时对下标越界的检查 将 a[i]依次与 a[i - 1]，a[i - 2]，\u0026hellip; ，a[1]比较，直到 a[j] \u0026lt;= a[i]，再将 a[i]插到 a[j]之后 希尔排序 不稳定 基本思想：先取一个正整数 d1 \u0026lt; n，把所有相隔 d1 的记录放一组，组内进行直接插入排序；然后取 d2 \u0026lt; d1，重复上述分组和排序操作；直至 di = 1，即所有记录放进一个组中进行一趟直接插入排序为止 具体做法： 取 d1 = ⌊n / 2⌋ 每一趟 d i = ⌊d i - 1 / 2⌋ 直至 d k = 1结束 void shell_pass(int a[], int step) { for (int i = step + 1; i \u0026lt;= n; i++) { int tmp = a[i]; int j = i - step; while(j \u0026gt;= 1 \u0026amp;\u0026amp; tmp \u0026lt; a[j]) { a[j + step] = a[j]; j = j - step; } a[j + step] = tmp; } } void shell_sort(int a[], int d[]) {\t//需t趟完成排序 for (int k = 0; k \u0026lt; t; k++) shell_pass (a, d[k]); } 交换排序 冒泡排序 稳定 沉底法 快速排序 不稳定","title":"Sort"},{"content":"Xan 一名 NCEPU CS 大二在读学生，喜欢跑步、徒步\n","permalink":"https://zagxuy.github.io/about/","summary":"Xan 一名 NCEPU CS 大二在读学生，喜欢跑步、徒步","title":""},{"content":"博客 Owen 的博客 程序员的喵 阮一峰的网络日志 工具 Obsidian 知识管理工具 划词翻译 浏览器翻译插件 ","permalink":"https://zagxuy.github.io/links/","summary":"博客 Owen 的博客 程序员的喵 阮一峰的网络日志 工具 Obsidian 知识管理工具 划词翻译 浏览器翻译插件 ","title":""}]