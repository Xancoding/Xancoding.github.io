<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Xan&#39;s Blog</title>
    <link>https://xancoding.cn/posts/</link>
    <description>Recent content in Posts on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 16 Oct 2022 14:23:58 +0800</lastBuildDate><atom:link href="https://xancoding.cn/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AcWing Linux 基础课</title>
      <link>https://xancoding.cn/posts/acwlinux/</link>
      <pubDate>Sun, 16 Oct 2022 14:23:58 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwlinux/</guid>
      <description>&lt;h1 id=&#34;acwing-linux-基础课&#34;&gt;AcWing Linux 基础课&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/57/&#34;&gt;AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&#34;&gt;命令行的艺术 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;The Missing Semester of Your CS Education&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;terminal&#34;&gt;Terminal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;终端，一个程序，是界面上打开的黑框框本身，&lt;code&gt;shell&lt;/code&gt; 运行于其中&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shell&#34;&gt;Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855530/&#34;&gt;常用文件管理命令 | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855883/&#34;&gt;Shell 语法 | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030391/&#34;&gt;管道、环境变量与常用命令  | AcWing Linux 基础课&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030414/&#34;&gt;常用命令  | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wangdoc.com/bash/&#34;&gt;《Bash 脚本教程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/course-shell/&#34;&gt;第 1 讲 - 课程概览与 Shell | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/shell-tools/&#34;&gt;第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/19556676&#34;&gt;终极 Shell——ZSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;快速入门 zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shell是什么&#34;&gt;Shell是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 是我们通过命令行与操作系统沟通的 &lt;code&gt;程序&lt;/code&gt;，是个 &lt;code&gt;命令行解释器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 负责外界与 &lt;code&gt;Linux 内核&lt;/code&gt; 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt;解释器有 &lt;code&gt;sh&lt;/code&gt;、&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;zsh...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shell常用命令&#34;&gt;Shell常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ag xxx&lt;/code&gt;：搜索当前目录下的所有文件，&lt;strong&gt;检索&lt;code&gt;xxx&lt;/code&gt;字符串&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find /path/to/directory/ -name &#39;*.py&#39;&lt;/code&gt;：&lt;strong&gt;搜索&lt;/strong&gt;某个文件路径下的所有&lt;code&gt;*.py&lt;/code&gt;&lt;strong&gt;文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;：展示当前用户的历史操作。内容存放在&lt;code&gt;~/.bash_history&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep xxx&lt;/code&gt;：从&lt;code&gt;stdin&lt;/code&gt;中读入若干行数据，如果某行中包含&lt;code&gt;xxx&lt;/code&gt;，则输出该行；否则忽略该行，&lt;strong&gt;用于查找文件里符合条件的字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tmux--vim&#34;&gt;Tmux &amp;amp;&amp;amp; Vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855620/&#34;&gt;tmux和vim | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2019/10/tmux.html&#34;&gt;Tmux 使用教程 | 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kuanghy.github.io/2016/09/29/tmux&#34;&gt;Tmux 简介与使用 | Huoty&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/articles/5426.html#comments&#34;&gt;简明 VIM 练级攻略 | 酷壳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/editors/&#34;&gt;第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim-adventures.com/&#34;&gt;VIM 大冒险 - Game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tmux-是什么&#34;&gt;Tmux 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Tmux&lt;/code&gt; 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;远程 &lt;code&gt;SSH&lt;/code&gt; 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;session--window--pane&#34;&gt;Session &amp;amp;&amp;amp; Window &amp;amp;&amp;amp; Pane&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个&lt;code&gt;tmux &lt;/code&gt;可以有好多个&lt;code&gt;session&lt;/code&gt;(会话)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;可以有好多个&lt;code&gt;window&lt;/code&gt;(窗口)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;window&lt;/code&gt;可以有好多个&lt;code&gt;pane&lt;/code&gt;(面板)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;里不超过10个&lt;code&gt;window&lt;/code&gt;是最方便的：可以用0到9迅速切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vim-是什么&#34;&gt;Vim 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;ssh&#34;&gt;SSH&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898263/&#34;&gt;SSH | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;Adding a new SSH key to your GitHub account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ssh是什么&#34;&gt;SSH是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SSH是一种网络协议，用于计算机之间的加密登录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ssh-免密登录&#34;&gt;SSH 免密登录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh-key-gen&lt;/code&gt; ：在本地服务器生成密钥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd .ssh/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim config&lt;/code&gt; ：定义服务器别名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;ssh-copy-id server&lt;/code&gt;：在本地服务器配置免密登录至云服务器&lt;/li&gt;
&lt;li&gt;免密登录至&lt;code&gt;docker 容器&lt;/code&gt;步骤同上&lt;/li&gt;
&lt;li&gt;配置完成后，就可以直接使用 &lt;code&gt;ssh server&lt;/code&gt; 免密登录啦&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;scp&#34;&gt;SCP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898266/&#34;&gt;SCP | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;scp是什么&#34;&gt;SCP是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;scp-传文件&#34;&gt;SCP 传文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;复制多个文件：&lt;code&gt;scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;复制文件夹 ：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scp -r ~/tmp SERVER:/home/acs/&lt;/code&gt;：将本地家目录中的&lt;code&gt;tmp&lt;/code&gt;文件夹复制到服务器中的&lt;code&gt;/home/acs/&lt;/code&gt;目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scp -r SERVER:homework .&lt;/code&gt;：将服务器中的&lt;code&gt;~/homework/&lt;/code&gt;文件夹复制到本地的当前路径下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2932078/&#34;&gt;git | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/column/6969263852206686221&#34;&gt;Git从放弃到入门&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6973299611536457742&#34;&gt;Git从放弃到入门：状态与阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://juejin.cn/post/6974039503056928776&#34;&gt;Git从放弃到入门：撤销操作&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2018/10/git-internals.html&#34;&gt;Git 原理入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learngitbranching.js.org/?locale=zh_CN&#34;&gt;Learn Git Braching - Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;Pro Git Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;git是什么&#34;&gt;Git是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;git常用命令&#34;&gt;Git常用命令&lt;/h3&gt;
&lt;h4 id=&#34;常用命令&#34;&gt;常用命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git add XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件添加到暂存区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;给自己看的备注信息&amp;quot;&lt;/code&gt;：将暂存区的内容提交到当前分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要 -u 以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库&lt;code&gt;XXX&lt;/code&gt;下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git restore --staged XX&lt;/code&gt;或&lt;code&gt;git reset HEAD XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;从暂存区里移除&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git checkout XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-全局设置&#34;&gt;Git 全局设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name xxx&lt;/code&gt;：设置全局用户名，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email xxx@xxx.com&lt;/code&gt;：设置全局邮箱地址，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;：将当前目录配置成&lt;code&gt;git&lt;/code&gt;仓库，信息记录在隐藏的&lt;code&gt;.git&lt;/code&gt;文件夹中&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-查看命令&#34;&gt;Git 查看命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git diff XX&lt;/code&gt;：查看&lt;code&gt;XX&lt;/code&gt;文件相对于暂存区修改了哪些内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --pretty=oneline&lt;/code&gt;：用一行来显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reflog&lt;/code&gt;：查看&lt;code&gt;HEAD&lt;/code&gt;指针的移动历史（包括被回滚的版本）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-删除命令&#34;&gt;Git 删除命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git rm --cached XX&lt;/code&gt;：将文件从仓库索引目录中删掉，不希望管理这个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --staged xx&lt;/code&gt;：将&lt;code&gt;xx&lt;/code&gt;从暂存区里移除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout — XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-代码回滚&#34;&gt;Git 代码回滚&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;或&lt;code&gt;git reset --hard HEAD~ &lt;/code&gt;：将代码库回滚到上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^^&lt;/code&gt;：往上回滚两次，以此类推&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD~100&lt;/code&gt;：往上回滚100个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard 版本号&lt;/code&gt;：回滚到某一特定版本&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-远程仓库&#34;&gt;Git 远程仓库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add origin git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将本地仓库关联到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要-u以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin branch_name&lt;/code&gt;：将本地的某个分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库XXX下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-分支命令&#34;&gt;Git 分支命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch branch_name&lt;/code&gt;：创建新分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b branch_name&lt;/code&gt;：创建并切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout branch_name&lt;/code&gt;：切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge branch_name&lt;/code&gt;：将分支&lt;code&gt;branch_name&lt;/code&gt;合并到当前分支上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d branch_name&lt;/code&gt;：删除本地仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-stash-暂存&#34;&gt;Git stash 暂存&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt;：将工作区和暂存区中尚未提交的修改存入栈中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash drop&lt;/code&gt;：删除栈顶存储的修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;：查看栈中所有元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;thrift&#34;&gt;&lt;strong&gt;Thrift&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md&#34;&gt;Thrift_learning - AcGit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;thrift 官网&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://thrift.apache.org/tutorial/&#34;&gt;Tutorial&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift&#34;&gt;tutorial.thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thrift是什么&#34;&gt;Thrift是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;例实现一个游戏的匹配服务&#34;&gt;例：实现一个游戏的匹配服务&lt;/h3&gt;
&lt;h4 id=&#34;基本框架&#34;&gt;基本框架&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;游戏应用端（Python3）
&lt;ol&gt;
&lt;li&gt;客户端：与 匹配系统服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;匹配系统服务器（C++）
&lt;ol&gt;
&lt;li&gt;服务端：与 游戏应用端 的客户端交互&lt;/li&gt;
&lt;li&gt;客户端：与 数据存储服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据存储服务器（已经实现）
&lt;ol&gt;
&lt;li&gt;服务端：与 匹配系统服务器 的客户端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;文件结构&#34;&gt;文件结构&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;实现过程部分&#34;&gt;实现过程（部分）&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;定义接口 (存放接口的文件夹就是 &lt;code&gt;thrift&lt;/code&gt; 文件)&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Server&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;match_system&lt;/code&gt;文件夹下生成 C++版本的服务端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen cpp tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将&lt;code&gt;gen cpp&lt;/code&gt; 文件夹重命名，如：&lt;code&gt;match_server&lt;/code&gt;（区别于之后要此处生成的&lt;code&gt;client_server&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;Match_server.skeleton.cpp&lt;/code&gt; 移动到当前 &lt;code&gt;src&lt;/code&gt; 目录下并重命名为 &lt;code&gt;main.cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;由于移动了 &lt;code&gt;main.cpp&lt;/code&gt; 故需要修改一下&lt;code&gt; main.cpp&lt;/code&gt; 中头文件里关于 &lt;code&gt;Match.h&lt;/code&gt; 的引用路径：&lt;code&gt;#include &amp;quot;Match.h&amp;quot;&lt;/code&gt; -&amp;gt; &lt;code&gt;#include &amp;quot;match_server/Match.h&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;main.cpp&lt;/code&gt;中实现具体业务逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Client&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;game&lt;/code&gt;文件夹下生成 &lt;code&gt;python3&lt;/code&gt; 版本的服务端，然后通过修改得到客户端，其余操作步骤同服务端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen py tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;删掉 &lt;code&gt;Match_remote &lt;/code&gt;，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 &lt;strong&gt;客户端&lt;/strong&gt; 功能，因此他没有作用，不妨删掉，让文档简洁一点&lt;/li&gt;
&lt;li&gt;利用官网提供的模板，在&lt;code&gt;src&lt;/code&gt;文件夹下编写 &lt;strong&gt;客户端&lt;/strong&gt; 文件 &lt;code&gt;client.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;持久化到云端
&lt;ul&gt;
&lt;li&gt;将 &lt;strong&gt;非编译文件&lt;/strong&gt; 和 &lt;strong&gt;非可执行文件&lt;/strong&gt; 提交到 &lt;code&gt;git&lt;/code&gt; 中去（好的工程习惯）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里（vim没关时会生成）&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;注意：先运行服务器后，客户端才能正常运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;项目地址&#34;&gt;项目地址&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://git.acwing.com/ZagY/thrift_lesson&#34;&gt;Thrift_lesson&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="acwing-linux-基础课">AcWing Linux 基础课</h1>
<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/57/">AcWing Linux 基础课</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术 </a></li>
<li><a href="https://missing-semester-cn.github.io/">The Missing Semester of Your CS Education</a></li>
</ul>
<hr>
<h2 id="terminal">Terminal</h2>
<blockquote>
<p><strong>终端，一个程序，是界面上打开的黑框框本身，<code>shell</code> 运行于其中</strong></p>
</blockquote>
<h2 id="shell">Shell</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855530/">常用文件管理命令 | AcWing Linux 基础课</a></li>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855883/">Shell 语法 | AcWing Linux 基础课</a></strong></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030391/">管道、环境变量与常用命令  | AcWing Linux 基础课</a>
<ul>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030414/">常用命令  | AcWing Linux 基础课</a></strong></li>
</ul>
</li>
<li><a href="https://wangdoc.com/bash/">《Bash 脚本教程》</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/course-shell/">第 1 讲 - 课程概览与 Shell | The missing semester of your CS education</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/shell-tools/">第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19556676">终极 Shell——ZSH</a></li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh">快速入门 zsh</a></li>
</ul>
<hr>
<h3 id="shell是什么">Shell是什么？</h3>
<ul>
<li><code>Shell</code> 是我们通过命令行与操作系统沟通的 <code>程序</code>，是个 <code>命令行解释器</code></li>
<li><code>Shell</code> 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用</li>
<li><code>Shell</code> 负责外界与 <code>Linux 内核</code> 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序</li>
<li><code>Shell</code>解释器有 <code>sh</code>、<code>bash</code>、<code>zsh...</code></li>
</ul>
<h3 id="shell常用命令">Shell常用命令</h3>
<ol>
<li><code>ag xxx</code>：搜索当前目录下的所有文件，<strong>检索<code>xxx</code>字符串</strong></li>
<li><code>find /path/to/directory/ -name '*.py'</code>：<strong>搜索</strong>某个文件路径下的所有<code>*.py</code><strong>文件</strong></li>
<li><code>history</code>：展示当前用户的历史操作。内容存放在<code>~/.bash_history</code>中</li>
<li><code>grep xxx</code>：从<code>stdin</code>中读入若干行数据，如果某行中包含<code>xxx</code>，则输出该行；否则忽略该行，<strong>用于查找文件里符合条件的字符串</strong></li>
</ol>
<h2 id="tmux--vim">Tmux &amp;&amp; Vim</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855620/">tmux和vim | AcWing Linux 基础课</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程 | 阮一峰的网络日志</a></li>
<li><a href="http://kuanghy.github.io/2016/09/29/tmux">Tmux 简介与使用 | Huoty&rsquo;s Blog</a></li>
<li><a href="https://coolshell.cn/articles/5426.html#comments">简明 VIM 练级攻略 | 酷壳</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/editors/">第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education</a></li>
<li><a href="https://vim-adventures.com/">VIM 大冒险 - Game</a></li>
</ul>
<hr>
<h3 id="tmux-是什么">Tmux 是什么？</h3>
<blockquote>
<p><strong><code>Tmux</code> 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）</strong></p>
<p><strong>远程 <code>SSH</code> 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。</strong></p>
</blockquote>
<h3 id="session--window--pane">Session &amp;&amp; Window &amp;&amp; Pane</h3>
<ul>
<li>一个<code>tmux </code>可以有好多个<code>session</code>(会话)</li>
<li>一个<code>session</code>可以有好多个<code>window</code>(窗口)</li>
<li>一个<code>window</code>可以有好多个<code>pane</code>(面板)</li>
<li>一个<code>session</code>里不超过10个<code>window</code>是最方便的：可以用0到9迅速切换</li>
</ul>
<h3 id="vim-是什么">Vim 是什么？</h3>
<blockquote>
<p><strong>VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。</strong></p>
</blockquote>
<h2 id="ssh">SSH</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898263/">SSH | AcWing Linux 基础课</a></li>
<li><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Adding a new SSH key to your GitHub account</a></li>
</ul>
<hr>
<h3 id="ssh是什么">SSH是什么？</h3>
<blockquote>
<p><strong>SSH是一种网络协议，用于计算机之间的加密登录</strong></p>
</blockquote>
<h3 id="ssh-免密登录">SSH 免密登录</h3>
<ol>
<li><code>ssh-key-gen</code> ：在本地服务器生成密钥</li>
<li><code>cd .ssh/</code></li>
<li><code>vim config</code> ：定义服务器别名</li>
</ol>
<pre tabindex="0"><code class="language-config" data-lang="config">Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
</code></pre><ol start="4">
<li><code>ssh-copy-id server</code>：在本地服务器配置免密登录至云服务器</li>
<li>免密登录至<code>docker 容器</code>步骤同上</li>
<li>配置完成后，就可以直接使用 <code>ssh server</code> 免密登录啦</li>
</ol>
<h2 id="scp">SCP</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898266/">SCP | AcWing Linux 基础课</a></li>
</ul>
<hr>
<h3 id="scp是什么">SCP是什么？</h3>
<blockquote>
<p><strong>SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录</strong></p>
</blockquote>
<h3 id="scp-传文件">SCP 传文件</h3>
<ul>
<li>复制多个文件：<code>scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH</code></li>
<li>复制文件夹 ：
<ul>
<li><code>scp -r ~/tmp SERVER:/home/acs/</code>：将本地家目录中的<code>tmp</code>文件夹复制到服务器中的<code>/home/acs/</code>目录下</li>
<li><code>scp -r SERVER:homework .</code>：将服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下</li>
</ul>
</li>
</ul>
<h2 id="git">Git</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2932078/">git | AcWing Linux 基础课</a></li>
<li><a href="https://juejin.cn/column/6969263852206686221">Git从放弃到入门</a>
<ul>
<li><a href="https://juejin.cn/post/6973299611536457742">Git从放弃到入门：状态与阶段</a></li>
<li><strong><a href="https://juejin.cn/post/6974039503056928776">Git从放弃到入门：撤销操作</a></strong></li>
</ul>
</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/10/git-internals.html">Git 原理入门</a></li>
<li><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Braching - Game</a></li>
<li><a href="https://git-scm.com/book/zh/v2">Pro Git Online</a></li>
</ul>
<hr>
<h3 id="git是什么">Git是什么？</h3>
<blockquote>
<p><strong>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</strong></p>
</blockquote>
<h3 id="git常用命令">Git常用命令</h3>
<h4 id="常用命令">常用命令</h4>
<ol>
<li><code>git add XX</code>：将<code>XX</code>文件添加到暂存区</li>
<li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支</li>
<li><code>git push -u (第一次需要 -u 以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库<code>XXX</code>下载到当前目录下</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><strong><code>git status</code>：查看仓库状态</strong></li>
<li><strong>有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？</strong>
<ul>
<li><strong><code>git restore --staged XX</code>或<code>git reset HEAD XX</code>：将<code>XX</code>从暂存区里移除</strong></li>
</ul>
</li>
<li><strong>有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？</strong>
<ul>
<li><strong><code>git checkout XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</strong></li>
</ul>
</li>
</ol>
<h4 id="git-全局设置">Git 全局设置</h4>
<ol>
<li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git init</code>：将当前目录配置成<code>git</code>仓库，信息记录在隐藏的<code>.git</code>文件夹中</li>
</ol>
<h4 id="git-查看命令">Git 查看命令</h4>
<ol>
<li><code>git diff XX</code>：查看<code>XX</code>文件相对于暂存区修改了哪些内容</li>
<li><code>git status</code>：查看仓库状态</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><code>git log --pretty=oneline</code>：用一行来显示</li>
<li><code>git reflog</code>：查看<code>HEAD</code>指针的移动历史（包括被回滚的版本）</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
</ol>
<h4 id="git-删除命令">Git 删除命令</h4>
<ol>
<li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉，不希望管理这个文件</li>
<li><code>git restore --staged xx</code>：将<code>xx</code>从暂存区里移除</li>
<li><code>git checkout — XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</li>
</ol>
<h4 id="git-代码回滚">Git 代码回滚</h4>
<ol>
<li><code>git reset --hard HEAD^</code>或<code>git reset --hard HEAD~ </code>：将代码库回滚到上一个版本</li>
<li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li>
<li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li>
<li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li>
</ol>
<h4 id="git-远程仓库">Git 远程仓库</h4>
<ol>
<li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li>
<li><code>git push -u (第一次需要-u以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-分支命令">Git 分支命令</h4>
<ol>
<li><code>git branch branch_name</code>：创建新分支</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li>
<li><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</li>
<li><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</li>
<li><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-stash-暂存">Git stash 暂存</h4>
<ol>
<li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li>
<li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li>
<li><code>git stash drop</code>：删除栈顶存储的修改</li>
<li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li>
<li><code>git stash list</code>：查看栈中所有元素</li>
</ol>
<h2 id="thrift"><strong>Thrift</strong></h2>
<ul>
<li><a href="https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md">Thrift_learning - AcGit</a></li>
<li><a href="https://thrift.apache.org/">thrift 官网</a> -&gt; <a href="https://thrift.apache.org/tutorial/">Tutorial</a> -&gt; <a href="https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift">tutorial.thrift</a></li>
</ul>
<h3 id="thrift是什么">Thrift是什么？</h3>
<blockquote>
<p><strong>Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架</strong></p>
<p><strong>RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程</strong></p>
<p><strong>Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务</strong></p>
</blockquote>
<h3 id="例实现一个游戏的匹配服务">例：实现一个游戏的匹配服务</h3>
<h4 id="基本框架">基本框架</h4>
<ol>
<li>游戏应用端（Python3）
<ol>
<li>客户端：与 匹配系统服务器 的服务端交互</li>
</ol>
</li>
<li>匹配系统服务器（C++）
<ol>
<li>服务端：与 游戏应用端 的客户端交互</li>
<li>客户端：与 数据存储服务器 的服务端交互</li>
</ol>
</li>
<li>数据存储服务器（已经实现）
<ol>
<li>服务端：与 匹配系统服务器 的客户端交互</li>
</ol>
</li>
</ol>
<h4 id="文件结构">文件结构</h4>
<pre tabindex="0"><code>|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
</code></pre><h4 id="实现过程部分">实现过程（部分）</h4>
<ol>
<li>定义接口 (存放接口的文件夹就是 <code>thrift</code> 文件)</li>
<li>完成 <code>Server</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>match_system</code>文件夹下生成 C++版本的服务端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen cpp tutorial.thrift
</code></pre><ol start="2">
<li>将<code>gen cpp</code> 文件夹重命名，如：<code>match_server</code>（区别于之后要此处生成的<code>client_server</code>）</li>
<li>把 <code>Match_server.skeleton.cpp</code> 移动到当前 <code>src</code> 目录下并重命名为 <code>main.cpp</code>
<ul>
<li>由于移动了 <code>main.cpp</code> 故需要修改一下<code> main.cpp</code> 中头文件里关于 <code>Match.h</code> 的引用路径：<code>#include &quot;Match.h&quot;</code> -&gt; <code>#include &quot;match_server/Match.h&quot;</code></li>
</ul>
</li>
<li>在<code>main.cpp</code>中实现具体业务逻辑</li>
</ol>
</li>
<li>完成 <code>Client</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>game</code>文件夹下生成 <code>python3</code> 版本的服务端，然后通过修改得到客户端，其余操作步骤同服务端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen py tutorial.thrift
</code></pre><ol start="2">
<li>删掉 <code>Match_remote </code>，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 <strong>客户端</strong> 功能，因此他没有作用，不妨删掉，让文档简洁一点</li>
<li>利用官网提供的模板，在<code>src</code>文件夹下编写 <strong>客户端</strong> 文件 <code>client.py</code></li>
</ol>
</li>
<li>持久化到云端
<ul>
<li>将 <strong>非编译文件</strong> 和 <strong>非可执行文件</strong> 提交到 <code>git</code> 中去（好的工程习惯）
<ul>
<li><code>Cpp</code>
<ul>
<li><code>git restore --stage *.o</code></li>
<li><code>git restore --stage main</code></li>
</ul>
</li>
<li><code>Python</code>
<ul>
<li><code>git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里</code></li>
<li><code>git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里（vim没关时会生成）</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>注意：先运行服务器后，客户端才能正常运行</li>
</ul>
<h4 id="项目地址">项目地址</h4>
<ul>
<li><a href="https://git.acwing.com/ZagY/thrift_lesson">Thrift_lesson</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>双拼学习记</title>
      <link>https://xancoding.cn/posts/doublespell/</link>
      <pubDate>Fri, 14 Oct 2022 17:02:41 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/doublespell/</guid>
      <description>&lt;h1 id=&#34;双拼学习记&#34;&gt;双拼学习记&lt;/h1&gt;
&lt;p&gt;前段时间了解了双拼输入法，只是一直没有时间去学。这段时间事情慢慢少点了，准备着手开始学习。双拼只需要按键两次便可以输入一个汉字，我感觉这样的设计更为合理，要是熟练掌握，会很有节奏感，打字速度也可以得到提升。&lt;/p&gt;
&lt;p&gt;更换一个新的输入法，刚开始时肯定会很别扭。使用双拼进行输入，需要对要打的字的音形熟悉，不然是打不出来的。刚好重新学习一下拼音，纠正纠正我自己一些错误的发音认知。&lt;/p&gt;
&lt;p&gt;我准备学习小鹤双拼，找了张小鹤双拼的键位图，用作电脑桌面，打字想不起来的时候瞄一眼。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png&#34; alt=&#34;doubleSpell&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/posts/learn_shuangpin&#34;&gt;双拼学习记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV16J411G7YT?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;双拼这点东西，up居然讲了十分钟——十分钟了解双拼到底是啥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flypy.com/&#34;&gt;小鹤双拼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.flypy.com/#/xh&#34;&gt;小鹤入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="双拼学习记">双拼学习记</h1>
<p>前段时间了解了双拼输入法，只是一直没有时间去学。这段时间事情慢慢少点了，准备着手开始学习。双拼只需要按键两次便可以输入一个汉字，我感觉这样的设计更为合理，要是熟练掌握，会很有节奏感，打字速度也可以得到提升。</p>
<p>更换一个新的输入法，刚开始时肯定会很别扭。使用双拼进行输入，需要对要打的字的音形熟悉，不然是打不出来的。刚好重新学习一下拼音，纠正纠正我自己一些错误的发音认知。</p>
<p>我准备学习小鹤双拼，找了张小鹤双拼的键位图，用作电脑桌面，打字想不起来的时候瞄一眼。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png" alt="doubleSpell"  />
</p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://geekplux.com/posts/learn_shuangpin">双拼学习记</a></li>
<li><a href="https://www.bilibili.com/video/BV16J411G7YT?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">双拼这点东西，up居然讲了十分钟——十分钟了解双拼到底是啥</a></li>
<li><a href="https://flypy.com/">小鹤双拼</a></li>
<li><a href="https://help.flypy.com/#/xh">小鹤入门</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>我管理时间的方法</title>
      <link>https://xancoding.cn/posts/timemanagement/</link>
      <pubDate>Fri, 14 Oct 2022 16:07:09 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/timemanagement/</guid>
      <description>&lt;h1 id=&#34;安排好你的待办清单&#34;&gt;安排好你的待办清单&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;思考以下几点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 有哪些工作需要完成？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.我有多少时间可以用来完成这些工作？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.工作事项是否有逻辑顺序以及优先级&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每一天你都会受到很多的干扰，看到APP上的一个个红点，消息通知从屏幕上弹出。注意力在一次次的查看信息中被逐渐消磨，时间也变得碎片化，难以静下心来专注于某件事。有些干扰无可避免，但只要愿意付出努力，大部分的干扰可以得到排除。&lt;/p&gt;
&lt;p&gt;白天我会尽量避免受到干扰，所有的社交软件，它们是工作效率的最大杀手。我控制自己在上午以及下午的大块时间中忽略来自社交网络的信息，将消息的查看集中在中午以及晚上的特定时间，做一个统一的查看。&lt;/p&gt;
&lt;p&gt;每天的晚上，我会花些的时间，把第二天的工作做个大致的安排，写到待办事项中，第二天再用番茄工作法进行专注执行。记得让自己的计划保持比较高的自由度，要留有足够的时间余量。&lt;/p&gt;
&lt;h1 id=&#34;番茄工作法&#34;&gt;番茄工作法&lt;/h1&gt;
&lt;p&gt;番茄工作法这个名词我之前便有听说过，但一直未尝试着去做过，直到最近从《软技能》一书中再次看到，感觉不错，便开始了尝试。在经过一个星期的体验后，它确实提高了我的效率，让我能够更好的对自己的时间做出规划。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它的基本思路是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;值得注意的是，使用番茄工作法所要做的并不只是集中注意力25分钟这么简单。通过使用番茄工作法，你可以&lt;strong&gt;高效跟踪自己一天完成的番茄钟的数量&lt;/strong&gt;，并为此设定目标。开始的几天，你可能无法对自己能完成的工作做一个很好的估计。但相信在使用番茄工作法一段时间后，你可以做到较为准确的估计，并能完成通过番茄钟的数量，评估自己完成的工作。&lt;/p&gt;
&lt;p&gt;通过使用番茄钟，你可以&lt;strong&gt;定量的描述自己的工作状态&lt;/strong&gt;，而不再像过去那样只是凭借感觉。你可以把每周看作是由有限个番茄钟组成的，知道了自己一周大概能完成的番茄钟的数量后，你也会认识到应该如何通过设置任务的优先级，来&lt;strong&gt;合理分配自己的时间&lt;/strong&gt;。你不会再过高的幻想自己会在一周的时间里完成超出自己实际许多的任务，并在每周结束时，因未能完成而感到沮丧。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png&#34; alt=&#34;Pomodoro&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;当你在一天中为自己设置了&lt;strong&gt;x&lt;/strong&gt;个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。它不仅能帮你完成更多的工作，还能让你尽情享受业余时间——因为你已经通过番茄钟完成了一天的任务，在剩下的时间里，你完全可以自由安排消磨时间，而不会再有任何的心理负担。&lt;/p&gt;
&lt;p&gt;最后的最后，一定记得要&lt;strong&gt;对自己的能力做一个合理的预期&lt;/strong&gt;，你每周工作40小时并不意味着你能完成80个番茄钟。找到适合你的番茄钟数量，过度的加量会适得其反。&lt;/p&gt;
&lt;h1 id=&#34;推荐文章&#34;&gt;推荐文章&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/468627225?utm_campaign=shareopn&amp;amp;utm_medium=social&amp;amp;utm_oi=1205113084614000640&amp;amp;utm_psn=1564268556828737536&amp;amp;utm_source=wechat_session&#34;&gt;如何用Todo清单度过余生的每一天？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/posts/farewell_social_network&#34;&gt;告别社交网络有多难&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/newsletters/28&#34;&gt;社交网络名存实亡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.axios.com/2022/07/25/sunset-social-network-facebook-tiktok&#34;&gt;Sunset of the social network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26835090/&#34;&gt;软技能&lt;/a&gt; 生产力篇&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="安排好你的待办清单">安排好你的待办清单</h1>
<blockquote>
<p>思考以下几点：</p>
<p><strong>1. 有哪些工作需要完成？</strong></p>
<p><strong>2.我有多少时间可以用来完成这些工作？</strong></p>
<p><strong>3.工作事项是否有逻辑顺序以及优先级</strong></p>
</blockquote>
<p>每一天你都会受到很多的干扰，看到APP上的一个个红点，消息通知从屏幕上弹出。注意力在一次次的查看信息中被逐渐消磨，时间也变得碎片化，难以静下心来专注于某件事。有些干扰无可避免，但只要愿意付出努力，大部分的干扰可以得到排除。</p>
<p>白天我会尽量避免受到干扰，所有的社交软件，它们是工作效率的最大杀手。我控制自己在上午以及下午的大块时间中忽略来自社交网络的信息，将消息的查看集中在中午以及晚上的特定时间，做一个统一的查看。</p>
<p>每天的晚上，我会花些的时间，把第二天的工作做个大致的安排，写到待办事项中，第二天再用番茄工作法进行专注执行。记得让自己的计划保持比较高的自由度，要留有足够的时间余量。</p>
<h1 id="番茄工作法">番茄工作法</h1>
<p>番茄工作法这个名词我之前便有听说过，但一直未尝试着去做过，直到最近从《软技能》一书中再次看到，感觉不错，便开始了尝试。在经过一个星期的体验后，它确实提高了我的效率，让我能够更好的对自己的时间做出规划。</p>
<blockquote>
<p>它的基本思路是：</p>
<p><strong>你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。</strong></p>
<p><strong>在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。</strong></p>
</blockquote>
<p>值得注意的是，使用番茄工作法所要做的并不只是集中注意力25分钟这么简单。通过使用番茄工作法，你可以<strong>高效跟踪自己一天完成的番茄钟的数量</strong>，并为此设定目标。开始的几天，你可能无法对自己能完成的工作做一个很好的估计。但相信在使用番茄工作法一段时间后，你可以做到较为准确的估计，并能完成通过番茄钟的数量，评估自己完成的工作。</p>
<p>通过使用番茄钟，你可以<strong>定量的描述自己的工作状态</strong>，而不再像过去那样只是凭借感觉。你可以把每周看作是由有限个番茄钟组成的，知道了自己一周大概能完成的番茄钟的数量后，你也会认识到应该如何通过设置任务的优先级，来<strong>合理分配自己的时间</strong>。你不会再过高的幻想自己会在一周的时间里完成超出自己实际许多的任务，并在每周结束时，因未能完成而感到沮丧。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png" alt="Pomodoro"  />
</p>
<p>当你在一天中为自己设置了<strong>x</strong>个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。它不仅能帮你完成更多的工作，还能让你尽情享受业余时间——因为你已经通过番茄钟完成了一天的任务，在剩下的时间里，你完全可以自由安排消磨时间，而不会再有任何的心理负担。</p>
<p>最后的最后，一定记得要<strong>对自己的能力做一个合理的预期</strong>，你每周工作40小时并不意味着你能完成80个番茄钟。找到适合你的番茄钟数量，过度的加量会适得其反。</p>
<h1 id="推荐文章">推荐文章</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/468627225?utm_campaign=shareopn&amp;utm_medium=social&amp;utm_oi=1205113084614000640&amp;utm_psn=1564268556828737536&amp;utm_source=wechat_session">如何用Todo清单度过余生的每一天？</a></li>
<li><a href="https://geekplux.com/posts/farewell_social_network">告别社交网络有多难</a></li>
<li><a href="https://geekplux.com/newsletters/28">社交网络名存实亡</a></li>
<li><a href="https://www.axios.com/2022/07/25/sunset-social-network-facebook-tiktok">Sunset of the social network</a></li>
<li><a href="https://book.douban.com/subject/26835090/">软技能</a> 生产力篇</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>我获取信息的方式</title>
      <link>https://xancoding.cn/posts/getinfo/</link>
      <pubDate>Wed, 12 Oct 2022 22:42:04 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/getinfo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这个时代不缺信息，因为信息太多了，缺的是时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;rss&#34;&gt;RSS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Inoreader &amp;amp; RSSHub Radar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是rss&#34;&gt;什么是RSS?&lt;/h2&gt;
&lt;p&gt;RSS 英文全称为 Really Simple Syndication，即简易资讯聚合。其实叫什么并不重要，我们只用知道它是一个&lt;strong&gt;能让你在一个地方订阅&lt;/strong&gt;各种感兴趣网站的工具。&lt;/p&gt;
&lt;p&gt;RSS的核心是&lt;strong&gt;资讯聚合&lt;/strong&gt;，由&lt;strong&gt;用户自己决定信息源&lt;/strong&gt;。我们可以通过订阅网站的RSS源，主动获得想要的资讯，去挖掘一些自己真正感兴趣的东西。&lt;/p&gt;
&lt;h2 id=&#34;如何使用rss&#34;&gt;如何使用RSS?&lt;/h2&gt;
&lt;p&gt;利用RSS获取信息，只需要在目标网站上找到RSS链接，并把它添加到RSS阅读器中。&lt;/p&gt;
&lt;p&gt;我使用的工具是&lt;code&gt;Inoreader RSS 阅读器 + RSSHub Radar 浏览器插件&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inoreader&lt;/code&gt; 吸引我的点是它支持PC端和手机端的同步，并且PC端可以直接通过浏览器插件使用，使我在手机和电脑上都可以查看消息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RSSHub Radar&lt;/code&gt; 的出现，完美解决了不是所有的网页都提供RSS源这一痛点，它可以自动生成网站的RSS源以供订阅，非常方便。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png&#34; alt=&#34;RSSHub Radar&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;我使用RSS主要用来订阅我感兴趣的个人博客，我订阅的博客网站在 &lt;code&gt;Links&lt;/code&gt; 页面下的 &lt;strong&gt;博客&lt;/strong&gt; 那一栏。&lt;/p&gt;
&lt;h2 id=&#34;推荐文章&#34;&gt;推荐文章&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://catcoding.me/p/get-better-info/&#34;&gt;优化自己的信息源&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/49684783/answer/2305132342&#34;&gt;中文互联网的产出在渐渐枯萎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/349349861&#34;&gt;知道RSS的人越少，我就越希望它能被人知道！&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/VUhz2Tg08UqYSAZB6nU9MQ&#34;&gt;RSS 二十年&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/11928.html&#34;&gt;互联网之子&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://rss-source.com/&#34;&gt;RSS Source | RSS订阅源推荐&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;搜索引擎&#34;&gt;搜索引擎&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Google &amp;amp; AdblockPlus &amp;amp; uBlacklist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Chrome&lt;/code&gt; 浏览器提供的&lt;code&gt;Google 搜索&lt;/code&gt;是我目前体验感最好的搜索引擎，&lt;code&gt;Microsoft Edge&lt;/code&gt; 浏览器提供的 &lt;code&gt;Bing 搜索&lt;/code&gt; 体验感也还不错。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AdblockPlus 浏览器插件&lt;/code&gt; 由用户主动设置拦截网页上不想看到的内容，下图是我对知乎页面的屏蔽后的结果，我使用这个插件把知乎和B站的推荐内容屏蔽，以获得更为简洁的体验&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png&#34; alt=&#34;AdblockPlus&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uBlacklist 浏览器插件&lt;/code&gt; 在搜索时屏蔽特定网站，做到对低质内容的过滤，我屏蔽了CSDN和百度知道&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*://www.csdn.net/*
*://bbs.csdn.net/*
*://blog.csdn.net/*
*://zhidao.baidu.com/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png&#34; alt=&#34;uBlacklist&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Chrome&lt;/code&gt; 浏览器还可以通过在地址栏中输入快捷字词，快速搜索特定网站，或使用其他搜索引擎，我通过设置它将知乎和B站作为搜索引擎使用。在我想寻找某条信息时，只需在地址栏输入关键字 &lt;code&gt;zh &lt;/code&gt; or &lt;code&gt;bi &lt;/code&gt; 即可搜索。&lt;/p&gt;
&lt;p&gt;经过如下配置&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png&#34; alt=&#34;search1&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;就可以通过在地址栏中输入快捷字词实现简便搜索啦&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png&#34; alt=&#34;search2&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;在手机端，我是使用&lt;strong&gt;桌面小工具&lt;/strong&gt;来达到只使用APP搜索功能目的。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png&#34; alt=&#34;search3&#34;  /&gt;
&lt;/p&gt;
&lt;h1 id=&#34;书籍&#34;&gt;书籍&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Neat Reader &amp;amp; Z-Library &amp;amp; 学校图书馆&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;读书，是治愈迷茫最好的良药。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.neat-reader.com/&#34;&gt;Neat Reader&lt;/a&gt; 是一款&lt;code&gt;EPUB&lt;/code&gt;阅读器，用以阅读EPUB格式的电子书，体验感不错。我会在 &lt;a href=&#34;https://zh.z-lib.org/&#34;&gt;Z-Library&lt;/a&gt; 搜索得到我想要看的书的EPUB格式的电子书后，存在本地文件上，通过 &lt;code&gt;Neat Reader&lt;/code&gt; 阅读。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png&#34; alt=&#34;neatReader&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;不过，相比于电子书，我其实还是更喜欢纸质书的阅读体验。所以，我也会隔段时间便去拿着自己的书单，去学校的图书馆找书看。&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>这个时代不缺信息，因为信息太多了，缺的是时间</strong></p>
<p><strong>整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子</strong></p>
<p><strong>获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息</strong></p>
</blockquote>
<h1 id="rss">RSS</h1>
<ul>
<li><code>Inoreader &amp; RSSHub Radar</code></li>
</ul>
<h2 id="什么是rss">什么是RSS?</h2>
<p>RSS 英文全称为 Really Simple Syndication，即简易资讯聚合。其实叫什么并不重要，我们只用知道它是一个<strong>能让你在一个地方订阅</strong>各种感兴趣网站的工具。</p>
<p>RSS的核心是<strong>资讯聚合</strong>，由<strong>用户自己决定信息源</strong>。我们可以通过订阅网站的RSS源，主动获得想要的资讯，去挖掘一些自己真正感兴趣的东西。</p>
<h2 id="如何使用rss">如何使用RSS?</h2>
<p>利用RSS获取信息，只需要在目标网站上找到RSS链接，并把它添加到RSS阅读器中。</p>
<p>我使用的工具是<code>Inoreader RSS 阅读器 + RSSHub Radar 浏览器插件</code>。</p>
<p><code>Inoreader</code> 吸引我的点是它支持PC端和手机端的同步，并且PC端可以直接通过浏览器插件使用，使我在手机和电脑上都可以查看消息。</p>
<p><code>RSSHub Radar</code> 的出现，完美解决了不是所有的网页都提供RSS源这一痛点，它可以自动生成网站的RSS源以供订阅，非常方便。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png" alt="RSSHub Radar"  />
</p>
<p>我使用RSS主要用来订阅我感兴趣的个人博客，我订阅的博客网站在 <code>Links</code> 页面下的 <strong>博客</strong> 那一栏。</p>
<h2 id="推荐文章">推荐文章</h2>
<p><a href="https://catcoding.me/p/get-better-info/">优化自己的信息源</a></p>
<p><a href="https://www.zhihu.com/question/49684783/answer/2305132342">中文互联网的产出在渐渐枯萎</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/349349861">知道RSS的人越少，我就越希望它能被人知道！</a></p>
<p><a href="https://mp.weixin.qq.com/s/VUhz2Tg08UqYSAZB6nU9MQ">RSS 二十年</a></p>
<p><a href="https://coolshell.cn/articles/11928.html">互联网之子</a></p>
<p><a href="https://rss-source.com/">RSS Source | RSS订阅源推荐</a></p>
<h1 id="搜索引擎">搜索引擎</h1>
<ul>
<li><code>Google &amp; AdblockPlus &amp; uBlacklist</code></li>
</ul>
<p><code>Chrome</code> 浏览器提供的<code>Google 搜索</code>是我目前体验感最好的搜索引擎，<code>Microsoft Edge</code> 浏览器提供的 <code>Bing 搜索</code> 体验感也还不错。</p>
<p><code>AdblockPlus 浏览器插件</code> 由用户主动设置拦截网页上不想看到的内容，下图是我对知乎页面的屏蔽后的结果，我使用这个插件把知乎和B站的推荐内容屏蔽，以获得更为简洁的体验</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png" alt="AdblockPlus"  />
</p>
<p><code>uBlacklist 浏览器插件</code> 在搜索时屏蔽特定网站，做到对低质内容的过滤，我屏蔽了CSDN和百度知道</p>
<pre tabindex="0"><code>*://www.csdn.net/*
*://bbs.csdn.net/*
*://blog.csdn.net/*
*://zhidao.baidu.com/*
</code></pre><p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png" alt="uBlacklist"  />
</p>
<p><code>Chrome</code> 浏览器还可以通过在地址栏中输入快捷字词，快速搜索特定网站，或使用其他搜索引擎，我通过设置它将知乎和B站作为搜索引擎使用。在我想寻找某条信息时，只需在地址栏输入关键字 <code>zh </code> or <code>bi </code> 即可搜索。</p>
<p>经过如下配置</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png" alt="search1"  />
</p>
<p>就可以通过在地址栏中输入快捷字词实现简便搜索啦</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png" alt="search2"  />
</p>
<p>在手机端，我是使用<strong>桌面小工具</strong>来达到只使用APP搜索功能目的。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png" alt="search3"  />
</p>
<h1 id="书籍">书籍</h1>
<ul>
<li><code>Neat Reader &amp; Z-Library &amp; 学校图书馆</code></li>
</ul>
<p><strong>读书，是治愈迷茫最好的良药。</strong></p>
<p><a href="https://www.neat-reader.com/">Neat Reader</a> 是一款<code>EPUB</code>阅读器，用以阅读EPUB格式的电子书，体验感不错。我会在 <a href="https://zh.z-lib.org/">Z-Library</a> 搜索得到我想要看的书的EPUB格式的电子书后，存在本地文件上，通过 <code>Neat Reader</code> 阅读。</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png" alt="neatReader"  />
</p>
<p>不过，相比于电子书，我其实还是更喜欢纸质书的阅读体验。所以，我也会隔段时间便去拿着自己的书单，去学校的图书馆找书看。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://xancoding.cn/posts/helloworld/</link>
      <pubDate>Wed, 12 Oct 2022 07:27:58 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/helloworld/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std::cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Main {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;void&lt;/span&gt; main(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#007f7f&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#007f7f&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, World
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;document&lt;/span&gt;.write(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Hello, World&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">int</span> main() {
</span></span><span style="display:flex;"><span>    printf(<span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span>(<span style="color:#ff0;font-weight:bold">0</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">int</span> main() {
</span></span><span style="display:flex;"><span>    std::cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;Hello World&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">public</span> <span style="color:#fff;font-weight:bold">class</span> Main {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">public</span> <span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> main(String[] args) {
</span></span><span style="display:flex;"><span>        System.<span style="color:#007f7f">out</span>.<span style="color:#007f7f">println</span>(<span style="color:#0ff;font-weight:bold">&#34;Hello, World!&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>Hello, World
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">document</span>.write(<span style="color:#0ff;font-weight:bold">&#39;Hello, World&#39;</span>);
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">print</span> (<span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>)
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
