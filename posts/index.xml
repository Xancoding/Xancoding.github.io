<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Xan&#39;s Blog</title>
    <link>https://xancoding.cn/posts/</link>
    <description>Recent content in Posts on Xan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 29 Oct 2022 18:23:59 +0800</lastBuildDate><atom:link href="https://xancoding.cn/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AcWing Django 框架课</title>
      <link>https://xancoding.cn/posts/acwdjango/</link>
      <pubDate>Sat, 29 Oct 2022 18:23:59 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwdjango/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_django/&#34;&gt;AcWing Django 框架课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/punch_the_clock/72/&#34;&gt;AcWing Django 框架课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;django-项目创建&#34;&gt;Django 项目创建&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/72577/&#34;&gt;2.1上课笔记 | 栎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73097/&#34;&gt;2.1上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;启动初始项目&#34;&gt;启动初始项目&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;django-admin startproject acapp&lt;/code&gt;：在当前目录下创建名为&lt;code&gt;acapp&lt;/code&gt;的&lt;code&gt;django&lt;/code&gt;项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python3 manage.py runserver 0.0.0.0:8000&lt;/code&gt;：启动项目
&lt;ol&gt;
&lt;li&gt;打开&lt;code&gt;settings.py&lt;/code&gt;，找到&lt;code&gt;ALLOWED_HOSTS=[]&lt;/code&gt;，修改成&lt;code&gt;ALLOWED_HOSTS=[&amp;quot;自己的服务器的公网IP&amp;quot;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;自己的服务器公网IP:8000&lt;/code&gt; 打开Django页面&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;创建管理员登录页面&#34;&gt;创建管理员登录页面&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在一级&lt;code&gt;acapp&lt;/code&gt;文件夹下，&lt;code&gt;python3 manage.py startapp XXX&lt;/code&gt;，&lt;code&gt;XXX&lt;/code&gt;是可以自定义的app名，这里用&lt;code&gt;game&lt;/code&gt;示例，这时候会多一个文件夹&lt;code&gt;game&lt;/code&gt;，树形结构如图：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- game
|   |-- __init__.py
|   |-- admin.py          # 管理员页面
|   |-- apps.py           # 用的不多
|   |-- migrations        # 存储数据库
|   |   `-- __init__.py
|   |-- models.py         # 定义网站里的数据库表
|   |-- tests.py
|   `-- views.py          # 视图，即函数
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;code&gt;python3 manage.py migrate&lt;/code&gt;：将所有修改更新进数据库&lt;/li&gt;
&lt;li&gt;创建一个 &lt;strong&gt;管理员用户&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ python3 manage.py createsuperuser
&amp;gt; Username (leave blank to use &amp;#39;acs&amp;#39;): admin
&amp;gt; Email address: 
&amp;gt; Password: 123456
&amp;gt; Password (again): 123456
&amp;gt; Superuser created successfully.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后利用该 &lt;strong&gt;管理员用户&lt;/strong&gt; 登录 &lt;code&gt;admin&lt;/code&gt; 页面，即可成功登陆&lt;/p&gt;
&lt;h2 id=&#34;创建用户登录页面&#34;&gt;创建用户登录页面&lt;/h2&gt;
&lt;h3 id=&#34;game-下的各个文件作用&#34;&gt;&lt;code&gt;game&lt;/code&gt; 下的各个文件作用&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;templates&lt;/code&gt;目录：管理 &lt;code&gt;html&lt;/code&gt;  文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;urls&lt;/code&gt;目录：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views&lt;/code&gt;目录：管理 &lt;code&gt;http&lt;/code&gt; 函数（接收浏览器请求，返回字符串至浏览器）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;models&lt;/code&gt;目录：管理数据库数据&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;目录：管理静态文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;consumers&lt;/code&gt;目录：管理&lt;code&gt;websocket&lt;/code&gt;函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实现一个路由重定向&#34;&gt;&lt;strong&gt;实现一个路由重定向&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;url&lt;/code&gt; 输入网址 -&amp;gt; &lt;code&gt;acapp.urls&lt;/code&gt; -&amp;gt; &lt;code&gt;game.urls&lt;/code&gt; -&amp;gt; &lt;code&gt;game.views.index&lt;/code&gt; -&amp;gt; 展示页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;game.views&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;HttpResponse()&lt;/code&gt;内部使用&lt;code&gt;html&lt;/code&gt;的语法，返回的响应就直接用这个字符串作为页面，转换成&lt;code&gt;html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.http import HttpResponse

def index(request):
    line1 = &amp;#39;&amp;lt;h1 style=&amp;#34;text-align: center&amp;#34;&amp;gt; 第一个网页 &amp;lt;/h1&amp;gt;&amp;#39;
    return HttpResponse(line1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;game.urls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;path(&#39;PATH&#39;, function, name)&lt;/code&gt;的含义是，在用户访问网站的时候，如果是&lt;code&gt;网站/game/PATH&lt;/code&gt;，就会调用&lt;code&gt;function&lt;/code&gt;，名字为&lt;code&gt;name&lt;/code&gt;，这是在&lt;code&gt;/game/&lt;/code&gt;目录下的调用，所以这个&lt;code&gt;PATH&lt;/code&gt;是在&lt;code&gt;/game/&lt;/code&gt;的基础上的&lt;strong&gt;相对路径&lt;/strong&gt;，所以他的&lt;strong&gt;绝对路径&lt;/strong&gt;是&lt;code&gt;网站/game/PATH&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.urls import path
from game.views import index

urlpatterns = [ 
    path(&amp;#34;&amp;#34;, index, name=&amp;#34;index&amp;#34;),
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;acapp.urls&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这其中，&lt;code&gt;path(&#39;PATH&#39;, include(&#39;game.urls&#39;))&lt;/code&gt;的含义是：在用户访问网站的时候，如果是&lt;code&gt;网站/PATH&lt;/code&gt;，就会走到&lt;code&gt;/game/urls&lt;/code&gt;，并根据&lt;code&gt;/game/urls.py&lt;/code&gt;来跑路由，就是说，用户在访问&lt;code&gt;网站/&lt;/code&gt;的时候，由于此时调用的函数是&lt;code&gt;include(&#39;game.urls&#39;)&lt;/code&gt;，所以访问&lt;code&gt;网站/&lt;/code&gt;相当于根据&lt;code&gt;game/urls&lt;/code&gt;访问&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [ 
    path(&amp;#39;&amp;#39;, include(&amp;#39;game.urls&amp;#39;)),
    path(&amp;#39;admin/&amp;#39;, admin.site.urls),
] 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后直接打开 &lt;code&gt;ip:socket&lt;/code&gt; 可以直接显示 &lt;code&gt;index&lt;/code&gt; 返回的网页&lt;/p&gt;
&lt;h1 id=&#34;创建菜单界面&#34;&gt;创建菜单界面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3199626/&#34;&gt;3. 创建菜单界面 | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73121/&#34;&gt;3.1 上课笔记 | 大家好今天是&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/73707/&#34;&gt;3.1 上课笔记 | 栎&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;构建项目框架&#34;&gt;构建项目框架&lt;/h2&gt;
&lt;h3 id=&#34;项目系统设计&#34;&gt;项目系统设计&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt;：菜单页面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;playground&lt;/code&gt;：游戏界面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;settings&lt;/code&gt;：设置界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;项目文件结构&#34;&gt;项目文件结构&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.
|-- README.md
|-- acapp
|   |-- __init__.py    # 文件夹在加上 __init__.py 文件后，python 便可以通过 import 来引用该文件夹
|   |-- asgi.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
|-- db.sqlite3
|-- game
|   |-- __init__.py
|   |-- admin.py
|   |-- apps.py
|   |-- migrations
|   |   `-- __init__.py
|   |-- models
|   |   `-- __init__.py
|   |-- static
|   |   |-- css
|   |   |   `-- game.css    # 一般一个工程，只有一个 css 文件就足够了
|   |   |-- image
|   |   |   `-- menu
|   |   |       `-- background.gif
|   |   `-- js
|   |       |-- dist
|   |       |   `-- game.js
|   |       `-- src
|   |           `-- zbase.js    # 总的 js 文件，命名以 z 开头会自动在字典序最后
|   |-- templates
|   |   `-- multiends
|   |       `-- web.html
|   |-- tests.py
|   |-- urls
|   |   |-- __init__.py
|   |   |-- index.py
|   |   |-- menu
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   |-- playground
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   `-- settings
|   |       |-- __init__.py
|   |       `-- index.py
|   `-- views
|       |-- __init__.py
|       |-- index.py
|       |-- menu
|       |   `-- __init__.py
|       |-- playground
|       |   `-- __init__.py
|       `-- settings
|           `-- __init__.py
|-- manage.py
`-- scripts
    `-- compress_game_js.sh
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;js-文件管理&#34;&gt;&lt;code&gt;js&lt;/code&gt; 文件管理&lt;/h4&gt;
&lt;p&gt;一般一个工程会有很多个 &lt;code&gt;.js&lt;/code&gt; 源文件，为了加快网络的传输，也为了每次写新的 &lt;code&gt;.js&lt;/code&gt; 文件不用每个 &lt;code&gt;html&lt;/code&gt; 都额外引入一次&lt;/p&gt;
&lt;p&gt;考虑用一个 &lt;code&gt;src&lt;/code&gt; 源文件夹来存储所有的 &lt;code&gt;.js&lt;/code&gt; 源文件&lt;/p&gt;
&lt;p&gt;然后用 &lt;code&gt;dist&lt;/code&gt; 文件夹来存放由 &lt;code&gt;src&lt;/code&gt; 下所有源文件整合生成的一个目标 &lt;code&gt;.js&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;这样既实现了快速传输的好处，也方便了后续编写 &lt;code&gt;html&lt;/code&gt; 文件时，引入 &lt;code&gt;.js&lt;/code&gt; 的便利&lt;/p&gt;
&lt;p&gt;创建一个脚本实现上述 &lt;strong&gt;整合&lt;/strong&gt; 的功能
&lt;code&gt;~/acapp/scripts/compress_game_js.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &amp;#39;*.js&amp;#39; | sort | xargs cat &amp;gt; ${JS_PATH_DIST}game.js
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;html-文件管理&#34;&gt;&lt;code&gt;html&lt;/code&gt; 文件管理&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;templates&lt;/code&gt; 文件夹下创建 &lt;code&gt;menu&lt;/code&gt;、&lt;code&gt;playground&lt;/code&gt;、&lt;code&gt;settings&lt;/code&gt;、&lt;code&gt;multiends&lt;/code&gt; 四个文件夹，用于存储三个模块和终端的 &lt;code&gt;html&lt;/code&gt; 文件&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;multiends&lt;/code&gt; 下创建 &lt;code&gt;web.html&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% load static %}
&amp;lt;!-- Django 中引入全局setting里的变量 static 的语法--&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.acwing.com/static/jquery-ui-dist/jquery-ui.min.css&amp;#34;&amp;gt;
    &amp;lt;script src=&amp;#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- 上述两句引入 jQuery 库 --&amp;gt;
    &amp;lt;!-- 使用引入的变量 static 的语法如下 --&amp;gt;
    &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;{% static &amp;#39;css/game.css&amp;#39; %}&amp;#34;&amp;gt;
    &amp;lt;script src=&amp;#34;{% static &amp;#39;js/dist/game.js&amp;#39; %}&amp;#34;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- 分别引入 css 文件和总的 js 文件 --&amp;gt;
&amp;lt;/head&amp;gt;

&amp;lt;body style=&amp;#34;margin: 0&amp;#34;&amp;gt;
    &amp;lt;div id=&amp;#34;ac_game_12345678&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;views-视图管理&#34;&gt;&lt;code&gt;views&lt;/code&gt; 视图管理&lt;/h4&gt;
&lt;p&gt;在 &lt;code&gt;views&lt;/code&gt; 文件夹下新建三个模块的视图文件夹&lt;/p&gt;
&lt;p&gt;写一个 &lt;code&gt;index.py&lt;/code&gt; 文件，目的是在 &lt;code&gt;web&lt;/code&gt; 端被访问时，返回上面写的 &lt;code&gt;web.html&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.shortcuts import render

def index(request):
  return render(request, &amp;#34;multiends/web.html&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;urls-路由管理&#34;&gt;&lt;code&gt;urls&lt;/code&gt; 路由管理&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;                                     /-- &amp;#34;&amp;#34; -- index
                                    / -- &amp;#34;menu/&amp;#34; -- menu.index
             / &amp;#34;&amp;#34; --&amp;gt; &amp;#34;game.url&amp;#34; --&amp;gt; 
            /                       \ -- &amp;#34;playground/&amp;#34; -- playground.index
id:scoket -&amp;gt;                         \-- &amp;#34;settings/&amp;#34; -- settings.index
            \
             \ &amp;#34;/admin&amp;#34; -- 到达管理员页面
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;~/acapp/acapp/urls.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.contrib import admin
from django.urls import path, include

urlpatterns = [
  path(&amp;#39;&amp;#39;, include(&amp;#39;game.urls.index&amp;#39;)),
  path(&amp;#39;admin/&amp;#39;, admin.site.urls),
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;~/acapp/game/urls/index.py&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from django.urls import path, include
from game.views.index import index

urlpatterns = [ 
    path(&amp;#34;&amp;#34;, index, name=&amp;#34;index&amp;#34;),
    path(&amp;#34;menu/&amp;#34;, include(&amp;#34;game.urls.menu.index&amp;#34;)),
    path(&amp;#34;playground/&amp;#34;, include(&amp;#34;game.urls.playground.index&amp;#34;)),
    path(&amp;#34;settings/&amp;#34;, include(&amp;#34;game.urls.settings.index&amp;#34;))
]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;网页渲染流程&#34;&gt;&lt;strong&gt;网页渲染流程&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;根据用户的链接，首先进入&lt;code&gt;acapp/urls.py&lt;/code&gt;，根据&lt;code&gt;path&lt;/code&gt;再进入&lt;code&gt;game/urls/index.py&lt;/code&gt;，再根据&lt;code&gt;path&lt;/code&gt;进入下一层&lt;code&gt;url&lt;/code&gt;或调用相对应的&lt;code&gt;views&lt;/code&gt;中的&lt;code&gt;index.py&lt;/code&gt;函数，函数接收参数，在网页端渲染&lt;code&gt;templates/multiends&lt;/code&gt;下的&lt;code&gt;web.html&lt;/code&gt;，&lt;code&gt;html&lt;/code&gt;中有&lt;code&gt;JS&lt;/code&gt;执行&lt;/p&gt;
&lt;p&gt;注意：本项目为前后端分离，即通过&lt;code&gt;JS&lt;/code&gt;在&lt;code&gt;client&lt;/code&gt;中渲染项目(动态生成页面)，而不是在&lt;code&gt;server&lt;/code&gt;渲染项目&lt;/p&gt;
&lt;h3 id=&#34;修改全局配置&#34;&gt;修改全局配置&lt;/h3&gt;
&lt;h4 id=&#34;设置时区&#34;&gt;设置时区&lt;/h4&gt;
&lt;p&gt;修改项目的 &lt;strong&gt;UTC&lt;/strong&gt; 时间为 &lt;strong&gt;CN&lt;/strong&gt; 时间&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
TIME_ZONE = &amp;#39;Asia/Shanghai&amp;#39; # 原来默认是 UTC
******
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;添加配置文件&#34;&gt;添加配置文件&lt;/h4&gt;
&lt;p&gt;将新创建的 &lt;code&gt;game&lt;/code&gt; 下的 &lt;code&gt;apps.py&lt;/code&gt; 中的 &lt;code&gt;GameConfig&lt;/code&gt; 加到 &lt;code&gt;settings.py&lt;/code&gt; 下&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
INSTALLED_APPS = [
  &amp;#39;game.apps.GameConfig&amp;#39;,
  ......
]
******
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;声明将静态文件路径 &lt;code&gt;STATIC_ROOT&lt;/code&gt; 和 &lt;code&gt;MEDIA_ROOT&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ vim /acapp/settings.py

******
import os

......

STATIC_ROOT = os.path.join(BASE_DIR, &amp;#39;static&amp;#39;)
STATIC_URL = &amp;#39;/static/&amp;#39;

MEDIA_ROOT = os.path.join(BASE_DIR, &amp;#39;media&amp;#39;)
MEDIA_URL = &amp;#39;/media/&amp;#39;
******
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;创建菜单-menu-界面&#34;&gt;创建菜单 &lt;code&gt;menu&lt;/code&gt; 界面&lt;/h2&gt;
&lt;h3 id=&#34;搭建菜单-menu-界面的框架&#34;&gt;搭建菜单 &lt;code&gt;menu&lt;/code&gt; 界面的框架&lt;/h3&gt;
&lt;p&gt;我们采用的 &lt;strong&gt;前后端分离式&lt;/strong&gt; 开发，所有的 &lt;strong&gt;html&lt;/strong&gt; 渲染都要求在前端完成&lt;/p&gt;
&lt;p&gt;开发流程就是，先在 &lt;strong&gt;html&lt;/strong&gt; 里创建好一个有 &lt;strong&gt;id&lt;/strong&gt; 的 &lt;strong&gt;div&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然后利用 &lt;strong&gt;js&lt;/strong&gt; 文件，捕获到该 &lt;strong&gt;div&lt;/strong&gt;，并进行 &lt;strong&gt;渲染&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/templates/multiends/web.html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;...
    &amp;lt;div id=&amp;#34;ac_game_12345678&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGame {
    constructor(id) {
        this.id = id; 
        this.$ac_game = $(&amp;#39;#&amp;#39; + id);
        this.menu = new AcGameMenu(this);
    }   
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(` 
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;css/game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&amp;#39;/static/image/menu/background.gif&amp;#39;);
    background-size: 100% 100%;
    user-select: none;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 &lt;strong&gt;代码逻辑&lt;/strong&gt; 如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt; 页面执行到 &lt;code&gt;js&lt;/code&gt; 代码，利用 &lt;code&gt;AcGame类&lt;/code&gt; 创建对象 &lt;code&gt;ac_game&lt;/code&gt; 同时传递参数 &lt;code&gt;div&lt;/code&gt; 的 &lt;code&gt;id&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AcGame&lt;/code&gt; 开始执行构造函数，在构造函数中，捕获 &lt;code&gt;html&lt;/code&gt; 标签，并利用 &lt;code&gt;AcGameMenu类&lt;/code&gt; 创建对象 &lt;code&gt;menu&lt;/code&gt;，并将整个对象作为参数下传&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AcGameMenu&lt;/code&gt; 开始执行构造函数，然后创建 &lt;code&gt;html&lt;/code&gt; 代码，加到捕获到的 &lt;code&gt;html&lt;/code&gt; 代码下&lt;/li&gt;
&lt;li&gt;最终成功渲染出背景图片&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;设置菜单-menu-页面的内容&#34;&gt;设置菜单 &lt;code&gt;menu&lt;/code&gt; 页面的内容&lt;/h3&gt;
&lt;p&gt;主要内容就是在主页面中，显示：单人模式、多人模式、设置，三个按钮的选项
&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
    &amp;lt;div class=&amp;#34;ac-game-menu-field&amp;#34;&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&amp;#34;&amp;gt;
            单人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&amp;#34;&amp;gt;
            多人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&amp;#34;&amp;gt;
            设置
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-single-mode&amp;#39;);
        this.$multi_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-multi-mode&amp;#39;);
        this.$settings_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-settings-mode&amp;#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;css/game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&amp;#39;/static/image/menu/background.gif&amp;#39;);
    background-size: 100% 100%;
    user-select: none;
}
.ac-game-menu-field {
    width: 20vw;
    position: relative;
    top: 40vh;
    left: 19vh;
}
.ac-game-menu-field-item {
    height: 7vh;
    width: 18vw;
    color: white;
    font-size: 6vh;
    font-style: italic;
    padding: 2vh;
    margin: 1vh 0;
    cursor: pointer;
    text-align: center;
    background-color: rgba(39, 21, 28, 0.6);
    border-radius: 10px;
    letter-spacing: 0.5vw;
}
.ac-game-menu-field-item:hover {
    transform: scale(1.2);
    transition: 100ms;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;添加-单人模式-监听函数--打开游戏界面-功能&#34;&gt;添加 &amp;lsquo;单人模式&amp;rsquo; 监听函数 —— 打开游戏界面 功能&lt;/h3&gt;
&lt;p&gt;这里要实现的 &lt;strong&gt;逻辑&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;点击 &amp;lsquo;单人模式&amp;rsquo; 按钮触发 &lt;code&gt;click&lt;/code&gt; 事件，随即触发监听函数，开始执行&lt;/li&gt;
&lt;li&gt;关闭 &lt;code&gt;menu&lt;/code&gt; 页面&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;playground&lt;/code&gt; 页面&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此，我们先简易的实现一个 &lt;code&gt;playground&lt;/code&gt; 页面，方便调试该功能
&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGamePlayground {
    constructor(root) {
        this.root = root;
        this.$playground = $(`&amp;lt;div&amp;gt;游戏界面&amp;lt;/div&amp;gt;`);

        this.hide();
        this.root.$ac_game.append(this.$playground);

        this.start();
    }
    start() {

    }
    show() {    //打开 playground 界面
        this.$playground.show();
    }
    hide() {    //关闭 playground 界面
        this.$playground.hide();
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在实现监听函数功能之前，先在 &lt;code&gt;/src/zbase.js&lt;/code&gt; 即主 &lt;code&gt;js&lt;/code&gt; 文件下，利用 &lt;code&gt;AcGamePlayground&lt;/code&gt; 类创建好 &lt;code&gt;playground&lt;/code&gt; 对象&lt;/p&gt;
&lt;p&gt;这样我们就能在前端，渲染出两个界面了，分别是：&lt;code&gt;menu&lt;/code&gt; 和 &lt;code&gt;playground&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGame {
    constructor(id) {
        this.id = id;
        this.$ac_game = $(&amp;#39;#&amp;#39; + id);
        this.menu = new AcGameMenu(this);
        // 把 playground 对象也建好，这样我们就同时有两个界面了
        this.playground = new AcGamePlayground(this);

        this.start();
    }                    
    start() {

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，我们开始实现 &lt;code&gt;ac-game-menu-field-item-single-mode&lt;/code&gt; 标签的 &lt;code&gt;click&lt;/code&gt; 事件的监听函数&lt;/p&gt;
&lt;p&gt;其功能之前讲过了，就是关闭 &lt;code&gt;menu&lt;/code&gt; 页面，打开 &lt;code&gt;playground&lt;/code&gt; 页面&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/menu/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&amp;lt;div class=&amp;#34;ac-game-menu&amp;#34;&amp;gt;
    &amp;lt;div class=&amp;#34;ac-game-menu-field&amp;#34;&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&amp;#34;&amp;gt;
            单人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&amp;#34;&amp;gt;
            多人模式
        &amp;lt;/div&amp;gt;
        &amp;lt;div class=&amp;#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&amp;#34;&amp;gt;
            设置
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-single-mode&amp;#39;);
        this.$multi_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-multi-mode&amp;#39;);
        this.$settings_mode = this.$menu.find(&amp;#39;.ac-game-menu-field-item-settings-mode&amp;#39;);

        this.start();
    }
    start() {
        this.add_listening_events();
    }
    add_listening_events() {
        let outer = this;
        this.$single_mode.click(function(){
            outer.hide();   // 关闭主页面
            outer.root.playground.show();   // 打开游戏界面
        });
    }

    show() {    //显示menu界面
        this.$menu.show();
    }
    hide() {    //隐藏menu界面
        this.$menu.hide();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;创建游戏界面&#34;&gt;创建游戏界面&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79181/&#34;&gt;4.1 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;若修改&lt;code&gt;static文件夹&lt;/code&gt;下的相关文件，需在&lt;code&gt;~/acapp&lt;/code&gt;下执行&lt;code&gt;./scripts/compress_game_js.sh&lt;/code&gt;来打包文件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;前端的模块化引入&#34;&gt;前端的模块化引入&lt;/h2&gt;
&lt;p&gt;由于在 &lt;code&gt;html&lt;/code&gt; 代码部分，是将整个 &lt;code&gt;game.js&lt;/code&gt; 文件引入&lt;/p&gt;
&lt;p&gt;这样会导致在 &lt;code&gt;game.js&lt;/code&gt; 中定义的变量，会变成整个网页的 &lt;strong&gt;全局变量&lt;/strong&gt;（之后可能会引起变量重名的诸多问题）&lt;/p&gt;
&lt;p&gt;因此，我们考虑使用 &lt;strong&gt;模块化引入&lt;/strong&gt; 的功能，让网页只引入在 &lt;code&gt;html&lt;/code&gt; 中需要的部分&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;web.html&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;!-- 首先，先删掉上面整个引入 game.js 的部分 --&amp;gt;
&amp;lt;!-- 然后，下方创建对象的部分，先使用模块化引入 --&amp;gt;
......
    &amp;lt;script type=&amp;#34;module&amp;#34;&amp;gt;
        import {AcGame} from &amp;#34;{% static &amp;#39;js/dist/game.js&amp;#39; %}&amp;#34;
        $(document).ready(function(){
            let ac_game = new AcGame(&amp;#34;ac_game_12345678&amp;#34;)
        })
    &amp;lt;/script&amp;gt;
......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此外，还有修改引入的类，在前面加上 &lt;code&gt;export&lt;/code&gt;，如下修改 &lt;code&gt;js/src/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export class AcGame {
    ......
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，在全局中，只会出现引入的模块，其他的 &lt;code&gt;.js&lt;/code&gt; 代码不会出现在全局中&lt;/p&gt;
&lt;h2 id=&#34;构建游戏界面框架&#34;&gt;构建游戏界面框架&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;static/js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;......
    this.$playground = $(`&amp;lt;div class=&amp;#34;ac-game-playground&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;`);
......
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;......
.ac-game-playground {
    height: 100%;
    width: 100%;
    user-select: none;  // 禁用右键弹菜单
} 
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;实现游戏引擎框架&#34;&gt;&lt;strong&gt;实现游戏引擎框架&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;游戏中，物体在移动，其实现原理是：每一个动作都会渲染多张图片出来，然后图片快速的切换，从而实现动的过程&lt;/p&gt;
&lt;p&gt;因此，需要先实现一个游戏引擎的基类 &lt;code&gt;AcGameObject&lt;/code&gt; ，使得每帧能渲染一张图片出来&lt;/p&gt;
&lt;p&gt;该基类需要具备的功能有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;start()&lt;/code&gt; 在游戏开始的第一帧时需要执行的任务（一般是创建对象）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update()&lt;/code&gt; 在游戏开始后的每一帧均会执行的任务（一般是渲染当前对象的各种状态）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;on_destroy()&lt;/code&gt; 删掉该物体前需要执行的任务（一般是删掉动画，或者给对手加分）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;destroy()&lt;/code&gt; 删掉该物体&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据上述逻辑，我们就可以基本搭建出来一个游戏引擎的基类了，具体如下：
&lt;code&gt;/static/js/playground/ac_game_object/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; AC_GAME_OBJECTS = [];   &lt;span style=&#34;color:#007f7f&#34;&gt;// 用于记录当前画布中，需要渲染的对象有哪些
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        AC_GAME_OBJECTS.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);  &lt;span style=&#34;color:#007f7f&#34;&gt;// 将当前新建的对象，加入到全局的画布中去，参与渲染
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.has_called_start = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 是否执行过 start 函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;             &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前帧距离上一帧的时间间隔
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 该数据记录是为了后续计算速度等参数的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 只会在第一帧执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 每一帧均会执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_destroy() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 在被销毁前执行一次
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    destroy() { &lt;span style=&#34;color:#007f7f&#34;&gt;// 删掉该物体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.on_destroy();  &lt;span style=&#34;color:#007f7f&#34;&gt;//删掉该物体前，执行删前的操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 在全局渲染物体中，找到该物体，并将其删掉
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; AC_GAME_OBJECTS.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (AC_GAME_OBJECTS[i] === &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 三等号，在js里额外加了一层类型相等约束
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                AC_GAME_OBJECTS.splice(i, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; last_timestamp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; AC_GAME_ANIMATION = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(timestamp) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 回调函数，实现：每一帧重绘时，都会执行一遍
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; AC_GAME_OBJECTS.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; obj = AC_GAME_OBJECTS[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!obj.has_called_start) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 如果还未执行初始帧动作，就先执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            obj.start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            obj.has_called_start = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 执行过初始帧，就执行每一帧的任务
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            obj.timedelta = timestamp - last_timestamp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            obj.update();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last_timestamp = timestamp; &lt;span style=&#34;color:#007f7f&#34;&gt;// 更新最后一次时间戳
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    requestAnimationFrame(AC_GAME_ANIMATION);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;requestAnimationFrame(AC_GAME_ANIMATION);   &lt;span style=&#34;color:#007f7f&#34;&gt;// JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;接下来所有的一切游戏，都是基于这个引擎的基类完成的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;实现游戏地图功能&#34;&gt;实现游戏地图功能&lt;/h2&gt;
&lt;p&gt;目标：实现一个每一秒都在渲染的纯黑背景&lt;/p&gt;
&lt;p&gt;虽然现阶段要实现的地图较为简单，但为了后期的拓展性，故还是考虑新建一个文件夹来完成&lt;/p&gt;
&lt;p&gt;然后在 &lt;code&gt;js&lt;/code&gt; 中，已经封装好了一个 &lt;code&gt;canvas&lt;/code&gt; 的 &lt;code&gt;api&lt;/code&gt; 来帮助实现背景画布，直接调用即可&lt;/p&gt;
&lt;p&gt;先铺开画布，然后设置为黑色&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static/js/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// $(&amp;#39;.playground&amp;#39;)对象已经在 css 文件里渲染出高宽了
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 现在把他的高宽存下来，往下传递
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.width();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.height();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.game_map = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; GameMap(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;static/js/playground/game-map/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; GameMap &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 继承自游戏引擎基类
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    constructor(playground) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();    &lt;span style=&#34;color:#007f7f&#34;&gt;// 自函数功能：调用基类的构造函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas = $(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`&amp;lt;canvas&amp;gt;&amp;lt;/canvas&amp;gt;`&lt;/span&gt;); &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建一个canvas的jQuery对象，就是我们要实现的画布
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;].getContext(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;2d&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#007f7f&#34;&gt;// jQuery对象是一个数组，第一个索引是html对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 设置画布的宽高
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.$playground.append(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$canvas);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 游戏地图每帧都要渲染
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;rgba(0, 0, 0, 0.2)&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillRect(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.width, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.canvas.height);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现玩家显示功能&#34;&gt;实现玩家显示功能&lt;/h2&gt;
&lt;p&gt;毛坯版玩家显示，每个玩家定义成一个圆，然后渲染在前端&lt;/p&gt;
&lt;p&gt;需要对于玩家类定义多个参数，以方便日后拓展：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; 当前位置的横坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; 当前位置的纵坐标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;radius&lt;/code&gt; 当前的半径&lt;/li&gt;
&lt;li&gt;&lt;code&gt;speed&lt;/code&gt; 当前的速度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_me&lt;/code&gt; 该对象是否是当前玩家操控的对象（一是区别于 bot，二是区别于 日后联机的其他玩家）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;static/js/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players = [];  &lt;span style=&#34;color:#007f7f&#34;&gt;// 存放当前游戏中的所有玩家
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 将玩家加入游戏中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .....
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;static/js/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, x, y, radius, color, speed, is_me) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 把信息都存下来
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me = is_me;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 用于浮点数运算
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 渲染一个圆
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    on_destroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现玩家移动功能&#34;&gt;实现玩家移动功能&lt;/h2&gt;
&lt;p&gt;移动的实现逻辑很简单，就是让每帧渲染的圆的位置发生移动即可&lt;/p&gt;
&lt;p&gt;上述简单逻辑的实现如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Player &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(....)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们来实现一个向鼠标点击位置移动的功能&lt;/p&gt;
&lt;p&gt;这就需要设置一个 &lt;code&gt;click&lt;/code&gt; 事件的监听函数，分别传递：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标点击事件&lt;/li&gt;
&lt;li&gt;鼠标点击位置的横坐标&lt;/li&gt;
&lt;li&gt;鼠标点击位置的纵坐标&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;然后开始让圆的位置逐步向鼠标点击位置进行移动&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 对于用户玩家，加上监听函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; outer = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 把鼠标右键调出菜单栏的功能关掉
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.on(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;contextmenu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 把右键控制移动功能加上
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 左键:1 中键:2 右键:3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.move_to(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后，我们来实现移动功能的函数 &lt;code&gt;move_to(tx, ty)&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(...){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// x方向上的移动速度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// y方向上的移动速度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;   &lt;span style=&#34;color:#007f7f&#34;&gt;// 剩余移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_dist (x1, y1, x2, y2) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 求两点的欧几里得距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dx = x2 - x1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dy = y2 - y1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sqrt(dx * dx + dy * dy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;move_to(tx, ty) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_dist(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算移动角度，api接口：atan2(dy, dx)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(ty - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 位移 1 个单位长度（向着矢量方向移动到单位圆上）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle);  &lt;span style=&#34;color:#007f7f&#34;&gt;// 极直互化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 浮点数精度运算
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算单位帧里的移动距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; moved = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.min(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 还要减掉移动的距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length -= moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就实现了玩家的移动功能了，可以登录 &lt;code&gt;id:socket&lt;/code&gt; 调试该功能&lt;/p&gt;
&lt;h2 id=&#34;实现火球技能的功能&#34;&gt;实现火球技能的功能&lt;/h2&gt;
&lt;p&gt;火球对象的建立与玩家基本一致，直接照搬，在从细节上改改即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/skill/fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; FireBall &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, player, x, y, radius, vx, vy, color, speed, move_length, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.player = player;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = vx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = vy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = move.length;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage = damage;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; moved = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.min(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length -= moved;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt; * Pi, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后在玩家身上实现发火球的功能&lt;/p&gt;
&lt;p&gt;基本实现逻辑：当前选中了火球技能，鼠标左键点击一处，向该处发射一个火球&lt;/p&gt;
&lt;p&gt;因此，为了知道用户是否选择了技能，需要加一个键盘触发事件监听函数，然后加一个鼠标左键触发事件监听函数&lt;/p&gt;
&lt;p&gt;然后发射一个火球即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.cur_skill = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;null&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 记录当前选择的技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 左键:1 中键:2 右键:3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            outer.move_to(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {     &lt;span style=&#34;color:#007f7f&#34;&gt;// 鼠标左键事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (outer.cur_skill === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前已经选中火球技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                outer.shoot_fireball(e.clientX, e.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        outer.cur_skill = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;null&lt;/span&gt;; &lt;span style=&#34;color:#007f7f&#34;&gt;// 清空当前技能
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;window&lt;/span&gt;).keydown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;81&lt;/span&gt;) {       &lt;span style=&#34;color:#007f7f&#34;&gt;// 键盘按下事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            outer.cur_skill = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;shoot_fireball(tx, ty) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 确定火球的参数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; x = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, y = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y; &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球发射点就是当前玩家的位置
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; radius = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.01&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(ty - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, tx - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle), vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; color = &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;orange&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; speed = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; move_length = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1.0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; damage = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.01&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; FireBall(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, x, y, radius, vx, vy, color, speed, move_length, damage);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样就成功实现了玩家发射火球的功能了&lt;/p&gt;
&lt;h2 id=&#34;实现单人模式下的人机功能&#34;&gt;实现单人模式下的人机功能&lt;/h2&gt;
&lt;p&gt;先创建好 5 个人机
&lt;code&gt;playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;//创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (len i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样创建出来的 5 个人机是不会行动的&lt;/p&gt;
&lt;p&gt;我们写一个简易的 AI 程序，让他们也会移动&lt;/p&gt;
&lt;p&gt;这里实现的逻辑是：每次随机一个目的地，向目的地移动，然后再随机一个目的地，循环下去&lt;/p&gt;
&lt;p&gt;根据该逻辑，修改两个函数即可&lt;/p&gt;
&lt;p&gt;&lt;code&gt;playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 对于用户玩家，加上监听函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.add_listening_events();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; tx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; ty = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_to(tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 如果是人机，停下来时再随机一个方向前进
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; tx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.width;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; ty = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.height;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_to(tx, ty);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;on_destroy() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[i] === &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.splice(i, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;实现技能命中效果碰撞检测功能&#34;&gt;实现技能命中效果（碰撞检测功能）&lt;/h2&gt;
&lt;p&gt;实现逻辑：检测两个圆的中心距离是否小于两个圆的半径之和&lt;/p&gt;
&lt;p&gt;小于等于时，代表发生碰撞，开始执行命中效果：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;被击中用户掉血&lt;/li&gt;
&lt;li&gt;被击中用户收到向后击退效果&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;碰撞检测写在火球类里，击退效果写在玩家类里&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fireball/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 碰撞检测
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; player = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[i];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.player !== player &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_collision(player)) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 碰撞发生一定是在非施法者身上
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.attack(player);    &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_dist(x1, y1, x2, y2) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 获得两点的欧几里得距离
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dx = x2 - x1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; dy = y2 - y1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sqrt(dx * dx + dy * dy);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_collision(player) {  &lt;span style=&#34;color:#007f7f&#34;&gt;// 检测两个圆的中心距离是否小于两个圆的半径之和
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; distance = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_dist(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, player.x, player.y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (distance &amp;lt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius + player.radius))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;attack(player) {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.atan2(player.y - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, player.x - &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x);   &lt;span style=&#34;color:#007f7f&#34;&gt;// 计算角度
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    player.is_attacked(angle, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage); &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中，目标玩家执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy(); &lt;span style=&#34;color:#007f7f&#34;&gt;// 火球命中后，自然消失
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;被击退的时候，原来的移动速度应该置为 0，当前的移动应该转为向被击中方向上的移动&lt;/strong&gt;
&lt;code&gt;player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_attacked(angle, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius -= damage;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 受伤，半径减少
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;) { &lt;span style=&#34;color:#007f7f&#34;&gt;// 当半径小于10像素时，代表死亡
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 开始执行击退效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed = damage * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed *= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.5&lt;/span&gt;;  &lt;span style=&#34;color:#007f7f&#34;&gt;// 被击中以后移动速度减半
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed &amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {   &lt;span style=&#34;color:#007f7f&#34;&gt;// 当前仍处于击退效果中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.move_length = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vx * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_vy * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.damage_speed *= &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction; &lt;span style=&#34;color:#007f7f&#34;&gt;// 击退速度乘以摩擦系数，已达到削减的目的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;被击中以后的粒子效果特效&#34;&gt;被击中以后的粒子效果特效&lt;/h2&gt;
&lt;p&gt;实现逻辑：被击中以后，在玩家附近随机生成一些粒子小球&lt;/p&gt;
&lt;p&gt;因此我们要先实现 粒子小球 对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static/js/src/playground/particle/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Particle &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;extends&lt;/span&gt; AcGameObject {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(playground, x, y, radius, vx, vy, color, speed) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;super&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground = playground;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.ctx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x = x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y = y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius = radius;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx = vx;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy = vy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color = color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed = speed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.9&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    start() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed &amp;lt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.eps) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.destroy;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vx * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.vy * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed *= &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.friction;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    render() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.beginPath();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.arc(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fillStyle = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.ctx.fill();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后我们在被击退功能模块，实现生成粒子小球的效果&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;粒子小球释放弧度为 $[0,2π)$ 的随机数
&lt;ul&gt;
&lt;li&gt;粒子小球的 x, y 分量比率根据弧度来设定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;粒子小球的起始坐标应与玩家的坐标相同&lt;/li&gt;
&lt;li&gt;粒子小球的颜色与玩家颜色相同&lt;/li&gt;
&lt;li&gt;粒子小球的速度为玩家移动速度的 $10$ 倍&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;is_attacked(angle, damage) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 粒子小球效果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt; + &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; x = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.x, y = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; radius = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.radius * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; angle = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt; * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.PI * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; vx = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.cos(angle), vy = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.sin(angle);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; color = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.color;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; speed = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.speed * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Particle(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground, x, y, radius, vx, vy, color, speed);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;一些小优化&#34;&gt;一些小优化&lt;/h2&gt;
&lt;h3 id=&#34;人机随机颜色&#34;&gt;人机随机颜色&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_random_color(), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ......
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;get_random_color() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; colors = [&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;blue&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;pink&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;grey&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; colors[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;)];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;人机ai随机攻击操作&#34;&gt;人机AI随机攻击操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/src/playground/player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constructor (...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;    &lt;span style=&#34;color:#007f7f&#34;&gt;// 初始人机冷却攻击时间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;update() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.timedelta / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.is_me &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.spent_time &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt; &amp;amp;&amp;amp; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;180&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; player = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Math&lt;/span&gt;.random() * &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.players.length)];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.shoot_fireball(player.x, player.y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;部署nginx与对接acapp&#34;&gt;部署nginx与对接acapp&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3257028/&#34;&gt;5. 部署nginx与对接acapp | 讲义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/79244/&#34;&gt;5.1 上课笔记 | Andrew1729&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/solution/content/78903/&#34;&gt;5.1. 上课笔记 | 菊花&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/364622127&#34;&gt;Ngnix 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/36187963b553&#34;&gt;nginx 和uwsgi的区别与作用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;nginx是什么&#34;&gt;Nginx是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;uwsgi是什么&#34;&gt;uWSGI是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;uWSGI是一个全功能的HTTP服务器，实现了WSGI、uwsgi、http等协议&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它要做的就是把HTTP协议转化成语言支持的网络协议。比如把HTTP协议转化成WSGI协议，让Python可以直接使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WSGI协议是Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单来说uWSGI就是用来沟通nginx和django的一座桥梁&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;nginxuwsgidiango-工作流程&#34;&gt;Nginx+uWSGI+Diango 工作流程&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nginx&lt;/code&gt; 是对外的服务接口，外部浏览器通过&lt;code&gt;url&lt;/code&gt;访问&lt;code&gt;nginx&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;nginx&lt;/code&gt; 接收到浏览器发送过来的&lt;code&gt;http&lt;/code&gt;请求，将包进行解析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分析&lt;code&gt;url&lt;/code&gt;，如果是静态文件请求就直接访问用户给&lt;code&gt;nginx&lt;/code&gt;配置的静态文件目录，直接返回用户请求的静态文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不是静态文件，而是一个动态的请求，那么&lt;code&gt;nginx&lt;/code&gt;就将请求转发给&lt;code&gt;uwsgi&lt;/code&gt;，&lt;code&gt;uwsgi&lt;/code&gt; 接收到请求之后将包进行处理，处理成&lt;code&gt;wsgi&lt;/code&gt;可以接受的格式，并发给&lt;code&gt;wsgi&lt;/code&gt;，&lt;code&gt;wsgi&lt;/code&gt; 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给&lt;code&gt;wsgi&lt;/code&gt;，&lt;code&gt;wsgi&lt;/code&gt;将返回值进行打包，打包成&lt;code&gt;uwsgi&lt;/code&gt;能够接收的格式，&lt;code&gt;uwsgi&lt;/code&gt;接收&lt;code&gt;wsgi&lt;/code&gt; 发送的请求，并转发给&lt;code&gt;nginx&lt;/code&gt;, &lt;code&gt;nginx&lt;/code&gt;最终将返回值返回给浏览器&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;uwsgi服务的开启关闭&#34;&gt;uwsgi服务的开启&amp;amp;&amp;amp;关闭&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;~/acapp&lt;/code&gt;启动uwsgi服务：&lt;strong&gt;&lt;code&gt;uwsgi --ini scripts/uwsgi.ini&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;关闭uwsgi服务：&lt;code&gt;sudo pkill -f uwsgi -9&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;针对-acapp-的优化&#34;&gt;针对 acapp 的优化&lt;/h2&gt;
&lt;h3 id=&#34;打包脚本优化&#34;&gt;打包脚本优化&lt;/h3&gt;
&lt;p&gt;由于现在 &lt;strong&gt;发布版本的脚本文件&lt;/strong&gt; 用的是打包在根目录里的 &lt;strong&gt;static&lt;/strong&gt; 文件夹&lt;/p&gt;
&lt;p&gt;每次修改好 &lt;strong&gt;static&lt;/strong&gt; 文件夹后，不仅需要对 &lt;strong&gt;js&lt;/strong&gt; 文件打包，还需要对 &lt;strong&gt;static&lt;/strong&gt; 文件夹打包&lt;/p&gt;
&lt;p&gt;不放把 &amp;ldquo;将static文件夹打包&amp;rdquo; 的 &lt;strong&gt;shell&lt;/strong&gt; 代码一起加入 &lt;strong&gt;js&lt;/strong&gt; 打包脚本中，从而实现一键打包&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scripts/compress_game_js.sh&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &amp;#39;*.js&amp;#39; | sort | xargs cat &amp;gt; ${JS_PATH_DIST}game.js

echo &amp;#34;yes&amp;#34; | python3 manage.py collectstatic
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;鼠标点击事件的相对偏移&#34;&gt;鼠标点击事件的相对偏移&lt;/h3&gt;
&lt;p&gt;由于写游戏界面的时候，玩家移动是按照鼠标相对于当前整个浏览器取的位置参数 &lt;code&gt;e.clientX&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;acapp&lt;/code&gt; 里，每个应用是一个小窗口，鼠标点击位置的参数应当是 &lt;strong&gt;相对于整个游戏窗口的位置参数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所有会导致出现，点击的位置与移动的位置不同，这里需要做出小优化&lt;/p&gt;
&lt;p&gt;优化的逻辑 :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$clientX−窗口左侧到浏览器左侧的距离=玩家的目标X$&lt;/li&gt;
&lt;li&gt;$clientY−窗口上侧到浏览器上侧的距离=玩家的目标Y$
这就要用到一个 &lt;code&gt;js&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt; 了 : &lt;code&gt;getBoundingClientRect()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject = object.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.top : 元素上边到视窗上边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.right : 元素右边到视窗左边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.bottom : 元素下边到视窗上边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.left : 元素左边到视窗左边的距离;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.width : 是元素自身的宽
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rectObject.height : 是元素自身的高
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;player/zbase.js&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; add_listening_events() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.playground.game_map.$canvas.mousedown(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt;(e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建 rect 对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;const&lt;/span&gt; rect = outer.ctx.canvas.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#007f7f&#34;&gt;// 调整偏移量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;            outer.move_to(e.clientX - rect.left, e.clientY - rect.top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (e.which === &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (outer.cur_skill === &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;fireball&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#007f7f&#34;&gt;// 调整偏移量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;                outer.shoot_fireball(e.clientX - rect.left, e.clientY - rect.top);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;将菜单界面重新设为主界面&#34;&gt;将菜单界面重新设为主界面&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;js/zbase.js&lt;/code&gt; 的注释取消，使之创建出 &lt;strong&gt;menu&lt;/strong&gt; 对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;js/playground/zbase.js&lt;/code&gt; 的注释取消，并设置逻辑，让 &lt;strong&gt;playground&lt;/strong&gt; 打开后，才进行游戏界面初始化&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; AcGamePlayground {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(root) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root = root;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground = $(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;`&amp;lt;div class=&amp;#34;ac-game-playground&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.hide();    &lt;span style=&#34;color:#007f7f&#34;&gt;// 初始时隐藏
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 游戏界面生成代码在下面展示 playground 时执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.start();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    show() {    &lt;span style=&#34;color:#007f7f&#34;&gt;// 打开 playground 界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.show();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 开始生成游戏界面
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.root.$ac_game.append(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.width();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.$playground.height();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.game_map = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; GameMap(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players = [];  &lt;span style=&#34;color:#007f7f&#34;&gt;// 存放当前游戏中的所有玩家
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 将玩家加入游戏中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;white&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#007f7f&#34;&gt;// 创建好 5 个人机
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;let&lt;/span&gt; i = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;5&lt;/span&gt;; i ++ ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.players.push(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;new&lt;/span&gt; Player(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.width / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height / &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.05&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.get_random_color(), &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;.height * &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0.15&lt;/span&gt;, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;调整-css-文件适应窗口&#34;&gt;调整 css 文件，适应窗口&lt;/h3&gt;
&lt;p&gt;在设置 &lt;code&gt;web&lt;/code&gt; 网页的时候，有些设置了绝对值，可能对于窗口化的 &lt;code&gt;acapp&lt;/code&gt; 显示效果差&lt;/p&gt;
&lt;p&gt;将他们修改成相对数值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;game.css&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-menu-field {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;40&lt;/span&gt;%;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    left: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;20&lt;/span&gt;%;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.ac-game-menu-field-item {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    height: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;vh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    font-size: &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;4&lt;/span&gt;vh;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_django/">AcWing Django 框架课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/punch_the_clock/72/">AcWing Django 框架课</a></li>
</ul>
<hr>
<h1 id="django-项目创建">Django 项目创建</h1>
<ul>
<li><a href="https://www.acwing.com/solution/content/72577/">2.1上课笔记 | 栎</a></li>
<li><a href="https://www.acwing.com/solution/content/73097/">2.1上课笔记 | Andrew1729</a></li>
</ul>
<hr>
<h2 id="启动初始项目">启动初始项目</h2>
<ol>
<li><code>django-admin startproject acapp</code>：在当前目录下创建名为<code>acapp</code>的<code>django</code>项目</li>
<li><code>python3 manage.py runserver 0.0.0.0:8000</code>：启动项目
<ol>
<li>打开<code>settings.py</code>，找到<code>ALLOWED_HOSTS=[]</code>，修改成<code>ALLOWED_HOSTS=[&quot;自己的服务器的公网IP&quot;]</code></li>
<li>通过<code>自己的服务器公网IP:8000</code> 打开Django页面</li>
</ol>
</li>
</ol>
<h2 id="创建管理员登录页面">创建管理员登录页面</h2>
<ol>
<li>在一级<code>acapp</code>文件夹下，<code>python3 manage.py startapp XXX</code>，<code>XXX</code>是可以自定义的app名，这里用<code>game</code>示例，这时候会多一个文件夹<code>game</code>，树形结构如图：</li>
</ol>
<pre tabindex="0"><code>|-- game
|   |-- __init__.py
|   |-- admin.py          # 管理员页面
|   |-- apps.py           # 用的不多
|   |-- migrations        # 存储数据库
|   |   `-- __init__.py
|   |-- models.py         # 定义网站里的数据库表
|   |-- tests.py
|   `-- views.py          # 视图，即函数
</code></pre><ol start="2">
<li><code>python3 manage.py migrate</code>：将所有修改更新进数据库</li>
<li>创建一个 <strong>管理员用户</strong>：</li>
</ol>
<pre tabindex="0"><code>$ python3 manage.py createsuperuser
&gt; Username (leave blank to use &#39;acs&#39;): admin
&gt; Email address: 
&gt; Password: 123456
&gt; Password (again): 123456
&gt; Superuser created successfully.
</code></pre><p>然后利用该 <strong>管理员用户</strong> 登录 <code>admin</code> 页面，即可成功登陆</p>
<h2 id="创建用户登录页面">创建用户登录页面</h2>
<h3 id="game-下的各个文件作用"><code>game</code> 下的各个文件作用</h3>
<ol>
<li><code>templates</code>目录：管理 <code>html</code>  文件</li>
<li><code>urls</code>目录：管理路由，即链接与函数的对应关系 (接收链接，调用相对应的函数)</li>
<li><code>views</code>目录：管理 <code>http</code> 函数（接收浏览器请求，返回字符串至浏览器）</li>
<li><code>models</code>目录：管理数据库数据</li>
<li><code>static</code>目录：管理静态文件</li>
<li><code>consumers</code>目录：管理<code>websocket</code>函数</li>
</ol>
<h3 id="实现一个路由重定向"><strong>实现一个路由重定向</strong></h3>
<ul>
<li><code>url</code> 输入网址 -&gt; <code>acapp.urls</code> -&gt; <code>game.urls</code> -&gt; <code>game.views.index</code> -&gt; 展示页面</li>
</ul>
<p><strong>game.views</strong></p>
<p>这其中，<code>HttpResponse()</code>内部使用<code>html</code>的语法，返回的响应就直接用这个字符串作为页面，转换成<code>html</code></p>
<pre tabindex="0"><code>from django.http import HttpResponse

def index(request):
    line1 = &#39;&lt;h1 style=&#34;text-align: center&#34;&gt; 第一个网页 &lt;/h1&gt;&#39;
    return HttpResponse(line1)
</code></pre><p><strong>game.urls</strong></p>
<p>这其中，<code>path('PATH', function, name)</code>的含义是，在用户访问网站的时候，如果是<code>网站/game/PATH</code>，就会调用<code>function</code>，名字为<code>name</code>，这是在<code>/game/</code>目录下的调用，所以这个<code>PATH</code>是在<code>/game/</code>的基础上的<strong>相对路径</strong>，所以他的<strong>绝对路径</strong>是<code>网站/game/PATH</code></p>
<pre tabindex="0"><code>from django.urls import path
from game.views import index

urlpatterns = [ 
    path(&#34;&#34;, index, name=&#34;index&#34;),
]
</code></pre><p><strong>acapp.urls</strong></p>
<p>这其中，<code>path('PATH', include('game.urls'))</code>的含义是：在用户访问网站的时候，如果是<code>网站/PATH</code>，就会走到<code>/game/urls</code>，并根据<code>/game/urls.py</code>来跑路由，就是说，用户在访问<code>网站/</code>的时候，由于此时调用的函数是<code>include('game.urls')</code>，所以访问<code>网站/</code>相当于根据<code>game/urls</code>访问</p>
<pre tabindex="0"><code>from django.contrib import admin
from django.urls import path, include

urlpatterns = [ 
    path(&#39;&#39;, include(&#39;game.urls&#39;)),
    path(&#39;admin/&#39;, admin.site.urls),
] 
</code></pre><p>然后直接打开 <code>ip:socket</code> 可以直接显示 <code>index</code> 返回的网页</p>
<h1 id="创建菜单界面">创建菜单界面</h1>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3199626/">3. 创建菜单界面 | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/73121/">3.1 上课笔记 | 大家好今天是</a></li>
<li><a href="https://www.acwing.com/solution/content/73707/">3.1 上课笔记 | 栎</a></li>
</ul>
<hr>
<h2 id="构建项目框架">构建项目框架</h2>
<h3 id="项目系统设计">项目系统设计</h3>
<ul>
<li><code>menu</code>：菜单页面</li>
<li><code>playground</code>：游戏界面</li>
<li><code>settings</code>：设置界面</li>
</ul>
<h3 id="项目文件结构">项目文件结构</h3>
<pre tabindex="0"><code>.
|-- README.md
|-- acapp
|   |-- __init__.py    # 文件夹在加上 __init__.py 文件后，python 便可以通过 import 来引用该文件夹
|   |-- asgi.py
|   |-- settings.py
|   |-- urls.py
|   `-- wsgi.py
|-- db.sqlite3
|-- game
|   |-- __init__.py
|   |-- admin.py
|   |-- apps.py
|   |-- migrations
|   |   `-- __init__.py
|   |-- models
|   |   `-- __init__.py
|   |-- static
|   |   |-- css
|   |   |   `-- game.css    # 一般一个工程，只有一个 css 文件就足够了
|   |   |-- image
|   |   |   `-- menu
|   |   |       `-- background.gif
|   |   `-- js
|   |       |-- dist
|   |       |   `-- game.js
|   |       `-- src
|   |           `-- zbase.js    # 总的 js 文件，命名以 z 开头会自动在字典序最后
|   |-- templates
|   |   `-- multiends
|   |       `-- web.html
|   |-- tests.py
|   |-- urls
|   |   |-- __init__.py
|   |   |-- index.py
|   |   |-- menu
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   |-- playground
|   |   |   |-- __init__.py
|   |   |   `-- index.py
|   |   `-- settings
|   |       |-- __init__.py
|   |       `-- index.py
|   `-- views
|       |-- __init__.py
|       |-- index.py
|       |-- menu
|       |   `-- __init__.py
|       |-- playground
|       |   `-- __init__.py
|       `-- settings
|           `-- __init__.py
|-- manage.py
`-- scripts
    `-- compress_game_js.sh
</code></pre><h4 id="js-文件管理"><code>js</code> 文件管理</h4>
<p>一般一个工程会有很多个 <code>.js</code> 源文件，为了加快网络的传输，也为了每次写新的 <code>.js</code> 文件不用每个 <code>html</code> 都额外引入一次</p>
<p>考虑用一个 <code>src</code> 源文件夹来存储所有的 <code>.js</code> 源文件</p>
<p>然后用 <code>dist</code> 文件夹来存放由 <code>src</code> 下所有源文件整合生成的一个目标 <code>.js</code> 文件</p>
<p>这样既实现了快速传输的好处，也方便了后续编写 <code>html</code> 文件时，引入 <code>.js</code> 的便利</p>
<p>创建一个脚本实现上述 <strong>整合</strong> 的功能
<code>~/acapp/scripts/compress_game_js.sh</code></p>
<pre tabindex="0"><code>#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &#39;*.js&#39; | sort | xargs cat &gt; ${JS_PATH_DIST}game.js
</code></pre><h4 id="html-文件管理"><code>html</code> 文件管理</h4>
<p>在 <code>templates</code> 文件夹下创建 <code>menu</code>、<code>playground</code>、<code>settings</code>、<code>multiends</code> 四个文件夹，用于存储三个模块和终端的 <code>html</code> 文件</p>
<p>在 <code>multiends</code> 下创建 <code>web.html</code> 文件</p>
<pre tabindex="0"><code>{% load static %}
&lt;!-- Django 中引入全局setting里的变量 static 的语法--&gt;
&lt;head&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.acwing.com/static/jquery-ui-dist/jquery-ui.min.css&#34;&gt;
    &lt;script src=&#34;https://cdn.acwing.com/static/jquery/js/jquery-3.3.1.min.js&#34;&gt;&lt;/script&gt;
    &lt;!-- 上述两句引入 jQuery 库 --&gt;
    &lt;!-- 使用引入的变量 static 的语法如下 --&gt;
    &lt;link rel=&#34;stylesheet&#34; href=&#34;{% static &#39;css/game.css&#39; %}&#34;&gt;
    &lt;script src=&#34;{% static &#39;js/dist/game.js&#39; %}&#34;&gt;&lt;/script&gt;
    &lt;!-- 分别引入 css 文件和总的 js 文件 --&gt;
&lt;/head&gt;

&lt;body style=&#34;margin: 0&#34;&gt;
    &lt;div id=&#34;ac_game_12345678&#34;&gt;&lt;/div&gt;
    &lt;script&gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
&lt;/body&gt;
</code></pre><h4 id="views-视图管理"><code>views</code> 视图管理</h4>
<p>在 <code>views</code> 文件夹下新建三个模块的视图文件夹</p>
<p>写一个 <code>index.py</code> 文件，目的是在 <code>web</code> 端被访问时，返回上面写的 <code>web.html</code> 文件</p>
<pre tabindex="0"><code>from django.shortcuts import render

def index(request):
  return render(request, &#34;multiends/web.html&#34;)
</code></pre><h4 id="urls-路由管理"><code>urls</code> 路由管理</h4>
<pre tabindex="0"><code>                                     /-- &#34;&#34; -- index
                                    / -- &#34;menu/&#34; -- menu.index
             / &#34;&#34; --&gt; &#34;game.url&#34; --&gt; 
            /                       \ -- &#34;playground/&#34; -- playground.index
id:scoket -&gt;                         \-- &#34;settings/&#34; -- settings.index
            \
             \ &#34;/admin&#34; -- 到达管理员页面
</code></pre><p><code>~/acapp/acapp/urls.py</code></p>
<pre tabindex="0"><code>from django.contrib import admin
from django.urls import path, include

urlpatterns = [
  path(&#39;&#39;, include(&#39;game.urls.index&#39;)),
  path(&#39;admin/&#39;, admin.site.urls),
]
</code></pre><p><code>~/acapp/game/urls/index.py</code></p>
<pre tabindex="0"><code>from django.urls import path, include
from game.views.index import index

urlpatterns = [ 
    path(&#34;&#34;, index, name=&#34;index&#34;),
    path(&#34;menu/&#34;, include(&#34;game.urls.menu.index&#34;)),
    path(&#34;playground/&#34;, include(&#34;game.urls.playground.index&#34;)),
    path(&#34;settings/&#34;, include(&#34;game.urls.settings.index&#34;))
]
</code></pre><h4 id="网页渲染流程"><strong>网页渲染流程</strong></h4>
<p>根据用户的链接，首先进入<code>acapp/urls.py</code>，根据<code>path</code>再进入<code>game/urls/index.py</code>，再根据<code>path</code>进入下一层<code>url</code>或调用相对应的<code>views</code>中的<code>index.py</code>函数，函数接收参数，在网页端渲染<code>templates/multiends</code>下的<code>web.html</code>，<code>html</code>中有<code>JS</code>执行</p>
<p>注意：本项目为前后端分离，即通过<code>JS</code>在<code>client</code>中渲染项目(动态生成页面)，而不是在<code>server</code>渲染项目</p>
<h3 id="修改全局配置">修改全局配置</h3>
<h4 id="设置时区">设置时区</h4>
<p>修改项目的 <strong>UTC</strong> 时间为 <strong>CN</strong> 时间</p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
TIME_ZONE = &#39;Asia/Shanghai&#39; # 原来默认是 UTC
******
</code></pre><h4 id="添加配置文件">添加配置文件</h4>
<p>将新创建的 <code>game</code> 下的 <code>apps.py</code> 中的 <code>GameConfig</code> 加到 <code>settings.py</code> 下</p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
INSTALLED_APPS = [
  &#39;game.apps.GameConfig&#39;,
  ......
]
******
</code></pre><p>声明将静态文件路径 <code>STATIC_ROOT</code> 和 <code>MEDIA_ROOT</code></p>
<pre tabindex="0"><code>$ vim /acapp/settings.py

******
import os

......

STATIC_ROOT = os.path.join(BASE_DIR, &#39;static&#39;)
STATIC_URL = &#39;/static/&#39;

MEDIA_ROOT = os.path.join(BASE_DIR, &#39;media&#39;)
MEDIA_URL = &#39;/media/&#39;
******
</code></pre><h2 id="创建菜单-menu-界面">创建菜单 <code>menu</code> 界面</h2>
<h3 id="搭建菜单-menu-界面的框架">搭建菜单 <code>menu</code> 界面的框架</h3>
<p>我们采用的 <strong>前后端分离式</strong> 开发，所有的 <strong>html</strong> 渲染都要求在前端完成</p>
<p>开发流程就是，先在 <strong>html</strong> 里创建好一个有 <strong>id</strong> 的 <strong>div</strong></p>
<p>然后利用 <strong>js</strong> 文件，捕获到该 <strong>div</strong>，并进行 <strong>渲染</strong></p>
<p><code>/templates/multiends/web.html</code></p>
<pre tabindex="0"><code>...
    &lt;div id=&#34;ac_game_12345678&#34;&gt;&lt;/div&gt;
    &lt;script&gt;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
...
</code></pre><p><code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>class AcGame {
    constructor(id) {
        this.id = id; 
        this.$ac_game = $(&#39;#&#39; + id);
        this.menu = new AcGameMenu(this);
    }   
}
</code></pre><p><code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(` 
&lt;div class=&#34;ac-game-menu&#34;&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu); 
}
</code></pre><p><code>css/game.css</code></p>
<pre tabindex="0"><code>.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&#39;/static/image/menu/background.gif&#39;);
    background-size: 100% 100%;
    user-select: none;
}
</code></pre><p>这里的 <strong>代码逻辑</strong> 如下：</p>
<ol>
<li><code>html</code> 页面执行到 <code>js</code> 代码，利用 <code>AcGame类</code> 创建对象 <code>ac_game</code> 同时传递参数 <code>div</code> 的 <code>id</code></li>
<li><code>AcGame</code> 开始执行构造函数，在构造函数中，捕获 <code>html</code> 标签，并利用 <code>AcGameMenu类</code> 创建对象 <code>menu</code>，并将整个对象作为参数下传</li>
<li><code>AcGameMenu</code> 开始执行构造函数，然后创建 <code>html</code> 代码，加到捕获到的 <code>html</code> 代码下</li>
<li>最终成功渲染出背景图片</li>
</ol>
<h3 id="设置菜单-menu-页面的内容">设置菜单 <code>menu</code> 页面的内容</h3>
<p>主要内容就是在主页面中，显示：单人模式、多人模式、设置，三个按钮的选项
<code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&lt;div class=&#34;ac-game-menu&#34;&gt;
    &lt;div class=&#34;ac-game-menu-field&#34;&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&#34;&gt;
            单人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&#34;&gt;
            多人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&#34;&gt;
            设置
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&#39;.ac-game-menu-field-item-single-mode&#39;);
        this.$multi_mode = this.$menu.find(&#39;.ac-game-menu-field-item-multi-mode&#39;);
        this.$settings_mode = this.$menu.find(&#39;.ac-game-menu-field-item-settings-mode&#39;);
    }
}
</code></pre><p><code>css/game.css</code></p>
<pre tabindex="0"><code>.ac-game-menu {
    width: 100%;
    height: 100%;
    background-image: url(&#39;/static/image/menu/background.gif&#39;);
    background-size: 100% 100%;
    user-select: none;
}
.ac-game-menu-field {
    width: 20vw;
    position: relative;
    top: 40vh;
    left: 19vh;
}
.ac-game-menu-field-item {
    height: 7vh;
    width: 18vw;
    color: white;
    font-size: 6vh;
    font-style: italic;
    padding: 2vh;
    margin: 1vh 0;
    cursor: pointer;
    text-align: center;
    background-color: rgba(39, 21, 28, 0.6);
    border-radius: 10px;
    letter-spacing: 0.5vw;
}
.ac-game-menu-field-item:hover {
    transform: scale(1.2);
    transition: 100ms;
}
</code></pre><h3 id="添加-单人模式-监听函数--打开游戏界面-功能">添加 &lsquo;单人模式&rsquo; 监听函数 —— 打开游戏界面 功能</h3>
<p>这里要实现的 <strong>逻辑</strong>：</p>
<ol>
<li>点击 &lsquo;单人模式&rsquo; 按钮触发 <code>click</code> 事件，随即触发监听函数，开始执行</li>
<li>关闭 <code>menu</code> 页面</li>
<li>打开 <code>playground</code> 页面</li>
</ol>
<p>因此，我们先简易的实现一个 <code>playground</code> 页面，方便调试该功能
<code>js/src/playground/zbase.js</code></p>
<pre tabindex="0"><code>class AcGamePlayground {
    constructor(root) {
        this.root = root;
        this.$playground = $(`&lt;div&gt;游戏界面&lt;/div&gt;`);

        this.hide();
        this.root.$ac_game.append(this.$playground);

        this.start();
    }
    start() {

    }
    show() {    //打开 playground 界面
        this.$playground.show();
    }
    hide() {    //关闭 playground 界面
        this.$playground.hide();
    }

}
</code></pre><p>在实现监听函数功能之前，先在 <code>/src/zbase.js</code> 即主 <code>js</code> 文件下，利用 <code>AcGamePlayground</code> 类创建好 <code>playground</code> 对象</p>
<p>这样我们就能在前端，渲染出两个界面了，分别是：<code>menu</code> 和 <code>playground</code></p>
<p><code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>class AcGame {
    constructor(id) {
        this.id = id;
        this.$ac_game = $(&#39;#&#39; + id);
        this.menu = new AcGameMenu(this);
        // 把 playground 对象也建好，这样我们就同时有两个界面了
        this.playground = new AcGamePlayground(this);

        this.start();
    }                    
    start() {

    }
}
</code></pre><p>然后，我们开始实现 <code>ac-game-menu-field-item-single-mode</code> 标签的 <code>click</code> 事件的监听函数</p>
<p>其功能之前讲过了，就是关闭 <code>menu</code> 页面，打开 <code>playground</code> 页面</p>
<p><code>js/src/menu/zbase.js</code></p>
<pre tabindex="0"><code>class AcGameMenu {
    constructor(root) {
        this.root = root;
        this.$menu = $(`
&lt;div class=&#34;ac-game-menu&#34;&gt;
    &lt;div class=&#34;ac-game-menu-field&#34;&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-single-mode&#34;&gt;
            单人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-multi-mode&#34;&gt;
            多人模式
        &lt;/div&gt;
        &lt;div class=&#34;ac-game-menu-field-item ac-game-menu-field-item-settings-mode&#34;&gt;
            设置
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
`);
        this.root.$ac_game.append(this.$menu);
        this.$single_mode = this.$menu.find(&#39;.ac-game-menu-field-item-single-mode&#39;);
        this.$multi_mode = this.$menu.find(&#39;.ac-game-menu-field-item-multi-mode&#39;);
        this.$settings_mode = this.$menu.find(&#39;.ac-game-menu-field-item-settings-mode&#39;);

        this.start();
    }
    start() {
        this.add_listening_events();
    }
    add_listening_events() {
        let outer = this;
        this.$single_mode.click(function(){
            outer.hide();   // 关闭主页面
            outer.root.playground.show();   // 打开游戏界面
        });
    }

    show() {    //显示menu界面
        this.$menu.show();
    }
    hide() {    //隐藏menu界面
        this.$menu.hide();
    }
}
</code></pre><h1 id="创建游戏界面">创建游戏界面</h1>
<ul>
<li><a href="https://www.acwing.com/solution/content/79181/">4.1 上课笔记 | Andrew1729</a></li>
</ul>
<hr>
<blockquote>
<p><strong>若修改<code>static文件夹</code>下的相关文件，需在<code>~/acapp</code>下执行<code>./scripts/compress_game_js.sh</code>来打包文件</strong></p>
</blockquote>
<h2 id="前端的模块化引入">前端的模块化引入</h2>
<p>由于在 <code>html</code> 代码部分，是将整个 <code>game.js</code> 文件引入</p>
<p>这样会导致在 <code>game.js</code> 中定义的变量，会变成整个网页的 <strong>全局变量</strong>（之后可能会引起变量重名的诸多问题）</p>
<p>因此，我们考虑使用 <strong>模块化引入</strong> 的功能，让网页只引入在 <code>html</code> 中需要的部分</p>
<p>修改 <code>web.html</code></p>
<pre tabindex="0"><code>&lt;!-- 首先，先删掉上面整个引入 game.js 的部分 --&gt;
&lt;!-- 然后，下方创建对象的部分，先使用模块化引入 --&gt;
......
    &lt;script type=&#34;module&#34;&gt;
        import {AcGame} from &#34;{% static &#39;js/dist/game.js&#39; %}&#34;
        $(document).ready(function(){
            let ac_game = new AcGame(&#34;ac_game_12345678&#34;)
        })
    &lt;/script&gt;
......
</code></pre><p>此外，还有修改引入的类，在前面加上 <code>export</code>，如下修改 <code>js/src/zbase.js</code></p>
<pre tabindex="0"><code>export class AcGame {
    ......
}
</code></pre><p>这样，在全局中，只会出现引入的模块，其他的 <code>.js</code> 代码不会出现在全局中</p>
<h2 id="构建游戏界面框架">构建游戏界面框架</h2>
<p><code>static/js/src/playground/zbase.js</code></p>
<pre tabindex="0"><code>......
    this.$playground = $(`&lt;div class=&#34;ac-game-playground&#34;&gt;&lt;/div&gt;`);
......
</code></pre><p><code>game.css</code></p>
<pre tabindex="0"><code>......
.ac-game-playground {
    height: 100%;
    width: 100%;
    user-select: none;  // 禁用右键弹菜单
} 
</code></pre><h2 id="实现游戏引擎框架"><strong>实现游戏引擎框架</strong></h2>
<p>游戏中，物体在移动，其实现原理是：每一个动作都会渲染多张图片出来，然后图片快速的切换，从而实现动的过程</p>
<p>因此，需要先实现一个游戏引擎的基类 <code>AcGameObject</code> ，使得每帧能渲染一张图片出来</p>
<p>该基类需要具备的功能有：</p>
<ol>
<li><code>start()</code> 在游戏开始的第一帧时需要执行的任务（一般是创建对象）</li>
<li><code>update()</code> 在游戏开始后的每一帧均会执行的任务（一般是渲染当前对象的各种状态）</li>
<li><code>on_destroy()</code> 删掉该物体前需要执行的任务（一般是删掉动画，或者给对手加分）</li>
<li><code>destroy()</code> 删掉该物体</li>
</ol>
<p>根据上述逻辑，我们就可以基本搭建出来一个游戏引擎的基类了，具体如下：
<code>/static/js/playground/ac_game_object/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> AC_GAME_OBJECTS = [];   <span style="color:#007f7f">// 用于记录当前画布中，需要渲染的对象有哪些
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor() {
</span></span><span style="display:flex;"><span>        AC_GAME_OBJECTS.push(<span style="color:#fff;font-weight:bold">this</span>);  <span style="color:#007f7f">// 将当前新建的对象，加入到全局的画布中去，参与渲染
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.has_called_start = <span style="color:#fff;font-weight:bold">false</span>;  <span style="color:#007f7f">// 是否执行过 start 函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.timedelta = <span style="color:#ff0;font-weight:bold">0</span>;             <span style="color:#007f7f">// 当前帧距离上一帧的时间间隔
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 该数据记录是为了后续计算速度等参数的
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    }
</span></span><span style="display:flex;"><span>    start() {   <span style="color:#007f7f">// 只会在第一帧执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {  <span style="color:#007f7f">// 每一帧均会执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    on_destroy() {  <span style="color:#007f7f">// 在被销毁前执行一次
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    destroy() { <span style="color:#007f7f">// 删掉该物体
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.on_destroy();  <span style="color:#007f7f">//删掉该物体前，执行删前的操作
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 在全局渲染物体中，找到该物体，并将其删掉
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; AC_GAME_OBJECTS.length; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (AC_GAME_OBJECTS[i] === <span style="color:#fff;font-weight:bold">this</span>) {  <span style="color:#007f7f">// 三等号，在js里额外加了一层类型相等约束
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                AC_GAME_OBJECTS.splice(i, <span style="color:#ff0;font-weight:bold">1</span>);
</span></span><span style="display:flex;"><span>                <span style="color:#fff;font-weight:bold">break</span>;
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> last_timestamp;
</span></span><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">let</span> AC_GAME_ANIMATION = <span style="color:#fff;font-weight:bold">function</span>(timestamp) {  <span style="color:#007f7f">// 回调函数，实现：每一帧重绘时，都会执行一遍
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; AC_GAME_OBJECTS.length; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> obj = AC_GAME_OBJECTS[i];
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (!obj.has_called_start) { <span style="color:#007f7f">// 如果还未执行初始帧动作，就先执行
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            obj.start();
</span></span><span style="display:flex;"><span>            obj.has_called_start = <span style="color:#fff;font-weight:bold">true</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">else</span> {  <span style="color:#007f7f">// 执行过初始帧，就执行每一帧的任务
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            obj.timedelta = timestamp - last_timestamp;
</span></span><span style="display:flex;"><span>            obj.update();
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    last_timestamp = timestamp; <span style="color:#007f7f">// 更新最后一次时间戳
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    requestAnimationFrame(AC_GAME_ANIMATION);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>requestAnimationFrame(AC_GAME_ANIMATION);   <span style="color:#007f7f">// JS的API，可以调用1帧里面的函数。(有些浏览器的一秒帧数不一定相等)
</span></span></span></code></pre></div><blockquote>
<p><strong>接下来所有的一切游戏，都是基于这个引擎的基类完成的</strong></p>
</blockquote>
<h2 id="实现游戏地图功能">实现游戏地图功能</h2>
<p>目标：实现一个每一秒都在渲染的纯黑背景</p>
<p>虽然现阶段要实现的地图较为简单，但为了后期的拓展性，故还是考虑新建一个文件夹来完成</p>
<p>然后在 <code>js</code> 中，已经封装好了一个 <code>canvas</code> 的 <code>api</code> 来帮助实现背景画布，直接调用即可</p>
<p>先铺开画布，然后设置为黑色</p>
<p><code>static/js/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// $(&#39;.playground&#39;)对象已经在 css 文件里渲染出高宽了
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 现在把他的高宽存下来，往下传递
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.width = <span style="color:#fff;font-weight:bold">this</span>.$playground.width();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.height = <span style="color:#fff;font-weight:bold">this</span>.$playground.height();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.game_map = <span style="color:#fff;font-weight:bold">new</span> GameMap(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .....
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>static/js/playground/game-map/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> GameMap <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {    <span style="color:#007f7f">// 继承自游戏引擎基类
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    constructor(playground) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();    <span style="color:#007f7f">// 自函数功能：调用基类的构造函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$canvas = $(<span style="color:#0ff;font-weight:bold">`&lt;canvas&gt;&lt;/canvas&gt;`</span>); <span style="color:#007f7f">// 创建一个canvas的jQuery对象，就是我们要实现的画布
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.$canvas[<span style="color:#ff0;font-weight:bold">0</span>].getContext(<span style="color:#0ff;font-weight:bold">&#39;2d&#39;</span>); <span style="color:#007f7f">// jQuery对象是一个数组，第一个索引是html对象
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 设置画布的宽高
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width = <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height = <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground.$playground.append(<span style="color:#fff;font-weight:bold">this</span>.$canvas);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {  <span style="color:#007f7f">// 游戏地图每帧都要渲染
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#0ff;font-weight:bold">&#34;rgba(0, 0, 0, 0.2)&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillRect(<span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.width, <span style="color:#fff;font-weight:bold">this</span>.ctx.canvas.height);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span> }
</span></span></code></pre></div><h2 id="实现玩家显示功能">实现玩家显示功能</h2>
<p>毛坯版玩家显示，每个玩家定义成一个圆，然后渲染在前端</p>
<p>需要对于玩家类定义多个参数，以方便日后拓展：</p>
<ol>
<li><code>x</code> 当前位置的横坐标</li>
<li><code>y</code> 当前位置的纵坐标</li>
<li><code>radius</code> 当前的半径</li>
<li><code>speed</code> 当前的速度</li>
<li><code>is_me</code> 该对象是否是当前玩家操控的对象（一是区别于 bot，二是区别于 日后联机的其他玩家）</li>
</ol>
<p><code>static/js/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players = [];  <span style="color:#007f7f">// 存放当前游戏中的所有玩家
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 将玩家加入游戏中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;white&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">true</span>));
</span></span><span style="display:flex;"><span>        ......
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    .....
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><code>static/js/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, x, y, radius, color, speed, is_me) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 把信息都存下来
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.is_me = is_me;
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 用于浮点数运算
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.eps = <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {  <span style="color:#007f7f">// 渲染一个圆
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    on_destroy() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="实现玩家移动功能">实现玩家移动功能</h2>
<p>移动的实现逻辑很简单，就是让每帧渲染的圆的位置发生移动即可</p>
<p>上述简单逻辑的实现如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Player <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(....)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#ff0;font-weight:bold">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">1</span>;
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后我们来实现一个向鼠标点击位置移动的功能</p>
<p>这就需要设置一个 <code>click</code> 事件的监听函数，分别传递：</p>
<ol>
<li>鼠标点击事件</li>
<li>鼠标点击位置的横坐标</li>
<li>鼠标点击位置的纵坐标</li>
</ol>
<p>然后开始让圆的位置逐步向鼠标点击位置进行移动</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>start() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 对于用户玩家，加上监听函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>add_listening_events() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> outer = <span style="color:#fff;font-weight:bold">this</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 把鼠标右键调出菜单栏的功能关掉
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.on(<span style="color:#0ff;font-weight:bold">&#34;contextmenu&#34;</span>, <span style="color:#fff;font-weight:bold">function</span>() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 把右键控制移动功能加上
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 左键:1 中键:2 右键:3
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            outer.move_to(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然后，我们来实现移动功能的函数 <code>move_to(tx, ty)</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(...){
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// x方向上的移动速度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// y方向上的移动速度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;   <span style="color:#007f7f">// 剩余移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>get_dist (x1, y1, x2, y2) { <span style="color:#007f7f">// 求两点的欧几里得距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> dx = x2 - x1;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> dy = y2 - y1;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">Math</span>.sqrt(dx * dx + dy * dy);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>move_to(tx, ty) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 计算移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#fff;font-weight:bold">this</span>.get_dist(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, tx, ty);
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 计算移动角度，api接口：atan2(dy, dx)
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(ty - <span style="color:#fff;font-weight:bold">this</span>.y, tx - <span style="color:#fff;font-weight:bold">this</span>.x);
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 位移 1 个单位长度（向着矢量方向移动到单位圆上）
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle);  <span style="color:#007f7f">// 极直互化
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 浮点数精度运算
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 计算单位帧里的移动距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">let</span> moved = <span style="color:#fff;font-weight:bold">Math</span>.min(<span style="color:#fff;font-weight:bold">this</span>.move_length, <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * moved;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * moved;
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 还要减掉移动的距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.move_length -= moved;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>这样就实现了玩家的移动功能了，可以登录 <code>id:socket</code> 调试该功能</p>
<h2 id="实现火球技能的功能">实现火球技能的功能</h2>
<p>火球对象的建立与玩家基本一致，直接照搬，在从细节上改改即可</p>
<p><code>js/src/playground/skill/fireball/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> FireBall <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, player, x, y, radius, vx, vy, color, speed, move_length, damage) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.player = player;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = vx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = vy;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = move.length;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.damage = damage;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.eps = <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.destroy();
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> moved = <span style="color:#fff;font-weight:bold">Math</span>.min(<span style="color:#fff;font-weight:bold">this</span>.move_length, <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * moved;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * moved;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.move_length -= moved;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span> * Pi, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} 
</span></span></code></pre></div><p>然后在玩家身上实现发火球的功能</p>
<p>基本实现逻辑：当前选中了火球技能，鼠标左键点击一处，向该处发射一个火球</p>
<p>因此，为了知道用户是否选择了技能，需要加一个键盘触发事件监听函数，然后加一个鼠标左键触发事件监听函数</p>
<p>然后发射一个火球即可</p>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(...) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.cur_skill = <span style="color:#fff;font-weight:bold">null</span>;  <span style="color:#007f7f">// 记录当前选择的技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>add_listening_events() {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 左键:1 中键:2 右键:3
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            outer.move_to(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">1</span>) {     <span style="color:#007f7f">// 鼠标左键事件
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">if</span> (outer.cur_skill === <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>) {   <span style="color:#007f7f">// 当前已经选中火球技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                outer.shoot_fireball(e.clientX, e.clientY);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        outer.cur_skill = <span style="color:#fff;font-weight:bold">null</span>; <span style="color:#007f7f">// 清空当前技能
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    });
</span></span><span style="display:flex;"><span>    $(<span style="color:#fff;font-weight:bold">window</span>).keydown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">81</span>) {       <span style="color:#007f7f">// 键盘按下事件
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            outer.cur_skill = <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>shoot_fireball(tx, ty) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 确定火球的参数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> x = <span style="color:#fff;font-weight:bold">this</span>.x, y = <span style="color:#fff;font-weight:bold">this</span>.y; <span style="color:#007f7f">// 火球发射点就是当前玩家的位置
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> radius = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.01</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(ty - <span style="color:#fff;font-weight:bold">this</span>.y, tx - <span style="color:#fff;font-weight:bold">this</span>.x);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle), vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> color = <span style="color:#0ff;font-weight:bold">&#34;orange&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> speed = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.5</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> move_length = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">1.0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> damage = <span style="color:#fff;font-weight:bold">this</span>.playground.height * <span style="color:#ff0;font-weight:bold">0.01</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">new</span> FireBall(<span style="color:#fff;font-weight:bold">this</span>.playground, <span style="color:#fff;font-weight:bold">this</span>, x, y, radius, vx, vy, color, speed, move_length, damage);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>这样就成功实现了玩家发射火球的功能了</p>
<h2 id="实现单人模式下的人机功能">实现单人模式下的人机功能</h2>
<p>先创建好 5 个人机
<code>playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#007f7f">//创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span><span style="color:#fff;font-weight:bold">for</span> (len i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;blue&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>这样创建出来的 5 个人机是不会行动的</p>
<p>我们写一个简易的 AI 程序，让他们也会移动</p>
<p>这里实现的逻辑是：每次随机一个目的地，向目的地移动，然后再随机一个目的地，循环下去</p>
<p>根据该逻辑，修改两个函数即可</p>
<p><code>playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>start() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 对于用户玩家，加上监听函数
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.add_listening_events();
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> tx = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> ty = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_to(tx, ty);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span> update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.move_length &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (!<span style="color:#fff;font-weight:bold">this</span>.is_me) {   <span style="color:#007f7f">// 如果是人机，停下来时再随机一个方向前进
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            <span style="color:#fff;font-weight:bold">let</span> tx = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.width;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> ty = <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.height;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.move_to(tx, ty);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>on_destroy() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#fff;font-weight:bold">this</span>.playground.players.length; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.playground.players[i] === <span style="color:#fff;font-weight:bold">this</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.playground.players.splice(i, <span style="color:#ff0;font-weight:bold">1</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="实现技能命中效果碰撞检测功能">实现技能命中效果（碰撞检测功能）</h2>
<p>实现逻辑：检测两个圆的中心距离是否小于两个圆的半径之和</p>
<p>小于等于时，代表发生碰撞，开始执行命中效果：</p>
<ol>
<li>被击中用户掉血</li>
<li>被击中用户收到向后击退效果</li>
</ol>
<p>碰撞检测写在火球类里，击退效果写在玩家类里</p>
<p><code>fireball/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (...) {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 碰撞检测
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#fff;font-weight:bold">this</span>.playground.players.length; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">let</span> player = <span style="color:#fff;font-weight:bold">this</span>.playground.players[i];
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.player !== player &amp;&amp; <span style="color:#fff;font-weight:bold">this</span>.is_collision(player)) {  <span style="color:#007f7f">// 碰撞发生一定是在非施法者身上
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                <span style="color:#fff;font-weight:bold">this</span>.attack(player);    <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>get_dist(x1, y1, x2, y2) {  <span style="color:#007f7f">// 获得两点的欧几里得距离
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">let</span> dx = x2 - x1;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> dy = y2 - y1;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">Math</span>.sqrt(dx * dx + dy * dy);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>is_collision(player) {  <span style="color:#007f7f">// 检测两个圆的中心距离是否小于两个圆的半径之和
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> distance = <span style="color:#fff;font-weight:bold">this</span>.get_dist(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, player.x, player.y);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (distance &lt; (<span style="color:#fff;font-weight:bold">this</span>.radius + player.radius))
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">true</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>attack(player) {    <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#fff;font-weight:bold">Math</span>.atan2(player.y - <span style="color:#fff;font-weight:bold">this</span>.y, player.x - <span style="color:#fff;font-weight:bold">this</span>.x);   <span style="color:#007f7f">// 计算角度
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    player.is_attacked(angle, <span style="color:#fff;font-weight:bold">this</span>.damage); <span style="color:#007f7f">// 火球命中，目标玩家执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.destroy(); <span style="color:#007f7f">// 火球命中后，自然消失
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span></code></pre></div><p><strong>被击退的时候，原来的移动速度应该置为 0，当前的移动应该转为向被击中方向上的移动</strong>
<code>player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>is_attacked(angle, damage) {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.radius -= damage;  <span style="color:#007f7f">// 受伤，半径减少
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.radius &lt; <span style="color:#ff0;font-weight:bold">10</span>) { <span style="color:#007f7f">// 当半径小于10像素时，代表死亡
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.destroy();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 开始执行击退效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">this</span>.damage_vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.damage_vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.damage_speed = damage * <span style="color:#ff0;font-weight:bold">100</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.speed *= <span style="color:#ff0;font-weight:bold">0.5</span>;  <span style="color:#007f7f">// 被击中以后移动速度减半
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.damage_speed &gt; <span style="color:#fff;font-weight:bold">this</span>.eps) {   <span style="color:#007f7f">// 当前仍处于击退效果中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.vx = <span style="color:#fff;font-weight:bold">this</span>.vy = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.move_length = <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.damage_vx * <span style="color:#fff;font-weight:bold">this</span>.damage_speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.damage_vy * <span style="color:#fff;font-weight:bold">this</span>.damage_speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.damage_speed *= <span style="color:#fff;font-weight:bold">this</span>.friction; <span style="color:#007f7f">// 击退速度乘以摩擦系数，已达到削减的目的
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    } <span style="color:#fff;font-weight:bold">else</span> {
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="被击中以后的粒子效果特效">被击中以后的粒子效果特效</h2>
<p>实现逻辑：被击中以后，在玩家附近随机生成一些粒子小球</p>
<p>因此我们要先实现 粒子小球 对象</p>
<p><code>static/js/src/playground/particle/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> Particle <span style="color:#fff;font-weight:bold">extends</span> AcGameObject {
</span></span><span style="display:flex;"><span>    constructor(playground, x, y, radius, vx, vy, color, speed) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">super</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.playground = playground;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx = <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.ctx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x = x;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y = y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.radius = radius;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vx = vx;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.vy = vy;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.color = color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed = speed;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.friction = <span style="color:#ff0;font-weight:bold">0.9</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    start() {
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    update() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (<span style="color:#fff;font-weight:bold">this</span>.speed &lt; <span style="color:#fff;font-weight:bold">this</span>.eps) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.destroy;
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">return</span> <span style="color:#fff;font-weight:bold">false</span>;
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.x += <span style="color:#fff;font-weight:bold">this</span>.vx * <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.y += <span style="color:#fff;font-weight:bold">this</span>.vy * <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.speed *= <span style="color:#fff;font-weight:bold">this</span>.friction;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.render();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    render() {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.beginPath();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.arc(<span style="color:#fff;font-weight:bold">this</span>.x, <span style="color:#fff;font-weight:bold">this</span>.y, <span style="color:#fff;font-weight:bold">this</span>.radius, <span style="color:#ff0;font-weight:bold">0</span>, <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI, <span style="color:#fff;font-weight:bold">false</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fillStyle = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.ctx.fill();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>} 
</span></span></code></pre></div><p>然后我们在被击退功能模块，实现生成粒子小球的效果</p>
<ul>
<li>粒子小球释放弧度为 $[0,2π)$ 的随机数
<ul>
<li>粒子小球的 x, y 分量比率根据弧度来设定</li>
</ul>
</li>
<li>粒子小球的起始坐标应与玩家的坐标相同</li>
<li>粒子小球的颜色与玩家颜色相同</li>
<li>粒子小球的速度为玩家移动速度的 $10$ 倍</li>
</ul>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>is_attacked(angle, damage) {
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 粒子小球效果
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">10</span> + <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> x = <span style="color:#fff;font-weight:bold">this</span>.x, y = <span style="color:#fff;font-weight:bold">this</span>.y;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> radius = <span style="color:#fff;font-weight:bold">this</span>.radius * <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">0.1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> angle = <span style="color:#ff0;font-weight:bold">2</span> * <span style="color:#fff;font-weight:bold">Math</span>.PI * <span style="color:#fff;font-weight:bold">Math</span>.random();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> vx = <span style="color:#fff;font-weight:bold">Math</span>.cos(angle), vy = <span style="color:#fff;font-weight:bold">Math</span>.sin(angle);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> color = <span style="color:#fff;font-weight:bold">this</span>.color;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> speed = <span style="color:#fff;font-weight:bold">this</span>.speed * <span style="color:#ff0;font-weight:bold">10</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">new</span> Particle(<span style="color:#fff;font-weight:bold">this</span>.playground, x, y, radius, vx, vy, color, speed);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="一些小优化">一些小优化</h2>
<h3 id="人机随机颜色">人机随机颜色</h3>
<p><code>js/src/playground/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor(root) {
</span></span><span style="display:flex;"><span>    ......
</span></span><span style="display:flex;"><span>    <span style="color:#007f7f">// 创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>    <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#fff;font-weight:bold">this</span>.get_random_color(), <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ......
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>get_random_color() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">let</span> colors = [<span style="color:#0ff;font-weight:bold">&#34;blue&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;red&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;pink&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;grey&#34;</span>, <span style="color:#0ff;font-weight:bold">&#34;green&#34;</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> colors[<span style="color:#fff;font-weight:bold">Math</span>.floor(<span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">5</span>)];
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="人机ai随机攻击操作">人机AI随机攻击操作</h3>
<p><code>js/src/playground/player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>constructor (...) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.spent_time = <span style="color:#ff0;font-weight:bold">0</span>;    <span style="color:#007f7f">// 初始人机冷却攻击时间
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>}
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>update() {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.spent_time += <span style="color:#fff;font-weight:bold">this</span>.timedelta / <span style="color:#ff0;font-weight:bold">1000</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">if</span> (!<span style="color:#fff;font-weight:bold">this</span>.is_me &amp;&amp; <span style="color:#fff;font-weight:bold">this</span>.spent_time &gt; <span style="color:#ff0;font-weight:bold">4</span> &amp;&amp; <span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#ff0;font-weight:bold">180</span> &lt; <span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">let</span> player = <span style="color:#fff;font-weight:bold">this</span>.playground.players[<span style="color:#fff;font-weight:bold">Math</span>.floor(<span style="color:#fff;font-weight:bold">Math</span>.random() * <span style="color:#fff;font-weight:bold">this</span>.playground.players.length)];
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.shoot_fireball(player.x, player.y);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h1 id="部署nginx与对接acapp">部署nginx与对接acapp</h1>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3257028/">5. 部署nginx与对接acapp | 讲义</a></li>
<li><a href="https://www.acwing.com/solution/content/79244/">5.1 上课笔记 | Andrew1729</a></li>
<li><a href="https://www.acwing.com/solution/content/78903/">5.1. 上课笔记 | 菊花</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/364622127">Ngnix 介绍</a></li>
<li><a href="https://www.jianshu.com/p/36187963b553">nginx 和uwsgi的区别与作用</a></li>
</ul>
<hr>
<h2 id="nginx是什么">Nginx是什么？</h2>
<blockquote>
<p><strong>Nginx是一款自由的、开源的、高性能的HTTP服务器和反向代理服务器</strong></p>
<p><strong>Nginx可以作为一个HTTP服务器进行网站的发布处理，另外Nginx可以作为反向代理进行负载均衡的实现</strong></p>
<p><strong>Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换</strong></p>
</blockquote>
<h2 id="uwsgi是什么">uWSGI是什么？</h2>
<blockquote>
<p><strong>uWSGI是一个全功能的HTTP服务器，实现了WSGI、uwsgi、http等协议</strong></p>
<p><strong>它要做的就是把HTTP协议转化成语言支持的网络协议。比如把HTTP协议转化成WSGI协议，让Python可以直接使用</strong></p>
<p><strong>WSGI协议是Python 语言定义的 Web 服务器和 Web 应用程序或框架之间的一种简单而通用的接口</strong></p>
<p><strong>简单来说uWSGI就是用来沟通nginx和django的一座桥梁</strong></p>
</blockquote>
<h2 id="nginxuwsgidiango-工作流程">Nginx+uWSGI+Diango 工作流程</h2>
<blockquote>
<p><strong><code>nginx</code> 是对外的服务接口，外部浏览器通过<code>url</code>访问<code>nginx</code></strong></p>
<p><strong><code>nginx</code> 接收到浏览器发送过来的<code>http</code>请求，将包进行解析</strong></p>
<p><strong>分析<code>url</code>，如果是静态文件请求就直接访问用户给<code>nginx</code>配置的静态文件目录，直接返回用户请求的静态文件</strong></p>
<p><strong>如果不是静态文件，而是一个动态的请求，那么<code>nginx</code>就将请求转发给<code>uwsgi</code>，<code>uwsgi</code> 接收到请求之后将包进行处理，处理成<code>wsgi</code>可以接受的格式，并发给<code>wsgi</code>，<code>wsgi</code> 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给<code>wsgi</code>，<code>wsgi</code>将返回值进行打包，打包成<code>uwsgi</code>能够接收的格式，<code>uwsgi</code>接收<code>wsgi</code> 发送的请求，并转发给<code>nginx</code>, <code>nginx</code>最终将返回值返回给浏览器</strong></p>
</blockquote>
<h2 id="uwsgi服务的开启关闭">uwsgi服务的开启&amp;&amp;关闭</h2>
<ul>
<li>在<code>~/acapp</code>启动uwsgi服务：<strong><code>uwsgi --ini scripts/uwsgi.ini</code></strong></li>
<li>关闭uwsgi服务：<code>sudo pkill -f uwsgi -9</code></li>
</ul>
<h2 id="针对-acapp-的优化">针对 acapp 的优化</h2>
<h3 id="打包脚本优化">打包脚本优化</h3>
<p>由于现在 <strong>发布版本的脚本文件</strong> 用的是打包在根目录里的 <strong>static</strong> 文件夹</p>
<p>每次修改好 <strong>static</strong> 文件夹后，不仅需要对 <strong>js</strong> 文件打包，还需要对 <strong>static</strong> 文件夹打包</p>
<p>不放把 &ldquo;将static文件夹打包&rdquo; 的 <strong>shell</strong> 代码一起加入 <strong>js</strong> 打包脚本中，从而实现一键打包</p>
<p><code>scripts/compress_game_js.sh</code></p>
<pre tabindex="0"><code>#! /bin/bash

JS_PATH=/home/acs/acapp/game/static/js/
JS_PATH_DIST=${JS_PATH}dist/
JS_PATH_SRC=${JS_PATH}src/

find $JS_PATH_SRC -type f -name &#39;*.js&#39; | sort | xargs cat &gt; ${JS_PATH_DIST}game.js

echo &#34;yes&#34; | python3 manage.py collectstatic
</code></pre><h3 id="鼠标点击事件的相对偏移">鼠标点击事件的相对偏移</h3>
<p>由于写游戏界面的时候，玩家移动是按照鼠标相对于当前整个浏览器取的位置参数 <code>e.clientX</code></p>
<p>而 <code>acapp</code> 里，每个应用是一个小窗口，鼠标点击位置的参数应当是 <strong>相对于整个游戏窗口的位置参数</strong></p>
<p>所有会导致出现，点击的位置与移动的位置不同，这里需要做出小优化</p>
<p>优化的逻辑 :</p>
<ol>
<li>$clientX−窗口左侧到浏览器左侧的距离=玩家的目标X$</li>
<li>$clientY−窗口上侧到浏览器上侧的距离=玩家的目标Y$
这就要用到一个 <code>js</code> 的 <code>API</code> 了 : <code>getBoundingClientRect()</code></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>rectObject = object.getBoundingClientRect();
</span></span><span style="display:flex;"><span> 
</span></span><span style="display:flex;"><span>rectObject.top : 元素上边到视窗上边的距离;
</span></span><span style="display:flex;"><span>rectObject.right : 元素右边到视窗左边的距离;
</span></span><span style="display:flex;"><span>rectObject.bottom : 元素下边到视窗上边的距离;
</span></span><span style="display:flex;"><span>rectObject.left : 元素左边到视窗左边的距离;
</span></span><span style="display:flex;"><span>rectObject.width : 是元素自身的宽
</span></span><span style="display:flex;"><span>rectObject.height : 是元素自身的高
</span></span></code></pre></div><p><code>player/zbase.js</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span> add_listening_events() {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">this</span>.playground.game_map.$canvas.mousedown(<span style="color:#fff;font-weight:bold">function</span>(e) {
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 创建 rect 对象
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">const</span> rect = outer.ctx.canvas.getBoundingClientRect();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">3</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#007f7f">// 调整偏移量
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>            outer.move_to(e.clientX - rect.left, e.clientY - rect.top);
</span></span><span style="display:flex;"><span>        } <span style="color:#fff;font-weight:bold">else</span> <span style="color:#fff;font-weight:bold">if</span> (e.which === <span style="color:#ff0;font-weight:bold">1</span>) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">if</span> (outer.cur_skill === <span style="color:#0ff;font-weight:bold">&#34;fireball&#34;</span>) {
</span></span><span style="display:flex;"><span>                <span style="color:#007f7f">// 调整偏移量
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>                outer.shoot_fireball(e.clientX - rect.left, e.clientY - rect.top);
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        ...
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h3 id="将菜单界面重新设为主界面">将菜单界面重新设为主界面</h3>
<p><code>js/zbase.js</code> 的注释取消，使之创建出 <strong>menu</strong> 对象</p>
<p><code>js/playground/zbase.js</code> 的注释取消，并设置逻辑，让 <strong>playground</strong> 打开后，才进行游戏界面初始化</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">class</span> AcGamePlayground {
</span></span><span style="display:flex;"><span>    constructor(root) {
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.root = root;
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.$playground = $(<span style="color:#0ff;font-weight:bold">`&lt;div class=&#34;ac-game-playground&#34;&gt;&lt;/div&gt;`</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.hide();    <span style="color:#007f7f">// 初始时隐藏
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 游戏界面生成代码在下面展示 playground 时执行
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.start();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    show() {    <span style="color:#007f7f">// 打开 playground 界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.$playground.show();
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 开始生成游戏界面
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.root.$ac_game.append(<span style="color:#fff;font-weight:bold">this</span>.$playground);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.width = <span style="color:#fff;font-weight:bold">this</span>.$playground.width();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.height = <span style="color:#fff;font-weight:bold">this</span>.$playground.height();
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.game_map = <span style="color:#fff;font-weight:bold">new</span> GameMap(<span style="color:#fff;font-weight:bold">this</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#fff;font-weight:bold">this</span>.players = [];  <span style="color:#007f7f">// 存放当前游戏中的所有玩家
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#007f7f">// 将玩家加入游戏中
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#0ff;font-weight:bold">&#34;white&#34;</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">true</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#007f7f">// 创建好 5 个人机
</span></span></span><span style="display:flex;"><span><span style="color:#007f7f"></span>        <span style="color:#fff;font-weight:bold">for</span> (<span style="color:#fff;font-weight:bold">let</span> i = <span style="color:#ff0;font-weight:bold">0</span>; i &lt; <span style="color:#ff0;font-weight:bold">5</span>; i ++ ) {
</span></span><span style="display:flex;"><span>            <span style="color:#fff;font-weight:bold">this</span>.players.push(<span style="color:#fff;font-weight:bold">new</span> Player(<span style="color:#fff;font-weight:bold">this</span>, <span style="color:#fff;font-weight:bold">this</span>.width / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height / <span style="color:#ff0;font-weight:bold">2</span>, <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.05</span>, <span style="color:#fff;font-weight:bold">this</span>.get_random_color(), <span style="color:#fff;font-weight:bold">this</span>.height * <span style="color:#ff0;font-weight:bold">0.15</span>, <span style="color:#fff;font-weight:bold">false</span>));
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="调整-css-文件适应窗口">调整 css 文件，适应窗口</h3>
<p>在设置 <code>web</code> 网页的时候，有些设置了绝对值，可能对于窗口化的 <code>acapp</code> 显示效果差</p>
<p>将他们修改成相对数值</p>
<p><code>game.css</code></p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>.ac-game-menu-field {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    top: <span style="color:#ff0;font-weight:bold">40</span>%;
</span></span><span style="display:flex;"><span>    left: <span style="color:#ff0;font-weight:bold">20</span>%;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>.ac-game-menu-field-item {
</span></span><span style="display:flex;"><span>    height: <span style="color:#ff0;font-weight:bold">6</span>vh;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    font-size: <span style="color:#ff0;font-weight:bold">4</span>vh;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>计算机网络</title>
      <link>https://xancoding.cn/posts/computernetwork/</link>
      <pubDate>Tue, 18 Oct 2022 18:34:30 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/computernetwork/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26941639/&#34;&gt;《网络是怎样连接的》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/25863515/&#34;&gt;《图解 HTTP》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/24737674/&#34;&gt;《图解TCP/IP（第5版）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/35498120/&#34;&gt;《计算机网络（第8版）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/30280001/&#34;&gt;《计算机网络：自顶向下方法》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/1088054/&#34;&gt;《TCP/IP详解 卷1：协议》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26268767/&#34;&gt;《Wireshark网络分析就这么简单》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26710788/&#34;&gt;《Wireshark网络分析的艺术》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1FS4y1Y7Qe?p=1&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;【哈工大】计算机网络 李全龙（全59讲）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;【中科大】郑烇、杨坚《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/386387918&#34;&gt;计算机网络（谢希仁版）第七版答案&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/bHZ2_hgNQTKFZpWMCfUH9A&#34;&gt;实战！我用“大白鲨”让你看见 TCP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Jdroida/free_learning/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md&#34;&gt;计算机网络知识梳理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://vixbob.moe/25.html&#34;&gt;Stanford CS144 Lab Assignment 学习笔记 | ViXbob的博客&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<ul>
<li><a href="https://book.douban.com/subject/26941639/">《网络是怎样连接的》</a></li>
<li><a href="https://book.douban.com/subject/25863515/">《图解 HTTP》</a></li>
<li><a href="https://book.douban.com/subject/24737674/">《图解TCP/IP（第5版）》</a></li>
<li><a href="https://book.douban.com/subject/35498120/">《计算机网络（第8版）》</a></li>
<li><a href="https://book.douban.com/subject/30280001/">《计算机网络：自顶向下方法》</a></li>
<li><a href="https://book.douban.com/subject/1088054/">《TCP/IP详解 卷1：协议》</a></li>
<li><a href="https://book.douban.com/subject/26268767/">《Wireshark网络分析就这么简单》</a></li>
<li><a href="https://book.douban.com/subject/26710788/">《Wireshark网络分析的艺术》</a></li>
</ul>
<hr>
<ul>
<li><a href="https://www.bilibili.com/video/BV1FS4y1Y7Qe?p=1&amp;vd_source=ae16ff6478eb15c1b87880540263910b">【哈工大】计算机网络 李全龙（全59讲）</a></li>
<li><a href="https://www.bilibili.com/video/BV1JV411t7ow/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">【中科大】郑烇、杨坚《计算机网络（自顶向下方法 第7版，James F.Kurose，Keith W.Ross）》</a></li>
</ul>
<hr>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/386387918">计算机网络（谢希仁版）第七版答案</a></li>
<li><a href="https://mp.weixin.qq.com/s/bHZ2_hgNQTKFZpWMCfUH9A">实战！我用“大白鲨”让你看见 TCP</a></li>
<li><a href="https://github.com/Jdroida/free_learning/blob/master/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">计算机网络知识梳理</a></li>
<li><strong><a href="https://vixbob.moe/25.html">Stanford CS144 Lab Assignment 学习笔记 | ViXbob的博客</a></strong></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>数据结构与算法</title>
      <link>https://xancoding.cn/posts/datastructuresandalgorithms/</link>
      <pubDate>Tue, 18 Oct 2022 17:16:53 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/datastructuresandalgorithms/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xancoding/Data-Structures-and-Algorithms&#34;&gt;数据结构与算法 | 我的笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/6424904/&#34;&gt;《大话数据结构》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/35252621/&#34;&gt;《labuladong的算法小抄》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/30136932/&#34;&gt;《算法竞赛进阶指南》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/19952400/&#34;&gt;《算法（第4版）》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.programmercarl.com/&#34;&gt;代码随想录 x 数据结构与算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/11/&#34;&gt;AcWing 算法基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/16/&#34;&gt;AcWing 算法提高课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/32/&#34;&gt;AcWing 算法进阶课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://oi-wiki.org/&#34;&gt;OI Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cp-wiki.vercel.app/&#34;&gt;CP Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.cn/&#34;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/&#34;&gt;AcWing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.luogu.com.cn/&#34;&gt;Luogo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/&#34;&gt;Codeforces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<ul>
<li><a href="https://github.com/Xancoding/Data-Structures-and-Algorithms">数据结构与算法 | 我的笔记</a></li>
<li><a href="https://book.douban.com/subject/6424904/">《大话数据结构》</a></li>
<li><a href="https://book.douban.com/subject/35252621/">《labuladong的算法小抄》</a></li>
<li><a href="https://book.douban.com/subject/30136932/">《算法竞赛进阶指南》</a></li>
<li><a href="https://book.douban.com/subject/19952400/">《算法（第4版）》</a></li>
</ul>
<hr>
<ul>
<li><a href="https://www.programmercarl.com/">代码随想录 x 数据结构与算法</a></li>
<li><a href="https://www.acwing.com/activity/content/11/">AcWing 算法基础课</a></li>
<li><a href="https://www.acwing.com/activity/content/16/">AcWing 算法提高课</a></li>
<li><a href="https://www.acwing.com/activity/content/32/">AcWing 算法进阶课</a></li>
<li><a href="https://oi-wiki.org/">OI Wiki</a></li>
<li><a href="https://cp-wiki.vercel.app/">CP Wiki</a></li>
</ul>
<hr>
<ul>
<li><a href="https://leetcode.cn/">LeetCode</a></li>
<li><a href="https://www.acwing.com/">AcWing</a></li>
<li><a href="https://www.luogu.com.cn/">Luogo</a></li>
<li><a href="https://codeforces.com/">Codeforces</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>正则表达式学习记</title>
      <link>https://xancoding.cn/posts/regularexpression/</link>
      <pubDate>Mon, 17 Oct 2022 12:55:47 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/regularexpression/</guid>
      <description>&lt;h1 id=&#34;正则表达式是什么&#34;&gt;正则表达式是什么？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个规则的文本&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;为什么要学习正则表达式&#34;&gt;为什么要学习正则表达式？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在需要「批量处理文本」的时候，方便「查找」&amp;amp;&amp;amp;「替换」
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Linux grep&lt;/code&gt; 命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt; 爬虫&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Everthing&lt;/code&gt; 搜索文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://deerchao.cn/tutorials/regex/regex.htm&#34;&gt;正则表达式30分钟入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://regexper.com/&#34;&gt;JS 正则可视化 - 工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://deerchao.cn/&#34;&gt;超越代码 - 工具&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sspai.com/post/60650&#34;&gt;多种实际使用场景，正则表达式带来丰富可能性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26285406/&#34;&gt;《正则表达式必知必会》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/2154713/&#34;&gt;《精通正则表达式》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="正则表达式是什么">正则表达式是什么？</h1>
<blockquote>
<p><strong>正则表达式，又称规则表达式，通常被用来检索、替换那些符合某个规则的文本</strong></p>
<p><strong>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑</strong></p>
</blockquote>
<h1 id="为什么要学习正则表达式">为什么要学习正则表达式？</h1>
<ul>
<li>在需要「批量处理文本」的时候，方便「查找」&amp;&amp;「替换」
<ul>
<li><code>Linux grep</code> 命令</li>
<li><code>Python</code> 爬虫</li>
<li><code>Everthing</code> 搜索文件</li>
</ul>
</li>
</ul>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://deerchao.cn/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></li>
<li><a href="https://regexper.com/">JS 正则可视化 - 工具</a></li>
<li><a href="https://deerchao.cn/">超越代码 - 工具</a></li>
<li><a href="https://sspai.com/post/60650">多种实际使用场景，正则表达式带来丰富可能性</a></li>
<li><a href="https://book.douban.com/subject/26285406/">《正则表达式必知必会》</a></li>
<li><a href="https://book.douban.com/subject/2154713/">《精通正则表达式》</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>LaTex学习记</title>
      <link>https://xancoding.cn/posts/latex/</link>
      <pubDate>Mon, 17 Oct 2022 12:55:19 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/latex/</guid>
      <description>&lt;h1 id=&#34;latex是什么&#34;&gt;LaTex是什么？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;LaTeX&lt;/code&gt;是一种基于&lt;code&gt;ΤΕΧ&lt;/code&gt;的排版系统，常被用于排版期刊文章、书籍、学位论文&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/433710726&#34;&gt;LaTeX 新手上路指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV1T7411G7RV?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;TeX Live 安装与 LaTeX 基础知识普及&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/456055339&#34;&gt;【LaTeX】新手教程：从入门到日常使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/521649367&#34;&gt;【LaTeX】针对萌新自学者的入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ptep-online.com/ctan/lshort_chinese.pdf&#34;&gt;一份不太简短的 LATEX 介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/24703731/&#34;&gt;《Latex入门》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.latexlive.com/&#34;&gt;在线LaTex公式编辑器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.overleaf.com/project&#34;&gt;Overleaf&lt;/a&gt; 在线 &lt;code&gt;LaTeX&lt;/code&gt; 编辑器&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="latex是什么">LaTex是什么？</h1>
<blockquote>
<p><code>LaTeX</code>是一种基于<code>ΤΕΧ</code>的排版系统，常被用于排版期刊文章、书籍、学位论文</p>
</blockquote>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/433710726">LaTeX 新手上路指南</a></li>
<li><a href="https://www.bilibili.com/video/BV1T7411G7RV?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">TeX Live 安装与 LaTeX 基础知识普及</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/456055339">【LaTeX】新手教程：从入门到日常使用</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/521649367">【LaTeX】针对萌新自学者的入门教程</a></li>
<li><a href="http://www.ptep-online.com/ctan/lshort_chinese.pdf">一份不太简短的 LATEX 介绍</a></li>
<li><a href="https://book.douban.com/subject/24703731/">《Latex入门》</a></li>
<li><a href="https://www.latexlive.com/">在线LaTex公式编辑器</a></li>
<li><a href="https://www.overleaf.com/project">Overleaf</a> 在线 <code>LaTeX</code> 编辑器</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Markdown学习记</title>
      <link>https://xancoding.cn/posts/markdown/</link>
      <pubDate>Mon, 17 Oct 2022 12:54:56 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/markdown/</guid>
      <description>&lt;h1 id=&#34;markdown是什么&#34;&gt;Markdown是什么？&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;markdown常用语法&#34;&gt;Markdown常用语法&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;在markdown中将链接地址或邮箱地址用&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;包围，则会被自动转换成可点击的链接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;u&gt;书写格式如下：&lt;/u&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;https://xancoding.cn&amp;gt;

&amp;lt;zag.zj.cn@gmail.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;u&gt;解析效果如下：&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://xancoding.cn&#34;&gt;https://xancoding.cn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;mailto:zag.zj.cn@gmail.com&#34;&gt;zag.zj.cn@gmail.com&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;如果需要避免文本中的符号被当做markdown标识符而发生不必要的格式转化，可以在符号前加&lt;code&gt;\&lt;/code&gt;来避免。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;u&gt;书写格式如下&lt;/u&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;\*不是斜体\*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;u&gt;解析效果如下&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;*不是斜体*&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;角标&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不同于链接，这里的角标内容会被放在文末，点击可以实现跳转。&lt;/p&gt;
&lt;p&gt;&lt;u&gt;书写格式如下&lt;/u&gt;：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;请参阅脚注1. [^1]

[^1]: 脚注1内容。

请参阅脚注2. [^2]

[^2]: 脚注2内容。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;u&gt;解析效果如下&lt;/u&gt;：&lt;/p&gt;
&lt;p&gt;请参阅脚注1. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;请参阅脚注2. &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://haoeric.github.io/markdown-grammar/#fnref:1&#34;&gt;Markdown - All You Need to Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://markdown.com.cn/&#34;&gt;Markdown 官方教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.markdown.xyz/&#34;&gt;Markdown 指南中文版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/34613706/&#34;&gt;《了不起的Markdown》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;脚注1内容。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;脚注2内容。&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      <content:encoded><![CDATA[<h1 id="markdown是什么">Markdown是什么？</h1>
<blockquote>
<p><strong>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia等网站，如各大博客平台：WordPress、Drupal、简书等</strong></p>
</blockquote>
<h1 id="markdown常用语法">Markdown常用语法</h1>
<ol>
<li>在markdown中将链接地址或邮箱地址用<code>&lt;&gt;</code>包围，则会被自动转换成可点击的链接。</li>
</ol>
<p><u>书写格式如下：</u></p>
<pre tabindex="0"><code>&lt;https://xancoding.cn&gt;

&lt;zag.zj.cn@gmail.com&gt;
</code></pre><p><u>解析效果如下：</u></p>
<p><a href="https://xancoding.cn">https://xancoding.cn</a></p>
<p><a href="mailto:zag.zj.cn@gmail.com">zag.zj.cn@gmail.com</a></p>
<ol start="2">
<li>如果需要避免文本中的符号被当做markdown标识符而发生不必要的格式转化，可以在符号前加<code>\</code>来避免。</li>
</ol>
<p><u>书写格式如下</u>：</p>
<pre tabindex="0"><code>\*不是斜体\*
</code></pre><p><u>解析效果如下</u>：</p>
<p>*不是斜体*</p>
<ol start="3">
<li>角标</li>
</ol>
<p>不同于链接，这里的角标内容会被放在文末，点击可以实现跳转。</p>
<p><u>书写格式如下</u>：</p>
<pre tabindex="0"><code>请参阅脚注1. [^1]

[^1]: 脚注1内容。

请参阅脚注2. [^2]

[^2]: 脚注2内容。
</code></pre><p><u>解析效果如下</u>：</p>
<p>请参阅脚注1. <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>请参阅脚注2. <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="http://haoeric.github.io/markdown-grammar/#fnref:1">Markdown - All You Need to Know</a></li>
<li><a href="https://markdown.com.cn/">Markdown 官方教程</a></li>
<li><a href="https://www.markdown.xyz/">Markdown 指南中文版</a></li>
<li><a href="https://book.douban.com/subject/34613706/">《了不起的Markdown》</a></li>
</ul>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>脚注1内容。&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>脚注2内容。&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>AcWing Linux 基础课</title>
      <link>https://xancoding.cn/posts/acwlinux/</link>
      <pubDate>Sun, 16 Oct 2022 14:23:58 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/acwlinux/</guid>
      <description>&lt;h1 id=&#34;acwing-linux-基础课&#34;&gt;AcWing Linux 基础课&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/activity/content/57/&#34;&gt;AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md&#34;&gt;命令行的艺术 &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/&#34;&gt;The Missing Semester of Your CS Education&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;terminal&#34;&gt;Terminal&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;终端，一个程序，是界面上打开的黑框框本身，&lt;code&gt;shell&lt;/code&gt; 运行于其中&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;shell&#34;&gt;Shell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855530/&#34;&gt;常用文件管理命令 | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855883/&#34;&gt;Shell 语法 | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030391/&#34;&gt;管道、环境变量与常用命令  | AcWing Linux 基础课&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/3030414/&#34;&gt;常用命令  | AcWing Linux 基础课&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wangdoc.com/bash/&#34;&gt;《Bash 脚本教程》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/course-shell/&#34;&gt;第 1 讲 - 课程概览与 Shell | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/shell-tools/&#34;&gt;第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/19556676&#34;&gt;终极 Shell——ZSH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;快速入门 zsh&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shell是什么&#34;&gt;Shell是什么？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 是我们通过命令行与操作系统沟通的 &lt;code&gt;程序&lt;/code&gt;，是个 &lt;code&gt;命令行解释器&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt; 负责外界与 &lt;code&gt;Linux 内核&lt;/code&gt; 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell&lt;/code&gt;解释器有 &lt;code&gt;sh&lt;/code&gt;、&lt;code&gt;bash&lt;/code&gt;、&lt;code&gt;zsh...&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shell常用命令&#34;&gt;Shell常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ag xxx&lt;/code&gt;：搜索当前目录下的所有文件，&lt;strong&gt;检索&lt;code&gt;xxx&lt;/code&gt;字符串&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find /path/to/directory/ -name &#39;*.py&#39;&lt;/code&gt;：&lt;strong&gt;搜索&lt;/strong&gt;某个文件路径下的所有&lt;code&gt;*.py&lt;/code&gt;&lt;strong&gt;文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;history&lt;/code&gt;：展示当前用户的历史操作。内容存放在&lt;code&gt;~/.bash_history&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grep xxx&lt;/code&gt;：从&lt;code&gt;stdin&lt;/code&gt;中读入若干行数据，如果某行中包含&lt;code&gt;xxx&lt;/code&gt;，则输出该行；否则忽略该行，&lt;strong&gt;用于查找文件里符合条件的字符串&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tmux--vim&#34;&gt;Tmux &amp;amp;&amp;amp; Vim&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2855620/&#34;&gt;Tmux和Vim | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2019/10/tmux.html&#34;&gt;Tmux 使用教程 | 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kuanghy.github.io/2016/09/29/tmux&#34;&gt;Tmux 简介与使用 | Huoty&amp;rsquo;s Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://coolshell.cn/articles/5426.html#comments&#34;&gt;简明 VIM 练级攻略 | 酷壳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://missing-semester-cn.github.io/2020/editors/&#34;&gt;第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vim-adventures.com/&#34;&gt;VIM 大冒险 - Game&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;tmux-是什么&#34;&gt;Tmux 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Tmux&lt;/code&gt; 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;远程 &lt;code&gt;SSH&lt;/code&gt; 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;tmux--session--window--pane&#34;&gt;Tmux &amp;amp;&amp;amp; Session &amp;amp;&amp;amp; Window &amp;amp;&amp;amp; Pane&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个&lt;code&gt;tmux &lt;/code&gt;可以有好多个&lt;code&gt;session&lt;/code&gt;(会话)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;可以有好多个&lt;code&gt;window&lt;/code&gt;(窗口)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;window&lt;/code&gt;可以有好多个&lt;code&gt;pane&lt;/code&gt;(面板)&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;session&lt;/code&gt;里不超过10个&lt;code&gt;window&lt;/code&gt;是最方便的：可以用0到9迅速切换&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tmux常用命令&#34;&gt;Tmux常用命令&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;tmux new -s &amp;lt;session-name&amp;gt;&lt;/code&gt;：新建会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux detach&lt;/code&gt; $or$ &lt;code&gt;Ctrl + a d&lt;/code&gt;：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux attach -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：重新接入某个已存在的会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux kill-session -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：杀死某个会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux switch -t &amp;lt;session-name&amp;gt;&lt;/code&gt;：切换会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux rename-session -t &amp;lt;old-name&amp;gt; &amp;lt;new-name&amp;gt;&lt;/code&gt;：重命名会话&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux ls&lt;/code&gt; $or$ &lt;code&gt;Ctrl + a s&lt;/code&gt;：查看当前所有的 Tmux 会话&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;tmux&lt;/code&gt;中选中文本时，需要按住 &lt;code&gt;shift&lt;/code&gt; 键&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux&lt;/code&gt;中复制/粘贴文本：
&lt;ol&gt;
&lt;li&gt;按下 &lt;code&gt;Ctrl + a&lt;/code&gt; 后松开手指，然后按 &lt;code&gt;[&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板&lt;/li&gt;
&lt;li&gt;按下 &lt;code&gt;Ctrl + a&lt;/code&gt; 后松开手指，然后按 &lt;code&gt;]&lt;/code&gt; ，会将剪贴板中的内容粘贴到光标处&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;vim-是什么&#34;&gt;Vim 是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;vim常用命令&#34;&gt;Vim常用命令&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;一般模式切换到编辑模式（常用）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; : 在光标所处位置 &lt;strong&gt;直接&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; : 在光标所处位置的 &lt;strong&gt;下一个字符&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; : 在光标所处位置的 &lt;strong&gt;下一行&lt;/strong&gt; 开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt; : 取代当前光标处的字符，然后开始&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[ESC]&lt;/code&gt; : 退出编辑模式，回到一般模式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;光标移动操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;n&amp;lt;Space&amp;gt;&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标 &lt;strong&gt;向右移动&lt;/strong&gt;这一行的n个字符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&amp;lt;Enter&amp;gt;&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标 &lt;strong&gt;向下移动&lt;/strong&gt;n行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; 或 &lt;code&gt;功能键[Home]&lt;/code&gt;: 光标移动到 &lt;strong&gt;本行开头&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt; 或 &lt;code&gt;功能键[End]&lt;/code&gt;: 光标移动到 &lt;strong&gt;本行末尾&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n&lt;/code&gt; 或 &lt;code&gt;nG&lt;/code&gt; : &lt;strong&gt;n&lt;/strong&gt; 为数字，光标移动到 &lt;strong&gt;第n行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt;: 光标移动到 &lt;strong&gt;最后一行&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gg&lt;/code&gt; : 光标移动到 &lt;strong&gt;第一行&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;查找、替换操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;/word&lt;/code&gt; : 向 &lt;strong&gt;光标之下&lt;/strong&gt; 寻找 第一个值为 &lt;strong&gt;word&lt;/strong&gt; 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?word&lt;/code&gt; : 向 &lt;strong&gt;光标之上&lt;/strong&gt; 寻找 第一个值为 &lt;strong&gt;word&lt;/strong&gt; 的字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt; : 重复 &lt;strong&gt;前一个&lt;/strong&gt; 查找操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;N&lt;/code&gt; : 反向 重复 &lt;strong&gt;前一个&lt;/strong&gt; 查找操作&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:n1,n2s/word1/word2/g&lt;/code&gt; : &lt;strong&gt;n1&lt;/strong&gt; 与 &lt;strong&gt;n2&lt;/strong&gt; 为数字，在第 &lt;strong&gt;n1&lt;/strong&gt; 行与 &lt;strong&gt;n2&lt;/strong&gt; 行之间寻找 &lt;strong&gt;word1&lt;/strong&gt; 这个字符串，并将该字符串 替换 为 &lt;strong&gt;word2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,$s/word1/word2/g&lt;/code&gt; : 将全文的 &lt;strong&gt;word1&lt;/strong&gt; 替换为 &lt;strong&gt;word2&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:1,$s/word1/word2/gc&lt;/code&gt; : 将全文的 &lt;strong&gt;word1&lt;/strong&gt; 替换为 &lt;strong&gt;word2&lt;/strong&gt;，且在替换前 &lt;strong&gt;要求用户确认&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;文本操作（可搭配 &lt;code&gt;数字+&amp;lt;Enter&amp;gt;/&amp;lt;Space&amp;gt;、0、G、$&lt;/code&gt; 等使用，达到预期组合效果）
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; : 选中文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; : 删除选中的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dd&lt;/code&gt; : 删除当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; : 复制选中的文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yy&lt;/code&gt; : 复制当前行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; : 将复制的数据在光标的下一行/下一个位置 粘贴&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; : 撤销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + r&lt;/code&gt; : 取消撤销&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; : 将选中的文本整体 &lt;strong&gt;向右缩进一次&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;&lt;/code&gt; : 将选中的文本整体 &lt;strong&gt;向左缩进一次&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;命令行操作
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;:w&lt;/code&gt; : 保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:w!&lt;/code&gt; : 强制保存&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q&lt;/code&gt; : 退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:q!&lt;/code&gt; : 强制退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:wq&lt;/code&gt; : 保存并退出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set paste&lt;/code&gt; : 设置成粘贴模式，取消代码自动缩进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nopaste&lt;/code&gt; : 取消粘贴模式，开启代码自动缩进&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nu&lt;/code&gt; : 显示行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:set nonu&lt;/code&gt; : 隐藏行号&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:noh&lt;/code&gt;：关闭查找关键词高亮&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + q&lt;/code&gt; : 当&lt;code&gt;vim&lt;/code&gt;卡死时，可以 &lt;strong&gt;取消当前正在执行的命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ssh&#34;&gt;SSH&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898263/&#34;&gt;SSH | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account&#34;&gt;Adding a new SSH key to your GitHub account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ssh是什么&#34;&gt;SSH是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SSH是一种网络协议，用于计算机之间的加密登录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;ssh-免密登录&#34;&gt;SSH 免密登录&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;ssh-key-gen&lt;/code&gt; ：在本地服务器生成密钥&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd .ssh/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vim config&lt;/code&gt; ：定义服务器别名&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-config&#34; data-lang=&#34;config&#34;&gt;Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;code&gt;ssh-copy-id server&lt;/code&gt;：在本地服务器配置免密登录至云服务器&lt;/li&gt;
&lt;li&gt;免密登录至&lt;code&gt;docker 容器&lt;/code&gt;步骤同上&lt;/li&gt;
&lt;li&gt;配置完成后，就可以直接使用 &lt;code&gt;ssh server&lt;/code&gt; 免密登录啦&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;scp&#34;&gt;SCP&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2898266/&#34;&gt;SCP | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;scp是什么&#34;&gt;SCP是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;scp-传文件&#34;&gt;SCP 传文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;复制多个文件：&lt;code&gt;scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;复制文件夹 ：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scp -r ~/tmp SERVER:/home/acs/&lt;/code&gt;：将本地家目录中的&lt;code&gt;tmp&lt;/code&gt;文件夹复制到服务器中的&lt;code&gt;/home/acs/&lt;/code&gt;目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scp -r SERVER:homework .&lt;/code&gt;：将服务器中的&lt;code&gt;~/homework/&lt;/code&gt;文件夹复制到本地的当前路径下&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git&#34;&gt;Git&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/file_system/file/content/whole/index/content/2932078/&#34;&gt;Git | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/column/6969263852206686221&#34;&gt;Git从放弃到入门&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://juejin.cn/post/6973299611536457742&#34;&gt;Git从放弃到入门：状态与阶段&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://juejin.cn/post/6974039503056928776&#34;&gt;Git从放弃到入门：撤销操作&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2018/10/git-internals.html&#34;&gt;Git 原理入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://learngitbranching.js.org/?locale=zh_CN&#34;&gt;Learn Git Braching - Game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/zh/v2&#34;&gt;Pro Git Online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;git是什么&#34;&gt;Git是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;git常用命令&#34;&gt;Git常用命令&lt;/h3&gt;
&lt;h4 id=&#34;常用命令&#34;&gt;常用命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git add XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件添加到暂存区&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git commit -m &amp;quot;给自己看的备注信息&amp;quot;&lt;/code&gt;：将暂存区的内容提交到当前分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要 -u 以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库&lt;code&gt;XXX&lt;/code&gt;下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git restore --staged XX&lt;/code&gt;或&lt;code&gt;git reset HEAD XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;从暂存区里移除&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;git checkout XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-全局设置&#34;&gt;Git 全局设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git config --global user.name xxx&lt;/code&gt;：设置全局用户名，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git config --global user.email xxx@xxx.com&lt;/code&gt;：设置全局邮箱地址，信息记录在&lt;code&gt;~/.gitconfig&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;：将当前目录配置成&lt;code&gt;git&lt;/code&gt;仓库，信息记录在隐藏的&lt;code&gt;.git&lt;/code&gt;文件夹中&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-查看命令&#34;&gt;Git 查看命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git diff XX&lt;/code&gt;：查看&lt;code&gt;XX&lt;/code&gt;文件相对于暂存区修改了哪些内容&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git status&lt;/code&gt;：查看仓库状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log&lt;/code&gt;：查看当前分支的所有版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git log --pretty=oneline&lt;/code&gt;：用一行来显示&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reflog&lt;/code&gt;：查看&lt;code&gt;HEAD&lt;/code&gt;指针的移动历史（包括被回滚的版本）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-删除命令&#34;&gt;Git 删除命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git rm --cached XX&lt;/code&gt;：将文件从仓库索引目录中删掉，不希望管理这个文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --staged xx&lt;/code&gt;：将&lt;code&gt;xx&lt;/code&gt;从暂存区里移除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout — XX&lt;/code&gt;或&lt;code&gt;git restore XX&lt;/code&gt;：将&lt;code&gt;XX&lt;/code&gt;文件尚未加入暂存区的修改全部撤销&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-代码回滚&#34;&gt;Git 代码回滚&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^&lt;/code&gt;或&lt;code&gt;git reset --hard HEAD~ &lt;/code&gt;：将代码库回滚到上一个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD^^&lt;/code&gt;：往上回滚两次，以此类推&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard HEAD~100&lt;/code&gt;：往上回滚100个版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset --hard 版本号&lt;/code&gt;：回滚到某一特定版本&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-远程仓库&#34;&gt;Git 远程仓库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git remote add origin git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将本地仓库关联到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -u (第一次需要-u以后不需要)&lt;/code&gt; ：将当前分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push origin branch_name&lt;/code&gt;：将本地的某个分支推送到远程仓库&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git clone git@git.acwing.com:xxx/XXX.git&lt;/code&gt;：将远程仓库XXX下载到当前目录下&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt;：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-分支命令&#34;&gt;Git 分支命令&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git branch branch_name&lt;/code&gt;：创建新分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch&lt;/code&gt;：查看所有分支和当前所处分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -b branch_name&lt;/code&gt;：创建并切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout branch_name&lt;/code&gt;：切换到&lt;code&gt;branch_name&lt;/code&gt;这个分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git merge branch_name&lt;/code&gt;：将分支&lt;code&gt;branch_name&lt;/code&gt;合并到当前分支上&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch -d branch_name&lt;/code&gt;：删除本地仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push --set-upstream origin branch_name&lt;/code&gt;：设置本地的&lt;code&gt;branch_name&lt;/code&gt;分支对应远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git push -d origin branch_name&lt;/code&gt;：删除远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout -t origin/branch_name&lt;/code&gt;：将远程的&lt;code&gt;branch_name&lt;/code&gt;分支拉取到本地&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull&lt;/code&gt; ：将远程仓库的当前分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git pull origin branch_name&lt;/code&gt;：将远程仓库的&lt;code&gt;branch_name&lt;/code&gt;分支与本地仓库的当前分支合并&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git branch --set-upstream-to=origin/branch_name1 branch_name2&lt;/code&gt;：将远程的&lt;/li&gt;
&lt;li&gt;&lt;code&gt;branch_name1&lt;/code&gt;分支与本地的&lt;code&gt;branch_name2&lt;/code&gt;分支对应&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;git-stash-暂存&#34;&gt;Git stash 暂存&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git stash&lt;/code&gt;：将工作区和暂存区中尚未提交的修改存入栈中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash drop&lt;/code&gt;：删除栈顶存储的修改&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt;：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash list&lt;/code&gt;：查看栈中所有元素&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;本地项目上传到github&#34;&gt;本地项目上传到GitHub&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;配置&lt;code&gt;ssh-key&lt;/code&gt;实现本地与&lt;code&gt;Git&lt;/code&gt;服务器免密交互&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ssh-keygen  # 生成密钥
cat .ssh/id_rsa.pub
# 复制密钥，提交到 git 服务器的 ssh 密钥中
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;按照下面的操作在本地文件夹配置一下&lt;code&gt;Git&lt;/code&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global user.name xxx  # 设置用户名
git config --global user.email xxx@xxx.com  # 设置用户邮箱

git init
git add .
git commit -m &amp;#34;xxx&amp;#34;
git remote add origin https://github.com/xxx/XXX.git  # 建立连接
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;gitignore的作用&#34;&gt;.gitignore的作用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;工程常识：缓存文件，可执行文件，编译文件 不要传到自己的 git 项目里&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;.gitignore的作用就是帮助我们在git add时将我们指定的一些文件自动排除在外，不提交到git当中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Git工作区的根目录下创建一个特殊的&lt;code&gt;.gitignore&lt;/code&gt;文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;thrift&#34;&gt;&lt;strong&gt;Thrift&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/video/3479/&#34;&gt;Thrift | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md&#34;&gt;Thrift_learning - AcGit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.colopen-blog.com/Engineer/acw_linux/&#34;&gt;AcWing Linux 基础课 | Colopen&amp;rsquo;s blog | Thrift&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;thrift 官网&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://thrift.apache.org/tutorial/&#34;&gt;Tutorial&lt;/a&gt; -&amp;gt; &lt;a href=&#34;https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift&#34;&gt;tutorial.thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;thrift是什么&#34;&gt;Thrift是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;例实现一个游戏的匹配服务&#34;&gt;例：实现一个游戏的匹配服务&lt;/h3&gt;
&lt;h4 id=&#34;基本框架&#34;&gt;基本框架&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;游戏应用端 &lt;code&gt;game&lt;/code&gt;（Python3）
&lt;ol&gt;
&lt;li&gt;客户端：与 匹配系统服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;匹配系统服务器 &lt;code&gt;match_system&lt;/code&gt;（C++）
&lt;ol&gt;
&lt;li&gt;服务端：与 游戏应用端 的客户端交互&lt;/li&gt;
&lt;li&gt;客户端：与 数据存储服务器 的服务端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据存储服务器（已经实现）
&lt;ol&gt;
&lt;li&gt;服务端：与 匹配系统服务器 的客户端交互&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;文件结构&#34;&gt;文件结构&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;实现过程&#34;&gt;实现过程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;定义接口 (&lt;code&gt;thrift&lt;/code&gt; 文件夹用于存放接口 )&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Server&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;match_system&lt;/code&gt;文件夹下生成 C++版本的服务端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen cpp tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;将&lt;code&gt;gen cpp&lt;/code&gt; 文件夹重命名，如：&lt;code&gt;match_server&lt;/code&gt;（区别于之后要在此处生成的&lt;code&gt;client_server&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;把 &lt;code&gt;Match_server.skeleton.cpp&lt;/code&gt; 移动到当前 &lt;code&gt;src&lt;/code&gt; 目录下并重命名为 &lt;code&gt;main.cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;由于移动了 &lt;code&gt;main.cpp&lt;/code&gt; 故需要修改一下&lt;code&gt; main.cpp&lt;/code&gt; 中头文件里关于 &lt;code&gt;Match.h&lt;/code&gt; 的引用路径：&lt;code&gt;#include &amp;quot;Match.h&amp;quot;&lt;/code&gt; -&amp;gt; &lt;code&gt;#include &amp;quot;match_server/Match.h&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;main.cpp&lt;/code&gt;中实现具体业务逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;完成 &lt;code&gt;Client&lt;/code&gt; 端
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;match.thrift&lt;/code&gt;接口在&lt;code&gt;game&lt;/code&gt;文件夹下生成 &lt;code&gt;python3&lt;/code&gt; 版本的服务端，然后通过修改得到客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;thrift -r --gen py tutorial.thrift
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;删掉 &lt;code&gt;Match_remote &lt;/code&gt;，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 &lt;strong&gt;客户端&lt;/strong&gt; 功能，因此他没有作用，不妨删掉，让文档简洁一点&lt;/li&gt;
&lt;li&gt;利用官网提供的模板，在&lt;code&gt;src&lt;/code&gt;文件夹下编写 &lt;strong&gt;客户端&lt;/strong&gt; 文件 &lt;code&gt;client.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;持久化到云端
&lt;ul&gt;
&lt;li&gt;将 &lt;strong&gt;非编译文件&lt;/strong&gt; 和 &lt;strong&gt;非可执行文件&lt;/strong&gt; 提交到 &lt;code&gt;git&lt;/code&gt; 中去（好的工程习惯）
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cpp&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;注意：先运行服务器后，客户端才能正常运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;thrift-接口&#34;&gt;Thrift 接口&lt;/h4&gt;
&lt;h5 id=&#34;matchthrift&#34;&gt;Match.thrift&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace cpp match_service
struct User {
    1: i32 id,
    2: string name,
    3: i32 scores
}
service Match {
    i32 add_user(1: User user, 2: string info),
    i32 remove_user(1: User user, 2: string info),
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;savethrift&#34;&gt;Save.thrift&lt;/h5&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;namespace cpp save_service
service Save {
    /**
     * username: myserver的名称
     * password: myserver的密码的md5值的前8位，用命令md5sum
     * 用户名密码验证成功会返回0，验证失败会返回1
     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中
     */
    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;各版本预览&#34;&gt;各版本预览&lt;/h4&gt;
&lt;h5 id=&#34;match_server10&#34;&gt;Match_server:1.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_client&lt;/code&gt;：创建固定的&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


def main():
    # Make socket
    transport = TSocket.TSocket(&amp;#39;localhost&amp;#39;, 9090)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = Match.Client(protocol)

    # Connect!
    transport.open()

    user = User(1, &amp;#39;yxc&amp;#39;, 1500)
    client.add_user(user, &amp;#34;&amp;#34;)

    # Close!
    transport.close()


# 调用 main 函数
if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    return 0;
  }
};
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
    
  server.serve();
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server20&#34;&gt;Match_server:2.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_client&lt;/code&gt;：根据标准输入来创建&lt;code&gt;User&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# 利用 python 在终端读入信息需要引入 stdin
from sys import stdin

# 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息
# 目的是可以一直不断处理信息
# 然后重写 main 函数，使之能不断从终端读入信息
def operate(op, user_id, user_name, score):
    # Make socket 
	transport = TSocket.TSocket(&amp;#39;localhost&amp;#39;, 9090)
	
	# Buffering is critical. Raw sockets are very slow
	transport = TTransport.TBufferedTransport(transport)
	
	# Wrap in a protocol
	protocol = TBinaryProtocol.TBinaryProtocol(transport)
	
	# Create a client to use the protocol encoder
	client = Match.Client(protocol)
	
	# Connect!
	transport.open()

    # 针对 op 参数，分别进行 &amp;#34;增加&amp;#34; 与 &amp;#34;删出&amp;#34; 操作
    user = User(user_id, user_name, score)

    if op == &amp;#34;add&amp;#34;:
        client.add_user(user, &amp;#34;&amp;#34;)
    else:
        client.remove_user(user, &amp;#34;&amp;#34;)
    
    # Close!
	transport.close()

def main():
    for line in stdin:
        op, user_id, user_name, score = line.split(&amp;#39; &amp;#39;)
        operate(op, int(user_id), user_name, int(score))

# 调用 main 函数
if __name__ == &amp;#34;__main__&amp;#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：自动将用户池中前两个用户匹配到一起&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &amp;gt; 1) {
            auto a = users[0], b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());
            save_result(a.id, b.id);
        }
    }
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server30&#34;&gt;Match_server:3.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;save_client&lt;/code&gt;：因为一个节点只能由一个&lt;code&gt;main&lt;/code&gt;方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个&lt;code&gt;main&lt;/code&gt;方法中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// 需要额外引入的头文件
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;

// 需要额外声明的命名空间
using namespace  ::save_service;

//重写 save_result 内的内容，使其能够与 &amp;#34;数据存储服务器&amp;#34; 交互
void save_result(int a, int b) { // 记录成功匹配的信息
    printf(&amp;#34;Match Result: %d %d\n&amp;#34;, a, b);

    // Client端的板子
    std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
    std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
    std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
    SaveClient client(protocol);

    try {
        transport-&amp;gt;open();

        //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
        int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
        //输出匹配结果
        if (!res) puts(&amp;#34;success&amp;#34;);
        else puts(&amp;#34;fail&amp;#34;);

        transport-&amp;gt;close();
    } catch (TException&amp;amp; tx) {
        cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：每次只匹配分差小于 50 的用户&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt; // 用于调用 sleep 函数
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
	//重写 save_result 内的内容，使其能够与 &amp;#34;数据存储服务器&amp;#34; 交互
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
        // Client端的板子
        std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
        std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&amp;gt;open();
            //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
            int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
            //输出匹配结果
            if (!res) puts(&amp;#34;success&amp;#34;);
            else puts(&amp;#34;fail&amp;#34;);
            transport-&amp;gt;close();
        } catch (TException&amp;amp; tx) {
            cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
        }
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &amp;gt; 1) {
            // 按照 rank分 排序
            sort(users.begin(), users.end(), [&amp;amp;](User&amp;amp; a, User&amp;amp; b) {
                return a.scores &amp;lt; b.scores;
            });
            bool flag = true;
            for (uint32_t i = 1; i &amp;lt; users.size(); ++ i) {
                auto a = users[i - 1], b = users[i];
                // 两名玩家分数差小于50时进行匹配
                if (b.scores - a.scores &amp;lt;= 50) {
                    users.erase(users.begin() + i - 1, users.begin() + i + 1);
                    save_result(a.id, b.id);
                    flag = false;
                    break;
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&#34;match_server40&#34;&gt;Match_server:4.0&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;match_server&lt;/code&gt;：随时间扩大匹配域，每一单位的 &lt;code&gt;wt&lt;/code&gt; 会扩大 $50$ 分 的匹配域&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &amp;lt;thrift/transport/TSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TTransportUtils.h&amp;gt;
#include &amp;#34;match_server/Match.h&amp;#34;
#include &amp;#34;save_client/Save.h&amp;#34;
#include &amp;lt;thrift/protocol/TBinaryProtocol.h&amp;gt;
#include &amp;lt;thrift/server/TSimpleServer.h&amp;gt;
#include &amp;lt;thrift/transport/TServerSocket.h&amp;gt;
#include &amp;lt;thrift/transport/TBufferTransports.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt; // 用于调用 sleep 函数
#include&amp;lt;iostream&amp;gt;
#include &amp;lt;thread&amp;gt;               // 需要线程，引入头文件
#include &amp;lt;mutex&amp;gt;                // 互斥信号量
#include &amp;lt;condition_variable&amp;gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &amp;lt;queue&amp;gt;                // 用于模拟消息队列
#include &amp;lt;vector&amp;gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&amp;lt;Task&amp;gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&amp;#34;Match Result: %d %d \n&amp;#34;, a, b);
        // Client端的板子
        std::shared_ptr&amp;lt;TTransport&amp;gt; socket(new TSocket(&amp;#34;123.57.47.211&amp;#34;, 9090));
        std::shared_ptr&amp;lt;TTransport&amp;gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&amp;lt;TProtocol&amp;gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&amp;gt;open();
            //调用接口，把信息存储 &amp;#34;数据存储服务器&amp;#34; 中
            int res = client.save_data(&amp;#34;acs_4888&amp;#34;, &amp;#34;07637c4c&amp;#34;, a, b);
            //输出匹配结果
            if (!res) puts(&amp;#34;success&amp;#34;);
            else puts(&amp;#34;fail&amp;#34;);
            transport-&amp;gt;close();
        } catch (TException&amp;amp; tx) {
            cout &amp;lt;&amp;lt; &amp;#34;ERROR: &amp;#34; &amp;lt;&amp;lt; tx.what() &amp;lt;&amp;lt; endl;
        }
    }
    bool check_match(uint32_t i, uint32_t j) {
        auto a = users[i], b = users[j];
        
        int dt = abs(a.scores - b.scores);
        int a_max_dif = wt[i] * 50;
        int b_max_dif = wt[j] * 50;
        return dt &amp;lt;= a_max_dif &amp;amp;&amp;amp; dt &amp;lt;= b_max_dif;
    }
    void match() {
       for (uint32_t i = 0; i &amp;lt; wt.size(); ++ i)
           wt[i] ++;
        while (users.size() &amp;gt; 1) {
            bool flag = true;
            for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
                for (uint32_t j = i + 1; j &amp;lt; users.size(); ++ j) {
                    if (check_match(i, j)) {
                        auto a = users[i], b = users[j];
                        users.erase(users.begin() + j);
                        users.erase(users.begin() + i);
                        wt.erase(wt.begin() + j);
                        wt.erase(wt.begin() + i);
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    if (!flag) break;       
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
        wt.push_back(0);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &amp;lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                wt.erase(wt.begin() + i);
                break;
           }
        }
    }
private:
    vector&amp;lt;User&amp;gt; users; // 匹配池中的用户，用 vector 记录
    vector&amp;lt;int&amp;gt; wt; // 等待时间，单位：s
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;add_user\n&amp;#34;);
    
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;add&amp;#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp;amp; user, const std::string&amp;amp; info) {
    // Your implementation goes here
    printf(&amp;#34;remove_user\n&amp;#34;);
    unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &amp;#34;remove&amp;#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&amp;lt;mutex&amp;gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &amp;#34;add&amp;#34;) pool.add(task.user);
            else if (task.type == &amp;#34;remove&amp;#34;) pool.remove(task.user);
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&amp;lt;MatchHandler&amp;gt; handler(new MatchHandler());
  ::std::shared_ptr&amp;lt;TProcessor&amp;gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&amp;lt;TServerTransport&amp;gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&amp;lt;TTransportFactory&amp;gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&amp;lt;TProtocolFactory&amp;gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &amp;lt;&amp;lt; &amp;#34;Start Match Server&amp;#34; &amp;lt;&amp;lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;usage&#34;&gt;Usage&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# 启动服务端
./match_system/src/main

# 启动客户端
python3 game/src/client.py

# 游戏应用端 （op id name scores）
add 1 yxc 2000
add 2 xan 1500
add 3 zagy 2500
remove 3 zagy 2500

# 匹配系统服务器
add_user
add_user
remove_user 
# 等待了 10 s
Match Result: 1 2
success
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;项目地址&#34;&gt;项目地址&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Xancoding/Learning-Thrift&#34;&gt;Learning-Thrift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.acwing.com/blog/content/10878/&#34;&gt;Docker | AcWing Linux 基础课&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html&#34;&gt;Docker 入门教程 | 阮一峰的网络日志&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;docker是什么&#34;&gt;Docker是什么？&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux或Windows操作系统的机器上&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;docker常用命令&#34;&gt;Docker常用命令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;镜像（images）&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker images&lt;/code&gt;：列出本地所有镜像&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image rm ubuntu:20.04&lt;/code&gt;：删除镜像&lt;code&gt;ubuntu:20.04&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker commit CONTAINER_NAME IMAGE_NAME:TAG&lt;/code&gt;：创建某个&lt;code&gt;container&lt;/code&gt;的镜像，&lt;code&gt;TAG&lt;/code&gt; 为镜像标签，用以记录当前版本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker save -o ubuntu_20_04.tar ubuntu:20.04&lt;/code&gt;：将镜像&lt;code&gt;ubuntu:20.04&lt;/code&gt;导出到本地文件&lt;code&gt;ubuntu_20_04.tar&lt;/code&gt;中&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker load -i ubuntu_20_04.tar&lt;/code&gt;：将镜像&lt;code&gt;ubuntu:20.04&lt;/code&gt;从本地文件&lt;code&gt;ubuntu_20_04.tar&lt;/code&gt;中加载出来&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;容器(container)&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;docker ps -a&lt;/code&gt;：查看本地的所有容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker start CONTAINER&lt;/code&gt;：启动容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker stop CONTAINER&lt;/code&gt;：停止容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker restart CONTAINER&lt;/code&gt;：重启容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker rm CONTAINER&lt;/code&gt;：删除容器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -p HOST_PORT:CONTAINER_PORT --name CONTAINER_NAME -itd IMAGE_NAME:TAG&lt;/code&gt;：将创建并启动一个容器
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;：端口映射，将宿主机的端口和容器的端口进行映射
&lt;ul&gt;
&lt;li&gt;例：&lt;code&gt;-p 20000:22 -p 8000:8000 -p 80:80 -p 443:443&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;22&lt;/code&gt;：&lt;code&gt;ssh&lt;/code&gt;登录服务端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8000&lt;/code&gt;：&lt;code&gt;Django&lt;/code&gt;调试端口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;80&lt;/code&gt;：用于&lt;code&gt;HTTP&lt;/code&gt;服务&lt;/li&gt;
&lt;li&gt;&lt;code&gt;443&lt;/code&gt;：用于&lt;code&gt;HTTPS&lt;/code&gt;服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker attach CONTAINER&lt;/code&gt;：进入容器
&lt;ul&gt;
&lt;li&gt;先按&lt;code&gt;Ctrl-p&lt;/code&gt;，再按&lt;code&gt;Ctrl-q&lt;/code&gt;可以挂起容器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;docker环境配置&#34;&gt;Docker环境配置&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;scp django_lesson_1_0.tar server&lt;/code&gt;：将&lt;code&gt;docker压缩包&lt;/code&gt;传至云服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ssh server&lt;/code&gt;：免密登录至云服务器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker load -i django_lesson_1_0.tar&lt;/code&gt;：将&lt;code&gt;docker压缩包&lt;/code&gt;解压缩成&lt;code&gt;docker镜像&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker run -p 20000:22 8000:8000 --name django -itd django_lesson:1.0&lt;/code&gt; ：利用 &lt;code&gt;镜像django_lesson:1.0&lt;/code&gt; 创建一个命名为 &lt;code&gt;django&lt;/code&gt; 的 &lt;code&gt;docker容器&lt;/code&gt;并启动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker attach my_docker_server&lt;/code&gt;：进入创建的&lt;code&gt;docker容器&lt;/code&gt;（服务器）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adduser acs&lt;/code&gt;：创建&lt;code&gt;acs&lt;/code&gt;用户&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usermod -aG sudo acs&lt;/code&gt;：为&lt;code&gt;acs&lt;/code&gt;用户分配&lt;code&gt;sudo&lt;/code&gt;权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scp .bashrc .vimrc .tmux.conf django&lt;/code&gt;：将本地服务器的&lt;code&gt;bash&lt;/code&gt;&amp;amp;&lt;code&gt;vim&lt;/code&gt;&amp;amp;&lt;code&gt;tmux&lt;/code&gt;配置文件传至&lt;code&gt;docker 容器&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;docker项目迁移&#34;&gt;Docker项目迁移&lt;/h3&gt;
&lt;p&gt;第一步，登录容器，关闭所有运行中的任务&lt;/p&gt;
&lt;p&gt;第二步，登录运行容器的服务器，然后执行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker commit CONTAINER_NAME django_lesson:1.1  # 将容器保存成镜像，将CONTAINER_NAME替换成容器名称
docker stop CONTAINER_NAME # 关闭容器
docker rm CONTAINER_NAME # 删除容器
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;增加容器的映射端口--80-与-443&#34;&gt;增加容器的映射端口 : 80 与 443&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;给运行中的容器，开通端口，是一件非常麻烦的事情&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个比较好的解决方案 : 先把容器保存成镜像，再删掉容器，然后用镜像生成新的容器，同时打开需要的端口&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第一步，登录容器，关闭所有运行中的任务&lt;/p&gt;
&lt;p&gt;第二步，登录运行容器的服务器，然后执行 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker commit CONTAINER_NAME django_lesson:1.1  &lt;span style=&#34;color:#007f7f&#34;&gt;# 将容器保存成镜像，将CONTAINER_NAME替换成容器名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker stop CONTAINER_NAME  &lt;span style=&#34;color:#007f7f&#34;&gt;# 关闭容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker rm CONTAINER_NAME &lt;span style=&#34;color:#007f7f&#34;&gt;# 删除容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;# 使用保存的镜像重新创建容器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker run -p 20000:22 -p 8000:8000 -p 80:80 -p 443:443 --name CONTAINER_NAME -itd django_lesson:1.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第三步，去云服务器控制台，在安全组配置中开放80和443端口&lt;/p&gt;
</description>
      <content:encoded><![CDATA[<h1 id="acwing-linux-基础课">AcWing Linux 基础课</h1>
<ul>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog</a></li>
<li><a href="https://www.acwing.com/activity/content/57/">AcWing Linux 基础课</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line/blob/master/README-zh.md">命令行的艺术 </a></li>
<li><a href="https://missing-semester-cn.github.io/">The Missing Semester of Your CS Education</a></li>
</ul>
<hr>
<h2 id="terminal">Terminal</h2>
<blockquote>
<p><strong>终端，一个程序，是界面上打开的黑框框本身，<code>shell</code> 运行于其中</strong></p>
</blockquote>
<h2 id="shell">Shell</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855530/">常用文件管理命令 | AcWing Linux 基础课</a></li>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855883/">Shell 语法 | AcWing Linux 基础课</a></strong></li>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030391/">管道、环境变量与常用命令  | AcWing Linux 基础课</a>
<ul>
<li><strong><a href="https://www.acwing.com/file_system/file/content/whole/index/content/3030414/">常用命令  | AcWing Linux 基础课</a></strong></li>
</ul>
</li>
<li><a href="https://wangdoc.com/bash/">《Bash 脚本教程》</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/course-shell/">第 1 讲 - 课程概览与 Shell | The missing semester of your CS education</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/shell-tools/">第 2 讲 - Shell 工具和脚本 | The missing semester of your CS education</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/19556676">终极 Shell——ZSH</a></li>
<li><a href="https://github.com/ohmyzsh/ohmyzsh">快速入门 zsh</a></li>
</ul>
<hr>
<h3 id="shell是什么">Shell是什么？</h3>
<ul>
<li><code>Shell</code> 是我们通过命令行与操作系统沟通的 <code>程序</code>，是个 <code>命令行解释器</code></li>
<li><code>Shell</code> 脚本可以直接在命令行中执行，也可以将一套逻辑组织成一个文件，方便复用</li>
<li><code>Shell</code> 负责外界与 <code>Linux 内核</code> 的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序</li>
<li><code>Shell</code>解释器有 <code>sh</code>、<code>bash</code>、<code>zsh...</code></li>
</ul>
<h3 id="shell常用命令">Shell常用命令</h3>
<ol>
<li><code>ag xxx</code>：搜索当前目录下的所有文件，<strong>检索<code>xxx</code>字符串</strong></li>
<li><code>find /path/to/directory/ -name '*.py'</code>：<strong>搜索</strong>某个文件路径下的所有<code>*.py</code><strong>文件</strong></li>
<li><code>history</code>：展示当前用户的历史操作。内容存放在<code>~/.bash_history</code>中</li>
<li><code>grep xxx</code>：从<code>stdin</code>中读入若干行数据，如果某行中包含<code>xxx</code>，则输出该行；否则忽略该行，<strong>用于查找文件里符合条件的字符串</strong></li>
</ol>
<h2 id="tmux--vim">Tmux &amp;&amp; Vim</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2855620/">Tmux和Vim | AcWing Linux 基础课</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程 | 阮一峰的网络日志</a></li>
<li><a href="http://kuanghy.github.io/2016/09/29/tmux">Tmux 简介与使用 | Huoty&rsquo;s Blog</a></li>
<li><a href="https://coolshell.cn/articles/5426.html#comments">简明 VIM 练级攻略 | 酷壳</a></li>
<li><a href="https://missing-semester-cn.github.io/2020/editors/">第 3 讲 - 编辑器 (Vim) | The missing semester of your CS education</a></li>
<li><a href="https://vim-adventures.com/">VIM 大冒险 - Game</a></li>
</ul>
<hr>
<h3 id="tmux-是什么">Tmux 是什么？</h3>
<blockquote>
<p><strong><code>Tmux</code> 是一个用于在终端窗口中运行多个终端会话的工具，即终端复用软件（terminal multiplexer）</strong></p>
<p><strong>远程 <code>SSH</code> 访问服务器进行工作时。即使非正常掉线，它能保存当前工作状态，并保证当前任务继续运行。</strong></p>
</blockquote>
<h3 id="tmux--session--window--pane">Tmux &amp;&amp; Session &amp;&amp; Window &amp;&amp; Pane</h3>
<ul>
<li>一个<code>tmux </code>可以有好多个<code>session</code>(会话)</li>
<li>一个<code>session</code>可以有好多个<code>window</code>(窗口)</li>
<li>一个<code>window</code>可以有好多个<code>pane</code>(面板)</li>
<li>一个<code>session</code>里不超过10个<code>window</code>是最方便的：可以用0到9迅速切换</li>
</ul>
<h3 id="tmux常用命令">Tmux常用命令</h3>
<blockquote>
<p><strong>Ac-Terminal 下前缀键被修改成了 Ctrl + a，一般的默认情况下是 Ctrl + b</strong></p>
</blockquote>
<ol>
<li><code>tmux new -s &lt;session-name&gt;</code>：新建会话</li>
<li><code>tmux detach</code> $or$ <code>Ctrl + a d</code>：分离会话，退出当前 Tmux 窗口，但是会话和里面的进程仍然在后台运行</li>
<li><code>tmux attach -t &lt;session-name&gt;</code>：重新接入某个已存在的会话</li>
<li><code>tmux kill-session -t &lt;session-name&gt;</code>：杀死某个会话</li>
<li><code>tmux switch -t &lt;session-name&gt;</code>：切换会话</li>
<li><code>tmux rename-session -t &lt;old-name&gt; &lt;new-name&gt;</code>：重命名会话</li>
<li><code>tmux ls</code> $or$ <code>Ctrl + a s</code>：查看当前所有的 Tmux 会话</li>
<li>在<code>tmux</code>中选中文本时，需要按住 <code>shift</code> 键</li>
<li><code>tmux</code>中复制/粘贴文本：
<ol>
<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>[</code></li>
<li>用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板</li>
<li>按下 <code>Ctrl + a</code> 后松开手指，然后按 <code>]</code> ，会将剪贴板中的内容粘贴到光标处</li>
</ol>
</li>
</ol>
<h3 id="vim-是什么">Vim 是什么？</h3>
<blockquote>
<p><strong>VIM 是 Linux 系统上一款文本编辑器，它是操作 Linux 的一款利器。</strong></p>
</blockquote>
<h3 id="vim常用命令">Vim常用命令</h3>
<ol>
<li>一般模式切换到编辑模式（常用）
<ol>
<li><code>i</code> : 在光标所处位置 <strong>直接</strong> 开始</li>
<li><code>a</code> : 在光标所处位置的 <strong>下一个字符</strong> 开始</li>
<li><code>o</code> : 在光标所处位置的 <strong>下一行</strong> 开始</li>
<li><code>r</code> : 取代当前光标处的字符，然后开始</li>
<li><code>[ESC]</code> : 退出编辑模式，回到一般模式</li>
</ol>
</li>
<li>光标移动操作
<ol>
<li><code>n&lt;Space&gt;</code> : <strong>n</strong> 为数字，光标 <strong>向右移动</strong>这一行的n个字符</li>
<li><code>n&lt;Enter&gt;</code> : <strong>n</strong> 为数字，光标 <strong>向下移动</strong>n行</li>
<li><code>0</code> 或 <code>功能键[Home]</code>: 光标移动到 <strong>本行开头</strong></li>
<li><code>$</code> 或 <code>功能键[End]</code>: 光标移动到 <strong>本行末尾</strong></li>
<li><code>:n</code> 或 <code>nG</code> : <strong>n</strong> 为数字，光标移动到 <strong>第n行</strong></li>
<li><code>G</code>: 光标移动到 <strong>最后一行</strong></li>
<li><code>gg</code> : 光标移动到 <strong>第一行</strong></li>
</ol>
</li>
<li>查找、替换操作
<ol>
<li><code>/word</code> : 向 <strong>光标之下</strong> 寻找 第一个值为 <strong>word</strong> 的字符串</li>
<li><code>?word</code> : 向 <strong>光标之上</strong> 寻找 第一个值为 <strong>word</strong> 的字符串</li>
<li><code>n</code> : 重复 <strong>前一个</strong> 查找操作</li>
<li><code>N</code> : 反向 重复 <strong>前一个</strong> 查找操作</li>
<li><code>:n1,n2s/word1/word2/g</code> : <strong>n1</strong> 与 <strong>n2</strong> 为数字，在第 <strong>n1</strong> 行与 <strong>n2</strong> 行之间寻找 <strong>word1</strong> 这个字符串，并将该字符串 替换 为 <strong>word2</strong></li>
<li><code>:1,$s/word1/word2/g</code> : 将全文的 <strong>word1</strong> 替换为 <strong>word2</strong></li>
<li><code>:1,$s/word1/word2/gc</code> : 将全文的 <strong>word1</strong> 替换为 <strong>word2</strong>，且在替换前 <strong>要求用户确认</strong></li>
</ol>
</li>
<li>文本操作（可搭配 <code>数字+&lt;Enter&gt;/&lt;Space&gt;、0、G、$</code> 等使用，达到预期组合效果）
<ol>
<li><code>v</code> : 选中文本</li>
<li><code>d</code> : 删除选中的文本</li>
<li><code>dd</code> : 删除当前行</li>
<li><code>y</code> : 复制选中的文本</li>
<li><code>yy</code> : 复制当前行</li>
<li><code>p</code> : 将复制的数据在光标的下一行/下一个位置 粘贴</li>
<li><code>u</code> : 撤销</li>
<li><code>Ctrl + r</code> : 取消撤销</li>
<li><code>&gt;</code> : 将选中的文本整体 <strong>向右缩进一次</strong></li>
<li><code>&lt;</code> : 将选中的文本整体 <strong>向左缩进一次</strong></li>
</ol>
</li>
<li>命令行操作
<ol>
<li><code>:w</code> : 保存</li>
<li><code>:w!</code> : 强制保存</li>
<li><code>:q</code> : 退出</li>
<li><code>:q!</code> : 强制退出</li>
<li><code>:wq</code> : 保存并退出</li>
<li><code>:set paste</code> : 设置成粘贴模式，取消代码自动缩进</li>
<li><code>:set nopaste</code> : 取消粘贴模式，开启代码自动缩进</li>
<li><code>:set nu</code> : 显示行号</li>
<li><code>:set nonu</code> : 隐藏行号</li>
<li><code>:noh</code>：关闭查找关键词高亮</li>
</ol>
</li>
<li><code>Ctrl + q</code> : 当<code>vim</code>卡死时，可以 <strong>取消当前正在执行的命令</strong></li>
</ol>
<h2 id="ssh">SSH</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898263/">SSH | AcWing Linux 基础课</a></li>
<li><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Adding a new SSH key to your GitHub account</a></li>
</ul>
<hr>
<h3 id="ssh是什么">SSH是什么？</h3>
<blockquote>
<p><strong>SSH是一种网络协议，用于计算机之间的加密登录</strong></p>
</blockquote>
<h3 id="ssh-免密登录">SSH 免密登录</h3>
<ol>
<li><code>ssh-key-gen</code> ：在本地服务器生成密钥</li>
<li><code>cd .ssh/</code></li>
<li><code>vim config</code> ：定义服务器别名</li>
</ol>
<pre tabindex="0"><code class="language-config" data-lang="config">Host server
	HostName 服务器IP地址  
	User     登录用户名
	port     远程主机端口号，默认为 22
</code></pre><ol start="4">
<li><code>ssh-copy-id server</code>：在本地服务器配置免密登录至云服务器</li>
<li>免密登录至<code>docker 容器</code>步骤同上</li>
<li>配置完成后，就可以直接使用 <code>ssh server</code> 免密登录啦</li>
</ol>
<h2 id="scp">SCP</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2898266/">SCP | AcWing Linux 基础课</a></li>
</ul>
<hr>
<h3 id="scp是什么">SCP是什么？</h3>
<blockquote>
<p><strong>SCP是一个命令行程序，可让您在计算机之间安全地复制文件和目录</strong></p>
</blockquote>
<h3 id="scp-传文件">SCP 传文件</h3>
<ul>
<li>复制多个文件：<code>scp source1 source2 LOCAL_PATH SERVER:SERVER_PATH</code></li>
<li>复制文件夹 ：
<ul>
<li><code>scp -r ~/tmp SERVER:/home/acs/</code>：将本地家目录中的<code>tmp</code>文件夹复制到服务器中的<code>/home/acs/</code>目录下</li>
<li><code>scp -r SERVER:homework .</code>：将服务器中的<code>~/homework/</code>文件夹复制到本地的当前路径下</li>
</ul>
</li>
</ul>
<h2 id="git">Git</h2>
<ul>
<li><a href="https://www.acwing.com/file_system/file/content/whole/index/content/2932078/">Git | AcWing Linux 基础课</a></li>
<li><a href="https://juejin.cn/column/6969263852206686221">Git从放弃到入门</a>
<ul>
<li><a href="https://juejin.cn/post/6973299611536457742">Git从放弃到入门：状态与阶段</a></li>
<li><strong><a href="https://juejin.cn/post/6974039503056928776">Git从放弃到入门：撤销操作</a></strong></li>
</ul>
</li>
<li><a href="https://www.ruanyifeng.com/blog/2018/10/git-internals.html">Git 原理入门</a></li>
<li><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn Git Braching - Game</a></li>
<li><a href="https://git-scm.com/book/zh/v2">Pro Git Online</a></li>
</ul>
<hr>
<h3 id="git是什么">Git是什么？</h3>
<blockquote>
<p><strong>Git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理</strong></p>
</blockquote>
<h3 id="git常用命令">Git常用命令</h3>
<h4 id="常用命令">常用命令</h4>
<ol>
<li><code>git add XX</code>：将<code>XX</code>文件添加到暂存区</li>
<li><code>git commit -m &quot;给自己看的备注信息&quot;</code>：将暂存区的内容提交到当前分支</li>
<li><code>git push -u (第一次需要 -u 以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库<code>XXX</code>下载到当前目录下</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><strong><code>git status</code>：查看仓库状态</strong></li>
<li><strong>有时候暂存了更改，尚未提交至仓库，如何取消暂存的更改？</strong>
<ul>
<li><strong><code>git restore --staged XX</code>或<code>git reset HEAD XX</code>：将<code>XX</code>从暂存区里移除</strong></li>
</ul>
</li>
<li><strong>有时候修改了本地工作目录（通常也叫工作区）的文件，如何放弃本地更改（尚未暂存）？</strong>
<ul>
<li><strong><code>git checkout XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</strong></li>
</ul>
</li>
</ol>
<h4 id="git-全局设置">Git 全局设置</h4>
<ol>
<li><code>git config --global user.name xxx</code>：设置全局用户名，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git config --global user.email xxx@xxx.com</code>：设置全局邮箱地址，信息记录在<code>~/.gitconfig</code>文件中</li>
<li><code>git init</code>：将当前目录配置成<code>git</code>仓库，信息记录在隐藏的<code>.git</code>文件夹中</li>
</ol>
<h4 id="git-查看命令">Git 查看命令</h4>
<ol>
<li><code>git diff XX</code>：查看<code>XX</code>文件相对于暂存区修改了哪些内容</li>
<li><code>git status</code>：查看仓库状态</li>
<li><code>git log</code>：查看当前分支的所有版本</li>
<li><code>git log --pretty=oneline</code>：用一行来显示</li>
<li><code>git reflog</code>：查看<code>HEAD</code>指针的移动历史（包括被回滚的版本）</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
</ol>
<h4 id="git-删除命令">Git 删除命令</h4>
<ol>
<li><code>git rm --cached XX</code>：将文件从仓库索引目录中删掉，不希望管理这个文件</li>
<li><code>git restore --staged xx</code>：将<code>xx</code>从暂存区里移除</li>
<li><code>git checkout — XX</code>或<code>git restore XX</code>：将<code>XX</code>文件尚未加入暂存区的修改全部撤销</li>
</ol>
<h4 id="git-代码回滚">Git 代码回滚</h4>
<ol>
<li><code>git reset --hard HEAD^</code>或<code>git reset --hard HEAD~ </code>：将代码库回滚到上一个版本</li>
<li><code>git reset --hard HEAD^^</code>：往上回滚两次，以此类推</li>
<li><code>git reset --hard HEAD~100</code>：往上回滚100个版本</li>
<li><code>git reset --hard 版本号</code>：回滚到某一特定版本</li>
</ol>
<h4 id="git-远程仓库">Git 远程仓库</h4>
<ol>
<li><code>git remote add origin git@git.acwing.com:xxx/XXX.git</code>：将本地仓库关联到远程仓库</li>
<li><code>git push -u (第一次需要-u以后不需要)</code> ：将当前分支推送到远程仓库</li>
<li><code>git push origin branch_name</code>：将本地的某个分支推送到远程仓库</li>
<li><code>git clone git@git.acwing.com:xxx/XXX.git</code>：将远程仓库XXX下载到当前目录下</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code>：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-分支命令">Git 分支命令</h4>
<ol>
<li><code>git branch branch_name</code>：创建新分支</li>
<li><code>git branch</code>：查看所有分支和当前所处分支</li>
<li><code>git checkout -b branch_name</code>：创建并切换到<code>branch_name</code>这个分支</li>
<li><code>git checkout branch_name</code>：切换到<code>branch_name</code>这个分支</li>
<li><code>git merge branch_name</code>：将分支<code>branch_name</code>合并到当前分支上</li>
<li><code>git branch -d branch_name</code>：删除本地仓库的<code>branch_name</code>分支</li>
<li><code>git push --set-upstream origin branch_name</code>：设置本地的<code>branch_name</code>分支对应远程仓库的<code>branch_name</code>分支</li>
<li><code>git push -d origin branch_name</code>：删除远程仓库的<code>branch_name</code>分支</li>
<li><code>git checkout -t origin/branch_name</code>：将远程的<code>branch_name</code>分支拉取到本地</li>
<li><code>git pull</code> ：将远程仓库的当前分支与本地仓库的当前分支合并</li>
<li><code>git pull origin branch_name</code>：将远程仓库的<code>branch_name</code>分支与本地仓库的当前分支合并</li>
<li><code>git branch --set-upstream-to=origin/branch_name1 branch_name2</code>：将远程的</li>
<li><code>branch_name1</code>分支与本地的<code>branch_name2</code>分支对应</li>
</ol>
<h4 id="git-stash-暂存">Git stash 暂存</h4>
<ol>
<li><code>git stash</code>：将工作区和暂存区中尚未提交的修改存入栈中</li>
<li><code>git stash apply</code>：将栈顶存储的修改恢复到当前分支，但不删除栈顶元素</li>
<li><code>git stash drop</code>：删除栈顶存储的修改</li>
<li><code>git stash pop</code>：将栈顶存储的修改恢复到当前分支，同时删除栈顶元素</li>
<li><code>git stash list</code>：查看栈中所有元素</li>
</ol>
<h3 id="本地项目上传到github">本地项目上传到GitHub</h3>
<ol>
<li>配置<code>ssh-key</code>实现本地与<code>Git</code>服务器免密交互</li>
</ol>
<pre tabindex="0"><code>ssh-keygen  # 生成密钥
cat .ssh/id_rsa.pub
# 复制密钥，提交到 git 服务器的 ssh 密钥中
</code></pre><ol start="2">
<li>按照下面的操作在本地文件夹配置一下<code>Git</code>：</li>
</ol>
<pre tabindex="0"><code>git config --global user.name xxx  # 设置用户名
git config --global user.email xxx@xxx.com  # 设置用户邮箱

git init
git add .
git commit -m &#34;xxx&#34;
git remote add origin https://github.com/xxx/XXX.git  # 建立连接
git push -u origin master
</code></pre><h3 id="gitignore的作用">.gitignore的作用</h3>
<blockquote>
<p><strong>工程常识：缓存文件，可执行文件，编译文件 不要传到自己的 git 项目里</strong></p>
<p><strong>.gitignore的作用就是帮助我们在git add时将我们指定的一些文件自动排除在外，不提交到git当中</strong></p>
<p><strong>在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件</strong></p>
</blockquote>
<h2 id="thrift"><strong>Thrift</strong></h2>
<ul>
<li><a href="https://www.acwing.com/video/3479/">Thrift | AcWing Linux 基础课</a></li>
<li><a href="https://git.acwing.com/fashen/thrift_learning/-/blob/master/readme.md">Thrift_learning - AcGit</a></li>
<li><a href="https://www.colopen-blog.com/Engineer/acw_linux/">AcWing Linux 基础课 | Colopen&rsquo;s blog | Thrift</a></li>
<li><a href="https://thrift.apache.org/">thrift 官网</a> -&gt; <a href="https://thrift.apache.org/tutorial/">Tutorial</a> -&gt; <a href="https://git-wip-us.apache.org/repos/asf?p=thrift.git;a=blob_plain;f=tutorial/tutorial.thrift">tutorial.thrift</a></li>
</ul>
<hr>
<h3 id="thrift是什么">Thrift是什么？</h3>
<blockquote>
<p><strong>Thrift是一个轻量级、跨语言的远程过程服务调用（RPC）框架</strong></p>
<p><strong>RPC（远程过程调用）是一个计算机通信协议，该协议允许运行于一台计算机的程序调用另一台计算机的子程序，而程序员无需额外地为这个交互作用编程</strong></p>
<p><strong>Thrift用于跨语言服务开发，它将软件栈和代码生成引擎结合在一起，以构建在 C++、Java、Python、PHP、Ruby、Erlang、Perl、Haskell、C#、Cocoa、JavaScript、Node. Js、Smalltalk、OCaml 和 Delphi 等语言之间高效、无缝地工作的服务</strong></p>
</blockquote>
<h3 id="例实现一个游戏的匹配服务">例：实现一个游戏的匹配服务</h3>
<h4 id="基本框架">基本框架</h4>
<ol>
<li>游戏应用端 <code>game</code>（Python3）
<ol>
<li>客户端：与 匹配系统服务器 的服务端交互</li>
</ol>
</li>
<li>匹配系统服务器 <code>match_system</code>（C++）
<ol>
<li>服务端：与 游戏应用端 的客户端交互</li>
<li>客户端：与 数据存储服务器 的服务端交互</li>
</ol>
</li>
<li>数据存储服务器（已经实现）
<ol>
<li>服务端：与 匹配系统服务器 的客户端交互</li>
</ol>
</li>
</ol>
<h4 id="文件结构">文件结构</h4>
<pre tabindex="0"><code>|-- README.md
|-- game
|   `-- src
|       |-- client.py
|       `-- match_client
|           |-- __init__.py
|           |-- __pycache__
|           |   `-- __init__.cpython-38.pyc
|           `-- match
|               |-- Match.py
|               |-- __init__.py
|               |-- __pycache__
|               |   |-- Match.cpython-38.pyc
|               |   |-- __init__.cpython-38.pyc
|               |   `-- ttypes.cpython-38.pyc
|               |-- constants.py
|               `-- ttypes.py
|-- match_system
|   `-- src
|       |-- Match.o
|       |-- Save.o
|       |-- main
|       |-- main.cpp
|       |-- main.o
|       |-- match_server
|       |   |-- Match.cpp
|       |   |-- Match.h
|       |   |-- match_types.cpp
|       |   `-- match_types.h
|       |-- match_types.o
|       `-- save_client
|           |-- Save.cpp
|           |-- Save.h
|           `-- save_types.h
`-- thrift
    |-- match.thrift
    `-- save.thrift
</code></pre><h4 id="实现过程">实现过程</h4>
<ol>
<li>定义接口 (<code>thrift</code> 文件夹用于存放接口 )</li>
<li>完成 <code>Server</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>match_system</code>文件夹下生成 C++版本的服务端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen cpp tutorial.thrift
</code></pre><ol start="2">
<li>将<code>gen cpp</code> 文件夹重命名，如：<code>match_server</code>（区别于之后要在此处生成的<code>client_server</code>）</li>
<li>把 <code>Match_server.skeleton.cpp</code> 移动到当前 <code>src</code> 目录下并重命名为 <code>main.cpp</code>
<ul>
<li>由于移动了 <code>main.cpp</code> 故需要修改一下<code> main.cpp</code> 中头文件里关于 <code>Match.h</code> 的引用路径：<code>#include &quot;Match.h&quot;</code> -&gt; <code>#include &quot;match_server/Match.h&quot;</code></li>
</ul>
</li>
<li>在<code>main.cpp</code>中实现具体业务逻辑</li>
</ol>
</li>
<li>完成 <code>Client</code> 端
<ol>
<li>通过<code>match.thrift</code>接口在<code>game</code>文件夹下生成 <code>python3</code> 版本的服务端，然后通过修改得到客户端</li>
</ol>
<pre tabindex="0"><code>thrift -r --gen py tutorial.thrift
</code></pre><ol start="2">
<li>删掉 <code>Match_remote </code>，该文件是用 py 实现 服务端 时用的文件，此处我们只需要实现 <strong>客户端</strong> 功能，因此他没有作用，不妨删掉，让文档简洁一点</li>
<li>利用官网提供的模板，在<code>src</code>文件夹下编写 <strong>客户端</strong> 文件 <code>client.py</code></li>
</ol>
</li>
<li>持久化到云端
<ul>
<li>将 <strong>非编译文件</strong> 和 <strong>非可执行文件</strong> 提交到 <code>git</code> 中去（好的工程习惯）
<ul>
<li><code>Cpp</code>
<ul>
<li><code>git restore --stage *.o</code></li>
<li><code>git restore --stage main</code></li>
</ul>
</li>
<li><code>Python</code>
<ul>
<li><code>git restore --stage *.pyc   # .pyc文件是编译文件，不加入暂存区里</code></li>
<li><code>git restore --stage *.swp   # .swp文件是缓存文件，不加入暂存区里</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>注意：先运行服务器后，客户端才能正常运行</li>
</ul>
<h4 id="thrift-接口">Thrift 接口</h4>
<h5 id="matchthrift">Match.thrift</h5>
<pre tabindex="0"><code>namespace cpp match_service
struct User {
    1: i32 id,
    2: string name,
    3: i32 scores
}
service Match {
    i32 add_user(1: User user, 2: string info),
    i32 remove_user(1: User user, 2: string info),
}
</code></pre><h5 id="savethrift">Save.thrift</h5>
<pre tabindex="0"><code>namespace cpp save_service
service Save {
    /**
     * username: myserver的名称
     * password: myserver的密码的md5值的前8位，用命令md5sum
     * 用户名密码验证成功会返回0，验证失败会返回1
     * 验证成功后，结果会被保存到myserver:homework/lesson_6/result.txt中
     */
    i32 save_data(1: string username, 2: string password, 3: i32 player1_id, 4: i32 player2_id)
}
</code></pre><h4 id="各版本预览">各版本预览</h4>
<h5 id="match_server10">Match_server:1.0</h5>
<ul>
<li><code>match_client</code>：创建固定的<code>User</code></li>
</ul>
<pre tabindex="0"><code>from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol


def main():
    # Make socket
    transport = TSocket.TSocket(&#39;localhost&#39;, 9090)

    # Buffering is critical. Raw sockets are very slow
    transport = TTransport.TBufferedTransport(transport)

    # Wrap in a protocol
    protocol = TBinaryProtocol.TBinaryProtocol(transport)

    # Create a client to use the protocol encoder
    client = Match.Client(protocol)

    # Connect!
    transport.open()

    user = User(1, &#39;yxc&#39;, 1500)
    client.add_user(user, &#34;&#34;)

    # Close!
    transport.close()


# 调用 main 函数
if __name__ == &#34;__main__&#34;:
    main()
</code></pre><ul>
<li><code>match_server</code></li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &#34;match_server/Match.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include&lt;iostream&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    return 0;
  }
};
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
    
  server.serve();
  return 0;
}
</code></pre><h5 id="match_server20">Match_server:2.0</h5>
<ul>
<li><code>match_client</code>：根据标准输入来创建<code>User</code></li>
</ul>
<pre tabindex="0"><code>from match_client.match import Match
from match_client.match.ttypes import User

from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

# 利用 python 在终端读入信息需要引入 stdin
from sys import stdin

# 将原来的通信 main 函数改写成operate函数，每次需要的时候调用一次建立通信传递信息
# 目的是可以一直不断处理信息
# 然后重写 main 函数，使之能不断从终端读入信息
def operate(op, user_id, user_name, score):
    # Make socket 
	transport = TSocket.TSocket(&#39;localhost&#39;, 9090)
	
	# Buffering is critical. Raw sockets are very slow
	transport = TTransport.TBufferedTransport(transport)
	
	# Wrap in a protocol
	protocol = TBinaryProtocol.TBinaryProtocol(transport)
	
	# Create a client to use the protocol encoder
	client = Match.Client(protocol)
	
	# Connect!
	transport.open()

    # 针对 op 参数，分别进行 &#34;增加&#34; 与 &#34;删出&#34; 操作
    user = User(user_id, user_name, score)

    if op == &#34;add&#34;:
        client.add_user(user, &#34;&#34;)
    else:
        client.remove_user(user, &#34;&#34;)
    
    # Close!
	transport.close()

def main():
    for line in stdin:
        op, user_id, user_name, score = line.split(&#39; &#39;)
        operate(op, int(user_id), user_name, int(score))

# 调用 main 函数
if __name__ == &#34;__main__&#34;:
    main()
</code></pre><ul>
<li><code>match_server</code>：自动将用户池中前两个用户匹配到一起</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &#34;match_server/Match.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &gt; 1) {
            auto a = users[0], b = users[1];
            users.erase(users.begin());
            users.erase(users.begin());
            save_result(a.id, b.id);
        }
    }
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h5 id="match_server30">Match_server:3.0</h5>
<ul>
<li><code>save_client</code>：因为一个节点只能由一个<code>main</code>方法作为程序的入口，所以匹配系统中的客户端和服务端写在同一个<code>main</code>方法中</li>
</ul>
<pre tabindex="0"><code>// 需要额外引入的头文件
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;

// 需要额外声明的命名空间
using namespace  ::save_service;

//重写 save_result 内的内容，使其能够与 &#34;数据存储服务器&#34; 交互
void save_result(int a, int b) { // 记录成功匹配的信息
    printf(&#34;Match Result: %d %d\n&#34;, a, b);

    // Client端的板子
    std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
    std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
    std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
    SaveClient client(protocol);

    try {
        transport-&gt;open();

        //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
        int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
        //输出匹配结果
        if (!res) puts(&#34;success&#34;);
        else puts(&#34;fail&#34;);

        transport-&gt;close();
    } catch (TException&amp; tx) {
        cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
    }
}
</code></pre><ul>
<li><code>match_server</code>：每次只匹配分差小于 50 的用户</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;
#include &#34;match_server/Match.h&#34;
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include &lt;unistd.h&gt; // 用于调用 sleep 函数
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
	//重写 save_result 内的内容，使其能够与 &#34;数据存储服务器&#34; 交互
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
        // Client端的板子
        std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
        std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&gt;open();
            //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
            int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
            //输出匹配结果
            if (!res) puts(&#34;success&#34;);
            else puts(&#34;fail&#34;);
            transport-&gt;close();
        } catch (TException&amp; tx) {
            cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
        }
    }
    void match() {  // 将匹配池中的第一、第二个用户匹配
        while (users.size() &gt; 1) {
            // 按照 rank分 排序
            sort(users.begin(), users.end(), [&amp;](User&amp; a, User&amp; b) {
                return a.scores &lt; b.scores;
            });
            bool flag = true;
            for (uint32_t i = 1; i &lt; users.size(); ++ i) {
                auto a = users[i - 1], b = users[i];
                // 两名玩家分数差小于50时进行匹配
                if (b.scores - a.scores &lt;= 50) {
                    users.erase(users.begin() + i - 1, users.begin() + i + 1);
                    save_result(a.id, b.id);
                    flag = false;
                    break;
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
            pool.match();
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h5 id="match_server40">Match_server:4.0</h5>
<ul>
<li><code>match_server</code>：随时间扩大匹配域，每一单位的 <code>wt</code> 会扩大 $50$ 分 的匹配域</li>
</ul>
<pre tabindex="0"><code>// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include &lt;thrift/transport/TSocket.h&gt;
#include &lt;thrift/transport/TTransportUtils.h&gt;
#include &#34;match_server/Match.h&#34;
#include &#34;save_client/Save.h&#34;
#include &lt;thrift/protocol/TBinaryProtocol.h&gt;
#include &lt;thrift/server/TSimpleServer.h&gt;
#include &lt;thrift/transport/TServerSocket.h&gt;
#include &lt;thrift/transport/TBufferTransports.h&gt;
#include &lt;unistd.h&gt; // 用于调用 sleep 函数
#include&lt;iostream&gt;
#include &lt;thread&gt;               // 需要线程，引入头文件
#include &lt;mutex&gt;                // 互斥信号量
#include &lt;condition_variable&gt;   // 条件变量，用于 阻塞和唤醒 线程
#include &lt;queue&gt;                // 用于模拟消息队列
#include &lt;vector&gt;
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::save_service;
using namespace  ::match_service;
using namespace std;
struct Task {   // 消息队列中的元素
    User user;
    string type;
};
struct MessageQueue {   // 消息队列
    queue&lt;Task&gt; q;          // 消息队列本体
    mutex m;                // 互斥信号量
    condition_variable cv;  // 条件变量，用于阻塞唤醒线程
}message_queue;
class Pool {    // 模拟匹配池
public:
    void save_result(int a, int b) {  // 记录成功匹配的信息
        printf(&#34;Match Result: %d %d \n&#34;, a, b);
        // Client端的板子
        std::shared_ptr&lt;TTransport&gt; socket(new TSocket(&#34;123.57.47.211&#34;, 9090));
        std::shared_ptr&lt;TTransport&gt; transport(new TBufferedTransport(socket));
        std::shared_ptr&lt;TProtocol&gt; protocol(new TBinaryProtocol(transport));
        SaveClient client(protocol);
        try {
            transport-&gt;open();
            //调用接口，把信息存储 &#34;数据存储服务器&#34; 中
            int res = client.save_data(&#34;acs_4888&#34;, &#34;07637c4c&#34;, a, b);
            //输出匹配结果
            if (!res) puts(&#34;success&#34;);
            else puts(&#34;fail&#34;);
            transport-&gt;close();
        } catch (TException&amp; tx) {
            cout &lt;&lt; &#34;ERROR: &#34; &lt;&lt; tx.what() &lt;&lt; endl;
        }
    }
    bool check_match(uint32_t i, uint32_t j) {
        auto a = users[i], b = users[j];
        
        int dt = abs(a.scores - b.scores);
        int a_max_dif = wt[i] * 50;
        int b_max_dif = wt[j] * 50;
        return dt &lt;= a_max_dif &amp;&amp; dt &lt;= b_max_dif;
    }
    void match() {
       for (uint32_t i = 0; i &lt; wt.size(); ++ i)
           wt[i] ++;
        while (users.size() &gt; 1) {
            bool flag = true;
            for (uint32_t i = 0; i &lt; users.size(); ++ i) {
                for (uint32_t j = i + 1; j &lt; users.size(); ++ j) {
                    if (check_match(i, j)) {
                        auto a = users[i], b = users[j];
                        users.erase(users.begin() + j);
                        users.erase(users.begin() + i);
                        wt.erase(wt.begin() + j);
                        wt.erase(wt.begin() + i);
                        save_result(a.id, b.id);
                        flag = false;
                        break;
                    }
                    if (!flag) break;       
                }
            }
            if (flag) break;    // 一轮扫描后，发现没有能够匹配的用户，就停止扫描，等待下次调用
        }
    } 
    
    void add(User user) {   // 向匹配池中加入用户
        users.push_back(user);
        wt.push_back(0);
    }
    void remove(User user) {    // 向匹配池中删除用户
        for (uint32_t i = 0; i &lt; users.size(); ++ i) {
            if (users[i].id == user.id) {
                users.erase(users.begin() + i);
                wt.erase(wt.begin() + i);
                break;
           }
        }
    }
private:
    vector&lt;User&gt; users; // 匹配池中的用户，用 vector 记录
    vector&lt;int&gt; wt; // 等待时间，单位：s
}pool;
class MatchHandler : virtual public MatchIf {
 public:
  MatchHandler() {
    // Your initialization goes here
  }
  int32_t add_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;add_user\n&#34;);
    
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;add&#34;});        // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
    return 0;
  }
  int32_t remove_user(const User&amp; user, const std::string&amp; info) {
    // Your implementation goes here
    printf(&#34;remove_user\n&#34;);
    unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
    message_queue.q.push({user, &#34;remove&#34;});     // 把新消息加入消息队列
    message_queue.cv.notify_all();              // 唤醒阻塞的线程
   
    return 0;
  }
};
// 基于“生产者-消费者模型”的线程
void consume_task() {
    while(true) {
        unique_lock&lt;mutex&gt; lck(message_queue.m);    // 访问临界区（消息队列），先上锁
        if (message_queue.q.empty()) {
            // message_queue.cv.wait(lck); // 这里要阻塞进程
            // 避免队列为空时，一直反复运行该进程，导致一直占用临界区，而不能加入新消息
            // 修改为每 1 秒进行一次匹配
            lck.unlock();   // 直接解锁临界区资源
            pool.match();   //调用 match()
            sleep(1);
        } else {
            auto task = message_queue.q.front();    // 取出消息队列队头元素
            message_queue.q.pop();
            lck.unlock();   // 临界区访问结束，直接解锁
            // 避免后续没用到临界区信息，而长时间占用临界区的情况发生
            
            if (task.type == &#34;add&#34;) pool.add(task.user);
            else if (task.type == &#34;remove&#34;) pool.remove(task.user);
        } 
    }
}
int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr&lt;MatchHandler&gt; handler(new MatchHandler());
  ::std::shared_ptr&lt;TProcessor&gt; processor(new MatchProcessor(handler));
  ::std::shared_ptr&lt;TServerTransport&gt; serverTransport(new TServerSocket(port));
  ::std::shared_ptr&lt;TTransportFactory&gt; transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr&lt;TProtocolFactory&gt; protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  
  cout &lt;&lt; &#34;Start Match Server&#34; &lt;&lt; endl;
  
  thread matching_thread(consume_task); // 调用一个线程运行 consume_task
  server.serve();
  
  return 0;
}
</code></pre><h4 id="usage">Usage</h4>
<pre tabindex="0"><code># 启动服务端
./match_system/src/main

# 启动客户端
python3 game/src/client.py

# 游戏应用端 （op id name scores）
add 1 yxc 2000
add 2 xan 1500
add 3 zagy 2500
remove 3 zagy 2500

# 匹配系统服务器
add_user
add_user
remove_user 
# 等待了 10 s
Match Result: 1 2
success
</code></pre><h4 id="项目地址">项目地址</h4>
<ul>
<li><a href="https://github.com/Xancoding/Learning-Thrift">Learning-Thrift</a></li>
</ul>
<h2 id="docker">Docker</h2>
<ul>
<li><a href="https://www.acwing.com/blog/content/10878/">Docker | AcWing Linux 基础课</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程 | 阮一峰的网络日志</a></li>
</ul>
<hr>
<h3 id="docker是什么">Docker是什么？</h3>
<blockquote>
<p><strong>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux或Windows操作系统的机器上</strong></p>
</blockquote>
<h3 id="docker常用命令">Docker常用命令</h3>
<ul>
<li><code>镜像（images）</code>
<ol>
<li><code>docker images</code>：列出本地所有镜像</li>
<li><code>docker image rm ubuntu:20.04</code>：删除镜像<code>ubuntu:20.04</code></li>
<li><code>docker commit CONTAINER_NAME IMAGE_NAME:TAG</code>：创建某个<code>container</code>的镜像，<code>TAG</code> 为镜像标签，用以记录当前版本。</li>
<li><code>docker save -o ubuntu_20_04.tar ubuntu:20.04</code>：将镜像<code>ubuntu:20.04</code>导出到本地文件<code>ubuntu_20_04.tar</code>中</li>
<li><code>docker load -i ubuntu_20_04.tar</code>：将镜像<code>ubuntu:20.04</code>从本地文件<code>ubuntu_20_04.tar</code>中加载出来</li>
</ol>
</li>
<li><code>容器(container)</code>
<ol>
<li><code>docker ps -a</code>：查看本地的所有容器</li>
<li><code>docker start CONTAINER</code>：启动容器</li>
<li><code>docker stop CONTAINER</code>：停止容器</li>
<li><code>docker restart CONTAINER</code>：重启容器</li>
<li><code>docker rm CONTAINER</code>：删除容器</li>
<li><code>docker run -p HOST_PORT:CONTAINER_PORT --name CONTAINER_NAME -itd IMAGE_NAME:TAG</code>：将创建并启动一个容器
<ul>
<li><code>-p</code>：端口映射，将宿主机的端口和容器的端口进行映射
<ul>
<li>例：<code>-p 20000:22 -p 8000:8000 -p 80:80 -p 443:443</code></li>
<li><code>22</code>：<code>ssh</code>登录服务端口</li>
<li><code>8000</code>：<code>Django</code>调试端口</li>
<li><code>80</code>：用于<code>HTTP</code>服务</li>
<li><code>443</code>：用于<code>HTTPS</code>服务</li>
</ul>
</li>
</ul>
</li>
<li><code>docker attach CONTAINER</code>：进入容器
<ul>
<li>先按<code>Ctrl-p</code>，再按<code>Ctrl-q</code>可以挂起容器</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="docker环境配置">Docker环境配置</h3>
<ol>
<li><code>scp django_lesson_1_0.tar server</code>：将<code>docker压缩包</code>传至云服务器</li>
<li><code>ssh server</code>：免密登录至云服务器</li>
<li><code>docker load -i django_lesson_1_0.tar</code>：将<code>docker压缩包</code>解压缩成<code>docker镜像</code></li>
<li><code>docker run -p 20000:22 8000:8000 --name django -itd django_lesson:1.0</code> ：利用 <code>镜像django_lesson:1.0</code> 创建一个命名为 <code>django</code> 的 <code>docker容器</code>并启动</li>
<li><code>docker attach my_docker_server</code>：进入创建的<code>docker容器</code>（服务器）</li>
<li><code>adduser acs</code>：创建<code>acs</code>用户</li>
<li><code>usermod -aG sudo acs</code>：为<code>acs</code>用户分配<code>sudo</code>权限</li>
<li><code>scp .bashrc .vimrc .tmux.conf django</code>：将本地服务器的<code>bash</code>&amp;<code>vim</code>&amp;<code>tmux</code>配置文件传至<code>docker 容器</code></li>
</ol>
<h3 id="docker项目迁移">Docker项目迁移</h3>
<p>第一步，登录容器，关闭所有运行中的任务</p>
<p>第二步，登录运行容器的服务器，然后执行：</p>
<pre tabindex="0"><code>docker commit CONTAINER_NAME django_lesson:1.1  # 将容器保存成镜像，将CONTAINER_NAME替换成容器名称
docker stop CONTAINER_NAME # 关闭容器
docker rm CONTAINER_NAME # 删除容器
</code></pre><h3 id="增加容器的映射端口--80-与-443">增加容器的映射端口 : 80 与 443</h3>
<blockquote>
<p><strong>给运行中的容器，开通端口，是一件非常麻烦的事情</strong></p>
<p><strong>一个比较好的解决方案 : 先把容器保存成镜像，再删掉容器，然后用镜像生成新的容器，同时打开需要的端口</strong></p>
</blockquote>
<p>第一步，登录容器，关闭所有运行中的任务</p>
<p>第二步，登录运行容器的服务器，然后执行 :</p>
<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-shell" data-lang="shell"><span style="display:flex;"><span>docker commit CONTAINER_NAME django_lesson:1.1  <span style="color:#007f7f"># 将容器保存成镜像，将CONTAINER_NAME替换成容器名称</span>
</span></span><span style="display:flex;"><span>docker stop CONTAINER_NAME  <span style="color:#007f7f"># 关闭容器</span>
</span></span><span style="display:flex;"><span>docker rm CONTAINER_NAME <span style="color:#007f7f"># 删除容器</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#007f7f"># 使用保存的镜像重新创建容器</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>docker run -p 20000:22 -p 8000:8000 -p 80:80 -p 443:443 --name CONTAINER_NAME -itd django_lesson:1.1
</span></span></code></pre></div><p>第三步，去云服务器控制台，在安全组配置中开放80和443端口</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>双拼学习记</title>
      <link>https://xancoding.cn/posts/doublespell/</link>
      <pubDate>Fri, 14 Oct 2022 17:02:41 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/doublespell/</guid>
      <description>&lt;h1 id=&#34;双拼学习记&#34;&gt;双拼学习记&lt;/h1&gt;
&lt;p&gt;前段时间了解了双拼输入法，只是一直没有时间去学。这段时间事情慢慢少点了，准备着手开始学习。双拼只需要按键两次便可以输入一个汉字，我感觉这样的设计更为合理，要是熟练掌握，会很有节奏感，打字速度也可以得到提升。&lt;/p&gt;
&lt;p&gt;更换一个新的输入法，刚开始时肯定会很别扭。使用双拼进行输入，需要对要打的字的音形熟悉，不然是打不出来的。刚好重新学习一下拼音，纠正纠正我自己一些错误的发音认知。&lt;/p&gt;
&lt;p&gt;我准备学习小鹤双拼，找了张小鹤双拼的键位图，用作电脑桌面，打字想不起来的时候瞄一眼。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png&#34; alt=&#34;doubleSpell&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/posts/learn_shuangpin&#34;&gt;双拼学习记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV16J411G7YT?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=ae16ff6478eb15c1b87880540263910b&#34;&gt;双拼这点东西，up居然讲了十分钟——十分钟了解双拼到底是啥&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flypy.com/&#34;&gt;小鹤双拼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.flypy.com/#/xh&#34;&gt;小鹤入门&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="双拼学习记">双拼学习记</h1>
<p>前段时间了解了双拼输入法，只是一直没有时间去学。这段时间事情慢慢少点了，准备着手开始学习。双拼只需要按键两次便可以输入一个汉字，我感觉这样的设计更为合理，要是熟练掌握，会很有节奏感，打字速度也可以得到提升。</p>
<p>更换一个新的输入法，刚开始时肯定会很别扭。使用双拼进行输入，需要对要打的字的音形熟悉，不然是打不出来的。刚好重新学习一下拼音，纠正纠正我自己一些错误的发音认知。</p>
<p>我准备学习小鹤双拼，找了张小鹤双拼的键位图，用作电脑桌面，打字想不起来的时候瞄一眼。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/doubleSpell/doubleSpell.png" alt="doubleSpell"  />
</a>
</div>

</p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://geekplux.com/posts/learn_shuangpin">双拼学习记</a></li>
<li><a href="https://www.bilibili.com/video/BV16J411G7YT?spm_id_from=333.337.search-card.all.click&amp;vd_source=ae16ff6478eb15c1b87880540263910b">双拼这点东西，up居然讲了十分钟——十分钟了解双拼到底是啥</a></li>
<li><a href="https://flypy.com/">小鹤双拼</a></li>
<li><a href="https://help.flypy.com/#/xh">小鹤入门</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>我管理时间的方法</title>
      <link>https://xancoding.cn/posts/timemanagement/</link>
      <pubDate>Fri, 14 Oct 2022 16:07:09 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/timemanagement/</guid>
      <description>&lt;h1 id=&#34;安排好你的待办清单&#34;&gt;安排好你的待办清单&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;思考以下几点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 有哪些工作需要完成？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.我有多少时间可以用来完成这些工作？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.工作事项是否有逻辑顺序以及优先级&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;每一天你都会受到很多的干扰，看到APP上的一个个红点，消息通知从屏幕上弹出。注意力在一次次的查看信息中被逐渐消磨，时间也变得碎片化，难以静下心来专注于某件事。有些干扰无可避免，但只要愿意付出努力，大部分的干扰可以得到排除。&lt;/p&gt;
&lt;p&gt;白天我会尽量避免受到干扰，所有的社交软件，它们是工作效率的最大杀手。我控制自己在上午以及下午的大块时间中忽略来自社交网络的信息，将消息的查看集中在中午以及晚上的特定时间，做一个统一的查看。&lt;/p&gt;
&lt;p&gt;每天的晚上，我会花些的时间，把第二天的工作做个大致的安排，写到待办事项中，第二天再用番茄工作法进行专注执行。记得让自己的计划保持比较高的自由度，要留有足够的时间余量。&lt;/p&gt;
&lt;h1 id=&#34;番茄工作法&#34;&gt;番茄工作法&lt;/h1&gt;
&lt;p&gt;番茄工作法这个名词我之前便有听说过，但一直未尝试着去做过，直到最近从《软技能》一书中再次看到，感觉不错，便开始了尝试。在经过一个星期的体验后，它确实提高了我的效率，让我能够更好的对自己的时间做出规划。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;它的基本思路是：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;值得注意的是，使用番茄工作法所要做的并不只是集中注意力25分钟这么简单。通过使用番茄工作法，你可以&lt;strong&gt;高效跟踪自己一天完成的番茄钟的数量&lt;/strong&gt;，并为此设定目标。开始的几天，你可能无法对自己能完成的工作做一个很好的估计。但相信在使用番茄工作法一段时间后，你可以做到较为准确的估计，并能完成通过番茄钟的数量，评估自己完成的工作。&lt;/p&gt;
&lt;p&gt;通过使用番茄钟，你可以&lt;strong&gt;定量的描述自己的工作状态&lt;/strong&gt;，而不再像过去那样只是凭借感觉。你可以把每周看作是由有限个番茄钟组成的，知道了自己一周大概能完成的番茄钟的数量后，你也会认识到应该如何通过设置任务的优先级，来&lt;strong&gt;合理分配自己的时间&lt;/strong&gt;。你不会再过高的幻想自己会在一周的时间里完成超出自己实际许多的任务，并在每周结束时，因未能完成而感到沮丧。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png&#34; alt=&#34;Pomodoro&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;当你在一天中为自己设置了&lt;strong&gt;x&lt;/strong&gt;个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。它不仅能帮你完成更多的工作，还能让你尽情享受业余时间——因为你已经通过番茄钟完成了一天的任务，在剩下的时间里，你完全可以自由安排消磨时间，而不会再有任何的心理负担。&lt;/p&gt;
&lt;p&gt;最后的最后，一定记得要&lt;strong&gt;对自己的能力做一个合理的预期&lt;/strong&gt;，你每周工作40小时并不意味着你能完成80个番茄钟。找到适合你的番茄钟数量，过度的加量会适得其反。&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/468627225?utm_campaign=shareopn&amp;amp;utm_medium=social&amp;amp;utm_oi=1205113084614000640&amp;amp;utm_psn=1564268556828737536&amp;amp;utm_source=wechat_session&#34;&gt;如何用Todo清单度过余生的每一天？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/posts/farewell_social_network&#34;&gt;告别社交网络有多难&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://geekplux.com/newsletters/28&#34;&gt;社交网络名存实亡&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.axios.com/2022/07/25/sunset-social-network-facebook-tiktok&#34;&gt;Sunset of the social network&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26835090/&#34;&gt;《软技能》&lt;/a&gt; 生产力篇&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<h1 id="安排好你的待办清单">安排好你的待办清单</h1>
<blockquote>
<p>思考以下几点：</p>
<p><strong>1. 有哪些工作需要完成？</strong></p>
<p><strong>2.我有多少时间可以用来完成这些工作？</strong></p>
<p><strong>3.工作事项是否有逻辑顺序以及优先级</strong></p>
</blockquote>
<p>每一天你都会受到很多的干扰，看到APP上的一个个红点，消息通知从屏幕上弹出。注意力在一次次的查看信息中被逐渐消磨，时间也变得碎片化，难以静下心来专注于某件事。有些干扰无可避免，但只要愿意付出努力，大部分的干扰可以得到排除。</p>
<p>白天我会尽量避免受到干扰，所有的社交软件，它们是工作效率的最大杀手。我控制自己在上午以及下午的大块时间中忽略来自社交网络的信息，将消息的查看集中在中午以及晚上的特定时间，做一个统一的查看。</p>
<p>每天的晚上，我会花些的时间，把第二天的工作做个大致的安排，写到待办事项中，第二天再用番茄工作法进行专注执行。记得让自己的计划保持比较高的自由度，要留有足够的时间余量。</p>
<h1 id="番茄工作法">番茄工作法</h1>
<p>番茄工作法这个名词我之前便有听说过，但一直未尝试着去做过，直到最近从《软技能》一书中再次看到，感觉不错，便开始了尝试。在经过一个星期的体验后，它确实提高了我的效率，让我能够更好的对自己的时间做出规划。</p>
<blockquote>
<p>它的基本思路是：</p>
<p><strong>你规划出打算一天之内完成的工作，然后设置一个时长25分钟的定时器，去完成计划中的第一项任务；在这25分钟之内，你只专注于这一项任务，心无旁骛。一旦有干扰，可以用各种方法屏蔽掉干扰，但是通常你要努力保证自己完全不被打扰。总之，你不希望自己的专注的工作状态被打断。</strong></p>
<p><strong>在25分钟结束的时候，设置一个5分钟的定时器，休息一下。这就是所谓的一个“番茄钟”。每4个番茄钟后，你都需要休息一会儿，通常为15分钟。</strong></p>
</blockquote>
<p>值得注意的是，使用番茄工作法所要做的并不只是集中注意力25分钟这么简单。通过使用番茄工作法，你可以<strong>高效跟踪自己一天完成的番茄钟的数量</strong>，并为此设定目标。开始的几天，你可能无法对自己能完成的工作做一个很好的估计。但相信在使用番茄工作法一段时间后，你可以做到较为准确的估计，并能完成通过番茄钟的数量，评估自己完成的工作。</p>
<p>通过使用番茄钟，你可以<strong>定量的描述自己的工作状态</strong>，而不再像过去那样只是凭借感觉。你可以把每周看作是由有限个番茄钟组成的，知道了自己一周大概能完成的番茄钟的数量后，你也会认识到应该如何通过设置任务的优先级，来<strong>合理分配自己的时间</strong>。你不会再过高的幻想自己会在一周的时间里完成超出自己实际许多的任务，并在每周结束时，因未能完成而感到沮丧。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/timeManagement/Pomodoro.png" alt="Pomodoro"  />
</a>
</div>

</p>
<p>当你在一天中为自己设置了<strong>x</strong>个番茄钟的工作目标（这一目标你完全可控）并且达成的时候，你就可以知道自己一天到底可以完成多少工作，这会让自己感觉良好，更重要的是，还能让自己放松身心。它不仅能帮你完成更多的工作，还能让你尽情享受业余时间——因为你已经通过番茄钟完成了一天的任务，在剩下的时间里，你完全可以自由安排消磨时间，而不会再有任何的心理负担。</p>
<p>最后的最后，一定记得要<strong>对自己的能力做一个合理的预期</strong>，你每周工作40小时并不意味着你能完成80个番茄钟。找到适合你的番茄钟数量，过度的加量会适得其反。</p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/468627225?utm_campaign=shareopn&amp;utm_medium=social&amp;utm_oi=1205113084614000640&amp;utm_psn=1564268556828737536&amp;utm_source=wechat_session">如何用Todo清单度过余生的每一天？</a></li>
<li><a href="https://geekplux.com/posts/farewell_social_network">告别社交网络有多难</a></li>
<li><a href="https://geekplux.com/newsletters/28">社交网络名存实亡</a></li>
<li><a href="https://www.axios.com/2022/07/25/sunset-social-network-facebook-tiktok">Sunset of the social network</a></li>
<li><a href="https://book.douban.com/subject/26835090/">《软技能》</a> 生产力篇</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>我获取信息的方式</title>
      <link>https://xancoding.cn/posts/getinfo/</link>
      <pubDate>Wed, 12 Oct 2022 22:42:04 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/getinfo/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这个时代不缺信息，因为信息太多了，缺的是时间&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;rss&#34;&gt;RSS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Inoreader &amp;amp; RSSHub Radar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是rss&#34;&gt;什么是RSS?&lt;/h2&gt;
&lt;p&gt;RSS 英文全称为 Really Simple Syndication，即简易资讯聚合。其实叫什么并不重要，我们只用知道它是一个&lt;strong&gt;能让你在一个地方订阅&lt;/strong&gt;各种感兴趣网站的工具。&lt;/p&gt;
&lt;p&gt;RSS的核心是&lt;strong&gt;资讯聚合&lt;/strong&gt;，由&lt;strong&gt;用户自己决定信息源&lt;/strong&gt;。我们可以通过订阅网站的RSS源，主动获得想要的资讯，去挖掘一些自己真正感兴趣的东西。&lt;/p&gt;
&lt;h2 id=&#34;如何使用rss&#34;&gt;如何使用RSS?&lt;/h2&gt;
&lt;p&gt;利用RSS获取信息，只需要在目标网站上找到RSS链接，并把它添加到RSS阅读器中。&lt;/p&gt;
&lt;p&gt;我使用的工具是&lt;code&gt;Inoreader RSS 阅读器 + RSSHub Radar 浏览器插件&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Inoreader&lt;/code&gt; 吸引我的点是它支持PC端和手机端的同步，并且PC端可以直接通过浏览器插件使用，使我在手机和电脑上都可以查看消息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RSSHub Radar&lt;/code&gt; 的出现，完美解决了不是所有的网页都提供RSS源这一痛点，它可以自动生成网站的RSS源以供订阅，非常方便。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png&#34; alt=&#34;RSSHub Radar&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;我使用RSS主要用来订阅我感兴趣的个人博客，我订阅的博客网站在 &lt;code&gt;Links&lt;/code&gt; 页面下的 &lt;strong&gt;博客&lt;/strong&gt; 那一栏。&lt;/p&gt;
&lt;h1 id=&#34;搜索引擎&#34;&gt;搜索引擎&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Google &amp;amp; AdblockPlus &amp;amp; uBlacklist&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Chrome&lt;/code&gt; 浏览器提供的&lt;code&gt;Google 搜索&lt;/code&gt;是我目前体验感最好的搜索引擎，&lt;code&gt;Microsoft Edge&lt;/code&gt; 浏览器提供的 &lt;code&gt;Bing 搜索&lt;/code&gt; 体验感也还不错。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AdblockPlus 浏览器插件&lt;/code&gt; 由用户主动设置拦截网页上不想看到的内容，下图是我对知乎页面的屏蔽后的结果，我使用这个插件把知乎和B站的推荐内容屏蔽，以获得更为简洁的体验&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png&#34; alt=&#34;AdblockPlus&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;&lt;code&gt;uBlacklist 浏览器插件&lt;/code&gt; 在搜索时屏蔽特定网站，做到对低质内容的过滤，我屏蔽了CSDN和百度知道&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;*://www.csdn.net/*
*://bbs.csdn.net/*
*://blog.csdn.net/*
*://zhidao.baidu.com/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png&#34; alt=&#34;uBlacklist&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Chrome&lt;/code&gt; 浏览器还可以通过在地址栏中输入快捷字词，快速搜索特定网站，或使用其他搜索引擎，我通过设置它将知乎和B站作为搜索引擎使用。在我想寻找某条信息时，只需在地址栏输入关键字 &lt;code&gt;zh &lt;/code&gt; or &lt;code&gt;bi &lt;/code&gt; 即可搜索。&lt;/p&gt;
&lt;p&gt;经过如下配置&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png&#34; alt=&#34;search1&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;就可以通过在地址栏中输入快捷字词实现简便搜索啦&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png&#34; alt=&#34;search2&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;在手机端，我是使用&lt;strong&gt;桌面小工具&lt;/strong&gt;来达到只使用APP搜索功能目的。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png&#34; alt=&#34;search3&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;h1 id=&#34;书籍&#34;&gt;书籍&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Neat Reader &amp;amp; Sumatra PDF &amp;amp; Z-Library &amp;amp; LoreFree &amp;amp; 学校图书馆&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;读书，是治愈迷茫最好的良药。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Neat Reader&lt;/code&gt; 是一款&lt;code&gt;EPUB&lt;/code&gt;阅读器，用以阅读EPUB格式的电子书，体验感不错。我会在 &lt;a href=&#34;https://zh.z-lib.org/&#34;&gt;Z-Library&lt;/a&gt; or &lt;a href=&#34;https://lorefree.com/&#34;&gt;LoreFree&lt;/a&gt; 上搜索得到我想要看的书的EPUB格式的电子书后，存在本地文件上，通过 &lt;a href=&#34;https://www.neat-reader.com/&#34;&gt;Neat Reader&lt;/a&gt; 阅读。&lt;/p&gt;
&lt;p&gt;
&lt;div class=&#34;post-img-view&#34;&gt;
&lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png&#34; alt=&#34;neatReader&#34;  /&gt;
&lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;
&lt;p&gt;如果找不到EPUB格式的书籍，我会存 PDF 格式的，然后在 &lt;a href=&#34;https://www.sumatrapdfreader.org/free-pdf-reader&#34;&gt;Sumatra PDF&lt;/a&gt; 上阅读&lt;/p&gt;
&lt;p&gt;不过，相比于电子书，我其实还是更喜欢纸质书的阅读体验。所以，我也会隔段时间便去拿着自己的书单，去学校的图书馆找书看。&lt;/p&gt;
&lt;h1 id=&#34;推荐阅读&#34;&gt;推荐阅读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://catcoding.me/p/get-better-info/&#34;&gt;优化自己的信息源&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/49684783/answer/2305132342&#34;&gt;中文互联网的产出在渐渐枯萎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/349349861&#34;&gt;知道RSS的人越少，我就越希望它能被人知道！&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/VUhz2Tg08UqYSAZB6nU9MQ&#34;&gt;RSS 二十年&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://coolshell.cn/articles/11928.html&#34;&gt;互联网之子&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rss-source.com/&#34;&gt;RSS Source | RSS订阅源推荐&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://haoeric.github.io/Google-search-grammar/&#34;&gt;Practical Google Search Tips&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<blockquote>
<p><strong>这个时代不缺信息，因为信息太多了，缺的是时间</strong></p>
<p><strong>整个互联网正在充斥着流量内容，而我们得学会如何从垃圾中找到金子</strong></p>
<p><strong>获取信息的方式最好是主动的，摆脱算法和机器的喂养，自己去挖掘有价值的信息</strong></p>
</blockquote>
<h1 id="rss">RSS</h1>
<ul>
<li><code>Inoreader &amp; RSSHub Radar</code></li>
</ul>
<h2 id="什么是rss">什么是RSS?</h2>
<p>RSS 英文全称为 Really Simple Syndication，即简易资讯聚合。其实叫什么并不重要，我们只用知道它是一个<strong>能让你在一个地方订阅</strong>各种感兴趣网站的工具。</p>
<p>RSS的核心是<strong>资讯聚合</strong>，由<strong>用户自己决定信息源</strong>。我们可以通过订阅网站的RSS源，主动获得想要的资讯，去挖掘一些自己真正感兴趣的东西。</p>
<h2 id="如何使用rss">如何使用RSS?</h2>
<p>利用RSS获取信息，只需要在目标网站上找到RSS链接，并把它添加到RSS阅读器中。</p>
<p>我使用的工具是<code>Inoreader RSS 阅读器 + RSSHub Radar 浏览器插件</code>。</p>
<p><code>Inoreader</code> 吸引我的点是它支持PC端和手机端的同步，并且PC端可以直接通过浏览器插件使用，使我在手机和电脑上都可以查看消息。</p>
<p><code>RSSHub Radar</code> 的出现，完美解决了不是所有的网页都提供RSS源这一痛点，它可以自动生成网站的RSS源以供订阅，非常方便。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/RSSHub.png" alt="RSSHub Radar"  />
</a>
</div>

</p>
<p>我使用RSS主要用来订阅我感兴趣的个人博客，我订阅的博客网站在 <code>Links</code> 页面下的 <strong>博客</strong> 那一栏。</p>
<h1 id="搜索引擎">搜索引擎</h1>
<ul>
<li><code>Google &amp; AdblockPlus &amp; uBlacklist</code></li>
</ul>
<p><code>Chrome</code> 浏览器提供的<code>Google 搜索</code>是我目前体验感最好的搜索引擎，<code>Microsoft Edge</code> 浏览器提供的 <code>Bing 搜索</code> 体验感也还不错。</p>
<p><code>AdblockPlus 浏览器插件</code> 由用户主动设置拦截网页上不想看到的内容，下图是我对知乎页面的屏蔽后的结果，我使用这个插件把知乎和B站的推荐内容屏蔽，以获得更为简洁的体验</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/AdblockPlus.png" alt="AdblockPlus"  />
</a>
</div>

</p>
<p><code>uBlacklist 浏览器插件</code> 在搜索时屏蔽特定网站，做到对低质内容的过滤，我屏蔽了CSDN和百度知道</p>
<pre tabindex="0"><code>*://www.csdn.net/*
*://bbs.csdn.net/*
*://blog.csdn.net/*
*://zhidao.baidu.com/*
</code></pre><p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/uBlacklist.png" alt="uBlacklist"  />
</a>
</div>

</p>
<p><code>Chrome</code> 浏览器还可以通过在地址栏中输入快捷字词，快速搜索特定网站，或使用其他搜索引擎，我通过设置它将知乎和B站作为搜索引擎使用。在我想寻找某条信息时，只需在地址栏输入关键字 <code>zh </code> or <code>bi </code> 即可搜索。</p>
<p>经过如下配置</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search1.png" alt="search1"  />
</a>
</div>

</p>
<p>就可以通过在地址栏中输入快捷字词实现简便搜索啦</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search2.png" alt="search2"  />
</a>
</div>

</p>
<p>在手机端，我是使用<strong>桌面小工具</strong>来达到只使用APP搜索功能目的。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/search3.png" alt="search3"  />
</a>
</div>

</p>
<h1 id="书籍">书籍</h1>
<ul>
<li><code>Neat Reader &amp; Sumatra PDF &amp; Z-Library &amp; LoreFree &amp; 学校图书馆</code></li>
</ul>
<p><strong>读书，是治愈迷茫最好的良药。</strong></p>
<p><code>Neat Reader</code> 是一款<code>EPUB</code>阅读器，用以阅读EPUB格式的电子书，体验感不错。我会在 <a href="https://zh.z-lib.org/">Z-Library</a> or <a href="https://lorefree.com/">LoreFree</a> 上搜索得到我想要看的书的EPUB格式的电子书后，存在本地文件上，通过 <a href="https://www.neat-reader.com/">Neat Reader</a> 阅读。</p>
<p>
<div class="post-img-view">
<a data-fancybox="gallery" href="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png">
<img src="https://raw.githubusercontent.com/Xancoding/Blog/main/static/img/getInfo/neatReader.png" alt="neatReader"  />
</a>
</div>

</p>
<p>如果找不到EPUB格式的书籍，我会存 PDF 格式的，然后在 <a href="https://www.sumatrapdfreader.org/free-pdf-reader">Sumatra PDF</a> 上阅读</p>
<p>不过，相比于电子书，我其实还是更喜欢纸质书的阅读体验。所以，我也会隔段时间便去拿着自己的书单，去学校的图书馆找书看。</p>
<h1 id="推荐阅读">推荐阅读</h1>
<ul>
<li>
<p><a href="https://catcoding.me/p/get-better-info/">优化自己的信息源</a></p>
</li>
<li>
<p><a href="https://www.zhihu.com/question/49684783/answer/2305132342">中文互联网的产出在渐渐枯萎</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/349349861">知道RSS的人越少，我就越希望它能被人知道！</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/VUhz2Tg08UqYSAZB6nU9MQ">RSS 二十年</a></p>
</li>
<li>
<p><a href="https://coolshell.cn/articles/11928.html">互联网之子</a></p>
</li>
<li>
<p><a href="https://rss-source.com/">RSS Source | RSS订阅源推荐</a></p>
</li>
<li>
<p><a href="http://haoeric.github.io/Google-search-grammar/">Practical Google Search Tips</a></p>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://xancoding.cn/posts/helloworld/</link>
      <pubDate>Wed, 12 Oct 2022 07:27:58 +0800</pubDate>
      
      <guid>https://xancoding.cn/posts/helloworld/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    printf(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt;(&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;int&lt;/span&gt; main() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std::cout &amp;lt;&amp;lt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;class&lt;/span&gt; Main {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;void&lt;/span&gt; main(String[] args) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System.&lt;span style=&#34;color:#007f7f&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#007f7f&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Hello, World
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-JavaScript&#34; data-lang=&#34;JavaScript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;document&lt;/span&gt;.write(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#39;Hello, World&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;print&lt;/span&gt; (&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;Hello, World&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content:encoded><![CDATA[<div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">int</span> main() {
</span></span><span style="display:flex;"><span>    printf(<span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span>(<span style="color:#ff0;font-weight:bold">0</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">int</span> main() {
</span></span><span style="display:flex;"><span>    std::cout &lt;&lt; <span style="color:#0ff;font-weight:bold">&#34;Hello World&#34;</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">return</span> <span style="color:#ff0;font-weight:bold">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">public</span> <span style="color:#fff;font-weight:bold">class</span> Main {
</span></span><span style="display:flex;"><span>    <span style="color:#fff;font-weight:bold">public</span> <span style="color:#fff;font-weight:bold">static</span> <span style="color:#fff;font-weight:bold">void</span> main(String[] args) {
</span></span><span style="display:flex;"><span>        System.<span style="color:#007f7f">out</span>.<span style="color:#007f7f">println</span>(<span style="color:#0ff;font-weight:bold">&#34;Hello, World!&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">echo</span> <span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>Hello, World
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-JavaScript" data-lang="JavaScript"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">document</span>.write(<span style="color:#0ff;font-weight:bold">&#39;Hello, World&#39;</span>);
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#fff;font-weight:bold">print</span> (<span style="color:#0ff;font-weight:bold">&#34;Hello, World&#34;</span>)
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
